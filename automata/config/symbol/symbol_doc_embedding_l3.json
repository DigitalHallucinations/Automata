[{"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.config.config_enums`/ConfigCategory#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.config.config_enums", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "ConfigCategory", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# ConfigCategory\n\n`ConfigCategory` is an enumeration class that maps the names of folders holding config files. It helps in organizing the application configuration files by allowing the categorization of configurations.\n\n## Related Symbols\n\n- `automata.config.config_enums.ConfigCategory`\n- `automata.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata.tests.unit.sample_modules.sample.EmptyClass`\n- `automata.cli.commands.cli`\n- `automata.core.context.py_context.retriever.PyContextRetrieverConfig`\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n- `automata.core.context.py_context.retriever.PyContextRetriever`\n\n## Example\n\nHere's a simple example demonstrating how to use the `ConfigCategory` enumeration.\n\n```python\nfrom automata.config.config_enums import ConfigCategory\n\nconfig_category = ConfigCategory.PROMPT\nprint(config_category)  # Output: ConfigCategory.PROMPT\n```\n\nIt can be used to categorize and manage different configuration files in the application, making it easier to maintain and organize complex configuration settings.\n\n## Limitations\n\n`ConfigCategory` itself has no significant limitations. However, it relies on the directory structure of the application and the presence of the corresponding config folders. If the folder names change or are removed, the enumeration must be updated accordingly.\n\n## Follow-up Questions:\n\n- How can we dynamically update the `ConfigCategory` enumeration when the folder structure changes?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/reduce": [{"py/type": "numpy.dtype"}, {"py/tuple": ["f8", false, true]}, {"py/tuple": [3, "<", null, null, null, -1, -1, 0]}]}, false, {"py/b64": ""}]}]}, "source_code": "class ConfigCategory(Enum):\n    \"\"\"\n    An enum which corresponds to the name of a folder holding config\n    \"\"\"\n\n    PROMPT = \"prompt\"\n    SYMBOL = \"symbol\"\n", "summary": "`ConfigCategory` is an enumeration class used to map the names of folders holding config files for better organization and management of application configuration files. It allows categorization of configurations and relies on the application's directory structure and the presence of corresponding config folders. For example, to use `ConfigCategory`:\n\n```python\nfrom automata.config.config_enums import ConfigCategory\n\nconfig_category = ConfigCategory.PROMPT\nprint(config_category)  # Output: ConfigCategory.PROMPT\n```\n\nHowever, if folder names change or are removed, the enumeration must be updated accordingly.", "context": "\n    Generate the documentation for ConfigCategory using the context shown below -\n  Building context for primary symbol - automata.config.config_enums.ConfigCategory -\n  \n      class ConfigCategory(Enum):\n          \"\"\"\n          An enum which corresponds to the name of a folder holding config\n          \"\"\"\n      \n          PROMPT = \"prompt\"\n          SYMBOL = \"symbol\"\n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.cli.commands.cli\n    \n      Methods:\n        cli(ctx) -> None\n        \n    automata.core.context.py_context.retriever.PyContextRetrieverConfig\n    \n        class PyContextRetrieverConfig:\n            \"\"\"The configuration for the PyContextRetriever\"\"\"\n        \n            def __init__(\n                self,\n                spacer: str = \"  \",\n                max_dependencies_to_process: int = 10,\n                max_related_symbols_to_process: int = 10,\n                model_name: str = \"gpt-4\",\n                max_context: int = 6_500,\n            ):\n                \"\"\"\n                Args:\n                    spacer (str): The string to use for indentation\n                    max_dependency_print_depth (int): The maximum depth to print dependencies\n                    max_recursion_depth (int): The maximum depth to recurse into dependencies\n                    max_related_symbols_to_process (int): The number of nearest symbols to print\n                \"\"\"\n                self.spacer = spacer\n                self.max_dependencies_to_process = max_dependencies_to_process\n                self.max_related_symbols_to_process = max_related_symbols_to_process\n                self.model_name = model_name\n                self.max_context = max_context\n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata.tests.unit.test_py_code_retriever.test_build_overview\n    \n        def test_build_overview():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            result = build_repository_overview(sample_dir)\n            first_module_overview = \"sample\\n     - func sample_function\\n     - cls Person\\n       - func __init__\\n       - func say_hello\\n       - func run\\n     - func f\\n     - cls EmptyClass\\n     - cls OuterClass\\n       - cls InnerClass\\n         - func inner_method\\nsample2\\n     - cls PythonAgentToolBuilder\\n       - func __init__\\n       - func build_tools\\n         - func python_agent_python_task\"\n        \n            assert first_module_overview in result\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.symbol.search.rank.SymbolRankConfig\n    \n        class SymbolRankConfig(BaseModel):\n            \"\"\"A configuration class for SymbolRank\"\"\"\n        \n            alpha: float = 0.25\n            max_iterations: int = 100\n            tolerance: float = 1.0e-6\n            weight_key: str = \"weight\"\n        \n            @classmethod\n            def validate(cls, config):\n                \"\"\"\n                Validate configuration parameters.\n        \n                Args:\n                    config (SymbolRankConfig): Configuration parameters.\n        \n                Raises:\n                    ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n                \"\"\"\n                if not 0 < config.alpha < 1:\n                    raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n        \n                if not 1.0e-8 < config.tolerance < 1.0e-4:\n                    raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.directory`/Directory#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "Directory", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# Directory\n\n`Directory` represents a directory, which can contain other directories or files as children. It provides methods for working with directory structures like adding child nodes, getting file names and subdirectories, checking if a directory is a leaf or root directory, and more.\n\n## Overview\n\nThe `Directory` class is designed for working with directory structures. It extends the abstract base class `Node`. Its main purpose is to model directories, but it also provides relevant functionality for working with those directories. Building context and understanding the Directory class allows you to work more easily with file systems and directory settings in your project.\n\n## Import Statements\n\n```python\nimport logging\nimport os\nfrom typing import Dict, List, Optional\n```\n\n## Related Symbols\n\n- `automata.tests.unit.test_directory_manager.test_load_directory_structure`\n- `automata.tests.unit.test_directory_manager.test_get_files_in_dir`\n- `automata.tests.unit.test_directory_manager.test_get_subdirectories`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.tests.unit.test_directory_manager.test_get_node_for_path`\n- `automata.core.coding.directory.File`\n- `automata.tests.unit.sample_modules.sample.OuterClass`\n- `automata.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n\n## Examples\n\n```python\nfrom automata.core.coding.directory import Directory\n\n# Create a sample root directory\nroot_dir = Directory(name=\"root\")\n\n# Create a sample child directory\nchild_dir = Directory(name=\"child\", parent=root_dir)\n\n# Add the child directory to the root directory\nroot_dir.add_child(child_dir)\n\n# Get the subdirectories of the root directory\nsubdirectories = root_dir.get_subdirectories()\nprint(subdirectories)  # Output: ['child']\n```\n\n## Limitations\n\nThe primary limitation of the `Directory` class is that it doesn't provide advanced functionality for working with the contents of directories or files, such as searching for a specific file or directory, moving or renaming files/directories, etc. Additionally, it models only a simple file tree structure without support for links or other more complex features found in actual file systems.\n\n## Follow-up Questions:\n\n- How can we implement more advanced features for working with files and directories, like searching or moving/renaming files and directories within a `Directory` object's structure?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class Directory(Node):\n    \"\"\"Represents a directory. Has children which can be directories or files\"\"\"\n\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        \"\"\"\n        Args:\n            name (str): Name of the directory\n            parent (Node): Parent node of this directory\n        \"\"\"\n        super().__init__(name, parent)\n        self.children: Dict[str, Node] = {}\n\n    def add_child(self, child: \"Node\"):\n        \"\"\"\n        Adds a child node to this directory\n\n        Args:\n            child (Node): Child node to add\n        \"\"\"\n        self.children[child.name] = child\n\n    def get_file_names(self) -> List[str]:\n        \"\"\"\n        Get a list of file names in the directory\n\n        Args:\n            directory (Directory): Directory to get file names from\n\n        Returns:\n            List[str]: List of file names in the directory\n        \"\"\"\n        return [name for name, child in self.children.items() if isinstance(child, File)]\n\n    def get_subdirectories(self) -> List[str]:\n        \"\"\"\n        Get a list of subdirectory names in the directory\n\n        Args:\n            directory (Directory): Directory to get subdirectory names from\n\n        Returns:\n            List[str]: List of subdirectory names in the directory\n        \"\"\"\n        return [name for name, child in self.children.items() if isinstance(child, Directory)]\n\n    def is_root_dir(self) -> bool:\n        \"\"\"\n        Check if this directory is the root directory\n\n        Returns:\n            bool: True if this directory is the root directory, False otherwise\n        \"\"\"\n        return self.parent is None\n\n    def is_leaf_dir(self) -> bool:\n        \"\"\"\n        Check if this directory is a leaf directory (has no subdirectories)\n\n        Returns:\n            bool: True if this directory is a leaf directory, False otherwise\n        \"\"\"\n        subdirectories = [\n            child\n            for child in self.children.values()\n            if isinstance(child, Directory) and \"__pycache__\" not in child.name\n        ]\n        return len(subdirectories) == 0\n\n\n", "summary": "The `Directory` class represents a directory structure and extends from the abstract base class `Node`. It includes methods for adding child nodes, obtaining file names and subdirectories, and determining if a directory is a leaf or root. However, it has some limitations such as lacking advanced functionality for working with files and directories, such as searching or moving/renaming files and directories. To illustrate, here's an example of how to use the `Directory` class:\n\n```python\nfrom automata.core.coding.directory import Directory\n\n# Create a sample root directory\nroot_dir = Directory(name=\"root\")\n\n# Create a sample child directory\nchild_dir = Directory(name=\"child\", parent=root_dir)\n\n# Add the child directory to the root directory\nroot_dir.add_child(child_dir)\n\n# Get the subdirectories of the root directory\nsubdirectories = root_dir.get_subdirectories()\nprint(subdirectories)  # Output: ['child']\n```", "context": "\n    Generate the documentation for Directory using the context shown below -\n  Building context for primary symbol - automata.core.coding.directory.Directory -\n  \n    Import Statements:\n      import logging\n      import os\n      from typing import Dict, List, Optional\n      \n      # Directory\n      \n      `Directory` represents a directory, which can contain other directories or files as children. It provides methods for working with directory structures like adding child nodes, getting file names and subdirectories, checking if a directory is a leaf or root directory, and more.\n      \n      ## Overview\n      \n      The `Directory` class is designed for working with directory structures. It extends the abstract base class `Node`. Its main purpose is to model directories, but it also provides relevant functionality for working with those directories. Building context and understanding the Directory class allows you to work more easily with file systems and directory settings in your project.\n      \n      ## Import Statements\n      \n      ```python\n      import logging\n      import os\n      from typing import Dict, List, Optional\n      ```\n      \n      ## Related Symbols\n      \n      - `automata.tests.unit.test_directory_manager.test_load_directory_structure`\n      - `automata.tests.unit.test_directory_manager.test_get_files_in_dir`\n      - `automata.tests.unit.test_directory_manager.test_get_subdirectories`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.tests.unit.test_directory_manager.test_get_node_for_path`\n      - `automata.core.coding.directory.File`\n      - `automata.tests.unit.sample_modules.sample.OuterClass`\n      - `automata.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n      \n      ## Examples\n      \n      ```python\n      from automata.core.coding.directory import Directory\n      \n      # Create a sample root directory\n      root_dir = Directory(name=\"root\")\n      \n      # Create a sample child directory\n      child_dir = Directory(name=\"child\", parent=root_dir)\n      \n      # Add the child directory to the root directory\n      root_dir.add_child(child_dir)\n      \n      # Get the subdirectories of the root directory\n      subdirectories = root_dir.get_subdirectories()\n      print(subdirectories)  # Output: ['child']\n      ```\n      \n      ## Limitations\n      \n      The primary limitation of the `Directory` class is that it doesn't provide advanced functionality for working with the contents of directories or files, such as searching for a specific file or directory, moving or renaming files/directories, etc. Additionally, it models only a simple file tree structure without support for links or other more complex features found in actual file systems.\n      \n      ## Follow-up Questions:\n      \n      - How can we implement more advanced features for working with files and directories, like searching or moving/renaming files and directories within a `Directory` object's structure?\n      \n    Class Docstring:\n      Represents a directory. Has children which can be directories or files\n      \n    Methods:\n      def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n              \"\"\"\n              Args:\n                  name (str): Name of the directory\n                  parent (Node): Parent node of this directory\n              \"\"\"\n              super().__init__(name, parent)\n              self.children: Dict[str, Node] = {}\n      \n          \n      def add_child(self, child: \"Node\"):\n              \"\"\"\n              Adds a child node to this directory\n      \n              Args:\n                  child (Node): Child node to add\n              \"\"\"\n              self.children[child.name] = child\n      \n          \n      def get_file_names(self) -> List[str]:\n              \"\"\"\n              Get a list of file names in the directory\n      \n              Args:\n                  directory (Directory): Directory to get file names from\n      \n              Returns:\n                  List[str]: List of file names in the directory\n              \"\"\"\n              return [name for name, child in self.children.items() if isinstance(child, File)]\n      \n          \n      def get_subdirectories(self) -> List[str]:\n              \"\"\"\n              Get a list of subdirectory names in the directory\n      \n              Args:\n                  directory (Directory): Directory to get subdirectory names from\n      \n              Returns:\n                  List[str]: List of subdirectory names in the directory\n              \"\"\"\n              return [name for name, child in self.children.items() if isinstance(child, Directory)]\n      \n          \n      def is_leaf_dir(self) -> bool:\n              \"\"\"\n              Check if this directory is a leaf directory (has no subdirectories)\n      \n              Returns:\n                  bool: True if this directory is a leaf directory, False otherwise\n              \"\"\"\n              subdirectories = [\n                  child\n                  for child in self.children.values()\n                  if isinstance(child, Directory) and \"__pycache__\" not in child.name\n              ]\n              return len(subdirectories) == 0\n      \n      \n      \n      def is_root_dir(self) -> bool:\n              \"\"\"\n              Check if this directory is the root directory\n      \n              Returns:\n                  bool: True if this directory is the root directory, False otherwise\n              \"\"\"\n              return self.parent is None\n      \n          \n  Building context for related symbols -\n  \n    automata.tests.unit.test_directory_manager.test_load_directory_structure\n    \n        def test_load_directory_structure(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            assert dir_manager.root.name == str(test_dir)\n            assert len(dir_manager.root.children) == 2  # 2 directories: dir1, dir2\n        \n        \n        \n        \n    automata.tests.unit.test_directory_manager.test_get_files_in_dir\n    \n        def test_get_files_in_dir(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            files_in_dir1 = dir_manager.get_files_in_dir(\"dir1\")\n            assert len(files_in_dir1) == 2  # 2 files in dir1: file1, file2\n            assert set(files_in_dir1) == {\"file1\", \"file2\"}\n        \n        \n        \n        \n    automata.tests.unit.test_directory_manager.test_get_subdirectories\n    \n        def test_get_subdirectories(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            subdirectories = dir_manager.get_subdirectories(\".\")\n            assert len(subdirectories) == 2  # 2 subdirectories in root: dir1, dir2\n            assert set(subdirectories) == {\"dir1\", \"dir2\"}\n        \n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_directory_manager.test_get_node_for_path\n    \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n        \n    automata.tests.unit.test_directory_manager.create_test_dir_structure\n    \n        def create_test_dir_structure(tmp_path):\n            \"\"\"\n            Creates a test directory structure under the given path.\n            \"\"\"\n            (tmp_path / \"dir1\").mkdir()\n            (tmp_path / \"dir2\").mkdir()\n            (tmp_path / \"dir1\" / \"file1\").write_text(\"content\")\n            (tmp_path / \"dir1\" / \"file2\").write_text(\"content\")\n            (tmp_path / \"dir2\" / \"file1\").write_text(\"content\")\n            return tmp_path\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n        The `LazyModuleTreeMap` class is a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching the modules in memory as they are accessed. It provides methods for fetching existing module dotpaths and filepaths, as well as fetching, putting, and updating modules by their dotpaths. However, it assumes a specific directory structure according to the `DotPathMap` class and does not support custom directory structures for modules.\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.utils import root_fpath\n        \n        path_to_root = root_fpath()\n        module_tree_map = LazyModuleTreeMap(path_to_root)\n        \n        # Fetch an existing module by its dotpath\n        module_dotpath = \"automata.core.agent.automata_agent\"\n        module = module_tree_map.fetch_module(module_dotpath)\n        \n        # Check if a module with the given dotpath exists\n        exists = module_dotpath in module_tree_map\n        ```\n        \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata.core.coding.directory.File\n    \n        The `File` class represents a file in a file tree, including its name and parent node, and is useful for managing, navigating or analyzing directory structures. It inherits from the abstract base class `Node` but does not provide built-in functionality for reading/writing contents, modifying attributes, or traversing the file tree. Additional functionality or Python libraries may be needed for these operations. Here's an example of creating an instance of `File`:\n        \n        ```python\n        from automata.core.coding.directory import File\n        \n        file_name = \"example.txt\"\n        parent_node = None\n        \n        new_file = File(file_name, parent_node)\n        ```\n        \n      Class Docstring:\n        Represents a file in the tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the file\n                    parent (Node): Parent node of this file\n                \"\"\"\n                super().__init__(name, parent)\n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.coding.directory.Node\n    \n        `Node` is an abstract base class within the `automata.core.coding.directory` package that represents a node in a file tree, with a `name` and a `parent` pointing to its parent in the tree hierarchy. Though not directly instantiated, the class serves as a superclass for `File` and `Directory` classes. To use these classes, create a root directory with subdirectories and files, add children to the directories as needed, and import the necessary classes from the package:\n        \n        ```python\n        from automata.core.coding.directory import File, Directory\n        \n        root = Directory(\"root\")\n        subdir1 = Directory(\"subdir1\", root)\n        subdir2 = Directory(\"subdir2\", root)\n        file1 = File(\"file1.txt\", root)\n        file2 = File(\"file2.txt\", root)\n        subdir1_file1 = File(\"file1.txt\", subdir1)\n        subdir1_file2 = File(\"file2.txt\", subdir1)\n        subdir2_file1 = File(\"file1.txt\", subdir2)\n        \n        root.add_child(subdir1)\n        root.add_child(subdir2)\n        root.add_child(file1)\n        root.add_child(file2)\n        subdir1.add_child(subdir1_file1)\n        subdir1.add_child(subdir1_file2)\n        subdir2.add_child(subdir2_file1)\n        ```\n        \n      Class Docstring:\n        Abstract base class for a node in the file tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the node\n                    parent (Node): Parent node of this node\n                \"\"\"\n                self.name = name\n                self.parent = parent\n        \n        \n        \n    automata.core.coding.directory.Node.__init__\n    \n      Class Docstring:\n        Args:\n        name (str): Name of the node\n        parent (Node): Parent node of this node\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the node\n                    parent (Node): Parent node of this node\n                \"\"\"\n                self.name = name\n                self.parent = parent\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.directory`/DirectoryManager#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "DirectoryManager", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# DirectoryManager\n\n`DirectoryManager` is a utility class that handles operations related to directory structures. It provides methods to create directories, get the list of files in a given directory, and get the list of subdirectories in a given directory.\n\n## Overview\n\n`DirectoryManager` is initialized with a base path of the directory structure, which is then used in various methods to perform operations on directories and their contents. To create a directory manager instance:\n\n```python\nfrom automata.core.coding.directory import DirectoryManager\ndm = DirectoryManager(\"/path/to/base/directory\")\n```\n\n## Related Symbols\n\n- `automata.core.coding.directory.Directory`\n- `automata.core.coding.directory.File`\n- `automata.core.coding.directory.Node`\n\n## Example\n\nThe following examples demonstrate how to use `DirectoryManager` to create a directory and retrieve the list of files and subdirectories in a given directory.\n\n```python\nfrom automata.core.coding.directory import DirectoryManager\n\n# Creating a new directory\nbase_path = \"/path/to/base/directory\"\ndm = DirectoryManager(base_path)\ndm.ensure_directory_exists(\"new_directory\")\n\n# Retrieving the list of files and subdirectories in a given directory\nfiles = dm.get_files_in_dir(\"new_directory\")\nsubdirs = dm.get_subdirectories(\"new_directory\")\nprint(\"Files:\", files)\nprint(\"Subdirectories:\", subdirs)\n```\n\n## Limitations\n\n`DirectoryManager` has some limitations:\n\n- It assumes a specific directory structure based on the base path provided during initialization.\n- It does not provide any error handling for incorrect or inaccessible paths. If the path is incorrect or not accessible, the functions may fail with unclear error messages.\n\n## Follow-up Questions:\n\n- Are there any additional methods that would be useful for a DirectoryManager class?\n- How can error handling be improved to provide clearer error messages when dealing with incorrect or inaccessible paths?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class DirectoryManager:\n    \"\"\"Handles operations related to directory structure.\"\"\"\n\n    def __init__(self, base_path: str):\n        \"\"\"\n        Args:\n            base_path (str): Base path of the directory structure\n        \"\"\"\n        self.root = self._load_directory_structure(base_path)\n\n    def _load_directory_structure(self, root_dir: str) -> \"Directory\":\n        \"\"\"Load directory structure into Directory and File objects.\"\"\"\n        root = Directory(root_dir)\n        self.root = root  # Set root before walking through directory\n\n        # Map of directory paths to their corresponding nodes\n        dir_path_to_node = {root_dir: root}\n\n        for parent_dir, dirs, files in os.walk(root_dir):\n            # Find the parent directory node\n            parent_node = dir_path_to_node[parent_dir]\n\n            # Add all directories\n            for dir in dirs:\n                dir_node = Directory(dir, parent_node)\n                parent_node.add_child(dir_node)\n                dir_path_to_node[os.path.join(parent_dir, dir)] = dir_node\n\n            # Add all files\n            for file in files:\n                parent_node.add_child(File(file, parent_node))\n\n        return root\n\n    def get_files_in_dir(self, path: str) -> List[str]:\n        \"\"\"\n        Get a list of files in the given directory\n\n        Args:\n            path (str): Path of the directory\n\n        Returns:\n            List[str]: List of files in the directory\n        \"\"\"\n        dir_node = self._get_node_for_path(self.root, path)\n        if dir_node and isinstance(dir_node, Directory):\n            return dir_node.get_file_names()\n        else:\n            return []\n\n    def get_subdirectories(self, path: str) -> List[str]:\n        \"\"\"\n        Get a list of subdirectories in the given directory\n\n        Args:\n            path (str): Path of the directory\n\n        Returns:\n            List[str]: List of subdirectories in the directory\n        \"\"\"\n        dir_node = self._get_node_for_path(self.root, path)\n        if dir_node and isinstance(dir_node, Directory):\n            return dir_node.get_subdirectories()\n        else:\n            return []\n\n    def ensure_directory_exists(self, directory_path: str):\n        \"\"\"\n        Creates the directory if it does not exist already\n\n        Args:\n            directory_path (str): Path of the directory to create\n        \"\"\"\n        if not os.path.exists(directory_path):\n            logger.info(f\"Creating directory_path = {directory_path}\")\n            os.makedirs(directory_path)\n            self.root = self._load_directory_structure(directory_path)\n\n    def _get_node_for_path(self, root: \"Directory\", path: str) -> Optional[\"Node\"]:\n        \"\"\"\n        Find the node for a given path\n\n        Args:\n            root (Directory): Root node of the tree\n            path (str): Path to find the node for\n\n        Returns:\n            Optional[Node]: Node for the given path, None if not found\n        \"\"\"\n\n        if path == \".\":\n            return root\n\n        path_parts = path.split(os.sep)\n        # Initial node is root\n        node: Directory = root\n\n        # Iterate through path parts\n        for part in path_parts:\n            if part in node.children:\n                new_node = node.children[part]\n                if not isinstance(new_node, Directory):\n                    # If part is a file, return None\n                    return None\n                node = new_node\n            else:\n                # If part not found in children, return None\n                return None\n\n        return node\n", "summary": "The `DirectoryManager` utility class handles operations related to directory structures, such as creating directories and listing files and subdirectories. It is initialized with a base path and includes related symbols like `automata.core.coding.directory.Directory`, `.File`, and `.Node`. Example usage involves creating a directory and retrieving the list of files and subdirectories in a given directory. However, the class has some limitations, such as assuming a specific directory structure and lacking error handling for incorrect or inaccessible paths, which could result in unclear error messages.", "context": "\n    Generate the documentation for DirectoryManager using the context shown below -\n  Building context for primary symbol - automata.core.coding.directory.DirectoryManager -\n  \n    Import Statements:\n      import logging\n      import os\n      from typing import Dict, List, Optional\n      \n      # DirectoryManager\n      \n      `DirectoryManager` is a utility class that handles operations related to directory structures. It provides methods to create directories, get the list of files in a given directory, and get the list of subdirectories in a given directory.\n      \n      ## Overview\n      \n      `DirectoryManager` is initialized with a base path of the directory structure, which is then used in various methods to perform operations on directories and their contents. To create a directory manager instance:\n      \n      ```python\n      from automata.core.coding.directory import DirectoryManager\n      dm = DirectoryManager(\"/path/to/base/directory\")\n      ```\n      \n      ## Related Symbols\n      \n      - `automata.core.coding.directory.Directory`\n      - `automata.core.coding.directory.File`\n      - `automata.core.coding.directory.Node`\n      \n      ## Example\n      \n      The following examples demonstrate how to use `DirectoryManager` to create a directory and retrieve the list of files and subdirectories in a given directory.\n      \n      ```python\n      from automata.core.coding.directory import DirectoryManager\n      \n      # Creating a new directory\n      base_path = \"/path/to/base/directory\"\n      dm = DirectoryManager(base_path)\n      dm.ensure_directory_exists(\"new_directory\")\n      \n      # Retrieving the list of files and subdirectories in a given directory\n      files = dm.get_files_in_dir(\"new_directory\")\n      subdirs = dm.get_subdirectories(\"new_directory\")\n      print(\"Files:\", files)\n      print(\"Subdirectories:\", subdirs)\n      ```\n      \n      ## Limitations\n      \n      `DirectoryManager` has some limitations:\n      \n      - It assumes a specific directory structure based on the base path provided during initialization.\n      - It does not provide any error handling for incorrect or inaccessible paths. If the path is incorrect or not accessible, the functions may fail with unclear error messages.\n      \n      ## Follow-up Questions:\n      \n      - Are there any additional methods that would be useful for a DirectoryManager class?\n      - How can error handling be improved to provide clearer error messages when dealing with incorrect or inaccessible paths?\n      \n    Class Docstring:\n      Handles operations related to directory structure.\n      \n    Methods:\n      def __init__(self, base_path: str):\n              \"\"\"\n              Args:\n                  base_path (str): Base path of the directory structure\n              \"\"\"\n              self.root = self._load_directory_structure(base_path)\n      \n          \n      def ensure_directory_exists(self, directory_path: str):\n              \"\"\"\n              Creates the directory if it does not exist already\n      \n              Args:\n                  directory_path (str): Path of the directory to create\n              \"\"\"\n              if not os.path.exists(directory_path):\n                  logger.info(f\"Creating directory_path = {directory_path}\")\n                  os.makedirs(directory_path)\n                  self.root = self._load_directory_structure(directory_path)\n      \n          \n      def get_files_in_dir(self, path: str) -> List[str]:\n              \"\"\"\n              Get a list of files in the given directory\n      \n              Args:\n                  path (str): Path of the directory\n      \n              Returns:\n                  List[str]: List of files in the directory\n              \"\"\"\n              dir_node = self._get_node_for_path(self.root, path)\n              if dir_node and isinstance(dir_node, Directory):\n                  return dir_node.get_file_names()\n              else:\n                  return []\n      \n          \n      def get_subdirectories(self, path: str) -> List[str]:\n              \"\"\"\n              Get a list of subdirectories in the given directory\n      \n              Args:\n                  path (str): Path of the directory\n      \n              Returns:\n                  List[str]: List of subdirectories in the directory\n              \"\"\"\n              dir_node = self._get_node_for_path(self.root, path)\n              if dir_node and isinstance(dir_node, Directory):\n                  return dir_node.get_subdirectories()\n              else:\n                  return []\n      \n          \n  Building context for related symbols -\n  \n    automata.tests.unit.test_directory_manager.test_load_directory_structure\n    \n        def test_load_directory_structure(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            assert dir_manager.root.name == str(test_dir)\n            assert len(dir_manager.root.children) == 2  # 2 directories: dir1, dir2\n        \n        \n        \n        \n    automata.tests.unit.test_directory_manager.test_get_files_in_dir\n    \n        def test_get_files_in_dir(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            files_in_dir1 = dir_manager.get_files_in_dir(\"dir1\")\n            assert len(files_in_dir1) == 2  # 2 files in dir1: file1, file2\n            assert set(files_in_dir1) == {\"file1\", \"file2\"}\n        \n        \n        \n        \n    automata.tests.unit.test_directory_manager.test_get_subdirectories\n    \n        def test_get_subdirectories(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            subdirectories = dir_manager.get_subdirectories(\".\")\n            assert len(subdirectories) == 2  # 2 subdirectories in root: dir1, dir2\n            assert set(subdirectories) == {\"dir1\", \"dir2\"}\n        \n        \n    automata.core.coding.directory.Directory\n    \n        The `Directory` class represents a directory containing files or other directories as children, providing methods to manage and interact with directory structures. It extends the abstract base class `Node` with functionality such as adding child nodes, getting file names, and subdirectories, and determining leaf or root directories. However, it does not offer advanced capabilities such as searching, moving, or renaming files and directories. The following example demonstrates creating a root directory, adding a child directory, and obtaining subdirectories:\n        \n        ```python\n        from automata.core.coding.directory import Directory\n        \n        # Create a sample root directory\n        root_dir = Directory(name=\"root\")\n        \n        # Create a sample child directory\n        child_dir = Directory(name=\"child\", parent=root_dir)\n        \n        # Add the child directory to the root directory\n        root_dir.add_child(child_dir)\n        \n        # Get the subdirectories of the root directory\n        subdirectories = root_dir.get_subdirectories()\n        print(subdirectories)  # Output: ['child']\n        ```\n        \n        \n      Class Docstring:\n        Represents a directory. Has children which can be directories or files\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the directory\n                    parent (Node): Parent node of this directory\n                \"\"\"\n                super().__init__(name, parent)\n                self.children: Dict[str, Node] = {}\n        \n            \n        add_child(self, child: \"Node\") -> None\n        \n        get_file_names(self) -> List[str]\n        \n        get_subdirectories(self) -> List[str]\n        \n        is_leaf_dir(self) -> bool\n        \n        is_root_dir(self) -> bool\n        \n    automata.tests.unit.test_directory_manager.test_get_node_for_path\n    \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n        \n    automata.tests.unit.test_directory_manager.create_test_dir_structure\n    \n        def create_test_dir_structure(tmp_path):\n            \"\"\"\n            Creates a test directory structure under the given path.\n            \"\"\"\n            (tmp_path / \"dir1\").mkdir()\n            (tmp_path / \"dir2\").mkdir()\n            (tmp_path / \"dir1\" / \"file1\").write_text(\"content\")\n            (tmp_path / \"dir1\" / \"file2\").write_text(\"content\")\n            (tmp_path / \"dir2\" / \"file1\").write_text(\"content\")\n            return tmp_path\n        \n        \n        \n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n        The `LazyModuleTreeMap` class is a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching the modules in memory as they are accessed. It provides methods for fetching existing module dotpaths and filepaths, as well as fetching, putting, and updating modules by their dotpaths. However, it assumes a specific directory structure according to the `DotPathMap` class and does not support custom directory structures for modules.\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.utils import root_fpath\n        \n        path_to_root = root_fpath()\n        module_tree_map = LazyModuleTreeMap(path_to_root)\n        \n        # Fetch an existing module by its dotpath\n        module_dotpath = \"automata.core.agent.automata_agent\"\n        module = module_tree_map.fetch_module(module_dotpath)\n        \n        # Check if a module with the given dotpath exists\n        exists = module_dotpath in module_tree_map\n        ```\n        \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata.core.context.py_context.retriever.PyContextRetriever.IndentManager\n    \n      Class Docstring:\n        A context manager to manage the indentation level\n        \n      Methods:\n        IndentManager(self) -> None\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.coding.directory.Directory.get_subdirectories\n    \n      Class Docstring:\n        Get a list of subdirectory names in the directory\n        \n        Args:\n        directory (Directory): Directory to get subdirectory names from\n        \n        Returns:\n        List[str]: List of subdirectory names in the directory\n        \n      Methods:\n        get_subdirectories(self) -> List[str]\n        \n    automata.core.coding.directory.Node\n    \n        `Node` is an abstract base class within the `automata.core.coding.directory` package that represents a node in a file tree, with a `name` and a `parent` pointing to its parent in the tree hierarchy. Though not directly instantiated, the class serves as a superclass for `File` and `Directory` classes. To use these classes, create a root directory with subdirectories and files, add children to the directories as needed, and import the necessary classes from the package:\n        \n        ```python\n        from automata.core.coding.directory import File, Directory\n        \n        root = Directory(\"root\")\n        subdir1 = Directory(\"subdir1\", root)\n        subdir2 = Directory(\"subdir2\", root)\n        file1 = File(\"file1.txt\", root)\n        file2 = File(\"file2.txt\", root)\n        subdir1_file1 = File(\"file1.txt\", subdir1)\n        subdir1_file2 = File(\"file2.txt\", subdir1)\n        subdir2_file1 = File(\"file1.txt\", subdir2)\n        \n        root.add_child(subdir1)\n        root.add_child(subdir2)\n        root.add_child(file1)\n        root.add_child(file2)\n        subdir1.add_child(subdir1_file1)\n        subdir1.add_child(subdir1_file2)\n        subdir2.add_child(subdir2_file1)\n        ```\n        \n      Class Docstring:\n        Abstract base class for a node in the file tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the node\n                    parent (Node): Parent node of this node\n                \"\"\"\n                self.name = name\n                self.parent = parent\n        \n        \n        \n    automata.core.coding.directory.Directory.add_child\n    \n      Class Docstring:\n        Adds a child node to this directory\n        \n        Args:\n        child (Node): Child node to add\n        \n      Methods:\n        add_child(self, child: \"Node\") -> None\n        \n    automata.core.coding.directory.File\n    \n        The `File` class represents a file in a file tree, including its name and parent node, and is useful for managing, navigating or analyzing directory structures. It inherits from the abstract base class `Node` but does not provide built-in functionality for reading/writing contents, modifying attributes, or traversing the file tree. Additional functionality or Python libraries may be needed for these operations. Here's an example of creating an instance of `File`:\n        \n        ```python\n        from automata.core.coding.directory import File\n        \n        file_name = \"example.txt\"\n        parent_node = None\n        \n        new_file = File(file_name, parent_node)\n        ```\n        \n      Class Docstring:\n        Represents a file in the tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the file\n                    parent (Node): Parent node of this file\n                \"\"\"\n                super().__init__(name, parent)\n        \n        \n        \n    automata.core.coding.directory.Directory.get_file_names\n    \n      Class Docstring:\n        Get a list of file names in the directory\n        \n        Args:\n        directory (Directory): Directory to get file names from\n        \n        Returns:\n        List[str]: List of file names in the directory\n        \n      Methods:\n        get_file_names(self) -> List[str]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.directory`/File#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "File", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# File\n\n`File` is a class that represents a file in the file tree. It inherits from the abstract base class `Node`.\n\n## Overview\n\nThe `File` class provides a way to represent a file in a file tree, including its name and parent node. This class is useful when working with file trees for managing, navigating, or analyzing file structure in a directory.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.SymbolFile`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.tests.unit.test_symbol_graph.test_get_all_files`\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n- `automata.tests.unit.test_database_vector.test_init_vector`\n- `automata.core.symbol.symbol_types.SymbolReference`\n- `automata.tests.unit.test_database_vector.test_save`\n\n## Example\n\nThe following example demonstrates how to create an instance of `File`.\n\n```python\nfrom automata.core.coding.directory import File\n\nfile_name = \"example.txt\"\nparent_node = None\n\nnew_file = File(file_name, parent_node)\n```\n\n## Limitations\n\nThe `File` class is primarily a basic representation of a file within a file tree. It does not provide built-in functionality for reading or writing contents, modifying file attributes, or traversing the file tree. For these operations, additional functionality may need to be developed or other Python libraries may be employed.\n\n## Follow-up Questions:\n\n- What are some ways to improve the class to provide additional functionality for manipulating the files?\n- How can we incorporate file reading and writing capabilities within this class?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class File(Node):\n    \"\"\"Represents a file in the tree\"\"\"\n\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        \"\"\"\n        Args:\n            name (str): Name of the file\n            parent (Node): Parent node of this file\n        \"\"\"\n        super().__init__(name, parent)\n\n\n", "summary": "The `File` class represents a file within a file tree, including its name and parent node. It is inherited from the abstract base class `Node` and is useful for managing, navigating, or analyzing file structures. However, the class does not provide built-in functionality for reading or writing contents, modifying attributes, or traversing the file tree. To create an instance of the `File` class:\n\n```python\nfrom automata.core.coding.directory import File\n\nfile_name = \"example.txt\"\nparent_node = None\n\nnew_file = File(file_name, parent_node)\n```\n\nAdditional functionality or libraries may be needed for more advanced operations.", "context": "\n    Generate the documentation for File using the context shown below -\n  Building context for primary symbol - automata.core.coding.directory.File -\n  \n    Import Statements:\n      import logging\n      import os\n      from typing import Dict, List, Optional\n      \n      # File\n      \n      `File` is a class that represents a file in the file tree. It inherits from the abstract base class `Node`.\n      \n      ## Overview\n      \n      The `File` class provides a way to represent a file in a file tree, including its name and parent node. This class is useful when working with file trees for managing, navigating, or analyzing file structure in a directory.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.SymbolFile`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.tests.unit.test_symbol_graph.test_get_all_files`\n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n      - `automata.tests.unit.test_database_vector.test_init_vector`\n      - `automata.core.symbol.symbol_types.SymbolReference`\n      - `automata.tests.unit.test_database_vector.test_save`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `File`.\n      \n      ```python\n      from automata.core.coding.directory import File\n      \n      file_name = \"example.txt\"\n      parent_node = None\n      \n      new_file = File(file_name, parent_node)\n      ```\n      \n      ## Limitations\n      \n      The `File` class is primarily a basic representation of a file within a file tree. It does not provide built-in functionality for reading or writing contents, modifying file attributes, or traversing the file tree. For these operations, additional functionality may need to be developed or other Python libraries may be employed.\n      \n      ## Follow-up Questions:\n      \n      - What are some ways to improve the class to provide additional functionality for manipulating the files?\n      - How can we incorporate file reading and writing capabilities within this class?\n      \n    Class Docstring:\n      Represents a file in the tree\n      \n    Methods:\n      def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n              \"\"\"\n              Args:\n                  name (str): Name of the file\n                  parent (Node): Parent node of this file\n              \"\"\"\n              super().__init__(name, parent)\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.symbol_types.SymbolFile\n    \n        `SymbolFile` is a class used to represent files containing symbols, typically within the `SymbolGraph`. It provides methods for equality checks and hashing operations but does not include methods for modifying the file or accessing the symbol within. You can use the `SymbolFile` class to create instances of files containing symbols and compare them as shown in the following example:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolFile\n        \n        file_1 = SymbolFile(\"path/to/symbol/file\")\n        file_2 = SymbolFile(\"path/to/symbol/file\")\n        \n        # Comparing SymbolFile instances\n        assert file_1 == file_2\n        \n        # Comparing SymbolFile instance with a string representing the path\n        assert file_1 == \"path/to/symbol/file\"\n        ```\n        To access the symbol within a `SymbolFile` instance, you may need to use related symbol classes.\n        \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.symbol_types.SymbolFile.__eq__\n    \n      Methods:\n        __eq__(self, other) -> None\n        \n    automata.tests.unit.test_symbol_graph.test_get_all_files\n    \n        def test_get_all_files(symbol_graph):\n            files = symbol_graph.get_all_files()\n            assert isinstance(files, list)\n            for f in files:\n                assert isinstance(f, SymbolFile)\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata.tests.unit.test_database_vector.test_init_vector\n    \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.tests.unit.test_database_vector.test_save\n    \n        def test_save(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.coding.directory.Node.__init__\n    \n      Class Docstring:\n        Args:\n        name (str): Name of the node\n        parent (Node): Parent node of this node\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the node\n                    parent (Node): Parent node of this node\n                \"\"\"\n                self.name = name\n                self.parent = parent\n        \n        \n        \n    automata.core.coding.directory.Node\n    \n        `Node` is an abstract base class within the `automata.core.coding.directory` package that represents a node in a file tree, with a `name` and a `parent` pointing to its parent in the tree hierarchy. Though not directly instantiated, the class serves as a superclass for `File` and `Directory` classes. To use these classes, create a root directory with subdirectories and files, add children to the directories as needed, and import the necessary classes from the package:\n        \n        ```python\n        from automata.core.coding.directory import File, Directory\n        \n        root = Directory(\"root\")\n        subdir1 = Directory(\"subdir1\", root)\n        subdir2 = Directory(\"subdir2\", root)\n        file1 = File(\"file1.txt\", root)\n        file2 = File(\"file2.txt\", root)\n        subdir1_file1 = File(\"file1.txt\", subdir1)\n        subdir1_file2 = File(\"file2.txt\", subdir1)\n        subdir2_file1 = File(\"file1.txt\", subdir2)\n        \n        root.add_child(subdir1)\n        root.add_child(subdir2)\n        root.add_child(file1)\n        root.add_child(file2)\n        subdir1.add_child(subdir1_file1)\n        subdir1.add_child(subdir1_file2)\n        subdir2.add_child(subdir2_file1)\n        ```\n        \n      Class Docstring:\n        Abstract base class for a node in the file tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the node\n                    parent (Node): Parent node of this node\n                \"\"\"\n                self.name = name\n                self.parent = parent\n        \n        \n        \n    automata.core.coding.directory.Directory\n    \n        The `Directory` class represents a directory containing files or other directories as children, providing methods to manage and interact with directory structures. It extends the abstract base class `Node` with functionality such as adding child nodes, getting file names, and subdirectories, and determining leaf or root directories. However, it does not offer advanced capabilities such as searching, moving, or renaming files and directories. The following example demonstrates creating a root directory, adding a child directory, and obtaining subdirectories:\n        \n        ```python\n        from automata.core.coding.directory import Directory\n        \n        # Create a sample root directory\n        root_dir = Directory(name=\"root\")\n        \n        # Create a sample child directory\n        child_dir = Directory(name=\"child\", parent=root_dir)\n        \n        # Add the child directory to the root directory\n        root_dir.add_child(child_dir)\n        \n        # Get the subdirectories of the root directory\n        subdirectories = root_dir.get_subdirectories()\n        print(subdirectories)  # Output: ['child']\n        ```\n        \n        \n      Class Docstring:\n        Represents a directory. Has children which can be directories or files\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the directory\n                    parent (Node): Parent node of this directory\n                \"\"\"\n                super().__init__(name, parent)\n                self.children: Dict[str, Node] = {}\n        \n            \n        add_child(self, child: \"Node\") -> None\n        \n        get_file_names(self) -> List[str]\n        \n        get_subdirectories(self) -> List[str]\n        \n        is_leaf_dir(self) -> bool\n        \n        is_root_dir(self) -> bool\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.directory`/Node#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "Node", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# Node\n\n`Node` is an abstract base class representing a node in a file tree. It is part of the larger file management infrastructure in the `automata.core.coding.directory` package. The class includes a `name` to represent the name of the node and a `parent` to point to the parent node in the file tree hierarchy.\n\n## Related Symbols\n\n- `automata.core.coding.directory.File`\n- `automata.core.coding.directory.Directory`\n\n## Usage Example\n\nThe `Node` class is not directly instantiated but is a superclass for `File` and `Directory` classes. Here is an example of how to use the `File` and `Directory` classes representing files and directories in the file tree:\n\n```python\nfrom automata.core.coding.directory import File, Directory\n\n# Create a root directory and some subdirectories\nroot = Directory(\"root\")\nsubdir1 = Directory(\"subdir1\", root)\nsubdir2 = Directory(\"subdir2\", root)\n\n# Create some files in root directory\nfile1 = File(\"file1.txt\", root)\nfile2 = File(\"file2.txt\", root)\n\n# Create some files in subdirectories\nsubdir1_file1 = File(\"file1.txt\", subdir1)\nsubdir1_file2 = File(\"file2.txt\", subdir1)\nsubdir2_file1 = File(\"file1.txt\", subdir2)\n\n# Add files and subdirectories to root and subdirectories\nroot.add_child(subdir1)\nroot.add_child(subdir2)\nroot.add_child(file1)\nroot.add_child(file2)\nsubdir1.add_child(subdir1_file1)\nsubdir1.add_child(subdir1_file2)\nsubdir2.add_child(subdir2_file1)\n```\n\n## Follow-up Questions\n\n- In the usage example, the file names are given manually. Is there an automated mechanism to traverse directories and create `File` and `Directory` objects?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class Node:\n    \"\"\"Abstract base class for a node in the file tree\"\"\"\n\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        \"\"\"\n        Args:\n            name (str): Name of the node\n            parent (Node): Parent node of this node\n        \"\"\"\n        self.name = name\n        self.parent = parent\n\n\n", "summary": "The `Node` class serves as an abstract base class for nodes in a file tree and is a part of the `automata.core.coding.directory` package. It contains a `name` and a `parent` to define the node's hierarchy. The `Node` class is not directly instantiated but used as a superclass for `File` and `Directory` classes. You can create and manage files and directories using these classes, as demonstrated in the provided example. However, the example does not show an automated mechanism for traversing directories and creating `File` and `Directory` objects.", "context": "\n    Generate the documentation for Node using the context shown below -\n  Building context for primary symbol - automata.core.coding.directory.Node -\n  \n    Import Statements:\n      import logging\n      import os\n      from typing import Dict, List, Optional\n      \n      # Node\n      \n      `Node` is an abstract base class representing a node in a file tree. It is part of the larger file management infrastructure in the `automata.core.coding.directory` package. The class includes a `name` to represent the name of the node and a `parent` to point to the parent node in the file tree hierarchy.\n      \n      ## Related Symbols:\n      \n      - `automata.core.coding.directory.File`\n      - `automata.core.coding.directory.Directory`\n      \n      ## Usage Example:\n      \n      The `Node` class is not directly instantiated but is a superclass for `File` and `Directory` classes. Here is an example of how to use the `File` and `Directory` classes representing files and directories in the file tree:\n      \n      ```python\n      from automata.core.coding.directory import File, Directory\n      \n      # Create a root directory and some subdirectories\n      root = Directory(\"root\")\n      subdir1 = Directory(\"subdir1\", root)\n      subdir2 = Directory(\"subdir2\", root)\n      \n      # Create some files in root directory\n      file1 = File(\"file1.txt\", root)\n      file2 = File(\"file2.txt\", root)\n      \n      # Create some files in subdirectories\n      subdir1_file1 = File(\"file1.txt\", subdir1)\n      subdir1_file2 = File(\"file2.txt\", subdir1)\n      subdir2_file1 = File(\"file1.txt\", subdir2)\n      \n      # Add files and subdirectories to root and subdirectories\n      root.add_child(subdir1)\n      root.add_child(subdir2)\n      root.add_child(file1)\n      root.add_child(file2)\n      subdir1.add_child(subdir1_file1)\n      subdir1.add_child(subdir1_file2)\n      subdir2.add_child(subdir2_file1)\n      ```\n      \n      ## Follow-up Questions:\n      \n      - In the usage example, the file names are given manually. Is there an automated mechanism to traverse directories and create `File` and `Directory` objects?\n      \n      \n    Class Docstring:\n      Abstract base class for a node in the file tree\n      \n    Methods:\n      def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n              \"\"\"\n              Args:\n                  name (str): Name of the node\n                  parent (Node): Parent node of this node\n              \"\"\"\n              self.name = name\n              self.parent = parent\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.coding.directory.Directory\n    \n        The `Directory` class represents a directory containing files or other directories as children, providing methods to manage and interact with directory structures. It extends the abstract base class `Node` with functionality such as adding child nodes, getting file names, and subdirectories, and determining leaf or root directories. However, it does not offer advanced capabilities such as searching, moving, or renaming files and directories. The following example demonstrates creating a root directory, adding a child directory, and obtaining subdirectories:\n        \n        ```python\n        from automata.core.coding.directory import Directory\n        \n        # Create a sample root directory\n        root_dir = Directory(name=\"root\")\n        \n        # Create a sample child directory\n        child_dir = Directory(name=\"child\", parent=root_dir)\n        \n        # Add the child directory to the root directory\n        root_dir.add_child(child_dir)\n        \n        # Get the subdirectories of the root directory\n        subdirectories = root_dir.get_subdirectories()\n        print(subdirectories)  # Output: ['child']\n        ```\n        \n        \n      Class Docstring:\n        Represents a directory. Has children which can be directories or files\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the directory\n                    parent (Node): Parent node of this directory\n                \"\"\"\n                super().__init__(name, parent)\n                self.children: Dict[str, Node] = {}\n        \n            \n        add_child(self, child: \"Node\") -> None\n        \n        get_file_names(self) -> List[str]\n        \n        get_subdirectories(self) -> List[str]\n        \n        is_leaf_dir(self) -> bool\n        \n        is_root_dir(self) -> bool\n        \n    automata.core.coding.directory.File\n    \n        The `File` class represents a file in a file tree, including its name and parent node, and is useful for managing, navigating or analyzing directory structures. It inherits from the abstract base class `Node` but does not provide built-in functionality for reading/writing contents, modifying attributes, or traversing the file tree. Additional functionality or Python libraries may be needed for these operations. Here's an example of creating an instance of `File`:\n        \n        ```python\n        from automata.core.coding.directory import File\n        \n        file_name = \"example.txt\"\n        parent_node = None\n        \n        new_file = File(file_name, parent_node)\n        ```\n        \n      Class Docstring:\n        Represents a file in the tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the file\n                    parent (Node): Parent node of this file\n                \"\"\"\n                super().__init__(name, parent)\n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.test_directory_manager.test_get_node_for_path\n    \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.py_coding.module_tree`/DotPathMap#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.py_coding.module_tree", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "DotPathMap", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# DotPathMap\n\n`DotPathMap` is a class that maps module dotpaths to module filepaths. It provides an easy way to access module dotpaths programmatically, which is useful when working with Python codebases. The class offers various utility methods like `contains_dotpath`, `contains_fpath`, `get_module_dotpath_by_fpath`, `get_module_fpath_by_dotpath`, and `put_module`.\n\n## Overview\n\n`DotPathMap` is initialized with an absolute path to the root of the module tree. The class provides methods to check if the map contains a particular module dotpath or filepath, get the corresponding dotpath for a given module filepath and vice versa, and put a module with a given dotpath into the map.\n\n## Related Symbols\n\n- `automata.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.core.symbol.graph.SymbolGraph`\n\n## Example\n\nHere's an example of utilizing `DotPathMap`:\n\n```python\nfrom automata.core.coding.py_coding.module_tree import DotPathMap\n\n# Set the path to the root of the Python project\npath_to_project_root = \"/path/to/python/project\"\n\n# Initialize the DotPathMap\ndotpath_map = DotPathMap(path_to_project_root)\n\n# Check if the dotpath_map contains a given dotpath and filepath\ncontains_dotpath = dotpath_map.contains_dotpath(\"module.dotpath.example\")\ncontains_fpath = dotpath_map.contains_fpath(\"/path/to/python/module/example.py\")\n\n# Get the dotpath of a module given its filepath\ndotpath = dotpath_map.get_module_dotpath_by_fpath(\"/path/to/python/module/example.py\")\n\n# Get the filepath of a module given its dotpath\nfpath = dotpath_map.get_module_fpath_by_dotpath(\"module.dotpath.example\")\n\n# Put a module with the given dotpath in the map\ndotpath_map.put_module(\"module.dotpath.example\")\n```\n\n## Limitations\n\nThe primary limitation of `DotPathMap` is that it only supports Python projects with a specific directory structure and does not handle cases where the project has a different structure, such as virtual environments or nested packages.\n\n## Follow-up Questions:\n\n- How can `DotPathMap` be extended to support more complex project structures?\n- Can `DotPathMap` be easily integrated with other build systems, like `setuptools` or `pip`, to handle package installations?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class DotPathMap:\n    \"\"\"A map from module dotpaths to module filepaths\"\"\"\n\n    def __init__(self, path: str):\n        \"\"\"\n        Args:\n            path: The absolute path to the root of the module tree\n        \"\"\"\n        if not os.path.isabs(path):\n            path = os.path.join(root_fpath(), path)\n        self._abs_path = path\n        self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n        self._module_fpath_to_dotpath_map = {\n            v: k for k, v in self._module_dotpath_to_fpath_map.items()\n        }\n\n    def _build_module_dotpath_to_fpath_map(self) -> Dict[str, str]:\n        \"\"\"\n        Builds a map from module dotpaths to module filepaths\n\n        Returns:\n            The map from module dotpaths to module filepaths\n        \"\"\"\n        module_dotpath_to_fpath_map = {}\n        for root, _, files in os.walk(self._abs_path):\n            for file in files:\n                if file.endswith(\".py\"):\n                    module_fpath = os.path.join(root, file)\n                    module_dotpath = convert_fpath_to_module_dotpath(self._abs_path, module_fpath)\n                    module_dotpath_to_fpath_map[module_dotpath] = module_fpath\n        return module_dotpath_to_fpath_map\n\n    def get_module_fpath_by_dotpath(self, module_dotpath: str) -> str:\n        \"\"\"\n        Gets the filepath of a module given its dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            The filepath of the module\n        \"\"\"\n        return self._module_dotpath_to_fpath_map[module_dotpath]\n\n    def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n        \"\"\"\n        Gets the dotpath of a module given its filepath\n\n        Args:\n            module_fpath: The filepath of the module\n\n        Returns:\n            The dotpath of the module\n        \"\"\"\n        return self._module_fpath_to_dotpath_map[module_fpath]\n\n    def contains_dotpath(self, module_dotpath: str) -> bool:\n        \"\"\"\n        Checks if the map contains a module with the given dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            True if the map contains the module, False otherwise\n        \"\"\"\n        return module_dotpath in self._module_dotpath_to_fpath_map\n\n    def contains_fpath(self, module_fpath: str) -> bool:\n        \"\"\"\n        Checks if the map contains a module with the given filepath\n\n        Args:\n            module_fpath: The filepath of the module\n\n        Returns:\n            True if the map contains the module, False otherwise\n        \"\"\"\n        return module_fpath in self._module_fpath_to_dotpath_map\n\n    def put_module(self, module_dotpath: str):\n        \"\"\"\n        Puts a module with the given dotpath in the map\n\n        Args:\n            module_dotpath: The dotpath of the module\n        \"\"\"\n        if not self.contains_dotpath(module_dotpath):\n            module_os_rel_path = module_dotpath.replace(DOT_SEP, os.path.sep)\n            module_os_abs_path = os.path.join(self._abs_path, module_os_rel_path)\n            os.makedirs(os.path.dirname(module_os_abs_path), exist_ok=True)\n            file_path = f\"{module_os_abs_path}.py\"\n            self._module_dotpath_to_fpath_map[module_dotpath] = file_path\n            self._module_fpath_to_dotpath_map[file_path] = module_dotpath\n\n    def items(self) -> Iterable[Tuple[str, str]]:\n        \"\"\"\n        Returns:\n            A dictionary containing the module dotpath to module filepath mapping\n        \"\"\"\n        return self._module_dotpath_to_fpath_map.items()\n\n\n", "summary": "DotPathMap is a class used for mapping module dotpaths to module filepaths in Python projects. It is initialized with an absolute path to the root of the module tree and offers utility methods to check for the existence of a module dotpath or filepath, retrieve the corresponding dotpath or filepath, and add a module with a given dotpath to the map. One limitation of DotPathMap is that it only supports Python projects with specific directory structures and does not handle cases with virtual environments or nested packages.\n\nExample usage:\n\n```python\nfrom automata.core.coding.py_coding.module_tree import DotPathMap\n\npath_to_project_root = \"/path/to/python/project\"\ndotpath_map = DotPathMap(path_to_project_root)\ncontains_dotpath = dotpath_map.contains_dotpath(\"module.dotpath.example\")\ncontains_fpath = dotpath_map.contains_fpath(\"/path/to/python/module/example.py\")\ndotpath = dotpath_map.get_module_dotpath_by_fpath(\"/path/to/python/module/example.py\")\nfpath = dotpath_map.get_module_fpath_by_dotpath(\"module.dotpath.example\")\ndotpath_map.put_module(\"module.dotpath.example\")\n```\nFollow-up questions include exploring how DotPathMap can be extended to support complex project structures and if it can be integrated with other build systems like setuptools or pip.", "context": "\n    Generate the documentation for DotPathMap using the context shown below -\n  Building context for primary symbol - automata.core.coding.py_coding.module_tree.DotPathMap -\n  \n    Import Statements:\n      import logging\n      import os.path\n      from functools import lru_cache\n      from typing import Dict, Iterable, Optional, Tuple\n      from redbaron import RedBaron\n      from automata.core.coding.py_coding.py_utils import DOT_SEP, convert_fpath_to_module_dotpath\n      from automata.core.utils import root_fpath\n      \n      # DotPathMap\n      \n      `DotPathMap` is a class that maps module dotpaths to module filepaths. It provides an easy way to access module dotpaths programmatically, which is useful when working with Python codebases. The class offers various utility methods like `contains_dotpath`, `contains_fpath`, `get_module_dotpath_by_fpath`, `get_module_fpath_by_dotpath`, and `put_module`.\n      \n      ## Overview\n      \n      `DotPathMap` is initialized with an absolute path to the root of the module tree. The class provides methods to check if the map contains a particular module dotpath or filepath, get the corresponding dotpath for a given module filepath and vice versa, and put a module with a given dotpath into the map. \n      \n      ## Related Symbols\n      \n      - `automata.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.core.symbol.graph.SymbolGraph`\n      \n      ## Example\n      \n      Here's an example of utilizing `DotPathMap`:\n      \n      ```python\n      from automata.core.coding.py_coding.module_tree import DotPathMap\n      \n      # Set the path to the root of the Python project\n      path_to_project_root = \"/path/to/python/project\"\n      \n      # Initialize the DotPathMap\n      dotpath_map = DotPathMap(path_to_project_root)\n      \n      # Check if the dotpath_map contains a given dotpath and filepath\n      contains_dotpath = dotpath_map.contains_dotpath(\"module.dotpath.example\")\n      contains_fpath = dotpath_map.contains_fpath(\"/path/to/python/module/example.py\")\n      \n      # Get the dotpath of a module given its filepath\n      dotpath = dotpath_map.get_module_dotpath_by_fpath(\"/path/to/python/module/example.py\")\n      \n      # Get the filepath of a module given its dotpath\n      fpath = dotpath_map.get_module_fpath_by_dotpath(\"module.dotpath.example\")\n      \n      # Put a module with the given dotpath in the map\n      dotpath_map.put_module(\"module.dotpath.example\")\n      ```\n      \n      ## Limitations\n      \n      The primary limitation of `DotPathMap` is that it only supports Python projects with a specific directory structure and does not handle cases where the project has a different structure, such as virtual environments or nested packages.\n      \n      ## Follow-up Questions:\n      \n      - How can `DotPathMap` be extended to support more complex project structures?\n      - Can `DotPathMap` be easily integrated with other build systems, like `setuptools` or `pip`, to handle package installations?\n      \n    Class Docstring:\n      A map from module dotpaths to module filepaths\n      \n    Methods:\n      def __init__(self, path: str):\n              \"\"\"\n              Args:\n                  path: The absolute path to the root of the module tree\n              \"\"\"\n              if not os.path.isabs(path):\n                  path = os.path.join(root_fpath(), path)\n              self._abs_path = path\n              self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n              self._module_fpath_to_dotpath_map = {\n                  v: k for k, v in self._module_dotpath_to_fpath_map.items()\n              }\n      \n          \n      def contains_dotpath(self, module_dotpath: str) -> bool:\n              \"\"\"\n              Checks if the map contains a module with the given dotpath\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n      \n              Returns:\n                  True if the map contains the module, False otherwise\n              \"\"\"\n              return module_dotpath in self._module_dotpath_to_fpath_map\n      \n          \n      def contains_fpath(self, module_fpath: str) -> bool:\n              \"\"\"\n              Checks if the map contains a module with the given filepath\n      \n              Args:\n                  module_fpath: The filepath of the module\n      \n              Returns:\n                  True if the map contains the module, False otherwise\n              \"\"\"\n              return module_fpath in self._module_fpath_to_dotpath_map\n      \n          \n      def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n              \"\"\"\n              Gets the dotpath of a module given its filepath\n      \n              Args:\n                  module_fpath: The filepath of the module\n      \n              Returns:\n                  The dotpath of the module\n              \"\"\"\n              return self._module_fpath_to_dotpath_map[module_fpath]\n      \n          \n      def get_module_fpath_by_dotpath(self, module_dotpath: str) -> str:\n              \"\"\"\n              Gets the filepath of a module given its dotpath\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n      \n              Returns:\n                  The filepath of the module\n              \"\"\"\n              return self._module_dotpath_to_fpath_map[module_dotpath]\n      \n          \n      def items(self) -> Iterable[Tuple[str, str]]:\n              \"\"\"\n              Returns:\n                  A dictionary containing the module dotpath to module filepath mapping\n              \"\"\"\n              return self._module_dotpath_to_fpath_map.items()\n      \n      \n      \n      def put_module(self, module_dotpath: str):\n              \"\"\"\n              Puts a module with the given dotpath in the map\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n              \"\"\"\n              if not self.contains_dotpath(module_dotpath):\n                  module_os_rel_path = module_dotpath.replace(DOT_SEP, os.path.sep)\n                  module_os_abs_path = os.path.join(self._abs_path, module_os_rel_path)\n                  os.makedirs(os.path.dirname(module_os_abs_path), exist_ok=True)\n                  file_path = f\"{module_os_abs_path}.py\"\n                  self._module_dotpath_to_fpath_map[module_dotpath] = file_path\n                  self._module_fpath_to_dotpath_map[file_path] = module_dotpath\n      \n          \n  Building context for related symbols -\n  \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n        The `LazyModuleTreeMap` class is a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching the modules in memory as they are accessed. It provides methods for fetching existing module dotpaths and filepaths, as well as fetching, putting, and updating modules by their dotpaths. However, it assumes a specific directory structure according to the `DotPathMap` class and does not support custom directory structures for modules.\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.utils import root_fpath\n        \n        path_to_root = root_fpath()\n        module_tree_map = LazyModuleTreeMap(path_to_root)\n        \n        # Fetch an existing module by its dotpath\n        module_dotpath = \"automata.core.agent.automata_agent\"\n        module = module_tree_map.fetch_module(module_dotpath)\n        \n        # Check if a module with the given dotpath exists\n        exists = module_dotpath in module_tree_map\n        ```\n        \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.__contains__\n    \n      Class Docstring:\n        Checks if the map contains a module with the given dotpath\n        \n        Args:\n        dotpath: The dotpath of the module\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n    automata.tests.unit.test_py_code_retriever.module_map\n    \n        @pytest.fixture\n        def module_map():\n            # get latest path\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            # Set the root directory to the folder containing test modules\n            return LazyModuleTreeMap(sample_dir)\n        \n        \n        \n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.put_module\n    \n      Class Docstring:\n        Put a module with the given dotpath in the map\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        module: The module to put in the map\n        \n      Methods:\n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.cached_default\n    \n      Class Docstring:\n        Creates a new LazyModuleTreeMap instance with the default root path\n        \n      Methods:\n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n    automata.tests.unit.test_directory_manager.test_get_node_for_path\n    \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolFile\n    \n        `SymbolFile` is a class used to represent files containing symbols, typically within the `SymbolGraph`. It provides methods for equality checks and hashing operations but does not include methods for modifying the file or accessing the symbol within. You can use the `SymbolFile` class to create instances of files containing symbols and compare them as shown in the following example:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolFile\n        \n        file_1 = SymbolFile(\"path/to/symbol/file\")\n        file_2 = SymbolFile(\"path/to/symbol/file\")\n        \n        # Comparing SymbolFile instances\n        assert file_1 == file_2\n        \n        # Comparing SymbolFile instance with a string representing the path\n        assert file_1 == \"path/to/symbol/file\"\n        ```\n        To access the symbol within a `SymbolFile` instance, you may need to use related symbol classes.\n        \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n  Building context for dependencies -\n  \n    automata.core.coding.py_coding.py_utils.convert_fpath_to_module_dotpath\n    \n      Class Docstring:\n        Converts a filepath to a module dotpath\n        \n        Args:\n        root_abs_path: The absolute path of the root directory\n        module_path: The path of the module\n        \n        Returns:\n        The dotpath of the module\n        \n      Methods:\n        convert_fpath_to_module_dotpath(root_abs_path: str, module_path: str) -> str\n        \n    automata.core.utils.root_fpath\n    \n      Class Docstring:\n        Returns the path to the root of the project directory.\n        \n        Returns:\n        str - A fpath object in string form\n        \n      Methods:\n        root_fpath() -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.py_coding.module_tree`/LazyModuleTreeMap#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.py_coding.module_tree", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "LazyModuleTreeMap", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# LazyModuleTreeMap\n\n## Overview\n\n`LazyModuleTreeMap` is a class that represents a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects. It loads and caches the modules in memory as they are accessed. The class provides methods for fetching existing module dotpaths and filepaths, as well as for fetching, putting, and updating modules by their dotpaths.\n\n## Related Symbols\n\n- `automata.core.coding.py_coding.retriever.PyCodeRetriever.__init__`\n- `automata.core.symbol.symbol_utils.convert_to_fst_object`\n\n## Usage Example\n\n```python\nfrom automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\nfrom automata.core.utils import root_fpath\n\npath_to_root = root_fpath()\nmodule_tree_map = LazyModuleTreeMap(path_to_root)\n\n# Fetch an existing module by its dotpath\nmodule_dotpath = \"automata.core.agent.automata_agent\"\nmodule = module_tree_map.fetch_module(module_dotpath)\n\n# Check if a module with the given dotpath exists\nexists = module_dotpath in module_tree_map\n```\n\n## Limitations\n\n`LazyModuleTreeMap` assumes a specific directory structure for the modules, according to the `DotPathMap` class. Custom directory structures for modules are not supported.\n\n## Follow-up Questions:\n\n- How can we adapt `LazyModuleTreeMap` to support custom directory structures for the modules?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class LazyModuleTreeMap:\n    \"\"\"\n    A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n    Loads and caches modules in memory as they are accessed\n    \"\"\"\n\n    def __init__(self, path: str):\n        \"\"\"\n        Args:\n            path: The absolute path to the root of the module tree\n        \"\"\"\n        self._dotpath_map = DotPathMap(path)\n        self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n\n    def __contains__(self, dotpath):\n        \"\"\"\n        Checks if the map contains a module with the given dotpath\n\n        Args:\n            dotpath: The dotpath of the module\n        \"\"\"\n        return self._dotpath_map.contains_dotpath(dotpath)\n\n    def items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]:\n        \"\"\"\n        Returns:\n            A dictionary containing the module dotpath to module RedBaron FST object mapping\n        \"\"\"\n        self._load_all_modules()\n        return self._loaded_modules.items()\n\n    def fetch_module(self, module_dotpath: str) -> Optional[RedBaron]:\n        \"\"\"\n        Gets the module with the given dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            Optional[RedBaron]: The module with the given dotpath if found, None otherwise\n        \"\"\"\n        if not self._dotpath_map.contains_dotpath(module_dotpath):\n            return None\n\n        if module_dotpath not in self._loaded_modules:\n            module_fpath = self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n            self._loaded_modules[module_dotpath] = self._load_module_from_fpath(module_fpath)\n        return self._loaded_modules[module_dotpath]\n\n    def fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]:\n        \"\"\"\n        Gets the module dotpath for the specified module object.\n\n        Args:\n            module_obj (Module): The module object.\n\n        Returns:\n            str: The module dotpath for the specified module object.\n        \"\"\"\n        # there is no way a module that has a redbaron object is not loaded\n        for module_dotpath, module in self._loaded_modules.items():\n            if module == module_obj:\n                return module_dotpath\n        return None\n\n    def fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]:\n        \"\"\"\n        Gets the module fpath for the specified module dotpath.\n\n        Args:\n            module_dotpath (str): The module dotpath.\n\n        Returns:\n            str: The module fpath for the specified module dotpath.\n        \"\"\"\n\n        if module_dotpath in self._loaded_modules:\n            return self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n        return None\n\n    def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n        \"\"\"\n        Gets the module dotpath for the specified module fpath.\n\n        Args:\n            module_fpath (str): The module fpath.\n        \"\"\"\n        return self._dotpath_map.get_module_dotpath_by_fpath(module_fpath)\n\n    def put_module(self, module_dotpath: str, module: RedBaron):\n        \"\"\"\n        Put a module with the given dotpath in the map\n\n        Args:\n            module_dotpath: The dotpath of the module\n            module: The module to put in the map\n        \"\"\"\n        self._loaded_modules[module_dotpath] = module\n        self._dotpath_map.put_module(module_dotpath)\n\n    def _load_all_modules(self):\n        \"\"\"Loads all modules in the map\"\"\"\n        for module_dotpath, fpath in self._dotpath_map.items():\n            if module_dotpath not in self._loaded_modules:\n                self._loaded_modules[module_dotpath] = self._load_module_from_fpath(fpath)\n\n    @classmethod\n    @lru_cache(maxsize=1)\n    def cached_default(cls) -> \"LazyModuleTreeMap\":\n        \"\"\"Creates a new LazyModuleTreeMap instance with the default root path\"\"\"\n        return cls(root_fpath())\n\n    @staticmethod\n    def _load_module_from_fpath(path: str) -> Optional[RedBaron]:\n        \"\"\"\n        Loads and returns an FST object for the given file path.\n\n        Args:\n            path (str): The file path of the Python source code.\n\n        Returns:\n            Module: RedBaron FST object.\n        \"\"\"\n        try:\n            module = RedBaron(open(path).read())\n            return module\n        except Exception as e:\n            logger.error(f\"Failed to load module '{path}' due to: {e}\")\n            return None\n", "summary": "`LazyModuleTreeMap` is a class representing a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching modules in memory as they are accessed. It provides methods for fetching, putting, and updating modules by their dotpaths, as well as checking if a module with a given dotpath exists. However, it assumes a specific directory structure for modules according to the `DotPathMap` class and does not support custom directory structures.\n\nExample usage:\n```python\nfrom automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\nfrom automata.core.utils import root_fpath\n\npath_to_root = root_fpath()\nmodule_tree_map = LazyModuleTreeMap(path_to_root)\nmodule_dotpath = \"automata.core.agent.automata_agent\"\nmodule = module_tree_map.fetch_module(module_dotpath)\nexists = module_dotpath in module_tree_map\n```", "context": "\n    Generate the documentation for LazyModuleTreeMap using the context shown below -\n  Building context for primary symbol - automata.core.coding.py_coding.module_tree.LazyModuleTreeMap -\n  \n    Import Statements:\n      import logging\n      import os.path\n      from functools import lru_cache\n      from typing import Dict, Iterable, Optional, Tuple\n      from redbaron import RedBaron\n      from automata.core.coding.py_coding.py_utils import DOT_SEP, convert_fpath_to_module_dotpath\n      from automata.core.utils import root_fpath\n      \n      # LazyModuleTreeMap\n      \n      ## Overview\n      \n      The `LazyModuleTreeMap` class represents a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects. It loads and caches the modules in memory as they are accessed. The class also provides methods for fetching existing module dotpaths and filepaths, as well as for fetching, putting and updating the modules by their dotpaths.\n      \n      ## Related Symbols\n      \n      - `automata.core.coding.py_coding.retriever.PyCodeRetriever.__init__`\n      - `automata.tests.unit.test_py_code_retriever.module_map`\n      - `automata.tests.unit.test_py_code_retriever.getter`\n      - `automata.core.symbol.symbol_utils.convert_to_fst_object`\n      \n      ## Example\n      \n      The following example demonstrates how to create and use a `LazyModuleTreeMap`:\n      \n      ```python\n      from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n      from automata.core.utils import root_fpath\n      \n      path_to_root = root_fpath()\n      module_tree_map = LazyModuleTreeMap(path_to_root)\n      \n      # Fetch an existing module by its dotpath\n      module_dotpath = \"automata.core.agent.automata_agent\"\n      module = module_tree_map.fetch_module(module_dotpath)\n      \n      # Check if a module with the given dotpath exists\n      exists = module_dotpath in module_tree_map\n      ```\n      \n      ## Limitations\n      \n      `LazyModuleTreeMap` assumes a specific directory structure for the modules, according to the `DotPathMap` class. Custom directory structures for modules are not supported.\n      \n      ## Follow-up Questions:\n      \n      - How can we adapt `LazyModuleTreeMap` to support custom directory structures for the modules?\n      \n    Class Docstring:\n      A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n      Loads and caches modules in memory as they are accessed\n      \n    Methods:\n      def __contains__(self, dotpath):\n              \"\"\"\n              Checks if the map contains a module with the given dotpath\n      \n              Args:\n                  dotpath: The dotpath of the module\n              \"\"\"\n              return self._dotpath_map.contains_dotpath(dotpath)\n      \n          \n      def __init__(self, path: str):\n              \"\"\"\n              Args:\n                  path: The absolute path to the root of the module tree\n              \"\"\"\n              self._dotpath_map = DotPathMap(path)\n              self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n      \n          \n      @classmethod\n          @lru_cache(maxsize=1)\n          def cached_default(cls) -> \"LazyModuleTreeMap\":\n              \"\"\"Creates a new LazyModuleTreeMap instance with the default root path\"\"\"\n              return cls(root_fpath())\n      \n          \n      def fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]:\n              \"\"\"\n              Gets the module dotpath for the specified module object.\n      \n              Args:\n                  module_obj (Module): The module object.\n      \n              Returns:\n                  str: The module dotpath for the specified module object.\n              \"\"\"\n              # there is no way a module that has a redbaron object is not loaded\n              for module_dotpath, module in self._loaded_modules.items():\n                  if module == module_obj:\n                      return module_dotpath\n              return None\n      \n          \n      def fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]:\n              \"\"\"\n              Gets the module fpath for the specified module dotpath.\n      \n              Args:\n                  module_dotpath (str): The module dotpath.\n      \n              Returns:\n                  str: The module fpath for the specified module dotpath.\n              \"\"\"\n      \n              if module_dotpath in self._loaded_modules:\n                  return self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n              return None\n      \n          \n      def fetch_module(self, module_dotpath: str) -> Optional[RedBaron]:\n              \"\"\"\n              Gets the module with the given dotpath\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n      \n              Returns:\n                  Optional[RedBaron]: The module with the given dotpath if found, None otherwise\n              \"\"\"\n              if not self._dotpath_map.contains_dotpath(module_dotpath):\n                  return None\n      \n              if module_dotpath not in self._loaded_modules:\n                  module_fpath = self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n                  self._loaded_modules[module_dotpath] = self._load_module_from_fpath(module_fpath)\n              return self._loaded_modules[module_dotpath]\n      \n          \n      def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n              \"\"\"\n              Gets the module dotpath for the specified module fpath.\n      \n              Args:\n                  module_fpath (str): The module fpath.\n              \"\"\"\n              return self._dotpath_map.get_module_dotpath_by_fpath(module_fpath)\n      \n          \n      def items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]:\n              \"\"\"\n              Returns:\n                  A dictionary containing the module dotpath to module RedBaron FST object mapping\n              \"\"\"\n              self._load_all_modules()\n              return self._loaded_modules.items()\n      \n          \n      def put_module(self, module_dotpath: str, module: RedBaron):\n              \"\"\"\n              Put a module with the given dotpath in the map\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n                  module: The module to put in the map\n              \"\"\"\n              self._loaded_modules[module_dotpath] = module\n              self._dotpath_map.put_module(module_dotpath)\n      \n          \n  Building context for related symbols -\n  \n    automata.core.coding.py_coding.retriever.PyCodeRetriever.__init__\n    \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n    automata.tests.unit.test_py_code_retriever.module_map\n    \n        @pytest.fixture\n        def module_map():\n            # get latest path\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            # Set the root directory to the folder containing test modules\n            return LazyModuleTreeMap(sample_dir)\n        \n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever\n    \n        `PyCodeRetriever` is a class designed to fetch Python code from a specified module, enabling the retrieval of source code, docstrings, and source code without docstrings for a given module, class, or function/method. Through methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it offers a way to programmatically analyze, extract, and comprehend Python projects. However, this class assumes a specific directory structure for the modules and relies on the RedBaron library for parsing, which may have limitations when parsing complex or unconventional code patterns.\n        \n        An example usage of `PyCodeRetriever` for retrieving the source code of a function from a specified module is as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        \n        module_tree_map = LazyModuleTreeMap.cached_default()\n        code_retriever = PyCodeRetriever(module_tree_map)\n        \n        module_dotpath = \"mymodule.example\"\n        object_path = \"ExampleClass.example_function\"\n        \n        source_code = code_retriever.get_source_code(module_dotpath, object_path)\n        print(source_code)\n        ```\n        \n        \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata.core.coding.py_coding.module_tree.DotPathMap\n    \n        DotPathMap is a class designed to map module dotpaths to module filepaths within Python codebases, allowing for easy programmatic access. The class is initialized with the absolute path to the root of the module tree and offers utility methods, such as checking if a dotpath or filepath are in the map, getting the corresponding dotpath for a given module filepath and vice versa, and adding a module with a specific dotpath to the map. However, DotPathMap has a limitation in that it solely supports Python projects with a specific directory structure and doesn't handle cases with different structures, such as virtual environments or nested packages.\n        \n      Class Docstring:\n        A map from module dotpaths to module filepaths\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                if not os.path.isabs(path):\n                    path = os.path.join(root_fpath(), path)\n                self._abs_path = path\n                self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n                self._module_fpath_to_dotpath_map = {\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        \n            \n        contains_dotpath(self, module_dotpath: str) -> bool\n        \n        contains_fpath(self, module_fpath: str) -> bool\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        get_module_fpath_by_dotpath(self, module_dotpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, str]]\n        \n        put_module(self, module_dotpath: str) -> None\n        \n    automata.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n  Building context for dependencies -\n  \n    automata.core.coding.py_coding.module_tree.DotPathMap.put_module\n    \n      Class Docstring:\n        Puts a module with the given dotpath in the map\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        \n      Methods:\n        put_module(self, module_dotpath: str) -> None\n        \n    automata.core.coding.py_coding.module_tree.DotPathMap.get_module_dotpath_by_fpath\n    \n      Class Docstring:\n        Gets the dotpath of a module given its filepath\n        \n        Args:\n        module_fpath: The filepath of the module\n        \n        Returns:\n        The dotpath of the module\n        \n      Methods:\n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n    automata.core.coding.py_coding.module_tree.DotPathMap.items\n    \n      Class Docstring:\n        Returns:\n        A dictionary containing the module dotpath to module filepath mapping\n        \n      Methods:\n        items(self) -> Iterable[Tuple[str, str]]\n        \n    automata.core.utils.root_fpath\n    \n      Class Docstring:\n        Returns the path to the root of the project directory.\n        \n        Returns:\n        str - A fpath object in string form\n        \n      Methods:\n        root_fpath() -> str\n        \n    automata.core.coding.py_coding.module_tree.DotPathMap.contains_dotpath\n    \n      Class Docstring:\n        Checks if the map contains a module with the given dotpath\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        \n        Returns:\n        True if the map contains the module, False otherwise\n        \n      Methods:\n        contains_dotpath(self, module_dotpath: str) -> bool\n        \n    automata.core.coding.py_coding.module_tree.DotPathMap.get_module_fpath_by_dotpath\n    \n      Class Docstring:\n        Gets the filepath of a module given its dotpath\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        \n        Returns:\n        The filepath of the module\n        \n      Methods:\n        get_module_fpath_by_dotpath(self, module_dotpath: str) -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.py_coding.retriever`/PyCodeRetriever#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.py_coding.retriever", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeRetriever", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PyCodeRetriever\n\n`PyCodeRetriever` is a class for fetching Python code from a given module. It can be used to retrieve the source code, docstrings, and source code without docstrings for a specified module, class, or function/method. With methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it provides a way to programmatically analyze, extract, and understand Python projects.\n\n## Related Symbols\n\n- `automata.core.context.py_context.retriever.PyContextRetriever`\n- `automata.core.coding.py_coding.writer.PyCodeWriter`\n- `automata.tests.unit.test_py_code_retriever.getter`\n- `automata.core.coding.py_coding.navigation.find_syntax_tree_node`\n- `automata.tests.unit.test_py_writer.python_writer`\n\n## Example\n\nBelow is an example demonstrating the use of `PyCodeRetriever` to retrieve the source code of a function from a specified module.\n\n```python\nfrom automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\nfrom automata.core.coding.py_coding.retriever import PyCodeRetriever\n\nmodule_tree_map = LazyModuleTreeMap.cached_default()\ncode_retriever = PyCodeRetriever(module_tree_map)\n\nmodule_dotpath = \"mymodule.example\"\nobject_path = \"ExampleClass.example_function\"\n\nsource_code = code_retriever.get_source_code(module_dotpath, object_path)\nprint(source_code)\n```\n\n## Limitations\n\n`PyCodeRetriever` assumes the project's modules are organized in a specific directory structure, following Python's package and module organization. It may not work correctly if the project structure deviates from this pattern. Additionally, `PyCodeRetriever` relies on the RedBaron library for parsing the code, which may have limitations in parsing some complex or unconventional code patterns.\n\n## Follow-up Questions:\n\n- Can the class be extended to support other programming languages and code structures?\n- Are there alternative libraries or approaches that could be used for parsing Python code, instead of RedBaron?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class PyCodeRetriever:\n    \"\"\"Code retriever for fetching python code\"\"\"\n\n    def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n        self.module_tree_map = module_tree_map\n\n    def get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str:\n        \"\"\"\n        Gets code for a specified module, class, or function/method\n\n        Args:\n            module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n            object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                (e.g. 'ClassName.method_name'). If None, the entire module code will be returned\n\n        Returns:\n            str: The code for the specified module, class, or function/method, or \"No Result Found.\"\n                if not found\n        \"\"\"\n\n        module = self.module_tree_map.fetch_module(module_dotpath)\n        if module:\n            result = find_syntax_tree_node(module, object_path)\n            if result:\n                return result.dumps()\n\n        return NO_RESULT_FOUND_STR\n\n    def get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str:\n        \"\"\"\n        Gets the docstring for a specified module, class, or function/method\n\n        Args:\n            module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n            object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                (e.g. 'ClassName.method_name'). If None, the module-level docstring will be returned\n\n        Returns:\n            str: The docstring for the specified module, class, or function/method, or \"No Result Found.\"\n                if not found\n        \"\"\"\n\n        module = self.module_tree_map.fetch_module(module_dotpath)\n        if module:\n            return PyCodeRetriever.get_docstring_from_node(\n                find_syntax_tree_node(module, object_path)\n            )\n        return NO_RESULT_FOUND_STR\n\n    def get_source_code_without_docstrings(\n        self, module_dotpath: str, object_path: Optional[str]\n    ) -> str:\n        \"\"\"\n        Gets code for a specified module, class, or function/method\n\n        Args:\n            module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n            object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                (e.g. 'ClassName.method_name'). If None, the entire module code will be returned\n\n        Returns:\n            str: The code for the specified module, class, or function/method, or \"No Result Found.\"\n                if not found\n        \"\"\"\n\n        def _remove_docstrings(node: FSTNode):\n            \"\"\"\n            Remove docstrings from the specified node, recursively\n\n            Args:\n                node: The FST node\n                    to remove docstrings from\n            \"\"\"\n\n            if isinstance(node, (DefNode, ClassNode, RedBaron)):\n                filtered_node = node.filtered()\n                if filtered_node and isinstance(filtered_node[0], StringNode):\n                    index = filtered_node[0].index_on_parent\n                    node.pop(index)\n                child_nodes = node.find_all(lambda identifier: identifier in (\"def\", \"class\"))\n                for child_node in child_nodes:\n                    if child_node is not node:\n                        _remove_docstrings(child_node)\n\n        module = self.module_tree_map.fetch_module(module_dotpath)\n\n        if module:\n            module_copy = RedBaron(module.dumps())\n            result = find_syntax_tree_node(module_copy, object_path)\n\n            if result:\n                _remove_docstrings(result)\n                return result.dumps()\n        return NO_RESULT_FOUND_STR\n\n    @staticmethod\n    def get_docstring_from_node(node: Optional[FSTNode]) -> str:\n        \"\"\"\n        Gets the docstring from the specified node\n\n        Args:\n            node: The FST node to get the docstring from\n        \"\"\"\n        if not node:\n            return NO_RESULT_FOUND_STR\n\n        if isinstance(node, (ClassNode, DefNode, RedBaron)):\n            filtered_nodes = node.filtered()  # get rid of extra whitespace\n            if isinstance(filtered_nodes[0], StringNode):\n                return filtered_nodes[0].value.replace('\"\"\"', \"\").replace(\"'''\", \"\")\n        return \"\"\n\n    @staticmethod\n    def _create_line_number_tuples(node: FSTNode, start_line: int, start_col: int):\n        \"\"\"\n        Creates a list of tuples of line numbers and lines from the specified node\n\n        Args:\n            node: The FST node to create the line number tuples from\n            start_line: The starting line number\n            start_col: The starting column number\n        \"\"\"\n        result = []\n        for i, line in enumerate(node.dumps().strip().splitlines()):\n            if i == 0 and not line.startswith(\" \" * (start_col - 1)):\n                line = \" \" * (start_col - 1) + line\n            result.append((start_line + i, line))\n        return result\n", "summary": "PyCodeRetriever is a class that fetches Python code from a specified module, allowing users to retrieve source code, docstrings, and source code without docstrings for a given module, class, or function/method. However, it assumes the project follows Python's package and module organization and relies on the RedBaron library for parsing code, which may have limitations. An example of using PyCodeRetriever to retrieve the source code of a function from a specified module is as follows:\n\n```python\nfrom automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\nfrom automata.core.coding.py_coding.retriever import PyCodeRetriever\n\nmodule_tree_map = LazyModuleTreeMap.cached_default()\ncode_retriever = PyCodeRetriever(module_tree_map)\n\nmodule_dotpath = \"mymodule.example\"\nobject_path = \"ExampleClass.example_function\"\n\nsource_code = code_retriever.get_source_code(module_dotpath, object_path)\nprint(source_code)\n```", "context": "\n    Generate the documentation for PyCodeRetriever using the context shown below -\n  Building context for primary symbol - automata.core.coding.py_coding.retriever.PyCodeRetriever -\n  \n    Import Statements:\n      import logging\n      from __future__ import annotations\n      from typing import Optional, Union\n      from redbaron import ClassNode, DefNode, Node, RedBaron, StringNode\n      from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n      from automata.core.coding.py_coding.navigation import find_syntax_tree_node\n      from automata.core.coding.py_coding.py_utils import NO_RESULT_FOUND_STR\n      \n      # PyCodeRetriever\n      \n      `PyCodeRetriever` is a class for fetching Python code from a given module. It can be used to retrieve the source code, docstrings, and source code without docstrings for a specified module, class, or function/method. With methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it provides a way to programmatically analyze, extract, and understand Python projects.\n      \n      ## Related Symbols\n      \n      - `automata.core.context.py_context.retriever.PyContextRetriever`\n      - `automata.core.coding.py_coding.writer.PyCodeWriter`\n      - `automata.tests.unit.test_py_code_retriever.getter`\n      - `automata.core.coding.py_coding.navigation.find_syntax_tree_node`\n      - `automata.tests.unit.test_py_writer.python_writer`\n      \n      ## Example\n      \n      Below is an example demonstrating the use of `PyCodeRetriever` to retrieve the source code of a function from a specified module.\n      \n      ```python\n      from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      \n      module_tree_map = LazyModuleTreeMap.cached_default()\n      code_retriever = PyCodeRetriever(module_tree_map)\n      \n      module_dotpath = \"mymodule.example\"\n      object_path = \"ExampleClass.example_function\"\n      \n      source_code = code_retriever.get_source_code(module_dotpath, object_path)\n      print(source_code)\n      ```\n      \n      ## Limitations\n      \n      `PyCodeRetriever` assumes the project's modules are organized in a specific directory structure, following Python's package and module organization. It may not work correctly if the project structure deviates from this pattern. Additionally, `PyCodeRetriever` relies on the RedBaron library for parsing the code, which may have limitations in parsing some complex or unconventional code patterns.\n      \n      ## Follow-up Questions:\n      \n      - Can the class be extended to support other programming languages and code structures?\n      - Are there alternative libraries or approaches that could be used for parsing Python code, instead of RedBaron?\n      \n    Class Docstring:\n      Code retriever for fetching python code\n      \n    Methods:\n      def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n              self.module_tree_map = module_tree_map\n      \n          \n      def get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str:\n              \"\"\"\n              Gets the docstring for a specified module, class, or function/method\n      \n              Args:\n                  module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n                  object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                      (e.g. 'ClassName.method_name'). If None, the module-level docstring will be returned\n      \n              Returns:\n                  str: The docstring for the specified module, class, or function/method, or \"No Result Found.\"\n                      if not found\n              \"\"\"\n      \n              module = self.module_tree_map.fetch_module(module_dotpath)\n              if module:\n                  return PyCodeRetriever.get_docstring_from_node(\n                      find_syntax_tree_node(module, object_path)\n                  )\n              return NO_RESULT_FOUND_STR\n      \n          \n      @staticmethod\n          def get_docstring_from_node(node: Optional[FSTNode]) -> str:\n              \"\"\"\n              Gets the docstring from the specified node\n      \n              Args:\n                  node: The FST node to get the docstring from\n              \"\"\"\n              if not node:\n                  return NO_RESULT_FOUND_STR\n      \n              if isinstance(node, (ClassNode, DefNode, RedBaron)):\n                  filtered_nodes = node.filtered()  # get rid of extra whitespace\n                  if isinstance(filtered_nodes[0], StringNode):\n                      return filtered_nodes[0].value.replace('\"\"\"', \"\").replace(\"'''\", \"\")\n              return \"\"\n      \n          \n      def get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str:\n              \"\"\"\n              Gets code for a specified module, class, or function/method\n      \n              Args:\n                  module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n                  object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                      (e.g. 'ClassName.method_name'). If None, the entire module code will be returned\n      \n              Returns:\n                  str: The code for the specified module, class, or function/method, or \"No Result Found.\"\n                      if not found\n              \"\"\"\n      \n              module = self.module_tree_map.fetch_module(module_dotpath)\n              if module:\n                  result = find_syntax_tree_node(module, object_path)\n                  if result:\n                      return result.dumps()\n      \n              return NO_RESULT_FOUND_STR\n      \n          \n      def get_source_code_without_docstrings(\n              self, module_dotpath: str, object_path: Optional[str]\n          ) -> str:\n              \"\"\"\n              Gets code for a specified module, class, or function/method\n      \n              Args:\n                  module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n                  object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                      (e.g. 'ClassName.method_name'). If None, the entire module code will be returned\n      \n              Returns:\n                  str: The code for the specified module, class, or function/method, or \"No Result Found.\"\n                      if not found\n              \"\"\"\n      \n              def _remove_docstrings(node: FSTNode):\n                  \"\"\"\n                  Remove docstrings from the specified node, recursively\n      \n                  Args:\n                      node: The FST node\n                          to remove docstrings from\n                  \"\"\"\n      \n                  if isinstance(node, (DefNode, ClassNode, RedBaron)):\n                      filtered_node = node.filtered()\n                      if filtered_node and isinstance(filtered_node[0], StringNode):\n                          index = filtered_node[0].index_on_parent\n                          node.pop(index)\n                      child_nodes = node.find_all(lambda identifier: identifier in (\"def\", \"class\"))\n                      for child_node in child_nodes:\n                          if child_node is not node:\n                              _remove_docstrings(child_node)\n      \n              module = self.module_tree_map.fetch_module(module_dotpath)\n      \n              if module:\n                  module_copy = RedBaron(module.dumps())\n                  result = find_syntax_tree_node(module_copy, object_path)\n      \n                  if result:\n                      _remove_docstrings(result)\n                      return result.dumps()\n              return NO_RESULT_FOUND_STR\n      \n          \n  Building context for related symbols -\n  \n    automata.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter.__init__\n    \n      Class Docstring:\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n        Args:\n        python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.context.py_context.retriever.PyContextRetrieverConfig\n    \n        class PyContextRetrieverConfig:\n            \"\"\"The configuration for the PyContextRetriever\"\"\"\n        \n            def __init__(\n                self,\n                spacer: str = \"  \",\n                max_dependencies_to_process: int = 10,\n                max_related_symbols_to_process: int = 10,\n                model_name: str = \"gpt-4\",\n                max_context: int = 6_500,\n            ):\n                \"\"\"\n                Args:\n                    spacer (str): The string to use for indentation\n                    max_dependency_print_depth (int): The maximum depth to print dependencies\n                    max_recursion_depth (int): The maximum depth to recurse into dependencies\n                    max_related_symbols_to_process (int): The number of nearest symbols to print\n                \"\"\"\n                self.spacer = spacer\n                self.max_dependencies_to_process = max_dependencies_to_process\n                self.max_related_symbols_to_process = max_related_symbols_to_process\n                self.model_name = model_name\n                self.max_context = max_context\n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_code_no_docstring_no_code\n    \n        def test_get_code_no_docstring_no_code(getter):\n            module_name = \"sample\"\n            object_path = \"EmptyClass\"\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = \"class EmptyClass:\\n    pass\\n\\n\\n\"\n            assert result == expected_match\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.coding.py_coding.navigation.find_syntax_tree_node\n    \n      Class Docstring:\n        Find a module, or find a function, method, or class inside a module.\n        \n        Args:\n        code_obj (RedBaron): The  red baron FST object.\n        object_path (Optional[str]): The dot-separated object path (e.g., 'ClassName.method_name'). If None,\n        the module is returned.\n        \n        Returns:\n        Optional[Union[Def, Class, Module]]: The found def, or class node, or None if not found.\n        \n      Methods:\n        find_syntax_tree_node(code_obj: Optional[Union[RedBaron, ClassNode]], object_path: Optional[str]\n        ) -> Optional[Union[Node, RedBaron]]\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.cached_default\n    \n      Class Docstring:\n        Creates a new LazyModuleTreeMap instance with the default root path\n        \n      Methods:\n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n        The `LazyModuleTreeMap` class is a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching the modules in memory as they are accessed. It provides methods for fetching existing module dotpaths and filepaths, as well as fetching, putting, and updating modules by their dotpaths. However, it assumes a specific directory structure according to the `DotPathMap` class and does not support custom directory structures for modules.\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.utils import root_fpath\n        \n        path_to_root = root_fpath()\n        module_tree_map = LazyModuleTreeMap(path_to_root)\n        \n        # Fetch an existing module by its dotpath\n        module_dotpath = \"automata.core.agent.automata_agent\"\n        module = module_tree_map.fetch_module(module_dotpath)\n        \n        # Check if a module with the given dotpath exists\n        exists = module_dotpath in module_tree_map\n        ```\n        \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.fetch_module\n    \n      Class Docstring:\n        Gets the module with the given dotpath\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        \n        Returns:\n        Optional[RedBaron]: The module with the given dotpath if found, None otherwise\n        \n      Methods:\n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.py_coding.writer`/PyCodeWriter#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PyCodeWriter\n\n`PyCodeWriter` is a utility class for writing and updating Python code in the Abstract Syntax Tree (AST) format. It provides an interface for creating a new Python module, updating an existing one by adding or removing a class or function, and writing the updated module to disk.\n\nThe primary use case for `PyCodeWriter` is to enable programmatic manipulation of Python code, including adding, updating, or deleting elements like classes, functions, and imports.\n\n## Overview\n\nThe main functionality provided by `PyCodeWriter` includes:\n\n- Initializing with a `PyCodeRetriever` instance, which is used for fetching Python code.\n- Creating a new module object from source code.\n- Updating an existing module with new or modified code.\n- Writing the updated module to disk.\n\n## Related Symbols\n\n- `automata.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.tests.unit.test_py_writer.python_writer`\n- `automata.core.coding.py_coding.writer.PyDocWriter`\n- `automata.core.context.py_context.retriever.PyContextRetriever`\n- `automata.tests.unit.test_py_code_retriever.getter`\n\n## Example\n\nThe following is an example demonstrating how to create a new module, update it by adding a new function, and write the updated module to disk.\n\n```python\nfrom automata.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata.core.coding.py_coding.writer import PyCodeWriter\n\n# Initialize the PyCodeWriter with a PyCodeRetriever instance\nretriever = PyCodeRetriever()\nwriter = PyCodeWriter(retriever)\n\n# Create a new module object from source code\nmodule_dotpath = \"my_module\"\nsource_code = \"def hello():\\n    print('Hello, World!')\\n\"\nwriter.create_new_module(module_dotpath, source_code)\n\n# Update the existing module by adding a new function\nnew_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\nwriter.update_existing_module(module_dotpath, new_function_code, do_write=True)\n```\n\n## Limitations\n\nThe primary limitation of `PyCodeWriter` is the reliance on RedBaron for the manipulation of the Abstract Syntax Tree. RedBaron has some known limitations and bugs that may affect parsing and generating code correctly in some cases. Additionally, the support for the RedBaron library has been relatively low in recent years, which may result in potential issues remaining unfixed.\n\nAnother limitation of `PyCodeWriter` is its current error reporting, which could be improved to provide more meaningful error messages and guidance for resolving issues.\n\n## Follow-up Questions:\n\n- What alternative libraries or frameworks could be used to overcome the limitations of RedBaron?\n- How can error reporting be improved in `PyCodeWriter` for better user experience?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class PyCodeWriter:\n    \"\"\"A utility class for writing Python code along AST nodes\"\"\"\n\n    class ModuleNotFound(Exception):\n        \"\"\"Raised when a module is not found in the module dictionary\"\"\"\n\n        pass\n\n    class ClassOrFunctionNotFound(Exception):\n        \"\"\"Raised when a class or function is not found in the module\"\"\"\n\n        pass\n\n    class InvalidArguments(Exception):\n        \"\"\"Raised when invalid arguments are passed to a method\"\"\"\n\n        pass\n\n    def __init__(self, python_retriever: PyCodeRetriever):\n        \"\"\"\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n\n        Args:\n            python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \"\"\"\n        self.code_retriever = python_retriever\n\n    def create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False):\n        \"\"\"\n        Create a new module object from source code\n\n        Args:\n            source_code (str): The source code of the module\n            module_dotpath (str): The path of the module\n\n        Returns:\n            RedBaron: The created module object\n        \"\"\"\n        self._create_module_from_source_code(module_dotpath, source_code)\n        if do_write:\n            self._write_module_to_disk(module_dotpath)\n\n    def update_existing_module(\n        self,\n        module_dotpath: str,\n        source_code: str,\n        disambiguator: Optional[str] = \"\",\n        do_write: bool = False,\n    ):\n        \"\"\"\n        Update code or insert new code into an existing module\n\n        Args:\n            source_code (str): The source code of the part of the module that needs to be\n            updated or insert module_dotpath (str): The path of the module\n            disambiguator (Optional[str]): The name of the class or function scope where\n                the update should be applied, will default to module\n            do_write (bool): Write the module to disk after updating\n\n        Returns:\n            RedBaron: The updated module object\n\n        Raises:\n            ModuleNotFound: If the module is not found in the module dictionary\n        \"\"\"\n        module_obj = self.code_retriever.module_tree_map.fetch_module(module_dotpath)\n        if not module_obj:\n            raise PyCodeWriter.ModuleNotFound(\n                f\"Module not found in module dictionary: {module_dotpath}\"\n            )\n        PyCodeWriter._update_existing_module(\n            source_code,\n            module_dotpath,\n            module_obj,\n            disambiguator=disambiguator,\n        )\n        if do_write:\n            self._write_module_to_disk(module_dotpath)\n\n    def delete_from_existing__module(\n        self, module_dotpath: str, object_dotpath: str, do_write: bool = False\n    ):\n        \"\"\"\n        Reduce an existing module by removing a class or function\n\n        Args:\n            module_dotpath (str): The path of the module\n            object_dotpath (str): The name of the class or function to remove, including\n                the name of the scope it is in, like ClassName.function_name\n            do_write (bool): Write the module to disk after updating\n\n        Returns:\n            RedBaron: The module object\n\n        Raises:\n            ModuleNotFound: If the module is not found in the module dictionary\n        \"\"\"\n        module_obj = self.code_retriever.module_tree_map.fetch_module(module_dotpath)\n        if not module_obj:\n            raise PyCodeWriter.ModuleNotFound(\n                f\"Module not found in module dictionary: {module_dotpath}\"\n            )\n        node = find_syntax_tree_node(module_obj, object_dotpath)\n        if node:\n            PyCodeWriter._delete_node(node)\n            if do_write:\n                self._write_module_to_disk(module_dotpath)\n\n    def _write_module_to_disk(self, module_dotpath: str):\n        \"\"\"\n        Write the modified module to a file at the specified output path\n\n        Args:\n            module_dotpath (str)\n\n        Raises:\n            ModuleNotFound: If the module is not found in the module dictionary\n        \"\"\"\n        if module_dotpath not in self.code_retriever.module_tree_map:\n            raise PyCodeWriter.ModuleNotFound(\n                f\"Module not found in module dictionary: {module_dotpath}\"\n            )\n        source_code = self.code_retriever.get_source_code(module_dotpath)\n        module_fpath = self.code_retriever.module_tree_map.fetch_existing_module_fpath_by_dotpath(\n            module_dotpath\n        )\n\n        if not module_fpath:\n            raise PyCodeWriter.ModuleNotFound(\n                f\"Module fpath found in module map for dotpath: {module_dotpath}\"\n            )\n        module_fpath = cast(str, module_fpath)\n        with open(module_fpath, \"w\") as output_file:\n            output_file.write(source_code)\n        subprocess.run([\"black\", module_fpath])\n        subprocess.run([\"isort\", module_fpath])\n\n    def _create_module_from_source_code(self, module_dotpath: str, source_code: str) -> RedBaron:\n        \"\"\"\n        Create a Python module from the given source code string\n\n        Args:\n            module_dotpath (str): The path where the new module will be created\n\n        Returns:\n            RedBaron: The created module object\n        \"\"\"\n        parsed = RedBaron(source_code)\n        self.code_retriever.module_tree_map.put_module(module_dotpath, parsed)\n        return parsed\n\n    @staticmethod\n    def _update_existing_module(\n        source_code: str,\n        module_dotpath: str,\n        existing_module_obj: RedBaron,\n        disambiguator: Optional[str],\n    ):\n        \"\"\"\n        Update a module object according to the received code\n\n        Args:\n            source_code (str): The code containing the updates\n            module_dotpath (str): The relative path to the module\n            existing_module_obj Module: The module object to be updated\n            disambiguator (str): The name of the class or function scope to\n                be updated, useful for nested definitions\n\n        Raises:\n            ClassOrFunctionNotFound: If the disambiguator is not found\n        \"\"\"\n\n        new_fst = RedBaron(source_code)\n        new_import_nodes = find_import_syntax_tree_nodes(new_fst)\n        PyCodeWriter._update_imports(existing_module_obj, new_import_nodes)\n\n        new_class_or_function_nodes = find_all_function_and_class_syntax_tree_nodes(new_fst)\n        if disambiguator:  # splice the class\n            disambiguator_node = find_syntax_tree_node(existing_module_obj, disambiguator)\n            if isinstance(disambiguator_node, (ClassNode, DefNode)):\n                PyCodeWriter._update_node_with_children(\n                    new_class_or_function_nodes,\n                    disambiguator_node,\n                )\n            else:\n                raise PyCodeWriter.ClassOrFunctionNotFound(\n                    f\"Node {disambiguator} not found in module {module_dotpath}\"\n                )\n        PyCodeWriter._update_node_with_children(new_class_or_function_nodes, existing_module_obj)\n\n    @staticmethod\n    def _update_node_with_children(\n        class_or_function_nodes: NodeList,\n        node_to_update: Union[ClassNode, RedBaron],\n    ):\n        \"\"\"\n        Update a class object according to the received code\n\n        Args:\n            class_or_function_nodes (NodeList): The nodes to update\n            node_to_update (Union[ClassNode, RedBaron]): The node to update\n        \"\"\"\n        for new_node in class_or_function_nodes:\n            child_node_name = new_node.name\n            existing_node = find_syntax_tree_node(node_to_update, child_node_name)\n            if existing_node:\n                existing_node.replace(new_node)\n            else:\n                node_to_update.append(new_node)\n\n    @staticmethod\n    def _delete_node(node: Node):\n        \"\"\"\n        Delete a node from the FST\n\n        Args:\n            node (Node): The node to delete\n        \"\"\"\n        parent = node.parent\n        parent_index = node.index_on_parent\n        parent.pop(parent_index)\n\n    @staticmethod\n    def _clean_input_code(source_code: str) -> str:\n        \"\"\"\n        Take the input source code and remove formatting issues that will cause the FST to fail.\n\n        Args:\n            source_code (str): The source code to clean.\n\n        Returns:\n            str: The cleaned source code.\n        \"\"\"\n\n        def replace_newline_chars(input_str: str) -> str:\n            dummy_replacement_a = \"ZZ_^^_ZZ\"\n            dummy_replacement_b = \"QQ_^^_QQ\"\n\n            def replace(match):\n                text = match.group(0)\n                if text[0] == '\"' and text[-1] == '\"':\n                    return text\n                return text.replace(\"\\\\n\", \"\\n\")\n\n            pattern = \"(?x)\\n                '.*?'\\n                |\\n                \\\".*?\\\"\\n                |\\n                [^'\\\"]+\\n            \"\n            output_str = (\n                \"\".join(\n                    (\n                        replace(match)\n                        for match in re.finditer(\n                            pattern,\n                            input_str.replace('\"\"\"', dummy_replacement_a).replace(\n                                \"'''\", dummy_replacement_b\n                            ),\n                        )\n                    )\n                )\n                .replace(dummy_replacement_a, '\"\"\"')\n                .replace(dummy_replacement_b, \"'''\")\n            )\n            return output_str\n\n        source_code = replace_newline_chars(source_code)\n        source_code = re.sub('\\\\\\\\\\\\\"', '\"', source_code)\n        source_code = source_code.strip()\n        return source_code\n\n    @staticmethod\n    def _update_imports(module_obj: RedBaron, new_import_statements: NodeList):\n        \"\"\"\n        Manage the imports in the module\n\n        Args:\n            module_obj (RedBaron): The module object\n            new_import_statements (NodeList): The new import statements\n\n        \"\"\"\n        first_import = module_obj.find(lambda identifier: identifier in (\"import\", \"from_import\"))\n\n        for new_import_statement in new_import_statements:\n            existing_import_statement = find_import_syntax_tree_node_by_name(\n                module_obj, new_import_statement.name\n            )\n            if not existing_import_statement:\n                if first_import:\n                    first_import.insert_before(new_import_statement)  # we will run isort later\n                else:\n                    module_obj.insert(0, new_import_statement)\n\n\n", "summary": "PyCodeWriter is a utility class that enables programmatic manipulation of Python code in Abstract Syntax Tree (AST) format, including adding, updating, or deleting elements like classes, functions, and imports. It can create a new module, update an existing one by adding or removing a class or function, and write the updated module to disk. Its main functionality revolves around initializing with a `PyCodeRetriever` instance, creating a new module object from source code, and updating existing modules.\n\nHowever, PyCodeWriter has some limitations, such as its reliance on RedBaron for AST manipulation, which has known bugs and limited support. Additionally, its error reporting can be improved to provide more meaningful messages and guidance. Example usage of PyCodeWriter can be found in its documentation, including how to create a new module, update it by adding a new function, and write the updated module to disk.", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\n  Building context for primary symbol - automata.core.coding.py_coding.writer.PyCodeWriter -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata.core.coding.directory import DirectoryManager\n      from automata.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n      # PyCodeWriter\n      \n      `PyCodeWriter` is a utility class for writing and updating Python code in the Abstract Syntax Tree (AST) format. It provides an interface for creating a new Python module, updating an existing one by adding or removing a class or function, and writing the updated module to disk.\n      \n      The primary use case for `PyCodeWriter` is to enable programmatic manipulation of Python code, including adding, updating, or deleting elements like classes, functions, and imports.\n      \n      ## Overview\n      \n      The main functionality provided by `PyCodeWriter` includes:\n      \n      - Initializing with a `PyCodeRetriever` instance, which is used for fetching Python code.\n      - Creating a new module object from source code.\n      - Updating an existing module with new or modified code.\n      - Writing the updated module to disk.\n      \n      ## Related Symbols\n      \n      - `automata.tests.unit.test_py_writer.MockCodeGenerator`\n      - `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.tests.unit.test_py_writer.python_writer`\n      - `automata.core.coding.py_coding.writer.PyDocWriter`\n      - `automata.core.context.py_context.retriever.PyContextRetriever`\n      - `automata.tests.unit.test_py_code_retriever.getter`\n      \n      ## Example\n      \n      The following is an example demonstrating how to create a new module, update it by adding a new function, and write the updated module to disk.\n      \n      ```python\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.coding.py_coding.writer import PyCodeWriter\n      \n      # Initialize the PyCodeWriter with a PyCodeRetriever instance\n      retriever = PyCodeRetriever()\n      writer = PyCodeWriter(retriever)\n      \n      # Create a new module object from source code\n      module_dotpath = \"my_module\"\n      source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n      writer.create_new_module(module_dotpath, source_code)\n      \n      # Update the existing module by adding a new function\n      new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n      writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n      ```\n      \n      ## Limitations\n      \n      The primary limitation of `PyCodeWriter` is the reliance on RedBaron for the manipulation of the Abstract Syntax Tree. RedBaron has some known limitations and bugs that may affect parsing and generating code correctly in some cases. Additionally, the support for the RedBaron library has been relatively low in recent years, which may result in potential issues remaining unfixed.\n      \n      Another limitation of `PyCodeWriter` is its current error reporting, which could be improved to provide more meaningful error messages and guidance for resolving issues.\n      \n      ## Follow-up Questions:\n      \n      - What alternative libraries or frameworks could be used to overcome the limitations of RedBaron?\n      - How can error reporting be improved in `PyCodeWriter` for better user experience?\n      \n    Class Docstring:\n      A utility class for writing Python code along AST nodes\n      \n    Methods:\n      def __init__(self, python_retriever: PyCodeRetriever):\n              \"\"\"\n              Initialize the PyCodeWriter with a PyCodeRetriever instance\n      \n              Args:\n                  python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n              \"\"\"\n              self.code_retriever = python_retriever\n      \n          \n      def create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False):\n              \"\"\"\n              Create a new module object from source code\n      \n              Args:\n                  source_code (str): The source code of the module\n                  module_dotpath (str): The path of the module\n      \n              Returns:\n                  RedBaron: The created module object\n              \"\"\"\n              self._create_module_from_source_code(module_dotpath, source_code)\n              if do_write:\n                  self._write_module_to_disk(module_dotpath)\n      \n          \n      def delete_from_existing__module(\n              self, module_dotpath: str, object_dotpath: str, do_write: bool = False\n          ):\n              \"\"\"\n              Reduce an existing module by removing a class or function\n      \n              Args:\n                  module_dotpath (str): The path of the module\n                  object_dotpath (str): The name of the class or function to remove, including\n                      the name of the scope it is in, like ClassName.function_name\n                  do_write (bool): Write the module to disk after updating\n      \n              Returns:\n                  RedBaron: The module object\n      \n              Raises:\n                  ModuleNotFound: If the module is not found in the module dictionary\n              \"\"\"\n              module_obj = self.code_retriever.module_tree_map.fetch_module(module_dotpath)\n              if not module_obj:\n                  raise PyCodeWriter.ModuleNotFound(\n                      f\"Module not found in module dictionary: {module_dotpath}\"\n                  )\n              node = find_syntax_tree_node(module_obj, object_dotpath)\n              if node:\n                  PyCodeWriter._delete_node(node)\n                  if do_write:\n                      self._write_module_to_disk(module_dotpath)\n      \n          \n      def replace(match):\n                      text = match.group(0)\n                      if text[0] == '\"' and text[-1] == '\"':\n                          return text\n                      return text.replace(\"\\\\n\", \"\\n\")\n      \n                  \n      def replace_newline_chars(input_str: str) -> str:\n                  dummy_replacement_a = \"ZZ_^^_ZZ\"\n                  dummy_replacement_b = \"QQ_^^_QQ\"\n      \n                  def replace(match):\n                      text = match.group(0)\n                      if text[0] == '\"' and text[-1] == '\"':\n                          return text\n                      return text.replace(\"\\\\n\", \"\\n\")\n      \n                  pattern = \"(?x)\\n                '.*?'\\n                |\\n                \\\".*?\\\"\\n                |\\n                [^'\\\"]+\\n            \"\n                  output_str = (\n                      \"\".join(\n                          (\n                              replace(match)\n                              for match in re.finditer(\n                                  pattern,\n                                  input_str.replace('\"\"\"', dummy_replacement_a).replace(\n                                      \"'''\", dummy_replacement_b\n                                  ),\n                              )\n                          )\n                      )\n                      .replace(dummy_replacement_a, '\"\"\"')\n                      .replace(dummy_replacement_b, \"'''\")\n                  )\n                  return output_str\n      \n              \n      def update_existing_module(\n              self,\n              module_dotpath: str,\n              source_code: str,\n              disambiguator: Optional[str] = \"\",\n              do_write: bool = False,\n          ):\n              \"\"\"\n              Update code or insert new code into an existing module\n      \n              Args:\n                  source_code (str): The source code of the part of the module that needs to be\n                  updated or insert module_dotpath (str): The path of the module\n                  disambiguator (Optional[str]): The name of the class or function scope where\n                      the update should be applied, will default to module\n                  do_write (bool): Write the module to disk after updating\n      \n              Returns:\n                  RedBaron: The updated module object\n      \n              Raises:\n                  ModuleNotFound: If the module is not found in the module dictionary\n              \"\"\"\n              module_obj = self.code_retriever.module_tree_map.fetch_module(module_dotpath)\n              if not module_obj:\n                  raise PyCodeWriter.ModuleNotFound(\n                      f\"Module not found in module dictionary: {module_dotpath}\"\n                  )\n              PyCodeWriter._update_existing_module(\n                  source_code,\n                  module_dotpath,\n                  module_obj,\n                  disambiguator=disambiguator,\n              )\n              if do_write:\n                  self._write_module_to_disk(module_dotpath)\n      \n          \n  Building context for related symbols -\n  \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever\n    \n        `PyCodeRetriever` is a class designed to fetch Python code from a specified module, enabling the retrieval of source code, docstrings, and source code without docstrings for a given module, class, or function/method. Through methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it offers a way to programmatically analyze, extract, and comprehend Python projects. However, this class assumes a specific directory structure for the modules and relies on the RedBaron library for parsing, which may have limitations when parsing complex or unconventional code patterns.\n        \n        An example usage of `PyCodeRetriever` for retrieving the source code of a function from a specified module is as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        \n        module_tree_map = LazyModuleTreeMap.cached_default()\n        code_retriever = PyCodeRetriever(module_tree_map)\n        \n        module_dotpath = \"mymodule.example\"\n        object_path = \"ExampleClass.example_function\"\n        \n        source_code = code_retriever.get_source_code(module_dotpath, object_path)\n        print(source_code)\n        ```\n        \n        \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.core.coding.py_coding.writer.PyDocWriter\n    \n        PyDocWriter is a Python class designed to create documentation for modules, classes, and methods in a Python project using the Restructured Text (reST) format. It generates reST files for each key in the documentation dictionary, organizes them in the output directory, and allows customization of the output directory. However, PyDocWriter has certain limitations, such as assuming camel case naming convention for input symbols and lacking a fully functional summary generation function (`generate_summary`). An example usage of PyDocWriter can be seen below:\n        \n        ```python\n        from automata.core.coding.py_coding.writer import PyDocWriter\n        \n        base_path = \"path/to/project\"\n        docs_dir = \"path/to/output/docs\"\n        docs = {...}  # The documentation dictionary\n        symbols = [...]  # The symbols of the documentation dictionary\n        \n        doc_writer = PyDocWriter(base_path)\n        doc_writer.write_documentation(docs, symbols, docs_dir)\n        ```\n        \n      Class Docstring:\n        A class to write documentation for Python modules\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): The base path of the project\n                \"\"\"\n                self.base_path = base_path\n                self.directory_manager = DirectoryManager(base_path)\n        \n            \n        camel_to_snake(name: str) -> str\n        \n        check_camel_case(text: str) -> bool\n        \n        generate_index_files(self, docs_dir: str) -> None\n        \n        generate_module_summary(self, module_dir: str) -> None\n        \n        generate_rst_files(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n        generate_summary(content: str) -> str\n        \n        get_payload(directory: str) -> str\n        \n        write_documentation(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n    automata.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.put_module\n    \n      Class Docstring:\n        Put a module with the given dotpath in the map\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        module: The module to put in the map\n        \n      Methods:\n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata.core.coding.py_coding.navigation.find_all_function_and_class_syntax_tree_nodes\n    \n      Class Docstring:\n        Find all imports in a module.\n        \n        Args:\n        module (RedBaron): The module to search.\n        \n        Returns:\n        NodeList: A list of ClassNode and DefNode objects.\n        \n      Methods:\n        find_all_function_and_class_syntax_tree_nodes(module: RedBaron) -> NodeList\n        \n    automata.core.coding.py_coding.navigation.find_syntax_tree_node\n    \n      Class Docstring:\n        Find a module, or find a function, method, or class inside a module.\n        \n        Args:\n        code_obj (RedBaron): The  red baron FST object.\n        object_path (Optional[str]): The dot-separated object path (e.g., 'ClassName.method_name'). If None,\n        the module is returned.\n        \n        Returns:\n        Optional[Union[Def, Class, Module]]: The found def, or class node, or None if not found.\n        \n      Methods:\n        find_syntax_tree_node(code_obj: Optional[Union[RedBaron, ClassNode]], object_path: Optional[str]\n        ) -> Optional[Union[Node, RedBaron]]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.py_coding.writer`/PyCodeWriter#ClassOrFunctionNotFound#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "ClassOrFunctionNotFound", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PyCodeWriter\n\n`PyCodeWriter` is a utility class for writing Python code along Abstract Syntax Tree (AST) nodes. It builds on the `PyCodeRetriever` object and provides various methods for creating, updating, and deleting modules. The `PyCodeWriter` class can be extended to write documentation for Python modules and execute code generation tasks.\n\n## Overview\n\nThe main functionality of `PyCodeWriter` is centered around creating, updating, and deleting Python modules using AST nodes. It provides methods to perform these actions, such as `create_new_module`, `delete_from_existing_module`, and `update_existing_module`. The class is initialized with a `PyCodeRetriever` instance that retrieves Python code from modules and objects.\n\n## Related Symbols\n\n- `PyCodeRetriever`\n- `automata.tests.unit.test_py_writer.MockCodeGenerator`\n\n## Example\n\nThe following example demonstrates how to create an instance of `PyCodeWriter` with a `PyCodeRetriever` instance:\n\n```python\nfrom automata.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata.core.coding.py_coding.writer import PyCodeWriter\nfrom automata.core.coding.directory import DirectoryManager\n\npython_retriever = PyCodeRetriever(DirectoryManager().module_tree_map)\ncode_writer = PyCodeWriter(python_retriever)\n```\n\n## Limitations\n\n`PyCodeWriter` assumes that the provided module paths have the given structure and can only work on modules with that structure. This makes it less flexible for working with different modules' structures.\n\n## Follow-up Questions\n\n- Are there any plans to extend support for custom module structures in the future?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class ClassOrFunctionNotFound(Exception):\n        \"\"\"Raised when a class or function is not found in the module\"\"\"\n\n        pass\n\n    ", "summary": "PyCodeWriter is a utility class designed for writing Python code using Abstract Syntax Tree (AST) nodes. It builds upon the PyCodeRetriever object to create, update, and delete Python modules. PyCodeWriter can easily be extended for tasks such as writing documentation or generating code. To use PyCodeWriter, you'll need to initialize it with a PyCodeRetriever instance.\n\n```python\nfrom automata.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata.core.coding.py_coding.writer import PyCodeWriter\nfrom automata.core.coding.directory import DirectoryManager\n\npython_retriever = PyCodeRetriever(DirectoryManager().module_tree_map)\ncode_writer = PyCodeWriter(python_retriever)\n```\n\nNote that PyCodeWriter assumes a specific module structure, which can limit its flexibility for working with different module designs.", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\n  Building context for primary symbol - automata.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata.core.coding.directory import DirectoryManager\n      from automata.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n      # PyCodeWriter\n      \n      `PyCodeWriter` is a utility class for writing Python code along AST nodes. It builds on the `PyCodeRetriever` object and provides various methods for creating, updating, and deleting modules. The `PyCodeWriter` class can be extended to write documentation for Python modules and execute code generation tasks.\n      \n      ## Overview\n      \n      The main functionality of `PyCodeWriter` is centered around creating, updating, and deleting Python modules using AST nodes. It provides methods to perform these actions, such as `create_new_module`, `delete_from_existing_module`, and `update_existing_module`. The class is initialized with a `PyCodeRetriever` instance that retrieves Python code from modules and objects.\n      \n      ## Related Symbols\n      \n      - `PyCodeRetriever` \n      - `automata.tests.unit.test_py_writer.MockCodeGenerator`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `PyCodeWriter` with a `PyCodeRetriever` instance:\n      \n      ```python\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.coding.py_coding.writer import PyCodeWriter\n      from automata.core.coding.directory import DirectoryManager\n      \n      python_retriever = PyCodeRetriever(DirectoryManager().module_tree_map)\n      code_writer = PyCodeWriter(python_retriever)\n      ```\n      \n      ## Limitations\n      \n      `PyCodeWriter` assumes that the provided module paths have the given structure and can only work on modules with that structure. This makes it less flexible for working with different modules' structures.\n      \n      ## Follow-up Questions\n      \n      - Are there any plans to extend support for custom module structures in the future?\n      \n    Class Docstring:\n      Raised when a class or function is not found in the module\n      \n  Building context for related symbols -\n  \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever\n    \n        `PyCodeRetriever` is a class designed to fetch Python code from a specified module, enabling the retrieval of source code, docstrings, and source code without docstrings for a given module, class, or function/method. Through methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it offers a way to programmatically analyze, extract, and comprehend Python projects. However, this class assumes a specific directory structure for the modules and relies on the RedBaron library for parsing, which may have limitations when parsing complex or unconventional code patterns.\n        \n        An example usage of `PyCodeRetriever` for retrieving the source code of a function from a specified module is as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        \n        module_tree_map = LazyModuleTreeMap.cached_default()\n        code_retriever = PyCodeRetriever(module_tree_map)\n        \n        module_dotpath = \"mymodule.example\"\n        object_path = \"ExampleClass.example_function\"\n        \n        source_code = code_retriever.get_source_code(module_dotpath, object_path)\n        print(source_code)\n        ```\n        \n        \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.core.coding.py_coding.writer.PyDocWriter\n    \n        PyDocWriter is a Python class designed to create documentation for modules, classes, and methods in a Python project using the Restructured Text (reST) format. It generates reST files for each key in the documentation dictionary, organizes them in the output directory, and allows customization of the output directory. However, PyDocWriter has certain limitations, such as assuming camel case naming convention for input symbols and lacking a fully functional summary generation function (`generate_summary`). An example usage of PyDocWriter can be seen below:\n        \n        ```python\n        from automata.core.coding.py_coding.writer import PyDocWriter\n        \n        base_path = \"path/to/project\"\n        docs_dir = \"path/to/output/docs\"\n        docs = {...}  # The documentation dictionary\n        symbols = [...]  # The symbols of the documentation dictionary\n        \n        doc_writer = PyDocWriter(base_path)\n        doc_writer.write_documentation(docs, symbols, docs_dir)\n        ```\n        \n      Class Docstring:\n        A class to write documentation for Python modules\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): The base path of the project\n                \"\"\"\n                self.base_path = base_path\n                self.directory_manager = DirectoryManager(base_path)\n        \n            \n        camel_to_snake(name: str) -> str\n        \n        check_camel_case(text: str) -> bool\n        \n        generate_index_files(self, docs_dir: str) -> None\n        \n        generate_module_summary(self, module_dir: str) -> None\n        \n        generate_rst_files(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n        generate_summary(content: str) -> str\n        \n        get_payload(directory: str) -> str\n        \n        write_documentation(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.py_coding.writer`/PyCodeWriter#InvalidArguments#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "InvalidArguments", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PyCodeWriter\n\nPyCodeWriter is a utility class responsible for writing Python code along with the Abstract Syntax Tree (AST) nodes. It interacts with a PyCodeRetriever instance to write and update Python source code files. The class offers methods to create new Python modules, update existing modules with new code, and delete specific code from an existing module.\n\n## Related Symbols\n\n- `automata.core.coding.directory.DirectoryManager`\n- `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n\n## Import Statements\n\n```python\nimport logging\nimport os\nimport re\nimport subprocess\nimport numpy as np\nimport pypandoc\nfrom typing import Dict, List, Optional, Union, cast\nfrom redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\nfrom automata.core.coding.directory import DirectoryManager\nfrom automata.core.coding.py_coding.navigation import (\n    find_all_function_and_class_syntax_tree_nodes,\n    find_import_syntax_tree_node_by_name,\n    find_import_syntax_tree_nodes,\n    find_syntax_tree_node,\n)\nfrom automata.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n```\n\n## Example\n\nThe following example demonstrates how to use `PyCodeWriter` to create, update, and write to a Python module.\n\n```python\nfrom automata.tests.unit.test_py_writer import python_writer, MockCodeGenerator\n\n# Create a mock code generator\nmock_generator = MockCodeGenerator(\n    has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n)\nsource_code = mock_generator.generate_code()\n\n# Instantiate a PythonWriter with a PyCodeRetriever\npy_writer = python_writer()\n\n# Create a new Python module with the generated source code\npy_writer.create_new_module(\"sample_module\", source_code, do_write=True)\n\n# Update the existing Python module with new source code\nnew_generator = MockCodeGenerator(\n    has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n)\nnew_source_code = new_generator.generate_code()\npy_writer.update_existing_module(\n    source_code=new_source_code, module_dotpath=\"sample_module\", do_write=True\n)\n```\n\n## Limitations\n\nPyCodeWriter relies on the directory structure provided by `DirectoryManager`. It cannot create or update Python source code files that are outside of the directory specified in the `base_path` used to initialize `DirectoryManager`. Additionally, PyCodeWriter handles only Python source code files and cannot be used for other programming languages or file types.\n\n## Follow-up Questions:\n\n- What is the role of `PyCodeWriter` in writing documentation for Python modules?\n- How does `PyCodeWriter` handle different code styles or formatting?\n\n## InvalidArguments\n\nRaised when invalid arguments are passed to a method.", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class InvalidArguments(Exception):\n        \"\"\"Raised when invalid arguments are passed to a method\"\"\"\n\n        pass\n\n    ", "summary": "PyCodeWriter is a utility class designed to write Python code along with corresponding Abstract Syntax Tree (AST) nodes. It interacts with a PyCodeRetriever instance to create, update, and delete code in Python source files. The class provides methods to generate new Python modules, modify existing ones with additional code, and remove specific code sections from a module. PyCodeWriter relies on the directory structure provided by DirectoryManager and is limited to handling Python source code files within the specified directory.\n\nTo demonstrate its usage, a PythonWriter is instantiated with a PyCodeRetriever and the mock source code is used to create a new Python module called \"sample_module\". The module is then updated with new source code generated by another MockCodeGenerator. Note that PyCodeWriter is designed for handling Python source code files only and cannot be used with other programming languages or file types.", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\n  Building context for primary symbol - automata.core.coding.py_coding.writer.PyCodeWriter.InvalidArguments -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata.core.coding.directory import DirectoryManager\n      from automata.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n      # PyCodeWriter\n      \n      `PyCodeWriter` is a utility class responsible for writing Python code along with the Abstract Syntax Tree (AST) nodes. It interacts with a `PyCodeRetriever` instance to write and update Python source code files. The class offers methods to create new Python modules, update existing modules with new code, and delete specific code from an existing module.\n      \n      ## Related Symbols\n      \n      - `automata.core.coding.directory.DirectoryManager`\n      - `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n      \n      ## Import Statements\n      \n      ```python\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata.core.coding.directory import DirectoryManager\n      from automata.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      ```\n      \n      ## Example\n      \n      The following example demonstrates how to use `PyCodeWriter` to create, update, and write to a Python module.\n      \n      ```python\n      from automata.tests.unit.test_py_writer import python_writer, MockCodeGenerator\n      \n      # Create a mock code generator\n      mock_generator = MockCodeGenerator(\n          has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n      )\n      source_code = mock_generator.generate_code()\n      \n      # Instantiate a PythonWriter with a PyCodeRetriever\n      py_writer = python_writer()\n      \n      # Create a new Python module with the generated source code\n      py_writer.create_new_module(\"sample_module\", source_code, do_write=True)\n      \n      # Update the existing Python module with new source code\n      new_generator = MockCodeGenerator(\n          has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n      )\n      new_source_code = new_generator.generate_code()\n      py_writer.update_existing_module(\n          source_code=new_source_code, module_dotpath=\"sample_module\", do_write=True\n      )\n      ```\n      \n      ## Limitations\n      \n      `PyCodeWriter` relies on the directory structure provided by `DirectoryManager`. It cannot create or update Python source code files that are outside of the directory specified in the `base_path` used to initialize `DirectoryManager`. Additionally, `PyCodeWriter` handles only Python source code files and cannot be used for other programming languages or file types.\n      \n      ## Follow-up Questions:\n      \n      - What is the role of `PyCodeWriter` in writing documentation for Python modules?\n      - How does `PyCodeWriter` handle different code styles or formatting?\n      \n    Class Docstring:\n      Raised when invalid arguments are passed to a method\n      \n  Building context for related symbols -\n  \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever\n    \n        `PyCodeRetriever` is a class designed to fetch Python code from a specified module, enabling the retrieval of source code, docstrings, and source code without docstrings for a given module, class, or function/method. Through methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it offers a way to programmatically analyze, extract, and comprehend Python projects. However, this class assumes a specific directory structure for the modules and relies on the RedBaron library for parsing, which may have limitations when parsing complex or unconventional code patterns.\n        \n        An example usage of `PyCodeRetriever` for retrieving the source code of a function from a specified module is as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        \n        module_tree_map = LazyModuleTreeMap.cached_default()\n        code_retriever = PyCodeRetriever(module_tree_map)\n        \n        module_dotpath = \"mymodule.example\"\n        object_path = \"ExampleClass.example_function\"\n        \n        source_code = code_retriever.get_source_code(module_dotpath, object_path)\n        print(source_code)\n        ```\n        \n        \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.core.coding.py_coding.writer.PyDocWriter\n    \n        PyDocWriter is a Python class designed to create documentation for modules, classes, and methods in a Python project using the Restructured Text (reST) format. It generates reST files for each key in the documentation dictionary, organizes them in the output directory, and allows customization of the output directory. However, PyDocWriter has certain limitations, such as assuming camel case naming convention for input symbols and lacking a fully functional summary generation function (`generate_summary`). An example usage of PyDocWriter can be seen below:\n        \n        ```python\n        from automata.core.coding.py_coding.writer import PyDocWriter\n        \n        base_path = \"path/to/project\"\n        docs_dir = \"path/to/output/docs\"\n        docs = {...}  # The documentation dictionary\n        symbols = [...]  # The symbols of the documentation dictionary\n        \n        doc_writer = PyDocWriter(base_path)\n        doc_writer.write_documentation(docs, symbols, docs_dir)\n        ```\n        \n      Class Docstring:\n        A class to write documentation for Python modules\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): The base path of the project\n                \"\"\"\n                self.base_path = base_path\n                self.directory_manager = DirectoryManager(base_path)\n        \n            \n        camel_to_snake(name: str) -> str\n        \n        check_camel_case(text: str) -> bool\n        \n        generate_index_files(self, docs_dir: str) -> None\n        \n        generate_module_summary(self, module_dir: str) -> None\n        \n        generate_rst_files(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n        generate_summary(content: str) -> str\n        \n        get_payload(directory: str) -> str\n        \n        write_documentation(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.py_coding.writer`/PyCodeWriter#ModuleNotFound#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "ModuleNotFound", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PyCodeWriter\n\n`PyCodeWriter` is a utility class for writing Python code along Abstract Syntax Tree (AST) nodes. It provides methods for creating, updating, deleting, and manipulating source code in existing Python modules, as well as generating documentation. Working alongside the `PyCodeRetriever`, the `PyCodeWriter` allows for seamless manipulation and extraction of Python code.\n\n## Overview\n\nThe main functionality of `PyCodeWriter` is to work with source code within Python modules. It uses a `PyCodeRetriever` instance to handle code retrieval and manipulation. With this class, you can create new modules, update and delete from existing modules, and manage docstrings and import statements. Given the highly abstract nature of AST nodes, it is useful for code introspection and source-to-source transformations.\n\n## Related Symbols\n\n- `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata.core.coding.directory.DirectoryManager`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n\n## Example\n\nThe following example demonstrates how to create an instance of `PyCodeWriter` and use it to create a new module.\n\n```python\nfrom automata.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata.core.coding.py_coding.writer import PyCodeWriter\n\npython_retriever = PyCodeRetriever()  # create a PyCodeRetriever instance\ncode_writer = PyCodeWriter(python_retriever)  # initialize PyCodeWriter with the PyCodeRetriever instance\n\nsource_code = \"\"\"def foo():\n    return 'Hello, world!'\n\"\"\"\ncode_writer.create_new_module(\"sample_module\", source_code, do_write=True)\n```\n\n## Limitations\n\nThe primary limitation of the `PyCodeWriter` is that it assumes source code is structured in a certain way and adheres to certain coding patterns. It may not handle edge cases or unconventional coding structures well, resulting in either unexpected behavior or loss of functionality. An example of such a limitation is the handling of character encodings.\n\n## Follow-up Questions:\n\n- How does `PyCodeWriter` handle edge cases in the provided source code?\n- Are there any known issues or limitations with the manipulation of source code that may impact its functionality?\n- How does `PyCodeWriter` ensure compatibility with different Python versions and language features?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class ModuleNotFound(Exception):\n        \"\"\"Raised when a module is not found in the module dictionary\"\"\"\n\n        pass\n\n    ", "summary": "PyCodeWriter is a utility class designed for writing and manipulating Python code using Abstract Syntax Tree (AST) nodes. In conjunction with PyCodeRetriever, it allows for easy creation, updating, and deletion of source code in Python modules, as well as managing docstrings and import statements. However, PyCodeWriter assumes a certain structure and coding patterns in source code which may limit its handling of edge cases or unconventional coding structures. An example of using PyCodeWriter to create a new module is shown below:\n\n```python\nfrom automata.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata.core.coding.py_coding.writer import PyCodeWriter\n\npython_retriever = PyCodeRetriever()  # create a PyCodeRetriever instance\ncode_writer = PyCodeWriter(python_retriever)  # initialize PyCodeWriter with the PyCodeRetriever instance\n\nsource_code = \"\"\"def foo():\n    return 'Hello, world!'\n\"\"\"\ncode_writer.create_new_module(\"sample_module\", source_code, do_write=True)\n```", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\n  Building context for primary symbol - automata.core.coding.py_coding.writer.PyCodeWriter.ModuleNotFound -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata.core.coding.directory import DirectoryManager\n      from automata.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n      # PyCodeWriter\n      \n      `PyCodeWriter` is a utility class for writing Python code along Abstract Syntax Tree (AST) nodes. It provides methods for creating, updating, deleting, and manipulating source code in existing Python modules, as well as generating documentation. Working alongside the `PyCodeRetriever`, the `PyCodeWriter` allows for seamless manipulation and extraction of Python code.\n      \n      ## Overview\n      \n      The main functionality of `PyCodeWriter` is to work with source code within Python modules. It uses a `PyCodeRetriever` instance to handle code retrieval and manipulation. With this class, you can create new modules, update and delete from existing modules, and manage docstrings and import statements. Given the highly abstract nature of AST nodes, it is useful for code introspection and source-to-source transformations.\n      \n      ## Related Symbols\n      \n      - `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n      - `automata.core.coding.directory.DirectoryManager`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `PyCodeWriter` and use it to create a new module.\n      \n      ```python\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.coding.py_coding.writer import PyCodeWriter\n      \n      python_retriever = PyCodeRetriever()  # create a PyCodeRetriever instance\n      code_writer = PyCodeWriter(python_retriever)  # initialize PyCodeWriter with the PyCodeRetriever instance\n      \n      source_code = \"\"\"def foo():\n          return 'Hello, world!'\n      \"\"\"\n      code_writer.create_new_module(\"sample_module\", source_code, do_write=True)\n      ```\n      \n      ## Limitations\n      \n      The primary limitation of the `PyCodeWriter` is that it assumes source code is structured in a certain way and adheres to certain coding patterns. It may not handle edge cases or unconventional coding structures well, resulting in either unexpected behavior or loss of functionality. An example of such a limitation is the handling of character encodings.\n      \n      ## Follow-up Questions:\n      \n      - How does `PyCodeWriter` handle edge cases in the provided source code?\n      - Are there any known issues or limitations with the manipulation of source code that may impact its functionality?\n      - How does `PyCodeWriter` ensure compatibility with different Python versions and language features?\n      \n    Class Docstring:\n      Raised when a module is not found in the module dictionary\n      \n  Building context for related symbols -\n  \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever\n    \n        `PyCodeRetriever` is a class designed to fetch Python code from a specified module, enabling the retrieval of source code, docstrings, and source code without docstrings for a given module, class, or function/method. Through methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it offers a way to programmatically analyze, extract, and comprehend Python projects. However, this class assumes a specific directory structure for the modules and relies on the RedBaron library for parsing, which may have limitations when parsing complex or unconventional code patterns.\n        \n        An example usage of `PyCodeRetriever` for retrieving the source code of a function from a specified module is as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        \n        module_tree_map = LazyModuleTreeMap.cached_default()\n        code_retriever = PyCodeRetriever(module_tree_map)\n        \n        module_dotpath = \"mymodule.example\"\n        object_path = \"ExampleClass.example_function\"\n        \n        source_code = code_retriever.get_source_code(module_dotpath, object_path)\n        print(source_code)\n        ```\n        \n        \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.core.coding.py_coding.writer.PyDocWriter\n    \n        PyDocWriter is a Python class designed to create documentation for modules, classes, and methods in a Python project using the Restructured Text (reST) format. It generates reST files for each key in the documentation dictionary, organizes them in the output directory, and allows customization of the output directory. However, PyDocWriter has certain limitations, such as assuming camel case naming convention for input symbols and lacking a fully functional summary generation function (`generate_summary`). An example usage of PyDocWriter can be seen below:\n        \n        ```python\n        from automata.core.coding.py_coding.writer import PyDocWriter\n        \n        base_path = \"path/to/project\"\n        docs_dir = \"path/to/output/docs\"\n        docs = {...}  # The documentation dictionary\n        symbols = [...]  # The symbols of the documentation dictionary\n        \n        doc_writer = PyDocWriter(base_path)\n        doc_writer.write_documentation(docs, symbols, docs_dir)\n        ```\n        \n      Class Docstring:\n        A class to write documentation for Python modules\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): The base path of the project\n                \"\"\"\n                self.base_path = base_path\n                self.directory_manager = DirectoryManager(base_path)\n        \n            \n        camel_to_snake(name: str) -> str\n        \n        check_camel_case(text: str) -> bool\n        \n        generate_index_files(self, docs_dir: str) -> None\n        \n        generate_module_summary(self, module_dir: str) -> None\n        \n        generate_rst_files(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n        generate_summary(content: str) -> str\n        \n        get_payload(directory: str) -> str\n        \n        write_documentation(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.coding.py_coding.writer`/PyDocWriter#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyDocWriter", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PyDocWriter\n\n`PyDocWriter` is a class to write documentation for Python modules. It helps in generating the documentation files for specified modules or symbols in the Restructured Text (reST) format.\n\n## Overview\n\n`PyDocWriter` provides methods to generate documentation for the modules, classes, and methods within a Python project. It generates reST files for each key in the documentation dictionary and creates directory indices for reST files. You can customize the output directory for the generated documentation.\n\n## Related Symbols\n\n- `automata.core.coding.directory.DirectoryManager`\n- `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n\n## Example\n\nThe following example demonstrates how to create an instance of `PyDocWriter` and write documentation for the specified symbols.\n\n```python\nfrom automata.core.coding.py_coding.writer import PyDocWriter\n\nbase_path = \"path/to/project\"\ndocs_dir = \"path/to/output/docs\"\ndocs = {...}  # The documentation dictionary\nsymbols = [...]  # The symbols of the documentation dictionary\n\ndoc_writer = PyDocWriter(base_path)\ndoc_writer.write_documentation(docs, symbols, docs_dir)\n```\n\n## Limitations\n\nThe `PyDocWriter` assumes that the input symbols follow the camel case naming convention and will not generate documentation for symbols that do not meet this requirement. Additionally, the summary generation function (`generate_summary`) is currently a placeholder and does not generate a meaningful summary from the content.\n\n## Follow-up Questions:\n\n- How can we improve the `generate_summary` function to generate meaningful summaries from the content?\n- Are there any additional features planned for the `PyDocWriter` class?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class PyDocWriter:\n    \"\"\"A class to write documentation for Python modules\"\"\"\n\n    def __init__(self, base_path: str):\n        \"\"\"\n        Args:\n            base_path (str): The base path of the project\n        \"\"\"\n        self.base_path = base_path\n        self.directory_manager = DirectoryManager(base_path)\n\n    def generate_module_summary(self, module_dir: str):\n        \"\"\"\n        Function to generate a module-level summary. Here, we just assume that\n        all the .rst files in a directory correspond to the same module.\n        We read these files, use their content to generate a summary using\n        a language model and write this summary to the module's index.rst file.\n\n        Args:\n            module_dir (str): The directory of the module\n        \"\"\"\n        summary = \"\"\n        for file in self.directory_manager.get_files_in_dir(module_dir):\n            if file.endswith(\".rst\") and file != \"index.rst\":\n                with open(os.path.join(module_dir, file), \"r\") as f:\n                    content = f.read()\n                    summary += content + \"\\n\\n\"\n\n        summary = self.generate_summary(summary)\n\n        with open(os.path.join(module_dir, \"index.rst\"), \"a\") as f:\n            f.write(\"\\n\\n\" + summary)\n\n    def generate_rst_files(\n        self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str\n    ):\n        \"\"\"\n        Generate individual .rst files for each key (a key represents a module)\n            and updates the file structure.\n\n        Args:\n            docs (Dict[Any, Any]): The documentation dictionary\n            symbols (List[Any]): The symbols of the documentation dictionary\n            docs_dir (str): The output directory for the docs\n        \"\"\"\n        for symbol in np.array(symbols):\n            symbol_name = symbol.descriptors[-1].name\n\n            if symbol_name[0] == \"_\" or not PyDocWriter.check_camel_case(symbol_name):\n                continue\n\n            snaked_symbol_name = PyDocWriter.camel_to_snake(symbol_name)\n            module_dir = \"/\".join(symbol.dotpath.split(\".\")[1:-2])\n\n            new_module_dir = os.path.join(docs_dir, module_dir)\n            self.directory_manager.ensure_directory_exists(new_module_dir)\n\n            with open(os.path.join(new_module_dir, f\"{snaked_symbol_name}.rst\"), \"w\") as f:\n                try:\n                    doc_md_string = docs[symbol].embedding_source\n                    rst_string = pypandoc.convert_text(doc_md_string, \"rst\", format=\"md\")\n                    f.write(rst_string)\n                except Exception as e:\n                    print(f\"Error converting {symbol_name} to rst: {e}\")\n\n    def generate_index_files(self, docs_dir: str):\n        \"\"\"\n        Generate index files for each directory that\n            contains .rst files or subdirectories.\n\n        Args:\n            docs_dir (str): The output directory for the docs\n        \"\"\"\n        doc_directory_manager = DirectoryManager(docs_dir)\n        for root, dirs, _ in os.walk(docs_dir, topdown=False):\n            root_relative_to_base = os.path.relpath(root, start=docs_dir)\n            files = doc_directory_manager.get_files_in_dir(root_relative_to_base)\n            dirs = doc_directory_manager.get_subdirectories(root_relative_to_base)\n\n            rst_files = [f for f in files if f.endswith(\".rst\")]\n            root_dir_node = doc_directory_manager._get_node_for_path(\n                doc_directory_manager.root, root_relative_to_base\n            )\n\n            if rst_files or dirs:\n                with open(os.path.join(root, \"index.rst\"), \"w\") as index_file:\n                    index_file.write(PyDocWriter.get_payload(root))\n\n                    index_file.write(\".. toctree::\\n\")\n                    index_file.write(\n                        \"   :maxdepth: 2\\n\\n\"\n                        if not root_dir_node or root_dir_node.is_root_dir()  # type: ignore\n                        else \"   :maxdepth: 1\\n\\n\"\n                    )\n\n                    for sub_dir_ in sorted(dirs):\n                        index_file.write(f\"   {sub_dir_}/index\\n\")\n                    for file in sorted(rst_files):\n                        if file != \"index.rst\":\n                            index_file.write(f\"   {file[:-4]}\\n\")  # Remove .rst extension\n\n                self.generate_module_summary(root)\n\n    def write_documentation(\n        self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str\n    ):\n        \"\"\"\n        Generate the full documentation given the symbols and a directory.\n\n        Args:\n            docs (Dict[Any, Any]): The documentation dictionary\n            symbols (List[Any]): The symbols of the documentation dictionary\n            docs_dir (str): The relative directory\n        \"\"\"\n        self.generate_rst_files(docs, symbols, docs_dir)\n        self.generate_index_files(docs_dir)\n\n    @staticmethod\n    def get_payload(directory: str) -> str:\n        \"\"\"Returns a formatted string for the main body of the index.rst file.\"\"\"\n        payload = f\"\"\"{os.path.basename(directory)}\n{\"=\" * len(os.path.basename(directory))}\n\n**Automata** is a Python library for autonomous agents.\n\nCheck out the :doc:`usage` section for further information, including\nhow to :ref:`installation` the project.\n\n.. note::\n\n\"\"\"\n        return payload\n\n    @staticmethod\n    def generate_summary(content: str) -> str:\n        \"\"\"This method should implement the logic to generate summary from the content.\"\"\"\n        # TODO: Implement summary generation function.\n        return \"Summary of content\"\n\n    @staticmethod\n    def camel_to_snake(name: str) -> str:\n        \"\"\"\n        Converts a camel case string to snake case\n\n        Args:\n            name (str): The string to convert\n\n        Returns:\n            str: The converted string\n        \"\"\"\n\n        name = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", name)\n        name = re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", name)\n        return name.lower()\n\n    @staticmethod\n    def check_camel_case(text: str) -> bool:\n        \"\"\"\n        Checks if a string is camel case\n\n        Args:\n            text (str): The string to check\n\n        Returns:\n            bool: True if the string is camel case, False otherwise\n        \"\"\"\n        return text != text.lower() and text != text.upper() and \"_\" not in text\n", "summary": "PyDocWriter is a class designed to write documentation for Python modules in the Restructured Text (reST) format, providing methods to generate documentation for modules, classes, and methods within a given project. The generated reST files are organized with directory indices, and users can customize the output directory. However, PyDocWriter assumes that input symbols follow the camel case naming convention and its summary generation function (`generate_summary`) is still a placeholder.\n\nThe following example demonstrates the usage of PyDocWriter:\n```python\nfrom automata.core.coding.py_coding.writer import PyDocWriter\n\nbase_path = \"path/to/project\"\ndocs_dir = \"path/to/output/docs\"\ndocs = {...}  # The documentation dictionary\nsymbols = [...]  # The symbols of the documentation dictionary\n\ndoc_writer = PyDocWriter(base_path)\ndoc_writer.write_documentation(docs, symbols, docs_dir)\n```\nFuture improvements may include generating meaningful summaries from the content and possible additional features for the `PyDocWriter` class.", "context": "\n    Generate the documentation for PyDocWriter using the context shown below -\n  Building context for primary symbol - automata.core.coding.py_coding.writer.PyDocWriter -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata.core.coding.directory import DirectoryManager\n      from automata.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n      # PyDocWriter\n      \n      `PyDocWriter` is a class to write documentation for Python modules. It helps in generating the documentation files for specified modules or symbols in the Restructured Text (reST) format.\n      \n      ## Overview\n      \n      `PyDocWriter` provides methods to generate documentation for the modules, classes, and methods within a Python project. It generates reST files for each key in the documentation dictionary and creates directory indices for reST files. You can customize the output directory for the generated documentation.\n      \n      ## Related Symbols\n      \n      - `automata.core.coding.directory.DirectoryManager`\n      - `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `PyDocWriter` and write documentation for the specified symbols.\n      \n      ```python\n      from automata.core.coding.py_coding.writer import PyDocWriter\n      \n      base_path = \"path/to/project\"\n      docs_dir = \"path/to/output/docs\"\n      docs = {...}  # The documentation dictionary\n      symbols = [...]  # The symbols of the documentation dictionary\n      \n      doc_writer = PyDocWriter(base_path)\n      doc_writer.write_documentation(docs, symbols, docs_dir)\n      ```\n      \n      ## Limitations\n      \n      The `PyDocWriter` assumes that the input symbols follow the camel case naming convention and will not generate documentation for symbols that do not meet this requirement. Additionally, the summary generation function (`generate_summary`) is currently a placeholder and does not generate a meaningful summary from the content.\n      \n      ## Follow-up Questions:\n      \n      - How can we improve the `generate_summary` function to generate meaningful summaries from the content?\n      - Are there any additional features planned for the `PyDocWriter` class?\n      \n    Class Docstring:\n      A class to write documentation for Python modules\n      \n    Methods:\n      def __init__(self, base_path: str):\n              \"\"\"\n              Args:\n                  base_path (str): The base path of the project\n              \"\"\"\n              self.base_path = base_path\n              self.directory_manager = DirectoryManager(base_path)\n      \n          \n      @staticmethod\n          def camel_to_snake(name: str) -> str:\n              \"\"\"\n              Converts a camel case string to snake case\n      \n              Args:\n                  name (str): The string to convert\n      \n              Returns:\n                  str: The converted string\n              \"\"\"\n      \n              name = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", name)\n              name = re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", name)\n              return name.lower()\n      \n          \n      @staticmethod\n          def check_camel_case(text: str) -> bool:\n              \"\"\"\n              Checks if a string is camel case\n      \n              Args:\n                  text (str): The string to check\n      \n              Returns:\n                  bool: True if the string is camel case, False otherwise\n              \"\"\"\n              return text != text.lower() and text != text.upper() and \"_\" not in text\n      \n      def generate_index_files(self, docs_dir: str):\n              \"\"\"\n              Generate index files for each directory that\n                  contains .rst files or subdirectories.\n      \n              Args:\n                  docs_dir (str): The output directory for the docs\n              \"\"\"\n              doc_directory_manager = DirectoryManager(docs_dir)\n              for root, dirs, _ in os.walk(docs_dir, topdown=False):\n                  root_relative_to_base = os.path.relpath(root, start=docs_dir)\n                  files = doc_directory_manager.get_files_in_dir(root_relative_to_base)\n                  dirs = doc_directory_manager.get_subdirectories(root_relative_to_base)\n      \n                  rst_files = [f for f in files if f.endswith(\".rst\")]\n                  root_dir_node = doc_directory_manager._get_node_for_path(\n                      doc_directory_manager.root, root_relative_to_base\n                  )\n      \n                  if rst_files or dirs:\n                      with open(os.path.join(root, \"index.rst\"), \"w\") as index_file:\n                          index_file.write(PyDocWriter.get_payload(root))\n      \n                          index_file.write(\".. toctree::\\n\")\n                          index_file.write(\n                              \"   :maxdepth: 2\\n\\n\"\n                              if not root_dir_node or root_dir_node.is_root_dir()  # type: ignore\n                              else \"   :maxdepth: 1\\n\\n\"\n                          )\n      \n                          for sub_dir_ in sorted(dirs):\n                              index_file.write(f\"   {sub_dir_}/index\\n\")\n                          for file in sorted(rst_files):\n                              if file != \"index.rst\":\n                                  index_file.write(f\"   {file[:-4]}\\n\")  # Remove .rst extension\n      \n                      self.generate_module_summary(root)\n      \n          \n      def generate_module_summary(self, module_dir: str):\n              \"\"\"\n              Function to generate a module-level summary. Here, we just assume that\n              all the .rst files in a directory correspond to the same module.\n              We read these files, use their content to generate a summary using\n              a language model and write this summary to the module's index.rst file.\n      \n              Args:\n                  module_dir (str): The directory of the module\n              \"\"\"\n              summary = \"\"\n              for file in self.directory_manager.get_files_in_dir(module_dir):\n                  if file.endswith(\".rst\") and file != \"index.rst\":\n                      with open(os.path.join(module_dir, file), \"r\") as f:\n                          content = f.read()\n                          summary += content + \"\\n\\n\"\n      \n              summary = self.generate_summary(summary)\n      \n              with open(os.path.join(module_dir, \"index.rst\"), \"a\") as f:\n                  f.write(\"\\n\\n\" + summary)\n      \n          \n      def generate_rst_files(\n              self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str\n          ):\n              \"\"\"\n              Generate individual .rst files for each key (a key represents a module)\n                  and updates the file structure.\n      \n              Args:\n                  docs (Dict[Any, Any]): The documentation dictionary\n                  symbols (List[Any]): The symbols of the documentation dictionary\n                  docs_dir (str): The output directory for the docs\n              \"\"\"\n              for symbol in np.array(symbols):\n                  symbol_name = symbol.descriptors[-1].name\n      \n                  if symbol_name[0] == \"_\" or not PyDocWriter.check_camel_case(symbol_name):\n                      continue\n      \n                  snaked_symbol_name = PyDocWriter.camel_to_snake(symbol_name)\n                  module_dir = \"/\".join(symbol.dotpath.split(\".\")[1:-2])\n      \n                  new_module_dir = os.path.join(docs_dir, module_dir)\n                  self.directory_manager.ensure_directory_exists(new_module_dir)\n      \n                  with open(os.path.join(new_module_dir, f\"{snaked_symbol_name}.rst\"), \"w\") as f:\n                      try:\n                          doc_md_string = docs[symbol].embedding_source\n                          rst_string = pypandoc.convert_text(doc_md_string, \"rst\", format=\"md\")\n                          f.write(rst_string)\n                      except Exception as e:\n                          print(f\"Error converting {symbol_name} to rst: {e}\")\n      \n          \n      @staticmethod\n          def generate_summary(content: str) -> str:\n              \"\"\"This method should implement the logic to generate summary from the content.\"\"\"\n              # TODO: Implement summary generation function.\n              return \"Summary of content\"\n      \n          \n      @staticmethod\n          def get_payload(directory: str) -> str:\n              \"\"\"Returns a formatted string for the main body of the index.rst file.\"\"\"\n              payload = f\"\"\"{os.path.basename(directory)}\n      {\"=\" * len(os.path.basename(directory))}\n      \n      **Automata** is a Python library for autonomous agents.\n      \n      Check out the :doc:`usage` section for further information, including\n      how to :ref:`installation` the project.\n      \n      .. note::\n      \n      \"\"\"\n              return payload\n      \n          \n      def write_documentation(\n              self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str\n          ):\n              \"\"\"\n              Generate the full documentation given the symbols and a directory.\n      \n              Args:\n                  docs (Dict[Any, Any]): The documentation dictionary\n                  symbols (List[Any]): The symbols of the documentation dictionary\n                  docs_dir (str): The relative directory\n              \"\"\"\n              self.generate_rst_files(docs, symbols, docs_dir)\n              self.generate_index_files(docs_dir)\n      \n          \n  Building context for related symbols -\n  \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_docstring_no_docstring_class\n    \n        def test_get_docstring_no_docstring_class(getter):\n            module_name = \"sample\"\n            object_path = \"Person\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"This is a sample class.\"\n            assert result == expected_match\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass.InnerClass.inner_method\n    \n        def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_code_no_docstring_method\n    \n        def test_get_code_no_docstring_method(getter):\n            module_name = \"sample\"\n            object_path = \"Person.say_hello\"\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = 'def say_hello(self):\\n        return f\"Hello, I am {self.name}.\"\\n\\n    '\n            assert result == expected_match\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n  Building context for dependencies -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.coding.directory.DirectoryManager.get_files_in_dir\n    \n      Class Docstring:\n        Get a list of files in the given directory\n        \n        Args:\n        path (str): Path of the directory\n        \n        Returns:\n        List[str]: List of files in the directory\n        \n      Methods:\n        get_files_in_dir(self, path: str) -> List[str]\n        \n    automata.core.coding.directory.DirectoryManager.ensure_directory_exists\n    \n      Class Docstring:\n        Creates the directory if it does not exist already\n        \n        Args:\n        directory_path (str): Path of the directory to create\n        \n      Methods:\n        ensure_directory_exists(self, directory_path: str) -> None\n        \n    automata.core.coding.directory.DirectoryManager._get_node_for_path\n    \n      Class Docstring:\n        Find the node for a given path\n        \n        Args:\n        root (Directory): Root node of the tree\n        path (str): Path to find the node for\n        \n        Returns:\n        Optional[Node]: Node for the given path, None if not found\n        \n      Methods:\n    automata.core.symbol.symbol_types.SymbolDocEmbedding\n    \n        `SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class with added metadata such as source code, summary, and context. This class is utilized alongside `SymbolDocEmbeddingHandler` to manage and access these embeddings for tasks like search and similarity comparison. However, it relies on external handler classes and assumes embeddings are provided as NumPy arrays, potentially limiting usage for other embedding types.\n        \n        ```python\n        import numpy as np\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.symbol.symbol_types import SymbolDocEmbedding\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = Symbol.from_string(symbol_str)\n        \n        document = \"This is a sample document\"\n        vector = np.array([0.1, 0.2, 0.3])\n        source_code = \"class ActionIndicator(Enum): ...\"\n        summary = \"This class represents an enum for action indicators.\"\n        context = \"The ActionIndicator enum is used to describe the current state...\"\n        \n        embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                document: str,\n                vector: np.array,\n                source_code: Optional[str] = None,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, document, vector)\n                # begin additional meta data\n                self.source_code = source_code\n                self.summary = summary\n                self.context = context\n        \n    automata.core.coding.directory.DirectoryManager\n    \n        DirectoryManager is a utility class for handling directory structures, providing methods for creating directories and obtaining lists of files and subdirectories within a given directory. To create a DirectoryManager instance, simply import the class and initialize it with the base path of the desired directory structure. However, it has some limitations, such as assuming a specific directory structure based on the base path provided and not having error handling for incorrect or inaccessible paths. Here's an example usage:\n        \n        ```python\n        from automata.core.coding.directory import DirectoryManager\n        \n        # Creating a new directory\n        base_path = \"/path/to/base/directory\"\n        dm = DirectoryManager(base_path)\n        dm.ensure_directory_exists(\"new_directory\")\n        \n        # Retrieving the list of files and subdirectories in a given directory\n        files = dm.get_files_in_dir(\"new_directory\")\n        subdirs = dm.get_subdirectories(\"new_directory\")\n        print(\"Files:\", files)\n        print(\"Subdirectories:\", subdirs)\n        ```\n        \n        \n      Class Docstring:\n        Handles operations related to directory structure.\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): Base path of the directory structure\n                \"\"\"\n                self.root = self._load_directory_structure(base_path)\n        \n            \n        ensure_directory_exists(self, directory_path: str) -> None\n        \n        get_files_in_dir(self, path: str) -> List[str]\n        \n        get_subdirectories(self, path: str) -> List[str]\n        \n    automata.core.coding.directory.DirectoryManager.get_subdirectories\n    \n      Class Docstring:\n        Get a list of subdirectories in the given directory\n        \n        Args:\n        path (str): Path of the directory\n        \n        Returns:\n        List[str]: List of subdirectories in the directory\n        \n      Methods:\n        get_subdirectories(self, path: str) -> List[str]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.context.py_context.retriever`/PyContextRetriever#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.context.py_context.retriever", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyContextRetriever", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PyContextRetriever\n\n`PyContextRetriever` is a class used to retrieve the context of a symbol in a Python project. The retriever is capable of processing abstract syntax tree (AST) nodes of classes, methods, and module-level code to extract relevant information about the symbol. The PyContextRetriever is useful for generating detailed documentation and understanding the relationships between symbols in a codebase.\n\n## Overview\n\n`PyContextRetriever` operates on a `SymbolGraph` and takes in a configuration object `PyContextRetrieverConfig`. With these inputs, it offers several methods to process symbols, AST nodes of the methods and class docstrings, and related symbols. The main entry point for processing a symbol is the `process_symbol` method, which retrieves the context and stores it in the local message buffer.\n\n## Related Symbols\n\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.symbol_utils.convert_to_fst_object`\n\n## Usage Example\n\n```python\nfrom automata.core.context.py_context.retriever import PyContextRetriever\nfrom automata.core.symbol.graph import SymbolGraph\n\ngraph = SymbolGraph()\npy_context_retriever = PyContextRetriever(graph)\nsymbol = some_symbol\n\n# Process the context of the symbol\npy_context_retriever.process_symbol(symbol)\n\n# Retrieve the context buffer\ncontext_buffer = py_context_retriever.get_context_buffer()\n```\n\n## Limitations\n\n`PyContextRetriever` relies on the `SymbolGraph` and `PyContextRetrieverConfig` passed to it. It assumes that all symbols are represented in the `SymbolGraph` and that the configuration values are set correctly in the `PyContextRetrieverConfig`. Inaccuracies or errors in these inputs may lead to issues when processing symbols and their relationships.\n\n## Follow-up Questions:\n\n- What if symbol relationships in the `SymbolGraph` are not correctly defined?\n- How can we update or modify the `PyContextRetrieverConfig` after initializing the `PyContextRetriever`?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class PyContextRetriever:\n    \"\"\"The PyContextRetriever is used to retrieve the context of a symbol in a Python project\"\"\"\n\n    def __init__(\n        self,\n        graph: SymbolGraph,\n        config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n        doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n    ):\n        \"\"\"\n        Args:\n            graph (SymbolGraph): The symbol graph to use\n            config (PyContextRetrieverConfig): The configuration to use\n        \"\"\"\n        self.graph = graph\n        self.config = config\n        self.indent_level = 0\n        self.doc_embedding_db = doc_embedding_db\n        self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n\n        self.reset()\n\n    @contextmanager\n    def IndentManager(self):\n        \"\"\"A context manager to manage the indentation level\"\"\"\n        self.indent_level += 1\n        yield\n        self.indent_level -= 1\n\n    def process_message(self, message: str):\n        \"\"\"\n        Process a message by appending indentation and adding it to the message\n\n        Args:\n            message (str): The message to process\n        \"\"\"\n\n        def indent() -> str:\n            return self.config.spacer * self.indent_level\n\n        self.context += \"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n\n    def get_context_buffer(self) -> str:\n        \"\"\"\n        Get the context buffer\n\n        Returns:\n            str: The context buffer\n        \"\"\"\n        return self.context\n\n    def reset(self):\n        \"\"\"\n        Reset the retriever to its initial state\n        \"\"\"\n        self.context = \"\"\n        self.obs_symbols: Set[Symbol] = set([])\n        self.global_level = 0\n\n    def process_symbol(\n        self,\n        symbol: Symbol,\n        related_symbols: List[Symbol] = [],\n    ):\n        \"\"\"\n        Process the context of a symbol\n        Theh output is stored into the local message buffer\n\n        Args:\n            symbol (Symbol): The symbol to process\n            ranked_symbols (List[Symbol]): The list ranked symbols to use\n                with the nearest symbol processor\n        \"\"\"\n        with self.IndentManager():\n            self.process_headline(symbol)\n            self.process_ast(symbol)\n\n            if self._is_main_symbol():\n                related_symbols_processed = 0\n                self.process_message(f\"Building context for related symbols -\\n\")\n\n                for related_symbol in related_symbols:\n                    if related_symbols_processed >= self.config.max_related_symbols_to_process:\n                        break\n                    # Check that the related symbol passes filter requirements\n                    if not PyContextRetriever._pass_symbol_filter(symbol, related_symbol):\n                        continue\n                    \n                    if not self._below_context_limit():\n                            break\n\n                    if related_symbol not in self.obs_symbols:\n                        self.process_symbol(related_symbol)\n                        related_symbols_processed += 1\n\n                dependencies_processed = 0\n                self.process_message(f\"Building context for dependencies -\\n\")\n                all_dependencies = list(self.graph.get_symbol_dependencies(symbol))\n                filtered_dependencies = get_rankable_symbols(all_dependencies)\n\n                for dependency in filtered_dependencies:\n                    if dependencies_processed >= self.config.max_dependencies_to_process:\n                        break\n                    # Check that the dependency passes filter requirements\n                    if not PyContextRetriever._pass_symbol_filter(symbol, dependency):\n                        continue\n\n                    if not self._below_context_limit():\n                            break\n\n                    if dependency not in self.obs_symbols:\n                        try:\n                            self.process_symbol(dependency)\n                        except Exception as e:\n                            logger.error(f\"Failure processing dependent {dependency} with {e}\")\n                            continue\n                        dependencies_processed += 1\n\n        self.obs_symbols.add(symbol)\n\n    def process_headline(self, symbol: Symbol):\n        \"\"\"\n        Process the headline of a symbol\n\n        Args:\n            symbol (Symbol): The symbol to process\n        \"\"\"\n        # Print the headline\n        if self._is_main_symbol():\n            self.process_message(f\"Building context for primary symbol - {symbol.dotpath} -\\n\")\n        else:\n            self.process_message(f\"{symbol.dotpath}\\n\")\n\n    def process_ast(self, symbol: Symbol):\n        \"\"\"\n        Process the variables of a symbol\n\n        Args:\n            ast_object (RedBaron): The ast representation of the symbol\n        \"\"\"\n        ast_object = convert_to_fst_object(symbol)\n        is_main_symbol = self._is_main_symbol()\n        methods = sorted(ast_object.find_all(\"DefNode\"), key=lambda x: x.name)\n\n        with self.IndentManager():\n            if \"test\" in symbol.dotpath or \"Config\" in symbol.dotpath:\n                with self.IndentManager():\n                    self.process_message(f\"{ast_object.dumps()}\\n\")\n            else:\n                if is_main_symbol:\n                    self.process_imports(symbol)\n                self.process_documentation(symbol, is_main_symbol)\n\n                self.process_docstring(ast_object)\n\n                if len(methods) > 0:\n                    self.process_message(f\"Methods:\")\n                for method in methods:\n                    self.process_method(method, is_main_symbol)\n\n    def process_imports(self, symbol: Symbol):\n        \"\"\"\n        Process the imports of a symbol\n\n        Args:\n            symbol (Symbol): The symbol to process\n        \"\"\"\n        # Compute the file path from the symbol's path\n        file_path = os.path.join(\n            root_py_fpath(), \"..\", str(symbol.dotpath).replace(\".\", os.path.sep)\n        )\n        while not os.path.isdir(os.path.dirname(file_path)):\n            file_path = os.path.dirname(file_path)\n\n        # Load the source code with RedBaron\n        with open(file_path + \".py\", \"r\") as f:\n            red = RedBaron(f.read())\n\n        # Find and print import statements\n        imports = red.find_all(\"ImportNode\")\n        from_imports = red.find_all(\"FromImportNode\")\n        if len(imports) + len(from_imports) > 0:\n            self.process_message(\"Import Statements:\")\n            with self.IndentManager():\n                for import_node in imports + from_imports:\n                    self.process_message(str(import_node.dumps()))\n                self.process_message(\"\")  # Add an empty line for separation\n\n    def process_docstring(self, ast_object: RedBaron):\n        \"\"\"\n        Process the docstring of a symbol\n\n        Args:\n            ast_object (RedBaron): The ast representation of the symbol\n        \"\"\"\n        docstring = PyContextRetriever._get_docstring(ast_object)\n        # Print the docstring if it exists\n        if docstring:\n            self.process_message(\"Class Docstring:\")\n            with self.IndentManager():\n                self.process_message(docstring)\n                self.process_message(\"\")  # Add an empty line for separation\n\n    def process_documentation(self, symbol: Symbol, is_main_symbol: bool):\n        if self.doc_embedding_db is not None:\n            if self.doc_embedding_db.contains(symbol):\n                if is_main_symbol:\n                    document = self.doc_embedding_db.get(symbol).embedding_source\n                else:\n                    document = self.doc_embedding_db.get(symbol).summary\n                with self.IndentManager():\n                    self.process_message(document)\n                    self.process_message(\"\")  # Add an empty line for separation\n\n    def process_method(self, method: RedBaron, is_main_symbol: bool):\n        \"\"\"\n        Processes a specified method\n\n        Args:\n            method (RedBaron): The ast representation of the method\n        \"\"\"\n        if PyContextRetriever._is_private_method(method):\n            return\n        with self.IndentManager():\n            if is_main_symbol:\n                for code_line in method.dumps().split(\"\\n\"):\n                    self.process_message(code_line)\n            else:\n                if method.name == \"__init__\":\n                    for code_line in method.dumps().split(\"\\n\"):\n                        self.process_message(code_line)\n                else:\n                    method_definition = f\"{method.name}({method.arguments.dumps()})\"\n                    return_annotation = (\n                        method.return_annotation.dumps() if method.return_annotation else \"None\"\n                    )\n                    self.process_message(f\"{method_definition} -> {return_annotation}\\n\")\n\n    def _is_main_symbol(self) -> bool:\n        \"\"\"\n        Check if this is the main symbol call\n\n        Returns:\n            bool: True if this is the main symbol call, False otherwise\n\n        \"\"\"\n        return self.indent_level == 1\n\n    def _below_context_limit(self) -> bool:\n        \"\"\"\n        Check if we are below the context limit\n\n        Returns:\n            bool: True if we are below the context limit, False otherwise\n        \"\"\"\n        return len(self.encoding.encode(self.context)) < self.config.max_context\n    \n    @staticmethod\n    def _is_private_method(ast_object: RedBaron) -> bool:\n        \"\"\"\n        Check if the ast object is private\n\n        Args:\n            ast_object (RedBaron): The RedBaron object to check\n\n        Returns:\n            bool: True if the method is private, False otherwise\n        \"\"\"\n        return ast_object.name[0] == \"_\" and ast_object.name[1] != \"_\"\n\n    @staticmethod\n    def _get_docstring(ast_object) -> str:\n        \"\"\"\n        Get the docstring an ast object\n\n        Args:\n            ast_object (RedBaron): The RedBaron object to get the docstring from\n\n        Returns:\n            str: Newline separated docstring\n        \"\"\"\n\n        raw_doctring = PyCodeRetriever.get_docstring_from_node(ast_object).split(\"\\n\")\n        return \"\\n\".join([ele.strip() for ele in raw_doctring]).strip()\n\n    @staticmethod\n    def _pass_symbol_filter(primary_symbol: Symbol, secondary_symbol: Symbol) -> bool:\n        \"\"\"\n        Check if the symbol passes the filter on package and dotpath\n\n        Args:\n            primary_symbol (Symbol): The primary symbol\n            secondary_symbol (Symbol): The secondary symbol\n\n        Returns:\n            bool: True if the symbol passes the filter, False otherwise\n        \"\"\"\n\n        primary_symbol_dotpath = primary_symbol.dotpath\n        primary_package = primary_symbol_dotpath.split(\".\")[0]\n\n        secondary_symbol_dotpath = secondary_symbol.dotpath\n        secondary_package = secondary_symbol_dotpath.split(\".\")[0]\n        return not (\n            primary_symbol_dotpath in secondary_symbol_dotpath\n            or primary_package != secondary_package\n        )\n", "summary": "PyContextRetriever is a class for retrieving the context of symbols in a Python project by processing abstract syntax tree (AST) nodes of classes, methods, and module-level code. This class is particularly useful for generating detailed documentation and understanding the relationships between symbols in a codebase. PyContextRetriever operates on a SymbolGraph and takes in a PyContextRetrieverConfig configuration object. The main entry point for processing a symbol is the process_symbol method, which retrieves the context and stores it in the local message buffer. However, PyContextRetriever relies on the SymbolGraph and PyContextRetrieverConfig passed to it, and inaccuracies or errors in these inputs may lead to issues when processing symbols and their relationships.\n\nUsage Example:\n```python\nfrom automata.core.context.py_context.retriever import PyContextRetriever\nfrom automata.core.symbol.graph import SymbolGraph\n\ngraph = SymbolGraph()\npy_context_retriever = PyContextRetriever(graph)\nsymbol = some_symbol\n\n# Process the context of the symbol\npy_context_retriever.process_symbol(symbol)\n\n# Retrieve the context buffer\ncontext_buffer = py_context_retriever.get_context_buffer()\n```\n", "context": "\n    Generate the documentation for PyContextRetriever using the context shown below -\n  Building context for primary symbol - automata.core.context.py_context.retriever.PyContextRetriever -\n  \n    Import Statements:\n      import logging\n      import os\n      import tiktoken\n      from contextlib import contextmanager\n      from typing import List, Optional, Set\n      from redbaron import RedBaron\n      from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n      from automata.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata.core.symbol.graph import SymbolGraph\n      from automata.core.symbol.symbol_types import Symbol\n      from automata.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata.core.utils import root_py_fpath\n      \n      # PyContextRetriever\n      \n      `PyContextRetriever` is a class used to retrieve the context of a symbol in a Python project. The retriever is capable of processing abstract syntax tree (AST) nodes of classes, methods, and module-level code to extract relevant information about the symbol. The PyContextRetriever is useful for generating detailed documentation and understanding the relationships between symbols in a codebase.\n      \n      ## Overview\n      \n      `PyContextRetriever` operates on a `SymbolGraph` and takes in a configuration object `PyContextRetrieverConfig`. With these inputs, it offers several methods to process symbols, AST nodes of the methods and class docstrings, and related symbols. The main entry point for processing a symbol is the `process_symbol` method, which retrieves the context and stores it in the local message buffer.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.symbol_utils.convert_to_fst_object`\n      \n      ## Usage Example\n      \n      ```python\n      from automata.core.context.py_context.retriever import PyContextRetriever\n      from automata.core.symbol.graph import SymbolGraph\n      \n      graph = SymbolGraph()\n      py_context_retriever = PyContextRetriever(graph)\n      symbol = some_symbol\n      \n      # Process the context of the symbol\n      py_context_retriever.process_symbol(symbol)\n      \n      # Retrieve the context buffer\n      context_buffer = py_context_retriever.get_context_buffer()\n      ```\n      \n      ## Limitations\n      \n      `PyContextRetriever` relies on the `SymbolGraph` and `PyContextRetrieverConfig` passed to it. It assumes that all symbols are represented in the `SymbolGraph` and that the configuration values are set correctly in the `PyContextRetrieverConfig`. Inaccuracies or errors in these inputs may lead to issues when processing symbols and their relationships.\n      \n      ## Follow-up Questions:\n      \n      - What if symbol relationships in the `SymbolGraph` are not correctly defined?\n      - How can we update or modify the `PyContextRetrieverConfig` after initializing the `PyContextRetriever`?\n      \n    Class Docstring:\n      The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n      \n    Methods:\n      @contextmanager\n          def IndentManager(self):\n              \"\"\"A context manager to manage the indentation level\"\"\"\n              self.indent_level += 1\n              yield\n              self.indent_level -= 1\n      \n          \n      def __init__(\n              self,\n              graph: SymbolGraph,\n              config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n              doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n          ):\n              \"\"\"\n              Args:\n                  graph (SymbolGraph): The symbol graph to use\n                  config (PyContextRetrieverConfig): The configuration to use\n              \"\"\"\n              self.graph = graph\n              self.config = config\n              self.indent_level = 0\n              self.doc_embedding_db = doc_embedding_db\n              self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n      \n              self.reset()\n      \n          \n      def get_context_buffer(self) -> str:\n              \"\"\"\n              Get the context buffer\n      \n              Returns:\n                  str: The context buffer\n              \"\"\"\n              return self.context\n      \n          \n      def indent() -> str:\n                  return self.config.spacer * self.indent_level\n      \n              \n      def process_ast(self, symbol: Symbol):\n              \"\"\"\n              Process the variables of a symbol\n      \n              Args:\n                  ast_object (RedBaron): The ast representation of the symbol\n              \"\"\"\n              ast_object = convert_to_fst_object(symbol)\n              is_main_symbol = self._is_main_symbol()\n              methods = sorted(ast_object.find_all(\"DefNode\"), key=lambda x: x.name)\n      \n              with self.IndentManager():\n                  if \"test\" in symbol.dotpath or \"Config\" in symbol.dotpath:\n                      with self.IndentManager():\n                          self.process_message(f\"{ast_object.dumps()}\\n\")\n                  else:\n                      if is_main_symbol:\n                          self.process_imports(symbol)\n                      self.process_documentation(symbol, is_main_symbol)\n      \n                      self.process_docstring(ast_object)\n      \n                      if len(methods) > 0:\n                          self.process_message(f\"Methods:\")\n                      for method in methods:\n                          self.process_method(method, is_main_symbol)\n      \n          \n      def process_docstring(self, ast_object: RedBaron):\n              \"\"\"\n              Process the docstring of a symbol\n      \n              Args:\n                  ast_object (RedBaron): The ast representation of the symbol\n              \"\"\"\n              docstring = PyContextRetriever._get_docstring(ast_object)\n              # Print the docstring if it exists\n              if docstring:\n                  self.process_message(\"Class Docstring:\")\n                  with self.IndentManager():\n                      self.process_message(docstring)\n                      self.process_message(\"\")  # Add an empty line for separation\n      \n          \n      def process_documentation(self, symbol: Symbol, is_main_symbol: bool):\n              if self.doc_embedding_db is not None:\n                  if self.doc_embedding_db.contains(symbol):\n                      if is_main_symbol:\n                          document = self.doc_embedding_db.get(symbol).embedding_source\n                      else:\n                          document = self.doc_embedding_db.get(symbol).summary\n                      with self.IndentManager():\n                          self.process_message(document)\n                          self.process_message(\"\")  # Add an empty line for separation\n      \n          \n      def process_headline(self, symbol: Symbol):\n              \"\"\"\n              Process the headline of a symbol\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n              \"\"\"\n              # Print the headline\n              if self._is_main_symbol():\n                  self.process_message(f\"Building context for primary symbol - {symbol.dotpath} -\\n\")\n              else:\n                  self.process_message(f\"{symbol.dotpath}\\n\")\n      \n          \n      def process_imports(self, symbol: Symbol):\n              \"\"\"\n              Process the imports of a symbol\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n              \"\"\"\n              # Compute the file path from the symbol's path\n              file_path = os.path.join(\n                  root_py_fpath(), \"..\", str(symbol.dotpath).replace(\".\", os.path.sep)\n              )\n              while not os.path.isdir(os.path.dirname(file_path)):\n                  file_path = os.path.dirname(file_path)\n      \n              # Load the source code with RedBaron\n              with open(file_path + \".py\", \"r\") as f:\n                  red = RedBaron(f.read())\n      \n              # Find and print import statements\n              imports = red.find_all(\"ImportNode\")\n              from_imports = red.find_all(\"FromImportNode\")\n              if len(imports) + len(from_imports) > 0:\n                  self.process_message(\"Import Statements:\")\n                  with self.IndentManager():\n                      for import_node in imports + from_imports:\n                          self.process_message(str(import_node.dumps()))\n                      self.process_message(\"\")  # Add an empty line for separation\n      \n          \n      def process_message(self, message: str):\n              \"\"\"\n              Process a message by appending indentation and adding it to the message\n      \n              Args:\n                  message (str): The message to process\n              \"\"\"\n      \n              def indent() -> str:\n                  return self.config.spacer * self.indent_level\n      \n              self.context += \"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n      \n          \n      def process_method(self, method: RedBaron, is_main_symbol: bool):\n              \"\"\"\n              Processes a specified method\n      \n              Args:\n                  method (RedBaron): The ast representation of the method\n              \"\"\"\n              if PyContextRetriever._is_private_method(method):\n                  return\n              with self.IndentManager():\n                  if is_main_symbol:\n                      for code_line in method.dumps().split(\"\\n\"):\n                          self.process_message(code_line)\n                  else:\n                      if method.name == \"__init__\":\n                          for code_line in method.dumps().split(\"\\n\"):\n                              self.process_message(code_line)\n                      else:\n                          method_definition = f\"{method.name}({method.arguments.dumps()})\"\n                          return_annotation = (\n                              method.return_annotation.dumps() if method.return_annotation else \"None\"\n                          )\n                          self.process_message(f\"{method_definition} -> {return_annotation}\\n\")\n      \n          \n      def process_symbol(\n              self,\n              symbol: Symbol,\n              related_symbols: List[Symbol] = [],\n          ):\n              \"\"\"\n              Process the context of a symbol\n              Theh output is stored into the local message buffer\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n                  ranked_symbols (List[Symbol]): The list ranked symbols to use\n                      with the nearest symbol processor\n              \"\"\"\n              with self.IndentManager():\n                  self.process_headline(symbol)\n                  self.process_ast(symbol)\n      \n                  if self._is_main_symbol():\n                      related_symbols_processed = 0\n                      self.process_message(f\"Building context for related symbols -\\n\")\n      \n                      for related_symbol in related_symbols:\n                          if related_symbols_processed >= self.config.max_related_symbols_to_process:\n                              break\n                          # Check that the related symbol passes filter requirements\n                          if not PyContextRetriever._pass_symbol_filter(symbol, related_symbol):\n                              continue\n                          \n                          if not self._below_context_limit():\n                                  break\n      \n                          if related_symbol not in self.obs_symbols:\n                              self.process_symbol(related_symbol)\n                              related_symbols_processed += 1\n      \n                      dependencies_processed = 0\n                      self.process_message(f\"Building context for dependencies -\\n\")\n                      all_dependencies = list(self.graph.get_symbol_dependencies(symbol))\n                      filtered_dependencies = get_rankable_symbols(all_dependencies)\n      \n                      for dependency in filtered_dependencies:\n                          if dependencies_processed >= self.config.max_dependencies_to_process:\n                              break\n                          # Check that the dependency passes filter requirements\n                          if not PyContextRetriever._pass_symbol_filter(symbol, dependency):\n                              continue\n      \n                          if not self._below_context_limit():\n                                  break\n      \n                          if dependency not in self.obs_symbols:\n                              try:\n                                  self.process_symbol(dependency)\n                              except Exception as e:\n                                  logger.error(f\"Failure processing dependent {dependency} with {e}\")\n                                  continue\n                              dependencies_processed += 1\n      \n              self.obs_symbols.add(symbol)\n      \n          \n      def reset(self):\n              \"\"\"\n              Reset the retriever to its initial state\n              \"\"\"\n              self.context = \"\"\n              self.obs_symbols: Set[Symbol] = set([])\n              self.global_level = 0\n      \n          \n  Building context for related symbols -\n  \n    automata.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever\n    \n        `PyCodeRetriever` is a class designed to fetch Python code from a specified module, enabling the retrieval of source code, docstrings, and source code without docstrings for a given module, class, or function/method. Through methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it offers a way to programmatically analyze, extract, and comprehend Python projects. However, this class assumes a specific directory structure for the modules and relies on the RedBaron library for parsing, which may have limitations when parsing complex or unconventional code patterns.\n        \n        An example usage of `PyCodeRetriever` for retrieving the source code of a function from a specified module is as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        \n        module_tree_map = LazyModuleTreeMap.cached_default()\n        code_retriever = PyCodeRetriever(module_tree_map)\n        \n        module_dotpath = \"mymodule.example\"\n        object_path = \"ExampleClass.example_function\"\n        \n        source_code = code_retriever.get_source_code(module_dotpath, object_path)\n        print(source_code)\n        ```\n        \n        \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.core.coding.py_coding.writer.PyCodeWriter.__init__\n    \n      Class Docstring:\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n        Args:\n        python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata.core.symbol.symbol_types.SymbolDescriptor\n    \n        `SymbolDescriptor` is a Python class that wraps the descriptor component of a Universal Resource Identifier (URI) and represents various symbols such as local, namespace, type, method, term, macro, parameter, and type-parameter. It provides methods to convert the descriptor suffix from the URI representation to a Python representation, extract the escaped name from a string, and represent the object as a URI string. However, it may not support custom URI representations or descriptors that do not follow the predefined format and structure. For example, an instance of `SymbolDescriptor` can be created using a name, suffix, and an optional disambiguator like this:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolDescriptor\n        from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n        \n        name = \"example_descriptor\"\n        suffix = DescriptorProto.Type\n        disambiguator = \"example_disambiguator\"\n        \n        descriptor = SymbolDescriptor(name, suffix, disambiguator)\n        ```\n        \n        Follow-up questions include exploring ways to update `SymbolDescriptor` to handle custom URI representations or descriptors that do not follow the predefined format and understanding any precautions that need to be taken when using `SymbolDescriptor`.\n        \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.test_symbol_search.test_retrieve_source_code_by_symbol\n    \n        def test_retrieve_source_code_by_symbol(symbols, symbol_searcher):\n            with patch(\n                \"automata.core.symbol.search.symbol_search.convert_to_fst_object\",\n                return_value=\"module1\",\n            ) as mock_method:\n                result = symbol_searcher.retrieve_source_code_by_symbol(symbols[0].uri)\n                assert result == \"module1\"\n            mock_method.assert_called_once_with(symbols[0])\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.symbol.graph.SymbolGraph.get_symbol_dependencies\n    \n      Class Docstring:\n        Gets all symbols which contain a specified partial path\n        \n        Args:\n        partial_py_path (PyPath): The partial path to explain\n        Returns:\n        Set[Symbol]: Set of symbols that follow the partial path\n        \n      Methods:\n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever.get_docstring_from_node\n    \n      Class Docstring:\n        Gets the docstring from the specified node\n        \n        Args:\n        node: The FST node to get the docstring from\n        \n      Methods:\n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.context.py_context.retriever`/PyContextRetrieverConfig#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.context.py_context.retriever", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyContextRetrieverConfig", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PyContextRetrieverConfig\n\n`PyContextRetrieverConfig` is a configuration class for the `PyContextRetriever`, which helps retrieve the context of a symbol in a Python project. It contains various attributes such as `spacer`, `max_dependencies_to_process`, `max_related_symbols_to_process`, `model_name`, and others to control the behavior, settings, and resources used by the `PyContextRetriever`.\n\n## Overview\n\n`PyContextRetrieverConfig` provides a way to configure the indentation style, the maximum depth to print dependencies and recurse into dependencies, the number of nearest symbols to print, as well as the model name used for generating context with a specific model. This class provides a convenient way to customize the processing capabilities of the `PyContextRetriever`.\n\n## Related Symbols\n\n- `automata.core.context.py_context.retriever.PyContextRetriever`\n- `automata.core.symbol.graph.SymbolGraph`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `PyContextRetrieverConfig` with custom settings.\n\n```python\nfrom automata.core.context.py_context.retriever import PyContextRetrieverConfig\n\nconfig = PyContextRetrieverConfig(\n    spacer=\"  \",\n    max_dependencies_to_process=10,\n    max_related_symbols_to_process=10,\n    model_name=\"gpt-4\",\n    max_context=6_500,\n)\n```\n\n## Limitations\n\n`PyContextRetrieverConfig` relies on proper input values for its settings. Having erroneous input values can cause issues, such as incorrect context retrieval or errors in the `PyContextRetriever` operation.\n\n## Follow-up Questions:\n\n- Is there any validation needed for the input values provided to the `PyContextRetrieverConfig` class?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class PyContextRetrieverConfig:\n    \"\"\"The configuration for the PyContextRetriever\"\"\"\n\n    def __init__(\n        self,\n        spacer: str = \"  \",\n        max_dependencies_to_process: int = 10,\n        max_related_symbols_to_process: int = 10,\n        model_name: str = \"gpt-4\",\n        max_context: int = 6_500,\n    ):\n        \"\"\"\n        Args:\n            spacer (str): The string to use for indentation\n            max_dependency_print_depth (int): The maximum depth to print dependencies\n            max_recursion_depth (int): The maximum depth to recurse into dependencies\n            max_related_symbols_to_process (int): The number of nearest symbols to print\n        \"\"\"\n        self.spacer = spacer\n        self.max_dependencies_to_process = max_dependencies_to_process\n        self.max_related_symbols_to_process = max_related_symbols_to_process\n        self.model_name = model_name\n        self.max_context = max_context\n\n", "summary": "PyContextRetrieverConfig is a configuration class for the PyContextRetriever used to retrieve the context of a symbol in a Python project. It offers customization options for indentation style, maximum depth for dependencies, number of nearest symbols, and model name used to generate the context. By modifying its attributes such as spacer, max_dependencies_to_process, max_related_symbols_to_process, and others, users can control the behavior and resources of the PyContextRetriever. For example:\n\n```python\nfrom automata.core.context.py_context.retriever import PyContextRetrieverConfig\n\nconfig = PyContextRetrieverConfig(\n    spacer=\"  \",\n    max_dependencies_to_process=10,\n    max_related_symbols_to_process=10,\n    model_name=\"gpt-4\",\n    max_context=6_500,\n)\n```\n\nHowever, PyContextRetrieverConfig relies on proper input values, and erroneous inputs can cause incorrect context retrieval or operational errors in the PyContextRetriever.", "context": "\n    Generate the documentation for PyContextRetrieverConfig using the context shown below -\n  Building context for primary symbol - automata.core.context.py_context.retriever.PyContextRetrieverConfig -\n  \n      class PyContextRetrieverConfig:\n          \"\"\"The configuration for the PyContextRetriever\"\"\"\n      \n          def __init__(\n              self,\n              spacer: str = \"  \",\n              max_dependencies_to_process: int = 10,\n              max_related_symbols_to_process: int = 10,\n              model_name: str = \"gpt-4\",\n              max_context: int = 6_500,\n          ):\n              \"\"\"\n              Args:\n                  spacer (str): The string to use for indentation\n                  max_dependency_print_depth (int): The maximum depth to print dependencies\n                  max_recursion_depth (int): The maximum depth to recurse into dependencies\n                  max_related_symbols_to_process (int): The number of nearest symbols to print\n              \"\"\"\n              self.spacer = spacer\n              self.max_dependencies_to_process = max_dependencies_to_process\n              self.max_related_symbols_to_process = max_related_symbols_to_process\n              self.model_name = model_name\n              self.max_context = max_context\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever\n    \n        `PyCodeRetriever` is a class designed to fetch Python code from a specified module, enabling the retrieval of source code, docstrings, and source code without docstrings for a given module, class, or function/method. Through methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it offers a way to programmatically analyze, extract, and comprehend Python projects. However, this class assumes a specific directory structure for the modules and relies on the RedBaron library for parsing, which may have limitations when parsing complex or unconventional code patterns.\n        \n        An example usage of `PyCodeRetriever` for retrieving the source code of a function from a specified module is as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        \n        module_tree_map = LazyModuleTreeMap.cached_default()\n        code_retriever = PyCodeRetriever(module_tree_map)\n        \n        module_dotpath = \"mymodule.example\"\n        object_path = \"ExampleClass.example_function\"\n        \n        source_code = code_retriever.get_source_code(module_dotpath, object_path)\n        print(source_code)\n        ```\n        \n        \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata.core.context.py_context.retriever.PyContextRetriever.__init__\n    \n      Class Docstring:\n        Args:\n        graph (SymbolGraph): The symbol graph to use\n        config (PyContextRetrieverConfig): The configuration to use\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n    automata.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter.__init__\n    \n      Class Docstring:\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n        Args:\n        python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.database.provider`/SymbolDatabaseProvider#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.database.provider", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDatabaseProvider", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolDatabaseProvider\n\n`SymbolDatabaseProvider` is an abstract base class for database providers that handle symbol embedding storage and retrieval. The class defines a set of abstract methods for interacting with symbol embeddings, such as adding, updating, clearing, and retrieving embeddings from the database. Implementations of `SymbolDatabaseProvider` can utilize different storage methods, such as in-memory storage, file storage, or using external storage services. Related symbols include `automata.core.symbol.symbol_types.Symbol`, `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`, and `automata.core.database.vector.JSONVectorDatabase`.\n\n## Overview\n\nThe `SymbolDatabaseProvider` serves as a generic interface for managing database operations related to symbol embeddings. It provides a standardized way to interact with different types of databases, which allows for customization and flexibility in how symbol embeddings are stored and retrieved. The abstract base class ensures that all database implementations adhere to a consistent API. Subclasses may implement different storage mechanisms, which can be optimized for specific requirements or situations, while users can still interact with the database in a consistent way.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.core.database.vector.VectorDatabaseProvider`\n- `automata.core.embedding.embedding_types.EmbeddingProvider`\n- `automata.core.symbol.symbol_types.SymbolEmbedding`\n- `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n- `automata.core.symbol.symbol_types.SymbolDescriptor`\n\n## Example\n\nAn example implementation of `SymbolDatabaseProvider` using a JSON file for storage:\n\n```python\nfrom automata.core.database.provider import SymbolDatabaseProvider\nfrom automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n\nclass JSONSymbolDatabase(SymbolDatabaseProvider):\n\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n        # Initialize an empty list for storing SymbolEmbedding objects, and an empty dictionary for indexing.\n        self.data = []\n        self.index = {}\n\n    # Implement abstract methods as necessary for the specific storage method (e.g., adding, updating, clearing)\n```\n\n## Limitations\n\nSince `SymbolDatabaseProvider` is an abstract base class, it cannot be directly instantiated and requires the implementation of its abstract methods. Therefore, users need to subclass `SymbolDatabaseProvider` to provide their own database implementation with specific storage mechanisms. This allows for customization but might require users to have a deeper understanding of the underlying storage methods.\n\n## Follow-up Questions:\n\n- Are there any performance considerations or trade-offs when choosing different storage methods for `SymbolDatabaseProvider` implementations?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDatabaseProvider(abc.ABC):\n    \"\"\"\n    Abstract base class for different types of database providers.\n    \"\"\"\n\n    @abc.abstractmethod\n    def save(self):\n        \"\"\"\n        Abstract method to save data.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def load(self) -> Any:\n        \"\"\"\n        Abstract method to load data.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def add(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Abstract method to add an embedding to the database.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Abstract method to update an existing embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def discard(self, symbol: Symbol):\n        \"\"\"\n        Abstract method to discard a specific embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get(self, symbol: Symbol) -> Any:\n        \"\"\"\n        Abstract method to get a specific embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def clear(self):\n        \"\"\"\n        Abstract method to clear all embeddings.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def contains(self, symbol: Symbol) -> bool:\n        \"\"\"\n        Abstract method to check if a specific embedding is present.\n        \"\"\"\n        pass\n", "summary": "The SymbolDatabaseProvider is an abstract base class for managing symbol embedding storage and retrieval in databases. It offers a consistent API for interacting with different types of databases, allowing flexibility in storage methods such as in-memory, file or external storage services. To use it, users must subclass SymbolDatabaseProvider and implement its abstract methods for their chosen storage mechanism, providing customization based on their specific requirements while maintaining a standardized way of interaction.\n\nAs this is an abstract base class, direct instantiation is not possible, and users need to have a deeper understanding of the storage methods to implement their own database. For example, using a JSON file for storage:\n\n```python\nfrom automata.core.database.provider import SymbolDatabaseProvider\nfrom automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n\nclass JSONSymbolDatabase(SymbolDatabaseProvider):\n\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n        self.data = []\n        self.index = {}\n```\n\nWhen choosing different storage methods, there might be performance considerations or trade-offs involved, depending on the specific requirements and situations.", "context": "\n    Generate the documentation for SymbolDatabaseProvider using the context shown below -\n  Building context for primary symbol - automata.core.database.provider.SymbolDatabaseProvider -\n  \n    Import Statements:\n      import abc\n      from typing import Any\n      from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      \n      # SymbolDatabaseProvider\n      \n      `SymbolDatabaseProvider` is an abstract base class for database providers that handle symbol embedding storage and retrieval. The class defines a set of abstract methods for interacting with symbol embeddings, such as adding, updating, clearing, and retrieving embeddings from the database. Implementations of `SymbolDatabaseProvider` can utilize different storage methods, such as in-memory storage, file storage, or using external storage services. Related symbols include `automata.core.symbol.symbol_types.Symbol`, `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`, and `automata.core.database.vector.JSONVectorDatabase`.\n      \n      ## Overview\n      \n      The `SymbolDatabaseProvider` serves as a generic interface for managing database operations related to symbol embeddings. It provides a standardized way to interact with different types of databases, which allows for customization and flexibility in how symbol embeddings are stored and retrieved. The abstract base class ensures that all database implementations adhere to a consistent API. Subclasses may implement different storage mechanisms, which can be optimized for specific requirements or situations, while users can still interact with the database in a consistent way.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.core.database.vector.VectorDatabaseProvider`\n      - `automata.core.embedding.embedding_types.EmbeddingProvider`\n      - `automata.core.symbol.symbol_types.SymbolEmbedding`\n      - `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n      - `automata.core.symbol.symbol_types.SymbolDescriptor`\n      \n      ## Example\n      \n      An example implementation of `SymbolDatabaseProvider` using a JSON file for storage:\n      \n      ```python\n      from automata.core.database.provider import SymbolDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      \n      class JSONSymbolDatabase(SymbolDatabaseProvider):\n      \n          def __init__(self, file_path: str):\n              self.file_path = file_path\n              # Initialize an empty list for storing SymbolEmbedding objects, and an empty dictionary for indexing.\n              self.data = []\n              self.index = {}\n      \n          # Implement abstract methods as necessary for the specific storage method (e.g., adding, updating, clearing)\n      ```\n      \n      ## Limitations\n      \n      Since `SymbolDatabaseProvider` is an abstract base class, it cannot be directly instantiated and requires the implementation of its abstract methods. Therefore, users need to subclass `SymbolDatabaseProvider` to provide their own database implementation with specific storage mechanisms. This allows for customization but might require users to have a deeper understanding of the underlying storage methods.\n      \n      ## Follow-up Questions:\n      \n      - Are there any performance considerations or trade-offs when choosing different storage methods for `SymbolDatabaseProvider` implementations?\n      \n    Class Docstring:\n      Abstract base class for different types of database providers.\n      \n    Methods:\n      @abc.abstractmethod\n          def add(self, embedding: SymbolEmbedding):\n              \"\"\"\n              Abstract method to add an embedding to the database.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def clear(self):\n              \"\"\"\n              Abstract method to clear all embeddings.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def contains(self, symbol: Symbol) -> bool:\n              \"\"\"\n              Abstract method to check if a specific embedding is present.\n              \"\"\"\n              pass\n      \n      @abc.abstractmethod\n          def discard(self, symbol: Symbol):\n              \"\"\"\n              Abstract method to discard a specific embedding.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def get(self, symbol: Symbol) -> Any:\n              \"\"\"\n              Abstract method to get a specific embedding.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def load(self) -> Any:\n              \"\"\"\n              Abstract method to load data.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def save(self):\n              \"\"\"\n              Abstract method to save data.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def update(self, embedding: SymbolEmbedding):\n              \"\"\"\n              Abstract method to update an existing embedding.\n              \"\"\"\n              pass\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.database.vector.VectorDatabaseProvider\n    \n        `VectorDatabaseProvider` is an abstract base class designed for implementing custom vector database providers. It provides a basic structure for a vector storage system and requires subclasses to implement the `calculate_similarity()` and `get_all_symbols()` abstract methods. The former computes the similarity between a given vector and all stored vectors, while the latter retrieves a list of all symbols in the database. However, the base class does not offer built-in functionality for adding, updating, or removing symbols and their embeddings, requiring implementers to handle these operations themselves. A basic example implementation of the `VectorDatabaseProvider` class can be seen in the provided code snippet.\n        \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.embedding.embedding_types.SymbolEmbeddingHandler\n    \n        `SymbolEmbeddingHandler` is an abstract class that manages symbol embeddings by fetching and updating the vector embeddings related to various kinds of symbols. It must be subclassed by other classes that provide implementations of the defined abstract methods, such as `get_embedding()` and `update_embedding()`. The performance of these methods may depend on the chosen embedding provider and database used for storing the embeddings.\n        \n        Here is an example of how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n        \n        ```python\n        from automata.core.embedding.embedding_types import SymbolEmbeddingHandler\n        from automata.core.symbol.symbol_types import Symbol\n        \n        class CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n            def __init__(self, embedding_db, embedding_provider):\n                super().__init__(embedding_db, embedding_provider)\n        \n            def get_embedding(self, symbol: Symbol):\n                # Implement logic to get the embedding for a custom symbol\n                pass\n        \n            def update_embedding(self, symbol: Symbol):\n                # Implement logic to update the embedding for a custom symbol\n                pass\n        \n        # Example usage:\n        custom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\n        custom_embedding = custom_handler.get_embedding(custom_symbol)\n        ```\n        \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider\n        \n            \n        get_embedding(self, symbol: Symbol) -> Any\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.database.vector`/JSONVectorDatabase#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.database.vector", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "JSONVectorDatabase", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# JSONVectorDatabase\n\n`JSONVectorDatabase` is a concrete class to provide a vector database that saves into a JSON file. It is part of the Automata documentation processing pipeline and is responsible for loading, saving, adding, updating, and discarding SymbolEmbedding objects in a JSON file. The class also includes methods for calculating similarity between vectors and retrieving all symbols present in the database.\n\n## Related Symbols\n\n- `automata.core.database.provider.SymbolDatabaseProvider`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.symbol_types.SymbolEmbedding`\n- `numpy`\n\n## Example\n\nThe following example demonstrates how to initialize a `JSONVectorDatabase`, add and retrieve `SymbolEmbedding` objects from it, and save the database to a JSON file.\n\n```python\nfrom automata.core.database.vector import JSONVectorDatabase\nfrom automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\nimport numpy as np\n\n# Initialize the JSONVectorDatabase\nvector_db = JSONVectorDatabase(\"example_vector_db.json\")\n\n# Create SymbolEmbeddings\nsymbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\nembedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n\nsymbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\nembedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n\n# Add SymbolEmbeddings to the database\nvector_db.add(embedding_1)\nvector_db.add(embedding_2)\n\n# Retrieve embedding for a specific symbol\nretrieved_embedding = vector_db.get(symbol_1)\n\n# Save the vector database to a JSON file\nvector_db.save()\n```\n\n## Limitations\n\nThe class currently has a `NotImplementedError` for the `calculate_similarity` method, which means there is no logic implemented for calculating similarity between vectors. \n\n## Follow-up Questions:\n\n- What similarity measure should be used for calculating similarity between vectors in the database?\n- Is there a more efficient storage structure to use other than a JSON file?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class JSONVectorDatabase(VectorDatabaseProvider):\n    \"\"\"\n    Concrete class to provide a vector database that saves into a JSON file.\n    \"\"\"\n\n    def __init__(self, file_path: str):\n        \"\"\"\n        Args:\n            file_path: The path to the JSON file to save the vector database to\n        \"\"\"\n        self.file_path = file_path\n        self.data: List[SymbolEmbedding] = []\n        self.index: Dict[str, int] = {}\n        self.load()\n\n    def save(self):\n        \"\"\"Saves the vector database to the JSON file\"\"\"\n        with open(self.file_path, \"w\") as file:\n            encoded_data = jsonpickle.encode(self.data)\n            file.write(encoded_data)\n\n    def load(self):\n        \"\"\"Loads the vector database from the JSON file\"\"\"\n        try:\n            with open(self.file_path, \"r\") as file:\n                self.data = jsonpickle.decode(file.read())\n                # We index on the dotpath of the symbol, which is unique and indepenent of commit hash\n                self.index = {embedding.symbol.dotpath: i for i, embedding in enumerate(self.data)}\n        except FileNotFoundError:\n            logger.info(\"Creating new vector embedding db at %s\" % self.file_path)\n\n    def add(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Adds a new vector to the database\n\n        Args:\n            embedding: The vector to add\n        \"\"\"\n        self.data.append(embedding)\n        self.index[embedding.symbol.dotpath] = len(self.data) - 1\n\n    def update(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Updates an embedding in the database\n\n        Args:\n            embedding: The vector to update\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if embedding.symbol not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % embedding.symbol)\n        self.data[self.index[embedding.symbol.dotpath]] = embedding\n\n    def discard(self, symbol: Symbol):\n        \"\"\"\n        Discards a vector from the database\n\n        Args:\n            symbol: The symbol to discard\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if symbol.dotpath not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % symbol)\n        index = self.index[symbol.dotpath]\n        del self.data[index]\n        del self.index[symbol.dotpath]\n        # Recalculate indices after deletion\n        self.index = {embedding.symbol.dotpath: i for i, embedding in enumerate(self.data)}\n\n    def contains(self, symbol: Symbol) -> bool:\n        \"\"\"\n        Checks if the database contains a vector for the given symbol\n\n        Args:\n            symbol: The symbol to check\n\n        Returns:\n            True if the database contains a vector for the given symbol, False otherwise\n        \"\"\"\n        return symbol.dotpath in self.index\n\n    def get(self, symbol: Symbol) -> SymbolEmbedding:\n        \"\"\"\n        Gets the vector for the given symbol\n\n        Args:\n            symbol: The symbol to get the vector for\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if symbol.dotpath not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % symbol)\n        return self.data[self.index[symbol.dotpath]]\n\n    def clear(self):\n        \"\"\"Removes all vectors from the database\"\"\"\n        self.data = []\n        self.index = {}\n\n    def calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]:\n        # Implement the logic to calculate similarity between the given vector and vectors in the data.\n        # This will depend on how the data is structured and the specific similarity measure to be used (e.g., cosine similarity).\n        # Here, just returning the data as a placeholder.\n        # return self.data\n        raise NotImplementedError\n\n    def get_all_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Gets all symbols in the database\n\n        Returns:\n            A list of all symbols in the database\n        \"\"\"\n        symbol_list = [embedding.symbol for embedding in self.data]\n        return sorted(symbol_list, key=lambda x: str(x.dotpath))\n", "summary": "The `JSONVectorDatabase` class, part of the Automata documentation processing pipeline, provides a vector database that stores SymbolEmbedding objects in a JSON file. It handles loading, saving, adding, updating, and discarding these objects while offering methods for calculating similarity between vectors and retrieving all symbols in the database. However, the class currently has a `NotImplementedError` for the `calculate_similarity` method, indicating that similarity calculation logic has not been implemented yet. Possible follow-up questions include determining an appropriate similarity measure for comparing vectors in the database and considering more efficient storage structures aside from a JSON file.", "context": "\n    Generate the documentation for JSONVectorDatabase using the context shown below -\n  Building context for primary symbol - automata.core.database.vector.JSONVectorDatabase -\n  \n    Import Statements:\n      import abc\n      import logging\n      import logging.config\n      import jsonpickle\n      import numpy as np\n      from typing import Dict, List\n      from automata.core.database.provider import SymbolDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      \n      # JSONVectorDatabase\n      \n      `JSONVectorDatabase` is a concrete class to provide a vector database that saves into a JSON file. It is part of the Automata documentation processing pipeline and is responsible for loading, saving, adding, updating, and discarding SymbolEmbedding objects in a JSON file. The class also includes methods for calculating similarity between vectors and retrieving all symbols present in the database.\n      \n      ## Related Symbols\n      \n      - `automata.core.database.provider.SymbolDatabaseProvider`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.symbol_types.SymbolEmbedding`\n      - `numpy`\n      \n      ## Example\n      \n      The following example demonstrates how to initialize a `JSONVectorDatabase`, add and retrieve `SymbolEmbedding` objects from it, and save the database to a JSON file.\n      \n      ```python\n      from automata.core.database.vector import JSONVectorDatabase\n      from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      import numpy as np\n      \n      # Initialize the JSONVectorDatabase\n      vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n      \n      # Create SymbolEmbeddings\n      symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n      embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n      \n      symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n      embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n      \n      # Add SymbolEmbeddings to the database\n      vector_db.add(embedding_1)\n      vector_db.add(embedding_2)\n      \n      # Retrieve embedding for a specific symbol\n      retrieved_embedding = vector_db.get(symbol_1)\n      \n      # Save the vector database to a JSON file\n      vector_db.save()\n      ```\n      \n      ## Limitations\n      \n      The class currently has a `NotImplementedError` for the `calculate_similarity` method, which means there is no logic implemented for calculating similarity between vectors. \n      \n      ## Follow-up Questions:\n      \n      - What similarity measure should be used for calculating similarity between vectors in the database?\n      - Is there more efficient storage structure to use other than a JSON file?\n      \n    Class Docstring:\n      Concrete class to provide a vector database that saves into a JSON file.\n      \n    Methods:\n      def __init__(self, file_path: str):\n              \"\"\"\n              Args:\n                  file_path: The path to the JSON file to save the vector database to\n              \"\"\"\n              self.file_path = file_path\n              self.data: List[SymbolEmbedding] = []\n              self.index: Dict[str, int] = {}\n              self.load()\n      \n          \n      def add(self, embedding: SymbolEmbedding):\n              \"\"\"\n              Adds a new vector to the database\n      \n              Args:\n                  embedding: The vector to add\n              \"\"\"\n              self.data.append(embedding)\n              self.index[embedding.symbol.dotpath] = len(self.data) - 1\n      \n          \n      def calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]:\n              # Implement the logic to calculate similarity between the given vector and vectors in the data.\n              # This will depend on how the data is structured and the specific similarity measure to be used (e.g., cosine similarity).\n              # Here, just returning the data as a placeholder.\n              # return self.data\n              raise NotImplementedError\n      \n          \n      def clear(self):\n              \"\"\"Removes all vectors from the database\"\"\"\n              self.data = []\n              self.index = {}\n      \n          \n      def contains(self, symbol: Symbol) -> bool:\n              \"\"\"\n              Checks if the database contains a vector for the given symbol\n      \n              Args:\n                  symbol: The symbol to check\n      \n              Returns:\n                  True if the database contains a vector for the given symbol, False otherwise\n              \"\"\"\n              return symbol.dotpath in self.index\n      \n          \n      def discard(self, symbol: Symbol):\n              \"\"\"\n              Discards a vector from the database\n      \n              Args:\n                  symbol: The symbol to discard\n      \n              Raises:\n                  KeyError: If the symbol is not in the database\n              \"\"\"\n              if symbol.dotpath not in self.index:\n                  raise KeyError(\"Symbol %s not in database\" % symbol)\n              index = self.index[symbol.dotpath]\n              del self.data[index]\n              del self.index[symbol.dotpath]\n              # Recalculate indices after deletion\n              self.index = {embedding.symbol.dotpath: i for i, embedding in enumerate(self.data)}\n      \n          \n      def get(self, symbol: Symbol) -> SymbolEmbedding:\n              \"\"\"\n              Gets the vector for the given symbol\n      \n              Args:\n                  symbol: The symbol to get the vector for\n      \n              Raises:\n                  KeyError: If the symbol is not in the database\n              \"\"\"\n              if symbol.dotpath not in self.index:\n                  raise KeyError(\"Symbol %s not in database\" % symbol)\n              return self.data[self.index[symbol.dotpath]]\n      \n          \n      def get_all_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Gets all symbols in the database\n      \n              Returns:\n                  A list of all symbols in the database\n              \"\"\"\n              symbol_list = [embedding.symbol for embedding in self.data]\n              return sorted(symbol_list, key=lambda x: str(x.dotpath))\n      \n      def load(self):\n              \"\"\"Loads the vector database from the JSON file\"\"\"\n              try:\n                  with open(self.file_path, \"r\") as file:\n                      self.data = jsonpickle.decode(file.read())\n                      # We index on the dotpath of the symbol, which is unique and indepenent of commit hash\n                      self.index = {embedding.symbol.dotpath: i for i, embedding in enumerate(self.data)}\n              except FileNotFoundError:\n                  logger.info(\"Creating new vector embedding db at %s\" % self.file_path)\n      \n          \n      def save(self):\n              \"\"\"Saves the vector database to the JSON file\"\"\"\n              with open(self.file_path, \"w\") as file:\n                  encoded_data = jsonpickle.encode(self.data)\n                  file.write(encoded_data)\n      \n          \n      def update(self, embedding: SymbolEmbedding):\n              \"\"\"\n              Updates an embedding in the database\n      \n              Args:\n                  embedding: The vector to update\n      \n              Raises:\n                  KeyError: If the symbol is not in the database\n              \"\"\"\n              if embedding.symbol not in self.index:\n                  raise KeyError(\"Symbol %s not in database\" % embedding.symbol)\n              self.data[self.index[embedding.symbol.dotpath]] = embedding\n      \n          \n  Building context for related symbols -\n  \n    automata.tests.unit.test_database_vector.test_init_vector\n    \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n        \n    automata.tests.unit.test_database_vector.test_load\n    \n        def test_load(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n            vector_db_2 = JSONVectorDatabase(temp_output_filename)\n        \n            embedded_symbol_0 = vector_db_2.get(symbols[0])\n            embedded_symbol_1 = vector_db_2.get(symbols[1])\n        \n        \n    automata.tests.unit.test_database_vector.test_save\n    \n        def test_save(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n        \n        \n        \n    automata.tests.unit.test_database_vector.test_delete_symbol\n    \n        def test_delete_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol)\n            vector_db.discard(symbol)\n        \n        \n        \n        \n    automata.tests.unit.test_database_vector.test_add_symbols\n    \n        def test_add_symbols(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n        \n        \n        \n    automata.tests.unit.test_database_vector.test_add_symbol\n    \n        def test_add_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol)\n        \n        \n        \n        \n    automata.tests.unit.test_database_vector.test_lookup_symbol\n    \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.database.vector.VectorDatabaseProvider\n    \n        `VectorDatabaseProvider` is an abstract base class designed for implementing custom vector database providers. It provides a basic structure for a vector storage system and requires subclasses to implement the `calculate_similarity()` and `get_all_symbols()` abstract methods. The former computes the similarity between a given vector and all stored vectors, while the latter retrieves a list of all symbols in the database. However, the base class does not offer built-in functionality for adding, updating, or removing symbols and their embeddings, requiring implementers to handle these operations themselves. A basic example implementation of the `VectorDatabaseProvider` class can be seen in the provided code snippet.\n        \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n  Building context for dependencies -\n  \n    automata.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.database.vector`/VectorDatabaseProvider#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.database.vector", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "VectorDatabaseProvider", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# VectorDatabaseProvider\n\n`VectorDatabaseProvider` is an abstract base class for implementing different types of vector database providers. Its main purpose is to provide the basic structure for a vector storage system, allowing developers to easily customize and implement their own solutions. \n\nSubclasses must implement the abstract methods `calculate_similarity()` and `get_all_symbols()` to work correctly. `calculate_similarity()` computes the similarity between a provided vector and all vectors stored in the database, returning a list of dictionaries containing each symbol and its similarity score. `get_all_symbols()` retrieves a list of all symbols stored in the database.\n\n## Related Symbols\n\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.database.provider.SymbolDatabaseProvider`\n- `automata.core.embedding.embedding_types.EmbeddingProvider`\n\n## Example\n\nThe following example demonstrates a basic implementation of the `VectorDatabaseProvider` class.\n\n```python\nclass MyVectorDatabase(VectorDatabaseProvider):\n\n    def __init__(self):\n        self.data: List[SymbolEmbedding] = []\n        self.index: Dict[str, int] = {}\n\n    def calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]:\n        similarities = []\n        for stored_embedding in self.data:\n            similarity = compute_cosine_similarity(embedding.vector, stored_embedding.vector)\n            similarities.append({stored_embedding.symbol: similarity})\n        return similarities\n\n    def get_all_symbols(self) -> List[Symbol]:\n        return [embedding.symbol for embedding in self.data]\n\n# Usage\nmy_vector_db = MyVectorDatabase()\n```\n\n## Limitations\n\nSince `VectorDatabaseProvider` is an abstract base class, it cannot be used directly. Instead, developers must create a subclass that implements the required abstract methods. Furthermore, this base class does not provide any built-in functionality for adding, updating, or removing symbols and their embeddings. Implementers must handle these operations in their own subclasses.\n\n## Follow-up Questions:\n\n- Are there any pre-built subclasses or examples of using `VectorDatabaseProvider` in a real project?\n- What are some other examples of vector databases, and how could they be implemented using this base class?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class VectorDatabaseProvider(SymbolDatabaseProvider):\n    \"\"\"\n    Abstract base class for different types of vector database providers.\n    \"\"\"\n\n    @abc.abstractmethod\n    def calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]:\n        \"\"\"\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_all_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \"\"\"\n        pass\n\n\n", "summary": "`VectorDatabaseProvider` is an abstract base class for creating custom vector database providers, providing a unified structure for vector storage systems. It requires subclasses to implement the abstract methods `calculate_similarity()`, which computes similarity between a provided vector and all stored vectors, returning a list of dictionaries with each symbol and similarity score, and `get_all_symbols()`, which retrieves a list of all symbols in the database. The base class does not include built-in functionality for adding, updating, or removing symbols and their embeddings, thus requiring implementers to handle these operations in their subclasses. An example implementation can be seen in the provided `MyVectorDatabase` class.", "context": "\n    Generate the documentation for VectorDatabaseProvider using the context shown below -\n  Building context for primary symbol - automata.core.database.vector.VectorDatabaseProvider -\n  \n    Import Statements:\n      import abc\n      import logging\n      import logging.config\n      import jsonpickle\n      import numpy as np\n      from typing import Dict, List\n      from automata.core.database.provider import SymbolDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      \n      # VectorDatabaseProvider\n      \n      `VectorDatabaseProvider` is an abstract base class for implementing different types of vector database providers. Its main purpose is to provide the basic structure for a vector storage system, allowing developers to easily customize and implement their own solutions. \n      \n      Subclasses must implement the abstract methods `calculate_similarity()` and `get_all_symbols()` to work correctly. `calculate_similarity()` computes the similarity between a provided vector and all vectors stored in the database, returning a list of dictionaries containing each symbol and its similarity score. `get_all_symbols()` retrieves a list of all symbols stored in the database.\n      \n      ## Related Symbols\n      \n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.database.provider.SymbolDatabaseProvider`\n      - `automata.core.embedding.embedding_types.EmbeddingProvider`\n      \n      ## Example\n      \n      The following example demonstrates a basic implementation of the `VectorDatabaseProvider` class.\n      \n      ```python\n      class MyVectorDatabase(VectorDatabaseProvider):\n      \n          def __init__(self):\n              self.data: List[SymbolEmbedding] = []\n              self.index: Dict[str, int] = {}\n      \n          def calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]:\n              similarities = []\n              for stored_embedding in self.data:\n                  similarity = compute_cosine_similarity(embedding.vector, stored_embedding.vector)\n                  similarities.append({stored_embedding.symbol: similarity})\n              return similarities\n      \n          def get_all_symbols(self) -> List[Symbol]:\n              return [embedding.symbol for embedding in self.data]\n      \n      # Usage\n      my_vector_db = MyVectorDatabase()\n      ```\n      \n      ## Limitations\n      \n      Since `VectorDatabaseProvider` is an abstract base class, it cannot be used directly. Instead, developers must create a subclass that implements the required abstract methods. Furthermore, this base class does not provide any built-in functionality for adding, updating, or removing symbols and their embeddings. Implementers must handle these operations in their own subclasses.\n      \n      ## Follow-up Questions:\n      \n      - Are there any pre-built subclasses or examples of using `VectorDatabaseProvider` in a real project?\n      - What are some other examples of vector databases, and how could they be implemented using this base class?\n      \n    Class Docstring:\n      Abstract base class for different types of vector database providers.\n      \n    Methods:\n      @abc.abstractmethod\n          def calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]:\n              \"\"\"\n              Abstract method to calculate the similarity between the given vector and vectors in the database.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def get_all_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Abstract method to calculate the similarity between the given vector and vectors in the database.\n              \"\"\"\n              pass\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.database.provider.SymbolDatabaseProvider\n    \n        The SymbolDatabaseProvider is an abstract base class designed for handling symbol embedding storage and retrieval in databases. It offers a generic interface for managing database operations related to symbol embeddings, allowing customization and flexibility in storage methods. Subclasses can implement various storage mechanisms optimized for specific needs, while users interact with the database consistently. Since SymbolDatabaseProvider is an abstract base class, users need to subclass it and implement its abstract methods to provide their database implementation using specific storage mechanisms. This customization may require a deeper understanding of the underlying storage methods. An example implementation using a JSON file for storage can be found in the original documentation.\n        \n      Class Docstring:\n        Abstract base class for different types of database providers.\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> Any\n        \n        load(self) -> Any\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.tests.unit.test_database_vector.test_init_vector\n    \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n        \n    automata.core.database.vector.JSONVectorDatabase.add\n    \n      Class Docstring:\n        Adds a new vector to the database\n        \n        Args:\n        embedding: The vector to add\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.tests.unit.test_database_vector.test_load\n    \n        def test_load(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n            vector_db_2 = JSONVectorDatabase(temp_output_filename)\n        \n            embedded_symbol_0 = vector_db_2.get(symbols[0])\n            embedded_symbol_1 = vector_db_2.get(symbols[1])\n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.embedding.code_embedding`/SymbolCodeEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.embedding.code_embedding", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolCodeEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolCodeEmbeddingHandler\n\n`SymbolCodeEmbeddingHandler` is a class that manages the embedding of symbols and their source code. The class is responsible for building the embeddings for symbols, getting the embeddings from the database, and updating the embeddings based on the source code changes. It uses the `VectorDatabaseProvider` and `EmbeddingProvider` for storing and generating the embeddings, respectively.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.symbol_types.SymbolCodeEmbedding`\n- `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n- `automata.core.embedding.embedding_types.EmbeddingProvider`\n- `automata.core.database.vector.VectorDatabaseProvider`\n- `automata.core.symbol.symbol_utils.convert_to_fst_object`\n\n## Example\n\nThe following example demonstrates how to create an instance of the `SymbolCodeEmbeddingHandler` and update the embeddings of a given symbol.\n\n```python\nfrom automata.core.database.vector import JSONVectorDatabase\nfrom automata.core.symbol.symbol_types import Symbol\nfrom automata.core.embedding.embedding_types import OpenAIEmbedding\nfrom automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n\n# Configure the necessary components\nembedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\nembedding_provider = OpenAIEmbedding()\n\n# Create the instance of SymbolCodeEmbeddingHandler\nhandler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n\n# Update the embeddings for a symbol\nsymbol = Symbol.from_string(\"symbol_string_here\")\nhandler.update_embedding(symbol)\n```\n\n## Limitations\n\n`SymbolCodeEmbeddingHandler` assumes a specific directory structure for the configuration files and relies on the `VectorDatabaseProvider` and `EmbeddingProvider` for storing and generating embeddings. It can only build embeddings from the provided source code and does not support building embeddings from custom data sources. Additionally, the provided `convert_to_fst_object` function may not support all language features and syntax variations, which might result in inaccuracies.\n\n## Follow-up questions:\n\n- Can the `SymbolCodeEmbeddingHandler` work with custom data sources or custom embedding algorithms?\n- What are the limitations of the `convert_to_fst_object` function when handling different programming languages or syntax variations?\n\n## Methods\n\n### `__init__(self, embedding_db: VectorDatabaseProvider, embedding_provider: EmbeddingProvider)`\n\nA constructor for `SymbolCodeEmbeddingHandler`.\n\n- `embedding_db (VectorDatabaseProvider)`: The database to store the embeddings in.\n- `embedding_provider (EmbeddingProvider)`: The provider to get the embeddings from.\n\n### `build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding`\n\nBuild the embedding for a symbol.\n\n- `symbol (Symbol)`: Symbol to build the embedding for.\n\nReturns:\n- `SymbolEmbedding`: The embedding for the symbol.\n\n### `get_all_supported_symbols(self) -> List[Symbol]`\n\nGet all the symbols in the database.\n\nReturns:\n- `List[Symbol]`: List of all the symbols in the database.\n\n### `get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding`\n\nGet the embedding of a symbol.\n\n- `symbol (Symbol)`: Symbol to get the embedding for.\n\nReturns:\n- `Embedding`: The embedding of the symbol.\n\n### `update_embedding(self, symbol: Symbol)`\n\nConcrete method to update the embedding for a symbol.\n\n- `symbols_to_update (List[Symbol])`: List of symbols to update.\n\nRaises:\n- `ValueError`: If the symbol has no source code.\n\n### `update_existing_embedding(self, source_code: str, symbol: Symbol)`\n\nCheck if the embedding for a symbol needs to be updated. This is done by comparing the source code of the symbol to the source code.\n\n- `source_code (str)`: The source code of the symbol.\n- `symbol (Symbol)`: The symbol to update.", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolCodeEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: EmbeddingProvider,\n    ):\n        \"\"\"\n        A constructor for SymbolCodeEmbeddingHandler\n\n        Args:\n            embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n            embedding_provider (Optional[EmbeddingProvider]): The provider to\n                get the embeddings from\n        \"\"\"\n        super().__init__(embedding_db, embedding_provider)\n\n    def get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding:\n        \"\"\"\n        Get the embedding of a symbol.\n\n        Args:\n            symbol (Symbol): Symbol to get the embedding for\n\n        Returns:\n            Embedding: The embedding of the symbol\n        \"\"\"\n        return self.embedding_db.get(symbol)\n\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"\n        Concrete method to update the embedding for a symbol.\n\n        Args:\n            symbols_to_update (List[Symbol]): List of symbols to update\n\n        Raises:\n            ValueError: If the symbol has no source code\n        \"\"\"\n        from automata.core.symbol.symbol_utils import (  # imported late for mocking\n            convert_to_fst_object,\n        )\n\n        source_code = str(convert_to_fst_object(symbol))\n\n        if not source_code:\n            raise ValueError(f\"Symbol {symbol} has no source code\")\n\n        if self.embedding_db.contains(symbol):\n            self.update_existing_embedding(source_code, symbol)\n        else:\n            symbol_embedding = self.build_embedding(source_code, symbol)\n            self.embedding_db.add(symbol_embedding)\n\n    def build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding:\n        \"\"\"\n        Build the embedding for a symbol.\n\n        Args:\n            symbol (Symbol): Symbol to build the embedding for\n\n        Returns:\n            SymbolEmbedding: The embedding for the symbol\n        \"\"\"\n        embedding_vector = self.embedding_provider.build_embedding(source_code)\n        return SymbolCodeEmbedding(symbol, source_code, embedding_vector)\n\n    def update_existing_embedding(self, source_code: str, symbol: Symbol):\n        \"\"\"\n        Check if the embedding for a symbol needs to be updated.\n        This is done by comparing the source code of the symbol to the source code\n\n        Args:\n            source_code (str): The source code of the symbol\n            symbol (Symbol): The symbol to update\n        \"\"\"\n        existing_embedding = self.embedding_db.get(symbol)\n        if existing_embedding.embedding_source != source_code:\n            logger.debug(\"Building a new embedding for %s\", symbol)\n            self.embedding_db.discard(symbol)\n            symbol_embedding = self.build_embedding(source_code, symbol)\n            self.embedding_db.add(symbol_embedding)\n        elif existing_embedding.symbol != symbol:\n            logger.debug(\"Updating the embedding for %s\", symbol)\n            self.embedding_db.discard(symbol)\n            existing_embedding.symbol = symbol\n            self.embedding_db.add(existing_embedding)\n        else:\n            logger.debug(\"Passing for %s\", symbol)\n            pass\n\n    def get_all_supported_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Get all the symbols in the database.\n\n        Returns:\n            List[Symbol]: List of all the symbols in the database\n        \"\"\"\n        return self.embedding_db.get_all_symbols()\n", "summary": "The `SymbolCodeEmbeddingHandler` class is responsible for managing the embedding of symbols and their source code. It builds, gets, and updates embeddings for symbols using the `VectorDatabaseProvider` and `EmbeddingProvider`. However, it cannot work with custom data sources or custom embedding algorithms and may have inaccuracies due to limitations with `convert_to_fst_object`.\n\nHere's an example of how to create an instance of `SymbolCodeEmbeddingHandler` and update the embeddings of a symbol:\n\n```python\nfrom automata.core.database.vector import JSONVectorDatabase\nfrom automata.core.symbol.symbol_types import Symbol\nfrom automata.core.embedding.embedding_types import OpenAIEmbedding\nfrom automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n\n# Configure the necessary components\nembedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\nembedding_provider = OpenAIEmbedding()\n\n# Create the instance of SymbolCodeEmbeddingHandler\nhandler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n\n# Update the embeddings for a symbol\nsymbol = Symbol.from_string(\"symbol_string_here\")\nhandler.update_embedding(symbol)\n```\n", "context": "\n    Generate the documentation for SymbolCodeEmbeddingHandler using the context shown below -\n  Building context for primary symbol - automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler -\n  \n    Import Statements:\n      import logging\n      from typing import List\n      from automata.core.database.vector import VectorDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol, SymbolCodeEmbedding\n      from .embedding_types import EmbeddingProvider, SymbolEmbeddingHandler\n      from automata.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n      # SymbolCodeEmbeddingHandler\n      \n      `SymbolCodeEmbeddingHandler` is a class to handle the embedding of symbols and their source code. It is responsible for building the embeddings for symbols, getting the embeddings from the database, and updating the embeddings based on the source code changes. The class uses the `VectorDatabaseProvider` and `EmbeddingProvider` for storing and generating the embeddings, respectively.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.symbol_types.SymbolCodeEmbedding`\n      - `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n      - `automata.core.embedding.embedding_types.EmbeddingProvider`\n      - `automata.core.database.vector.VectorDatabaseProvider`\n      - `automata.core.symbol.symbol_utils.convert_to_fst_object`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of the `SymbolCodeEmbeddingHandler` and update the embeddings of a given symbol.\n      \n      ```python\n      from automata.core.database.vector import JSONVectorDatabase\n      from automata.core.symbol.symbol_types import Symbol\n      from automata.core.embedding.embedding_types import OpenAIEmbedding\n      from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n      \n      # Configure the necessary components\n      embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n      embedding_provider = OpenAIEmbedding()\n      \n      # Create the instance of SymbolCodeEmbeddingHandler\n      handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n      \n      # Update the embeddings for a symbol\n      symbol = Symbol.from_string(\"symbol_string_here\")\n      handler.update_embedding(symbol)\n      ```\n      \n      ## Limitations\n      \n      `SymbolCodeEmbeddingHandler` assumes a specific directory structure for the configuration files, and it relies on the `VectorDatabaseProvider` and `EmbeddingProvider` for storing and generating embeddings. It can only build embeddings from the provided source code and does not support building embeddings from custom data sources. In addition, the provided `convert_to_fst_object` function may not support all language features and syntax variations, which might result in inaccuracies.\n      \n      ## Follow-up Questions:\n      \n      - Can the `SymbolCodeEmbeddingHandler` work with custom data sources or custom embedding algorithms?\n      - What are the limitations of the `convert_to_fst_object` function when handling different programming languages or syntax variations?\n      \n    Methods:\n      def __init__(\n              self,\n              embedding_db: VectorDatabaseProvider,\n              embedding_provider: EmbeddingProvider,\n          ):\n              \"\"\"\n              A constructor for SymbolCodeEmbeddingHandler\n      \n              Args:\n                  embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                  embedding_provider (Optional[EmbeddingProvider]): The provider to\n                      get the embeddings from\n              \"\"\"\n              super().__init__(embedding_db, embedding_provider)\n      \n          \n      def build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding:\n              \"\"\"\n              Build the embedding for a symbol.\n      \n              Args:\n                  symbol (Symbol): Symbol to build the embedding for\n      \n              Returns:\n                  SymbolEmbedding: The embedding for the symbol\n              \"\"\"\n              embedding_vector = self.embedding_provider.build_embedding(source_code)\n              return SymbolCodeEmbedding(symbol, source_code, embedding_vector)\n      \n          \n      def get_all_supported_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Get all the symbols in the database.\n      \n              Returns:\n                  List[Symbol]: List of all the symbols in the database\n              \"\"\"\n              return self.embedding_db.get_all_symbols()\n      \n      def get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding:\n              \"\"\"\n              Get the embedding of a symbol.\n      \n              Args:\n                  symbol (Symbol): Symbol to get the embedding for\n      \n              Returns:\n                  Embedding: The embedding of the symbol\n              \"\"\"\n              return self.embedding_db.get(symbol)\n      \n          \n      def update_embedding(self, symbol: Symbol):\n              \"\"\"\n              Concrete method to update the embedding for a symbol.\n      \n              Args:\n                  symbols_to_update (List[Symbol]): List of symbols to update\n      \n              Raises:\n                  ValueError: If the symbol has no source code\n              \"\"\"\n              from automata.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n              source_code = str(convert_to_fst_object(symbol))\n      \n              if not source_code:\n                  raise ValueError(f\"Symbol {symbol} has no source code\")\n      \n              if self.embedding_db.contains(symbol):\n                  self.update_existing_embedding(source_code, symbol)\n              else:\n                  symbol_embedding = self.build_embedding(source_code, symbol)\n                  self.embedding_db.add(symbol_embedding)\n      \n          \n      def update_existing_embedding(self, source_code: str, symbol: Symbol):\n              \"\"\"\n              Check if the embedding for a symbol needs to be updated.\n              This is done by comparing the source code of the symbol to the source code\n      \n              Args:\n                  source_code (str): The source code of the symbol\n                  symbol (Symbol): The symbol to update\n              \"\"\"\n              existing_embedding = self.embedding_db.get(symbol)\n              if existing_embedding.embedding_source != source_code:\n                  logger.debug(\"Building a new embedding for %s\", symbol)\n                  self.embedding_db.discard(symbol)\n                  symbol_embedding = self.build_embedding(source_code, symbol)\n                  self.embedding_db.add(symbol_embedding)\n              elif existing_embedding.symbol != symbol:\n                  logger.debug(\"Updating the embedding for %s\", symbol)\n                  self.embedding_db.discard(symbol)\n                  existing_embedding.symbol = symbol\n                  self.embedding_db.add(existing_embedding)\n              else:\n                  logger.debug(\"Passing for %s\", symbol)\n                  pass\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n        `SymbolCodeEmbedding` is a class extending the `SymbolEmbedding` base class, used to store code embeddings for a given symbol, the symbol object, source code, and the embedding vector. It primarily serves as a container for these embeddings and does not include functionality for generating or handling them; `SymbolCodeEmbeddingHandler` should be used for those purposes.\n        \n        Here's an example of creating a `SymbolCodeEmbedding` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def example_function():\\n    pass\"\n        vector = np.random.random((300,))\n        \n        embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n                super().__init__(symbol, source_code, vector)\n        \n        \n        \n    automata.core.embedding.embedding_types.SymbolEmbeddingHandler\n    \n        `SymbolEmbeddingHandler` is an abstract class that manages symbol embeddings by fetching and updating the vector embeddings related to various kinds of symbols. It must be subclassed by other classes that provide implementations of the defined abstract methods, such as `get_embedding()` and `update_embedding()`. The performance of these methods may depend on the chosen embedding provider and database used for storing the embeddings.\n        \n        Here is an example of how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n        \n        ```python\n        from automata.core.embedding.embedding_types import SymbolEmbeddingHandler\n        from automata.core.symbol.symbol_types import Symbol\n        \n        class CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n            def __init__(self, embedding_db, embedding_provider):\n                super().__init__(embedding_db, embedding_provider)\n        \n            def get_embedding(self, symbol: Symbol):\n                # Implement logic to get the embedding for a custom symbol\n                pass\n        \n            def update_embedding(self, symbol: Symbol):\n                # Implement logic to update the embedding for a custom symbol\n                pass\n        \n        # Example usage:\n        custom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\n        custom_embedding = custom_handler.get_embedding(custom_symbol)\n        ```\n        \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider\n        \n            \n        get_embedding(self, symbol: Symbol) -> Any\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolDocEmbedding\n    \n        `SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class with added metadata such as source code, summary, and context. This class is utilized alongside `SymbolDocEmbeddingHandler` to manage and access these embeddings for tasks like search and similarity comparison. However, it relies on external handler classes and assumes embeddings are provided as NumPy arrays, potentially limiting usage for other embedding types.\n        \n        ```python\n        import numpy as np\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.symbol.symbol_types import SymbolDocEmbedding\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = Symbol.from_string(symbol_str)\n        \n        document = \"This is a sample document\"\n        vector = np.array([0.1, 0.2, 0.3])\n        source_code = \"class ActionIndicator(Enum): ...\"\n        summary = \"This class represents an enum for action indicators.\"\n        context = \"The ActionIndicator enum is used to describe the current state...\"\n        \n        embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                document: str,\n                vector: np.array,\n                source_code: Optional[str] = None,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, document, vector)\n                # begin additional meta data\n                self.source_code = source_code\n                self.summary = summary\n                self.context = context\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler.__init__\n    \n      Class Docstring:\n        A constructor for SymbolDocEmbeddingHandler\n        \n        Args:\n        embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n        embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n        code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n    automata.core.embedding.symbol_similarity.SymbolSimilarity\n    \n        `SymbolSimilarity` is a class that computes similarity scores between query texts and symbols using embeddings, and allows users to retrieve the most similar symbols for a specific query and create a dictionary mapping the similarity scores to each symbol. Users can set the available symbols for the calculation, and the similarity scores depend on the quality of the supplied pre-trained embeddings and selected norm type. The class uses a `SymbolCodeEmbeddingHandler` for handling embeddings, which affects the accuracy of the results.\n        \n        Example usage of `SymbolSimilarity`:\n        ```python\n        import numpy as np\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        from automata.core.embedding.embedding_types import EmbeddingProvider, NormType\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        \n        embedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n        symbol_similarity.set_available_symbols(available_symbols)\n        nearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n        query_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n  Building context for dependencies -\n  \n    automata.core.database.provider.SymbolDatabaseProvider.discard\n    \n      Class Docstring:\n        Abstract method to discard a specific embedding.\n        \n      Methods:\n        discard(self, symbol: Symbol) -> None\n        \n    automata.core.database.vector.VectorDatabaseProvider\n    \n        `VectorDatabaseProvider` is an abstract base class designed for implementing custom vector database providers. It provides a basic structure for a vector storage system and requires subclasses to implement the `calculate_similarity()` and `get_all_symbols()` abstract methods. The former computes the similarity between a given vector and all stored vectors, while the latter retrieves a list of all symbols in the database. However, the base class does not offer built-in functionality for adding, updating, or removing symbols and their embeddings, requiring implementers to handle these operations themselves. A basic example implementation of the `VectorDatabaseProvider` class can be seen in the provided code snippet.\n        \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata.core.database.provider.SymbolDatabaseProvider.add\n    \n      Class Docstring:\n        Abstract method to add an embedding to the database.\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider.build_embedding\n    \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.database.provider.SymbolDatabaseProvider.get\n    \n      Class Docstring:\n        Abstract method to get a specific embedding.\n        \n      Methods:\n        get(self, symbol: Symbol) -> Any\n        \n    automata.core.database.provider.SymbolDatabaseProvider.contains\n    \n      Class Docstring:\n        Abstract method to check if a specific embedding is present.\n        \n      Methods:\n        contains(self, symbol: Symbol) -> bool\n        \n    automata.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n    automata.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata.core.embedding.embedding_types.SymbolEmbeddingHandler.__init__\n    \n      Class Docstring:\n        An abstract constructor for SymbolEmbeddingHandler\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.embedding.doc_embedding`/SymbolDocEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.embedding.doc_embedding", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDocEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolDocEmbeddingHandler\n\n`SymbolDocEmbeddingHandler` is a class responsible for generating, storing, and managing document embeddings for symbols in the context of an AutomataDocs project. It is used for creating, updating, and retrieving symbol document embeddings, interacting with the `VectorDatabaseProvider` and `EmbeddingProvider` classes, and building symbol objects based on generated document embeddings.\n\n## Overview\n\n`SymbolDocEmbeddingHandler` class is initialized with an instance of `VectorDatabaseProvider`, an instance of `EmbeddingProvider`, and an optional path string for storing the code embedding. The main methods of this class are `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary`. These methods are used to manage symbol document embeddings as well as generate their summaries.\n\nThe class also contains a `SymbolGraph` object and utilizes `SymbolSimilarity`, `SymbolRankConfig`, and `SymbolSearch` for searching and ranking symbols and generating related context when building the symbol document embeddings.\n\n## Related Symbols\n\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n- `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata.core.symbol.search.rank.SymbolRankConfig`\n- `automata.core.symbol.search.symbol_search.SymbolSearch`\n- `automata.core.symbol.graph.SymbolGraph`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolDocEmbeddingHandler` and build a symbol document embedding.\n\n```python\nfrom automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\nfrom automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\nfrom automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\nfrom automata.core.symbol.symbol_types import Symbol\n\n# Initialize the database provider and embedding provider\ndb_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\nembedding_provider = EmbeddingProvider(OpenAIEmbedding())\n\n# Create an instance of SymbolDocEmbeddingHandler\nembedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n\n# Example symbol and source code\nsymbol = Symbol.from_string(\"symbol-uri-as-string\")\nsource_code = \"def example_function():\\n    pass\"\n\n# Build the symbol document embedding\nsymbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n```\n\n## Limitations\n\nThe `SymbolDocEmbeddingHandler` relies on the `OpenAIEmbedding` class for generating embeddings, which may have limitations in terms of the models and algorithms used. Furthermore, it depends on the data structures provided by the `SymbolGraph` for generating context, which may impose constraints on the flexibility of the embeddings generated.\n\nIn addition, when generating the context and documentation for a symbol, the current implementation might not always prioritize the best examples for documentation or might fail to retrieve certain documentation. Through, improvements in the `Symbol", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDocEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: EmbeddingProvider,\n        code_embedding_handler: SymbolCodeEmbeddingHandler,\n        embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n    ):\n        \"\"\"\n        A constructor for SymbolDocEmbeddingHandler\n\n        Args:\n            embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n            embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n            code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n        \"\"\"\n        super().__init__(embedding_db, embedding_provider)\n\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.symbol.search.rank import SymbolRankConfig\n        from automata.core.symbol.search.symbol_search import SymbolSearch\n\n        graph = SymbolGraph()\n        subgraph = graph.get_rankable_symbol_subgraph()\n        symbol_similarity = SymbolSimilarity(code_embedding_handler)\n        self.graph = graph\n        self.symbol_search = SymbolSearch(\n            graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n        )\n        self.embedding_db_l2 = embedding_db_l2\n\n    def get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding:\n        \"\"\"\n        Get the embedding of a symbol.\n        Args:\n            symbol (Symbol): Symbol to get the embedding for\n        Returns:\n            SymbolDocEmbedding: The embedding of the symbol documentation\n        \"\"\"\n        return self.embedding_db.get(symbol)\n\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"\n        Concrete method to update the embedding for a symbol.\n\n        Args:\n            symbols_to_update (List[Symbol]): List of symbols to update\n\n        Raises:\n            ValueError: If the symbol has no source code\n\n        NOTE: This method always updates the embedding and associated documentation\n            We should add some logic to check if the documentation needs updating\n            This is non-trivial because of how dependencies interact\n        \"\"\"\n        from automata.core.symbol.symbol_utils import (  # imported late for mocking\n            convert_to_fst_object,\n        )\n\n        source_code = str(convert_to_fst_object(symbol))\n\n        if not source_code:\n            raise ValueError(f\"Symbol {symbol} has no source code\")\n\n        if self.embedding_db.contains(symbol):\n            self.embedding_db.discard(symbol)\n\n        symbol_embedding = self.build_symbol_doc_embedding(source_code, symbol)\n        self.embedding_db.add(symbol_embedding)\n\n    def build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding:\n        \"\"\"\n        Build the embedding for a symbol's documentation\n\n        Args:\n            source_code (str): The source code of the symbol\n            symbol (Symbol): The symbol to build the embedding for\n\n        Returns:\n            SymbolDocEmbedding: The embedding for the symbol's documentation\n        \"\"\"\n        abbreviated_selected_symbol = symbol.uri.split(\"/\")[1].split(\"#\")[0]\n\n        def get_doc(prompt: str) -> str:\n            \"\"\"\n            Get the documentation for a symbol\n\n            Args:\n                prompt (str): The prompt to use to generate the documentation\n\n            Returns:\n                str: The completed documentation for the symbol\n            \"\"\"\n            completion = openai.ChatCompletion.create(\n                model=\"gpt-4\",\n                messages=[\n                    {\n                        \"role\": \"user\",\n                        \"content\": prompt,\n                    }\n                ],\n            )\n            if not completion.choices:\n                return \"Error: No completion found\"\n\n            return completion.choices[0][\"message\"][\"content\"]\n\n        def get_summary(input_doc: str) -> str:\n            \"\"\"\n            Get a summary for a symbol's documentation\n\n            Args:\n                prompt (str): The prompt to use to generate the documentation\n\n            Returns:\n                str: The completed documentation for the symbol\n            \"\"\"\n\n            completion = openai.ChatCompletion.create(\n                model=\"gpt-4\",\n                messages=[\n                    {\n                        \"role\": \"user\",\n                        \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                    }\n                ],\n            )\n            if not completion.choices:\n                return \"Error: No completion found\"\n\n            return completion.choices[0][\"message\"][\"content\"]\n\n        # Splice the search results on the symbol\n        # with the search results biased on tests\n        # this is to get bias towards specific examples for the documentation\n        search_results_0 = self.symbol_search.symbol_rank_search(f\"{abbreviated_selected_symbol}\")\n        search_results_1 = self.symbol_search.symbol_rank_search(\n            f\"{abbreviated_selected_symbol} tests or conftest\"\n        )\n\n        search_list: List[Symbol] = []\n        for i in range(len(search_results_0)):\n            set_list = set(search_list)\n            if search_results_0[i] not in set_list:\n                search_list.append(search_results_0[i][0])\n            elif search_results_1[i] not in set_list:\n                search_list.append(search_results_1[i][0])\n\n        retriever = PyContextRetriever(self.graph, doc_embedding_db=self.embedding_db_l2)\n        retriever.process_symbol(symbol, search_list)\n\n        prompt = Template(DEFAULT_DOC_GENERATION_PROMPT).render(\n            symbol_dotpath=abbreviated_selected_symbol,\n            symbol_context=retriever.get_context_buffer(),\n        )\n\n        document = get_doc(prompt)\n        summary = get_summary(document)\n        embedding = self.embedding_provider.build_embedding(document)\n\n        # print(f\"Symbol Context = {retriever.get_context_buffer()}\")\n        print(\"Symbol = \", symbol)\n        import tiktoken\n\n        encoding = tiktoken.encoding_for_model(\"gpt-4\")\n        print(\"Len of context = \", len(encoding.encode(retriever.get_context_buffer())))\n        return SymbolDocEmbedding(\n            symbol,\n            vector=embedding,\n            source_code=source_code,\n            document=document,\n            summary=summary,\n            context=prompt,\n        )\n", "summary": "The `SymbolDocEmbeddingHandler` class is responsible for managing document embeddings for symbols in an AutomataDocs project. It interacts with the `VectorDatabaseProvider` and `EmbeddingProvider` classes and builds symbol objects based on generated document embeddings. The main methods, such as `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary`, handle creating, updating, and retrieving symbol document embeddings and their summaries. The class contains a `SymbolGraph` object and employs `SymbolSimilarity`, `SymbolRankConfig`, and `SymbolSearch` for searching, ranking symbols, and generating related context during document embedding creation. However, there are limitations with the `OpenAIEmbedding` class and `SymbolGraph` data structures, which may affect the flexibility and context generation of the embeddings.\n\nExample usage:\n\n```python\nfrom automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\nfrom automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\nfrom automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\nfrom automata.core.symbol.symbol_types import Symbol\n\n# Initialize the database provider and embedding provider\ndb_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\nembedding_provider = EmbeddingProvider(OpenAIEmbedding())\n\n# Create an instance of SymbolDocEmbeddingHandler\nembedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n\n# Example symbol and source code\nsymbol = Symbol.from_string(\"symbol-uri-as-string\")\nsource_code = \"def example_function():\\n    pass\"\n\n# Build the symbol document embedding\nsymbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n```\n", "context": "\n    Generate the documentation for SymbolDocEmbeddingHandler using the context shown below -\n  Building context for primary symbol - automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler -\n  \n    Import Statements:\n      import logging\n      import os\n      import openai\n      import tiktoken\n      from typing import List, Optional\n      from jinja2 import Template\n      from automata.config.config_enums import ConfigCategory\n      from automata.config.prompt.docs import DEFAULT_DOC_GENERATION_PROMPT\n      from automata.core.context.py_context.retriever import PyContextRetriever\n      from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n      from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n      from automata.core.symbol.graph import SymbolGraph\n      from automata.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      from automata.core.utils import config_fpath\n      from .embedding_types import EmbeddingProvider, OpenAIEmbedding, SymbolEmbeddingHandler\n      from automata.core.embedding.symbol_similarity import SymbolSimilarity\n      from automata.core.symbol.search.rank import SymbolRankConfig\n      from automata.core.symbol.search.symbol_search import SymbolSearch\n      from automata.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n      # SymbolDocEmbeddingHandler\n      \n      `SymbolDocEmbeddingHandler` is a class responsible for generating, storing, and managing document embeddings for symbols in the context of an AutomataDocs project. It is used for creating, updating, and retrieving symbol document embeddings, interacting with the `VectorDatabaseProvider` and `EmbeddingProvider` classes, and building symbol objects based on generated document embeddings. \n      \n      ## Overview\n      \n      `SymbolDocEmbeddingHandler` class is initialized with an instance of `VectorDatabaseProvider`, an instance of `EmbeddingProvider`, and an optional path string for storing the code embedding. The main methods of this class are `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary`. These methods are used to manage symbol document embeddings as well as generate their summaries.\n      \n      The class also contains a `SymbolGraph` object and utilizes `SymbolSimilarity`, `SymbolRankConfig`, and `SymbolSearch` for searching and ranking symbols and generating related context when building the symbol document embeddings.\n      \n      ## Related Symbols\n      \n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n      - `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n      - `automata.core.symbol.search.rank.SymbolRankConfig`\n      - `automata.core.symbol.search.symbol_search.SymbolSearch`\n      - `automata.core.symbol.graph.SymbolGraph`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `SymbolDocEmbeddingHandler` and build a symbol document embedding.\n      \n      ```python\n      from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n      from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n      from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n      from automata.core.symbol.symbol_types import Symbol\n      \n      # Initialize the database provider and embedding provider\n      db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n      embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n      \n      # Create an instance of SymbolDocEmbeddingHandler\n      embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n      \n      # Example symbol and source code\n      symbol = Symbol.from_string(\"symbol-uri-as-string\")\n      source_code = \"def example_function():\\n    pass\"\n      \n      # Build the symbol document embedding\n      symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n      ```\n      \n      ## Limitations\n      \n      The `SymbolDocEmbeddingHandler` relies on the `OpenAIEmbedding` class for generating embeddings, which may have limitations in terms of the models and algorithms used. Furthermore, it depends on the data structures provided by the `SymbolGraph` for generating context, which may impose constraints on the flexibility of the embeddings generated.\n      \n      In addition, when generating the context and documentation for a symbol, the current implementation might not always prioritize the best examples for documentation or might fail to retrieve certain documentation. Through, improvements in the `SymbolSimilarity` and `SymbolRankConfig` components can potentially enhance the quality of generated symbol document embeddings.\n      \n      ## Follow-up Questions:\n      \n      - Can other embedding techniques/models be integrated easily with the `SymbolDocEmbeddingHandler` class?\n      - Is there any way to improve the quality of context generation or example selection for symbol document embeddings?\n      \n      \n    Methods:\n      def __init__(\n              self,\n              embedding_db: VectorDatabaseProvider,\n              embedding_provider: EmbeddingProvider,\n              code_embedding_handler: SymbolCodeEmbeddingHandler,\n              embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n          ):\n              \"\"\"\n              A constructor for SymbolDocEmbeddingHandler\n      \n              Args:\n                  embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                  embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                  code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n              \"\"\"\n              super().__init__(embedding_db, embedding_provider)\n      \n              from automata.core.embedding.symbol_similarity import SymbolSimilarity\n              from automata.core.symbol.search.rank import SymbolRankConfig\n              from automata.core.symbol.search.symbol_search import SymbolSearch\n      \n              graph = SymbolGraph()\n              subgraph = graph.get_rankable_symbol_subgraph()\n              symbol_similarity = SymbolSimilarity(code_embedding_handler)\n              self.graph = graph\n              self.symbol_search = SymbolSearch(\n                  graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n              )\n              self.embedding_db_l2 = embedding_db_l2\n      \n          \n      def build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding:\n              \"\"\"\n              Build the embedding for a symbol's documentation\n      \n              Args:\n                  source_code (str): The source code of the symbol\n                  symbol (Symbol): The symbol to build the embedding for\n      \n              Returns:\n                  SymbolDocEmbedding: The embedding for the symbol's documentation\n              \"\"\"\n              abbreviated_selected_symbol = symbol.uri.split(\"/\")[1].split(\"#\")[0]\n      \n              def get_doc(prompt: str) -> str:\n                  \"\"\"\n                  Get the documentation for a symbol\n      \n                  Args:\n                      prompt (str): The prompt to use to generate the documentation\n      \n                  Returns:\n                      str: The completed documentation for the symbol\n                  \"\"\"\n                  completion = openai.ChatCompletion.create(\n                      model=\"gpt-4\",\n                      messages=[\n                          {\n                              \"role\": \"user\",\n                              \"content\": prompt,\n                          }\n                      ],\n                  )\n                  if not completion.choices:\n                      return \"Error: No completion found\"\n      \n                  return completion.choices[0][\"message\"][\"content\"]\n      \n              def get_summary(input_doc: str) -> str:\n                  \"\"\"\n                  Get a summary for a symbol's documentation\n      \n                  Args:\n                      prompt (str): The prompt to use to generate the documentation\n      \n                  Returns:\n                      str: The completed documentation for the symbol\n                  \"\"\"\n      \n                  completion = openai.ChatCompletion.create(\n                      model=\"gpt-4\",\n                      messages=[\n                          {\n                              \"role\": \"user\",\n                              \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                          }\n                      ],\n                  )\n                  if not completion.choices:\n                      return \"Error: No completion found\"\n      \n                  return completion.choices[0][\"message\"][\"content\"]\n      \n              # Splice the search results on the symbol\n              # with the search results biased on tests\n              # this is to get bias towards specific examples for the documentation\n              search_results_0 = self.symbol_search.symbol_rank_search(f\"{abbreviated_selected_symbol}\")\n              search_results_1 = self.symbol_search.symbol_rank_search(\n                  f\"{abbreviated_selected_symbol} tests or conftest\"\n              )\n      \n              search_list: List[Symbol] = []\n              for i in range(len(search_results_0)):\n                  set_list = set(search_list)\n                  if search_results_0[i] not in set_list:\n                      search_list.append(search_results_0[i][0])\n                  elif search_results_1[i] not in set_list:\n                      search_list.append(search_results_1[i][0])\n      \n              retriever = PyContextRetriever(self.graph, doc_embedding_db=self.embedding_db_l2)\n              retriever.process_symbol(symbol, search_list)\n      \n              prompt = Template(DEFAULT_DOC_GENERATION_PROMPT).render(\n                  symbol_dotpath=abbreviated_selected_symbol,\n                  symbol_context=retriever.get_context_buffer(),\n              )\n      \n              document = get_doc(prompt)\n              summary = get_summary(document)\n              embedding = self.embedding_provider.build_embedding(document)\n      \n              # print(f\"Symbol Context = {retriever.get_context_buffer()}\")\n              print(\"Symbol = \", symbol)\n              import tiktoken\n      \n              encoding = tiktoken.encoding_for_model(\"gpt-4\")\n              print(\"Len of context = \", len(encoding.encode(retriever.get_context_buffer())))\n              return SymbolDocEmbedding(\n                  symbol,\n                  vector=embedding,\n                  source_code=source_code,\n                  document=document,\n                  summary=summary,\n                  context=prompt,\n              )\n      \n      def get_doc(prompt: str) -> str:\n                  \"\"\"\n                  Get the documentation for a symbol\n      \n                  Args:\n                      prompt (str): The prompt to use to generate the documentation\n      \n                  Returns:\n                      str: The completed documentation for the symbol\n                  \"\"\"\n                  completion = openai.ChatCompletion.create(\n                      model=\"gpt-4\",\n                      messages=[\n                          {\n                              \"role\": \"user\",\n                              \"content\": prompt,\n                          }\n                      ],\n                  )\n                  if not completion.choices:\n                      return \"Error: No completion found\"\n      \n                  return completion.choices[0][\"message\"][\"content\"]\n      \n              \n      def get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding:\n              \"\"\"\n              Get the embedding of a symbol.\n              Args:\n                  symbol (Symbol): Symbol to get the embedding for\n              Returns:\n                  SymbolDocEmbedding: The embedding of the symbol documentation\n              \"\"\"\n              return self.embedding_db.get(symbol)\n      \n          \n      def get_summary(input_doc: str) -> str:\n                  \"\"\"\n                  Get a summary for a symbol's documentation\n      \n                  Args:\n                      prompt (str): The prompt to use to generate the documentation\n      \n                  Returns:\n                      str: The completed documentation for the symbol\n                  \"\"\"\n      \n                  completion = openai.ChatCompletion.create(\n                      model=\"gpt-4\",\n                      messages=[\n                          {\n                              \"role\": \"user\",\n                              \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                          }\n                      ],\n                  )\n                  if not completion.choices:\n                      return \"Error: No completion found\"\n      \n                  return completion.choices[0][\"message\"][\"content\"]\n      \n              # Splice the search results on the symbol\n              # with the search results biased on tests\n              # this is to get bias towards specific examples for the documentation\n              \n      def update_embedding(self, symbol: Symbol):\n              \"\"\"\n              Concrete method to update the embedding for a symbol.\n      \n              Args:\n                  symbols_to_update (List[Symbol]): List of symbols to update\n      \n              Raises:\n                  ValueError: If the symbol has no source code\n      \n              NOTE: This method always updates the embedding and associated documentation\n                  We should add some logic to check if the documentation needs updating\n                  This is non-trivial because of how dependencies interact\n              \"\"\"\n              from automata.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n              source_code = str(convert_to_fst_object(symbol))\n      \n              if not source_code:\n                  raise ValueError(f\"Symbol {symbol} has no source code\")\n      \n              if self.embedding_db.contains(symbol):\n                  self.embedding_db.discard(symbol)\n      \n              symbol_embedding = self.build_symbol_doc_embedding(source_code, symbol)\n              self.embedding_db.add(symbol_embedding)\n      \n          \n  Building context for related symbols -\n  \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolDocEmbedding\n    \n        `SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class with added metadata such as source code, summary, and context. This class is utilized alongside `SymbolDocEmbeddingHandler` to manage and access these embeddings for tasks like search and similarity comparison. However, it relies on external handler classes and assumes embeddings are provided as NumPy arrays, potentially limiting usage for other embedding types.\n        \n        ```python\n        import numpy as np\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.symbol.symbol_types import SymbolDocEmbedding\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = Symbol.from_string(symbol_str)\n        \n        document = \"This is a sample document\"\n        vector = np.array([0.1, 0.2, 0.3])\n        source_code = \"class ActionIndicator(Enum): ...\"\n        summary = \"This class represents an enum for action indicators.\"\n        context = \"The ActionIndicator enum is used to describe the current state...\"\n        \n        embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                document: str,\n                vector: np.array,\n                source_code: Optional[str] = None,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, document, vector)\n                # begin additional meta data\n                self.source_code = source_code\n                self.summary = summary\n                self.context = context\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.embedding.embedding_types.SymbolEmbeddingHandler\n    \n        `SymbolEmbeddingHandler` is an abstract class that manages symbol embeddings by fetching and updating the vector embeddings related to various kinds of symbols. It must be subclassed by other classes that provide implementations of the defined abstract methods, such as `get_embedding()` and `update_embedding()`. The performance of these methods may depend on the chosen embedding provider and database used for storing the embeddings.\n        \n        Here is an example of how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n        \n        ```python\n        from automata.core.embedding.embedding_types import SymbolEmbeddingHandler\n        from automata.core.symbol.symbol_types import Symbol\n        \n        class CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n            def __init__(self, embedding_db, embedding_provider):\n                super().__init__(embedding_db, embedding_provider)\n        \n            def get_embedding(self, symbol: Symbol):\n                # Implement logic to get the embedding for a custom symbol\n                pass\n        \n            def update_embedding(self, symbol: Symbol):\n                # Implement logic to update the embedding for a custom symbol\n                pass\n        \n        # Example usage:\n        custom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\n        custom_embedding = custom_handler.get_embedding(custom_symbol)\n        ```\n        \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider\n        \n            \n        get_embedding(self, symbol: Symbol) -> Any\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n        `SymbolCodeEmbedding` is a class extending the `SymbolEmbedding` base class, used to store code embeddings for a given symbol, the symbol object, source code, and the embedding vector. It primarily serves as a container for these embeddings and does not include functionality for generating or handling them; `SymbolCodeEmbeddingHandler` should be used for those purposes.\n        \n        Here's an example of creating a `SymbolCodeEmbedding` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def example_function():\\n    pass\"\n        vector = np.random.random((300,))\n        \n        embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n                super().__init__(symbol, source_code, vector)\n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.symbol.search.symbol_search.SymbolSearch.symbol_rank_search\n    \n      Class Docstring:\n        Fetches the list of the SymbolRank similar symbols ordered by rank\n        \n        Args:\n        query (str): The query to search for\n        \n        Returns:\n        A list of tuples of the form (symbol_uri, rank)\n        \n      Methods:\n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n    automata.core.database.provider.SymbolDatabaseProvider.add\n    \n      Class Docstring:\n        Abstract method to add an embedding to the database.\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata.core.context.py_context.retriever.PyContextRetriever.get_context_buffer\n    \n      Class Docstring:\n        Get the context buffer\n        \n        Returns:\n        str: The context buffer\n        \n      Methods:\n        get_context_buffer(self) -> str\n        \n    automata.core.embedding.embedding_types.SymbolEmbeddingHandler.__init__\n    \n      Class Docstring:\n        An abstract constructor for SymbolEmbeddingHandler\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider\n        \n            \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.embedding.embedding_types`/EmbeddingProvider#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "EmbeddingProvider", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# EmbeddingProvider\n\n`EmbeddingProvider` is an abstract base class that provides an interface for obtaining embeddings for symbols. Embeddings are mathematical representations of symbols that can be used for various tasks such as similarity search, ranking, and other natural language processing related work. The class contains a single abstract method, `build_embedding`, which should be implemented by all subclasses to provide the specific embedding implementation.\n\n## Related Symbols\n\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n- `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n- `automata.core.embedding.embedding_types.OpenAIEmbedding`\n- `automata.core.symbol.symbol_types.SymbolEmbedding`\n- `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following is an example of how to use the `OpenAIEmbedding` class, which is a concrete implementation of `EmbeddingProvider`.\n\n```python\nfrom automata.core.embedding.embedding_types import OpenAIEmbedding\nimport numpy as np\n\nsymbol_source = \"This is an example of a Python function.\"\nembedding_provider = OpenAIEmbedding() \nembedding = embedding_provider.build_embedding(symbol_source)\n\n# Check if the generated embedding is a numpy array\nassert isinstance(embedding, np.ndarray)\n```\n\n## Limitations\n\nAs `EmbeddingProvider` is an abstract base class, it cannot be instantiated directly. Users must create their own classes that inherit from `EmbeddingProvider` and implement the necessary methods. This can be a limitation for users who are not familiar with creating custom classes and implementing abstract methods.\n\nAdditionally, the specific embedding approach and model used by a concrete implementation of `EmbeddingProvider` may limit the overall performance and accuracy of the embeddings.\n\n## Follow-up Questions:\n\n- How can we efficiently implement new embedding providers for different types of models?\n- What are the best practices for selecting an optimal embedding provider for a given task?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class EmbeddingProvider(abc.ABC):\n    \"\"\"A class to provide embeddings for symbols\"\"\"\n\n    @abc.abstractmethod\n    def build_embedding(self, symbol_source: str) -> np.ndarray:\n        pass\n\n\n", "summary": "The `EmbeddingProvider` is an abstract base class that offers an interface for obtaining mathematical representations (embeddings) of symbols, which can be used for similarity search, ranking, and other natural language processing tasks. Users must create custom classes that inherit from `EmbeddingProvider` and implement the required methods. The example below demonstrates using the `OpenAIEmbedding`, a concrete implementation of `EmbeddingProvider`:\n\n```python\nfrom automata.core.embedding.embedding_types import OpenAIEmbedding\nimport numpy as np\n\nsymbol_source = \"This is an example of a Python function.\"\nembedding_provider = OpenAIEmbedding() \nembedding = embedding_provider.build_embedding(symbol_source)\n\n# Check if the generated embedding is a numpy array\nassert isinstance(embedding, np.ndarray)\n```\n\nThe performance and accuracy of the system may be limited by the embedding approach and model used by a specific implementation of `EmbeddingProvider`. Users should consider the efficiency of new embedding providers and best practices for selecting an optimal provider for a given task.", "context": "\n    Generate the documentation for EmbeddingProvider using the context shown below -\n  Building context for primary symbol - automata.core.embedding.embedding_types.EmbeddingProvider -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict\n      from automata.core.database.vector import VectorDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n      # EmbeddingProvider\n      \n      `EmbeddingProvider` is an abstract base class that provides an interface for obtaining embeddings for symbols. Embeddings are mathematical representations of symbols that can be used for various tasks such as similarity search, ranking, and other natural language processing related work. The class contains a single abstract method, `build_embedding`, which should be implemented by all subclasses to provide the specific embedding implementation.\n      \n      ## Related Symbols\n      \n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n      - `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n      - `automata.core.embedding.embedding_types.OpenAIEmbedding`\n      - `automata.core.symbol.symbol_types.SymbolEmbedding`\n      - `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.core.symbol.symbol_types.Symbol`\n      \n      ## Example\n      \n      The following is an example of how to use the `OpenAIEmbedding` class, which is a concrete implementation of `EmbeddingProvider`.\n      \n      ```python\n      from automata.core.embedding.embedding_types import OpenAIEmbedding\n      import numpy as np\n      \n      symbol_source = \"This is an example of a Python function.\"\n      embedding_provider = OpenAIEmbedding() \n      embedding = embedding_provider.build_embedding(symbol_source)\n      \n      # Check if the generated embedding is a numpy array\n      assert isinstance(embedding, np.ndarray)\n      ```\n      \n      ## Limitations\n      \n      As `EmbeddingProvider` is an abstract base class, it cannot be instantiated directly. Users must create their own classes that inherit from `EmbeddingProvider` and implement the necessary methods. This can be a limitation for users who are not familiar with creating custom classes and implementing abstract methods.\n      \n      Additionally, the specific embedding approach and model used by a concrete implementation of `EmbeddingProvider` may limit the overall performance and accuracy of the embeddings.\n      \n      ## Follow-up Questions:\n      \n      - How can we efficiently implement new embedding providers for different types of models?\n      - What are the best practices for selecting an optimal embedding provider for a given task?\n      \n    Class Docstring:\n      A class to provide embeddings for symbols\n      \n    Methods:\n      @abc.abstractmethod\n          def build_embedding(self, symbol_source: str) -> np.ndarray:\n              pass\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.tests.unit.test_symbol_embedding.test_get_embedding\n    \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingProvider methods\n            mock_provider = Mock(EmbeddingProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], \"symbol_source\", mock_embedding\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.embedding.embedding_types.SymbolEmbeddingHandler\n    \n        `SymbolEmbeddingHandler` is an abstract class that manages symbol embeddings by fetching and updating the vector embeddings related to various kinds of symbols. It must be subclassed by other classes that provide implementations of the defined abstract methods, such as `get_embedding()` and `update_embedding()`. The performance of these methods may depend on the chosen embedding provider and database used for storing the embeddings.\n        \n        Here is an example of how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n        \n        ```python\n        from automata.core.embedding.embedding_types import SymbolEmbeddingHandler\n        from automata.core.symbol.symbol_types import Symbol\n        \n        class CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n            def __init__(self, embedding_db, embedding_provider):\n                super().__init__(embedding_db, embedding_provider)\n        \n            def get_embedding(self, symbol: Symbol):\n                # Implement logic to get the embedding for a custom symbol\n                pass\n        \n            def update_embedding(self, symbol: Symbol):\n                # Implement logic to update the embedding for a custom symbol\n                pass\n        \n        # Example usage:\n        custom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\n        custom_embedding = custom_handler.get_embedding(custom_symbol)\n        ```\n        \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider\n        \n            \n        get_embedding(self, symbol: Symbol) -> Any\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.embedding.embedding_types.OpenAIEmbedding\n    \n        `OpenAIEmbedding` is a class for obtaining embeddings for symbols using the OpenAI API. It inherits from the `EmbeddingProvider` abstract class and allows the construction of embeddings for source code via API calls to OpenAI. By default, it uses the \"text-embedding-ada-002\" engine, but users can specify a different engine if desired. The primary limitation of this class is its reliance on external API calls, requiring an internet connection and a valid API key. Consequently, speed and availability depend on the performance and restrictions imposed by OpenAI. Here's an example of its usage:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        \n        # Initialize OpenAIEmbedding instance\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create an example source code\n        symbol_source = \"def greet(name):\\n    return f\\\"Hello {name}!\\\"\"\n        \n        # Get the embedding for the symbol\n        embedding_array = embedding_provider.build_embedding(symbol_source)\n        \n        print(embedding_array.shape)\n        ```\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self, engine: str = \"text-embedding-ada-002\"):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n                self.engine = engine\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.database.provider.SymbolDatabaseProvider\n    \n        The SymbolDatabaseProvider is an abstract base class designed for handling symbol embedding storage and retrieval in databases. It offers a generic interface for managing database operations related to symbol embeddings, allowing customization and flexibility in storage methods. Subclasses can implement various storage mechanisms optimized for specific needs, while users interact with the database consistently. Since SymbolDatabaseProvider is an abstract base class, users need to subclass it and implement its abstract methods to provide their database implementation using specific storage mechanisms. This customization may require a deeper understanding of the underlying storage methods. An example implementation using a JSON file for storage can be found in the original documentation.\n        \n      Class Docstring:\n        Abstract base class for different types of database providers.\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> Any\n        \n        load(self) -> Any\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.symbol_types.SymbolDocEmbedding\n    \n        `SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class with added metadata such as source code, summary, and context. This class is utilized alongside `SymbolDocEmbeddingHandler` to manage and access these embeddings for tasks like search and similarity comparison. However, it relies on external handler classes and assumes embeddings are provided as NumPy arrays, potentially limiting usage for other embedding types.\n        \n        ```python\n        import numpy as np\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.symbol.symbol_types import SymbolDocEmbedding\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = Symbol.from_string(symbol_str)\n        \n        document = \"This is a sample document\"\n        vector = np.array([0.1, 0.2, 0.3])\n        source_code = \"class ActionIndicator(Enum): ...\"\n        summary = \"This class represents an enum for action indicators.\"\n        context = \"The ActionIndicator enum is used to describe the current state...\"\n        \n        embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                document: str,\n                vector: np.array,\n                source_code: Optional[str] = None,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, document, vector)\n                # begin additional meta data\n                self.source_code = source_code\n                self.summary = summary\n                self.context = context\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.embedding.embedding_types`/EmbeddingSimilarity#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "EmbeddingSimilarity", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# EmbeddingSimilarity\n\n`EmbeddingSimilarity` is an abstract base class that provides an interface for finding the most similar symbols to a given query text in a codebase. It relies on embeddings, which are numerical representations of text data. Given a query, EmbeddingSimilarity computes the similarity between this query and the existing symbols in the codebase and returns the results. The primary methods in this class are `get_nearest_entries_for_query` and `get_query_similarity_dict`. Implementations of this class provide the functionality for different types of similarity calculations \n\n## Related Symbols\n\n- `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.symbol.symbol_types.SymbolEmbedding`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.core.database.vector.VectorDatabaseProvider.calculate_similarity`\n- `automata.core.embedding.embedding_types.EmbeddingProvider`\n\n## Example\n\nBelow is an example demonstrating how to create a custom implementation of `EmbeddingSimilarity`:\n\n```python\nimport numpy as np\nfrom automata.core.embedding.embedding_types import EmbeddingSimilarity\n\nclass CustomEmbeddingSimilarity(EmbeddingSimilarity):\n\n    def __init__(self, embedding_handler):\n        self.embedding_handler = embedding_handler\n\n    def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Symbol, float]:\n        # Implement custom logic to find k nearest entries\n        pass\n\n    def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n        # Implement custom logic to compute similarity between query and symbols\n        pass\n\n# Create an instance\nembedding_handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\ncustom_similarity = CustomEmbeddingSimilarity(embedding_handler)\n```\n\n## Limitations\n\nThe `EmbeddingSimilarity` class itself serves as an interface for the specific implementations, which allows for different approaches to calculate similarity. The primary issue here is that those implementations can handle different types of embeddings and similarity calculations, so choosing or creating the correct one is crucial for achieving accurate results. Also, depending on the chosen embedding provider, the quality and speed of retrieving embeddings could vary. As it is an abstract class, it cannot be instantiated directly and requires implementation of its methods.\n\n## Follow-up Questions:\n\n- How can we optimize the performance of similarity calculations for large codebases?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class EmbeddingSimilarity(abc.ABC):\n    @abc.abstractmethod\n    def get_query_similarity_dict(self, query_text: str) -> Dict[Any, float]:\n        \"\"\"An abstract method to get the similarity between a query and all symbols\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Any, float]:\n        \"\"\"An abstract method to get the k nearest symbols to a query\"\"\"\n        pass\n", "summary": "`EmbeddingSimilarity` is an abstract base class for finding the most similar symbols to a given query text in a codebase using embeddings, which are numerical representations of text data. The class contains primary methods `get_nearest_entries_for_query` and `get_query_similarity_dict` that need to be implemented in a custom subclass to provide functionality for different types of similarity calculations. When working with large codebases, it is crucial to choose or create the correct implementation for accurate results. The quality and speed of retrieving embeddings may vary depending on the selected embedding provider.\n\nExample:\n\n```python\nimport numpy as np\nfrom automata.core.embedding.embedding_types import EmbeddingSimilarity\n\nclass CustomEmbeddingSimilarity(EmbeddingSimilarity):\n\n    def __init__(self, embedding_handler):\n        self.embedding_handler = embedding_handler\n\n    def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Symbol, float]:\n        # Implement custom logic to find k nearest entries\n        pass\n\n    def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n        # Implement custom logic to compute similarity between query and symbols\n        pass\n\n# Create an instance\nembedding_handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\ncustom_similarity = CustomEmbeddingSimilarity(embedding_handler)\n```", "context": "\n    Generate the documentation for EmbeddingSimilarity using the context shown below -\n  Building context for primary symbol - automata.core.embedding.embedding_types.EmbeddingSimilarity -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict\n      from automata.core.database.vector import VectorDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n      # EmbeddingSimilarity\n      \n      `EmbeddingSimilarity` is an abstract base class that provides an interface for finding the most similar symbols to a given query text in a codebase. It relies on embeddings, which are numerical representations of text data. Given a query, EmbeddingSimilarity computes the similarity between this query and the existing symbols in the codebase and returns the results. The primary methods in this class are `get_nearest_entries_for_query` and `get_query_similarity_dict`. Implementations of this class provide the functionality for different types of similarity calculations and embedding providers.\n      \n      ## Related Symbols\n      \n      - `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.symbol.symbol_types.SymbolEmbedding`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.core.database.vector.VectorDatabaseProvider.calculate_similarity`\n      - `automata.core.embedding.embedding_types.EmbeddingProvider`\n      \n      ## Example\n      \n      Below is an example demonstrating how to create a custom implementation of `EmbeddingSimilarity`:\n      \n      ```python\n      import numpy as np\n      from automata.core.embedding.embedding_types import EmbeddingSimilarity\n      \n      class CustomEmbeddingSimilarity(EmbeddingSimilarity):\n          \n          def __init__(self, embedding_handler):\n              self.embedding_handler = embedding_handler\n          \n          def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Symbol, float]:\n              # Implement custom logic to find k nearest entries\n              pass\n              \n          def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n              # Implement custom logic to compute similarity between query and symbols\n              pass\n      \n      # Create an instance\n      embedding_handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n      custom_similarity = CustomEmbeddingSimilarity(embedding_handler)\n      ```\n      \n      ## Limitations\n      \n      The `EmbeddingSimilarity` class itself serves as an interface for the specific implementations, which allows for different approaches to calculate similarity. The primary issue here is that those implementations can handle different types of embeddings and similarity calculations, so choosing or creating the correct one is crucial for achieving accurate results. Also, depending on the chosen embedding provider, the quality and speed of retrieving embeddings could vary. As it is an abstract class, it cannot be instantiated directly and requires implementation of its methods.\n      \n      ## Follow-up Questions:\n      \n      - How can we optimize the performance of similarity calculations for large codebases?\n      \n    Methods:\n      @abc.abstractmethod\n          def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Any, float]:\n              \"\"\"An abstract method to get the k nearest symbols to a query\"\"\"\n              pass\n      \n      @abc.abstractmethod\n          def get_query_similarity_dict(self, query_text: str) -> Dict[Any, float]:\n              \"\"\"An abstract method to get the similarity between a query and all symbols\"\"\"\n              pass\n      \n          \n  Building context for related symbols -\n  \n    automata.core.embedding.symbol_similarity.SymbolSimilarity\n    \n        `SymbolSimilarity` is a class that computes similarity scores between query texts and symbols using embeddings, and allows users to retrieve the most similar symbols for a specific query and create a dictionary mapping the similarity scores to each symbol. Users can set the available symbols for the calculation, and the similarity scores depend on the quality of the supplied pre-trained embeddings and selected norm type. The class uses a `SymbolCodeEmbeddingHandler` for handling embeddings, which affects the accuracy of the results.\n        \n        Example usage of `SymbolSimilarity`:\n        ```python\n        import numpy as np\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        from automata.core.embedding.embedding_types import EmbeddingProvider, NormType\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        \n        embedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n        symbol_similarity.set_available_symbols(available_symbols)\n        nearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n        query_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.database.vector.VectorDatabaseProvider.calculate_similarity\n    \n      Class Docstring:\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.tests.unit.conftest.patch_get_embedding\n    \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n        \n    automata.tests.unit.test_symbol_similarity.test_get_nearest_symbols_for_query\n    \n        def test_get_nearest_symbols_for_query(\n            monkeypatch, mock_embedding, mock_simple_method_symbols, temp_output_filename\n        ):\n            # Mocking symbols and their embeddings\n            symbol1 = mock_simple_method_symbols[0]\n            symbol2 = mock_simple_method_symbols[1]\n            symbol3 = mock_simple_method_symbols[2]\n        \n            embedding1 = SymbolCodeEmbedding(\n                symbol=symbol1, vector=np.array([1, 0, 0, 0]), source_code=\"symbol1\"\n            )\n            embedding2 = SymbolCodeEmbedding(\n                symbol=symbol2, vector=np.array([0, 1, 0, 0]), source_code=\"symbol2\"\n            )\n            embedding3 = SymbolCodeEmbedding(\n                symbol=symbol3, vector=np.array([0, 0, 1, 0]), source_code=\"symbol3\"\n            )\n        \n            # Mock JSONVectorDatabase methods\n            embedding_db = JSONVectorDatabase(temp_output_filename)\n            embedding_db.add(embedding1)\n            embedding_db.add(embedding2)\n            embedding_db.add(embedding3)\n        \n            # Create an instance of the class\n            mock_provider = MagicMock(EmbeddingProvider)\n            cem = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=mock_provider)\n        \n            symbol_similarity = SymbolSimilarity(cem)\n        \n            # Test with query_text that is most similar to symbol1\n            cem.embedding_provider.build_embedding.return_value = np.array([1, 0, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol1\", k=1)\n            assert list(result.keys()) == [symbol1]\n        \n            # Test with query_text that is most similar to symbol2\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 1, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol2\", k=1)\n            assert list(result.keys()) == [symbol2]\n        \n            # Test with query_text that is most similar to symbol3\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 0, 1, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol3\", k=1)\n            assert list(result.keys()) == [symbol3]\n        \n        \n    automata.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n        `SymbolCodeEmbedding` is a class extending the `SymbolEmbedding` base class, used to store code embeddings for a given symbol, the symbol object, source code, and the embedding vector. It primarily serves as a container for these embeddings and does not include functionality for generating or handling them; `SymbolCodeEmbeddingHandler` should be used for those purposes.\n        \n        Here's an example of creating a `SymbolCodeEmbedding` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def example_function():\\n    pass\"\n        vector = np.random.random((300,))\n        \n        embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n                super().__init__(symbol, source_code, vector)\n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.embedding.embedding_types`/NormType#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "NormType", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# NormType\n\n`NormType` is an enumeration class representing the different normalization techniques available for use while calculating similarity in a `SymbolSimilarity` object. It offers three options, L1, L2, and softmax for normalization, which can be utilized by the `SymbolSimilarity` class while computing similarities between symbols in a related codebase.\n\n## Related Symbols\n\n- `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following example demonstrates how to create a `SymbolSimilarity` instance using a custom `NormType`.\n\n```python\nfrom automata.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata.core.embedding.embedding_types import NormType\nfrom automata.core.embedding.manager.code_embedding_manager import SymbolCodeEmbeddingHandler\n\nsymbol_embedding_manager = SymbolCodeEmbeddingHandler()\ncustom_norm_type = NormType.L1\n\nsymbol_similarity = SymbolSimilarity(symbol_embedding_manager, custom_norm_type)\n```\n\n## Limitations\n\nOne potential limitation of using different normalization techniques within `SymbolSimilarity` is the possibility of differences in the interpretation of similarity results. While some techniques like L2 (Euclidean) are more commonly used and understood, others like L1 or softmax might be less familiar. Additionally, the choice of normalization technique can impact the efficiency of the similarity calculation algorithm.\n\n## Follow-up Questions:\n\n- Are there other normalization techniques that could be added to the `NormType` class?\n- How do different normalization techniques impact the performance and interpretation of similarity calculations?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class NormType(Enum):\n    L1 = \"l1\"\n    L2 = \"l2\"\n    SOFTMAX = \"softmax\"\n\n\n", "summary": "`NormType` is an enumeration class representing different normalization techniques (L1, L2, and softmax) available for calculating similarity in a `SymbolSimilarity` object. Users can create a `SymbolSimilarity` instance with a custom `NormType` as shown in the example below:\n\n```python\nfrom automata.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata.core.embedding.embedding_types import NormType\nfrom automata.core.embedding.manager.code_embedding_manager import SymbolCodeEmbeddingHandler\n\nsymbol_embedding_manager = SymbolCodeEmbeddingHandler()\ncustom_norm_type = NormType.L1\n\nsymbol_similarity = SymbolSimilarity(symbol_embedding_manager, custom_norm_type)\n```\n\nHowever, using different normalization techniques may lead to differences in the interpretation of similarity results and impact the efficiency of the algorithm.", "context": "\n    Generate the documentation for NormType using the context shown below -\n  Building context for primary symbol - automata.core.embedding.embedding_types.NormType -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict\n      from automata.core.database.vector import VectorDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n      # NormType\n      \n      `NormType` is an enumeration class representing the different normalization techniques available for use while calculating similarity in a `SymbolSimilarity` object. It offers three options, L1, L2, and softmax for normalization, which can be utilized by the `SymbolSimilarity` class while computing similarities between symbols in a related codebase.\n      \n      ## Related Symbols\n      \n      - `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n      - `automata.core.symbol.symbol_types.Symbol`\n      \n      ## Example\n      \n      The following example demonstrates how to create a `SymbolSimilarity` instance using a custom `NormType`.\n      \n      ```python\n      from automata.core.embedding.symbol_similarity import SymbolSimilarity\n      from automata.core.embedding.embedding_types import NormType\n      from automata.core.embedding.manager.code_embedding_manager import SymbolCodeEmbeddingHandler\n      \n      symbol_embedding_manager = SymbolCodeEmbeddingHandler()\n      custom_norm_type = NormType.L1\n      \n      symbol_similarity = SymbolSimilarity(symbol_embedding_manager, custom_norm_type)\n      ```\n      \n      ## Limitations\n      \n      One potential limitation of using different normalization techniques within `SymbolSimilarity` is the possibility of differences in the interpretation of similarity results. While some techniques like L2 (Euclidean) are more commonly used and understood, others like L1 or softmax might be less familiar. Additionally, the choice of normalization technique can impact the efficiency of the similarity calculation algorithm.\n      \n      ## Follow-up Questions:\n      \n      - Are there other normalization techniques that could be added to the `NormType` class?\n      - How do different normalization techniques impact the performance and interpretation of similarity calculations?\n      \n  Building context for related symbols -\n  \n    automata.core.embedding.symbol_similarity.SymbolSimilarity\n    \n        `SymbolSimilarity` is a class that computes similarity scores between query texts and symbols using embeddings, and allows users to retrieve the most similar symbols for a specific query and create a dictionary mapping the similarity scores to each symbol. Users can set the available symbols for the calculation, and the similarity scores depend on the quality of the supplied pre-trained embeddings and selected norm type. The class uses a `SymbolCodeEmbeddingHandler` for handling embeddings, which affects the accuracy of the results.\n        \n        Example usage of `SymbolSimilarity`:\n        ```python\n        import numpy as np\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        from automata.core.embedding.embedding_types import EmbeddingProvider, NormType\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        \n        embedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n        symbol_similarity.set_available_symbols(available_symbols)\n        nearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n        query_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata.core.embedding.symbol_similarity.SymbolSimilarity._normalize_embeddings\n    \n      Class Docstring:\n        Normalize the embeddings.\n        Args:\n        embeddings (np.ndarray): The embeddings\n        norm_type (NormType): The type of normalization (L1, L2, or softmax)\n        Returns:\n        The normalized embeddings\n        \n      Methods:\n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolDescriptor.PyKind\n    \n        `SymbolDescriptor` is a Python object representing the descriptor component of a URI within the `automata.core.symbol` framework. It serves as a building block for creating and parsing symbols and provides methods to work with descriptor components. For example, to create a `SymbolDescriptor` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolDescriptor\n        from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n        \n        descriptor = SymbolDescriptor(\n            name=\"ActionIndicator\",\n            suffix=DescriptorProto.TYPE,\n        )\n        ```\n        \n        It is closely tied to the `automata.core.symbol` framework and may require updates if the underlying descriptor format or parser implementation changes.\n        \n    automata.core.embedding.symbol_similarity.SymbolSimilarity.__init__\n    \n      Class Docstring:\n        Initialize SymbolSimilarity\n        \n        Args:\n        symbol_embedding_manager: A CodeEmbeddingManager\n        norm_type (NormType): The norm type to use for calculating similarity\n        \n        Returns:\n        An instance of SymbolSimilarity\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.__init__\n    \n        def __init__(self):\n                pass\n        \n            \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.embedding.embedding_types`/OpenAIEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "OpenAIEmbedding", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# OpenAIEmbedding\n\n`OpenAIEmbedding` is a class that provides embeddings for symbols using OpenAI API. It allows you to build and return embeddings for a given source code by making API calls to OpenAI service. Inherits from the `EmbeddingProvider` abstract class.\n\n## Overview\n\n`OpenAIEmbedding` takes an optional engine parameter to define the text embedding model to be used from OpenAI API. By default, it uses the \"text-embedding-ada-002\" engine. The main method of this class is `build_embedding`, which receives a symbol source code as input and returns the corresponding numpy array representing the embedding.\n\n## Import Statements\n\n```python\nimport numpy as np\nimport openai\nfrom config import OPENAI_API_KEY\nfrom openai.embeddings_utils import get_embedding\n```\n\n## Related Symbols\n\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.embedding.embedding_types.EmbeddingProvider`\n- `automata.core.symbol.symbol_types.SymbolEmbedding`\n- `config.OPENAI_API_KEY`\n\n## Example\n\nHere's an example of how to initialize and use `OpenAIEmbedding` to build embeddings for a symbol source.\n\n```python\nfrom automata.core.embedding.embedding_types import OpenAIEmbedding\n\n# Initialize OpenAIEmbedding instance\nembedding_provider = OpenAIEmbedding()\n\n# Create an example source code\nsymbol_source = \"def greet(name):\\n    return f\\\"Hello {name}!\\\"\"\n\n# Get the embedding for the symbol\nembedding_array = embedding_provider.build_embedding(symbol_source)\n\nprint(embedding_array.shape)\n```\n\n## Limitations\n\nThe primary limitation of `OpenAIEmbedding` is that it relies on external API calls to the OpenAI service, requiring an internet connection and a valid API key to work. As a result, the speed and availability of building embeddings depend on the OpenAI service's performance and any restrictions imposed by OpenAI, such as rate limits.\n\n## Follow-up Questions:\n\n- How can the user choose different OpenAI text embedding models?\n- Are there any specific feature differences across various OpenAI text embedding models?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class OpenAIEmbedding(EmbeddingProvider):\n    \"\"\"A class to provide embeddings for symbols\"\"\"\n\n    def __init__(self, engine: str = \"text-embedding-ada-002\"):\n        if not openai.api_key:\n            from config import OPENAI_API_KEY\n\n            openai.api_key = OPENAI_API_KEY\n        self.engine = engine\n\n    def build_embedding(self, symbol_source: str) -> np.ndarray:\n        \"\"\"\n        Get the embedding for a symbol.\n        Args:\n            symbol_source (str): The source code of the symbol\n        Returns:\n            A numpy array representing the embedding\n        \"\"\"\n        # wait to import build_embedding to allow easy mocking of the function in tests.\n        from openai.embeddings_utils import get_embedding\n\n        return np.array(get_embedding(symbol_source, engine=self.engine))\n\n\n", "summary": "`OpenAIEmbedding` is a class that provides embeddings for symbols using OpenAI API, inheriting from the `EmbeddingProvider` abstract class. By default, the class uses the \"text-embedding-ada-002\" engine, but users can specify other engines if desired. The main method, `build_embedding`, takes source code as input and returns a numpy array representing the corresponding embedding. To use `OpenAIEmbedding`, an internet connection and a valid API key are required, as the class relies on external API calls to the OpenAI service. Consequently, the speed and availability of building embeddings depend on the OpenAI service's performance and any restrictions imposed, such as rate limits.\n\nExample usage:\n```python\nfrom automata.core.embedding.embedding_types import OpenAIEmbedding\n\n# Initialize OpenAIEmbedding instance\nembedding_provider = OpenAIEmbedding()\n\n# Create an example source code\nsymbol_source = \"def greet(name):\\n    return f\\\"Hello {name}!\\\"\"\n\n# Get the embedding for the symbol\nembedding_array = embedding_provider.build_embedding(symbol_source)\n\nprint(embedding_array.shape)\n```\n", "context": "\n    Generate the documentation for OpenAIEmbedding using the context shown below -\n  Building context for primary symbol - automata.core.embedding.embedding_types.OpenAIEmbedding -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict\n      from automata.core.database.vector import VectorDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n      # OpenAIEmbedding\n      \n      `OpenAIEmbedding` is a class that provides embeddings for symbols using OpenAI API. It allows you to build and return embeddings for a given source code by making API calls to OpenAI service. Inherits from the `EmbeddingProvider` abstract class.\n      \n      ## Overview\n      \n      `OpenAIEmbedding` takes an optional engine parameter to define the text embedding model to be used from OpenAI API. By default, it uses the \"text-embedding-ada-002\" engine. The main method of this class is `build_embedding`, which receives a symbol source code as input and returns the corresponding numpy array representing the embedding.\n      \n      ## Import Statements\n      \n      ```python\n      import numpy as np\n      import openai\n      from automata.core.embedding.embedding_types import EmbeddingProvider\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      ```\n      \n      ## Related Symbols\n      \n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.embedding.embedding_types.EmbeddingProvider`\n      - `automata.core.symbol.symbol_types.SymbolEmbedding`\n      - `config.OPENAI_API_KEY`\n      \n      ## Example\n      \n      Here's an example of how to initialize and use `OpenAIEmbedding` to build embeddings for a symbol source.\n      \n      ```python\n      from automata.core.embedding.embedding_types import OpenAIEmbedding\n      \n      # Initialize OpenAIEmbedding instance\n      embedding_provider = OpenAIEmbedding()\n      \n      # Create an example source code\n      symbol_source = \"def greet(name):\\n    return f\\\"Hello {name}!\\\"\"\n      \n      # Get the embedding for the symbol\n      embedding_array = embedding_provider.build_embedding(symbol_source)\n      \n      print(embedding_array.shape)\n      ```\n      \n      ## Limitations\n      \n      The primary limitation of `OpenAIEmbedding` is that it relies on external API calls to the OpenAI service, requiring an internet connection and a valid API key to work. As a result, the speed and availability of building embeddings depend on the OpenAI service's performance and any restrictions imposed by OpenAI, such as rate limits.\n      \n      ## Follow-up Questions:\n      \n      - How can the user choose different OpenAI text embedding models?\n      - Are there any specific feature differences across various OpenAI text embedding models?\n      \n    Class Docstring:\n      A class to provide embeddings for symbols\n      \n    Methods:\n      def __init__(self, engine: str = \"text-embedding-ada-002\"):\n              if not openai.api_key:\n                  from config import OPENAI_API_KEY\n      \n                  openai.api_key = OPENAI_API_KEY\n              self.engine = engine\n      \n          \n      def build_embedding(self, symbol_source: str) -> np.ndarray:\n              \"\"\"\n              Get the embedding for a symbol.\n              Args:\n                  symbol_source (str): The source code of the symbol\n              Returns:\n                  A numpy array representing the embedding\n              \"\"\"\n              # wait to import build_embedding to allow easy mocking of the function in tests.\n              from openai.embeddings_utils import get_embedding\n      \n              return np.array(get_embedding(symbol_source, engine=self.engine))\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.conftest.patch_get_embedding\n    \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n        `SymbolCodeEmbedding` is a class extending the `SymbolEmbedding` base class, used to store code embeddings for a given symbol, the symbol object, source code, and the embedding vector. It primarily serves as a container for these embeddings and does not include functionality for generating or handling them; `SymbolCodeEmbeddingHandler` should be used for those purposes.\n        \n        Here's an example of creating a `SymbolCodeEmbedding` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def example_function():\\n    pass\"\n        vector = np.random.random((300,))\n        \n        embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n                super().__init__(symbol, source_code, vector)\n        \n        \n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.embedding.symbol_similarity.SymbolSimilarity\n    \n        `SymbolSimilarity` is a class that computes similarity scores between query texts and symbols using embeddings, and allows users to retrieve the most similar symbols for a specific query and create a dictionary mapping the similarity scores to each symbol. Users can set the available symbols for the calculation, and the similarity scores depend on the quality of the supplied pre-trained embeddings and selected norm type. The class uses a `SymbolCodeEmbeddingHandler` for handling embeddings, which affects the accuracy of the results.\n        \n        Example usage of `SymbolSimilarity`:\n        ```python\n        import numpy as np\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        from automata.core.embedding.embedding_types import EmbeddingProvider, NormType\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        \n        embedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n        symbol_similarity.set_available_symbols(available_symbols)\n        nearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n        query_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata.core.database.provider.SymbolDatabaseProvider.update\n    \n      Class Docstring:\n        Abstract method to update an existing embedding.\n        \n      Methods:\n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.embedding.embedding_types`/SymbolEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolEmbeddingHandler\n\n`SymbolEmbeddingHandler` is an abstract class used to handle the embedding of symbols. It provides an interface for getting and updating the embeddings for symbols using different types of embeddings.\n\n## Overview\n\nThe `SymbolEmbeddingHandler` defines the basic structure and methods required for managing symbol embeddings. Its main purpose is to fetch and update the vector embeddings associated with different kinds of symbols. This class has to be extended by other classes to provide the implementation of the abstract methods defined in this class.\n\n## Related Symbols\n\n* `automata.core.embedding.embedding_types.EmbeddingProvider`\n* `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n* `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n* `automata.core.event.vector_storage.VectorDatabaseProvider`\n* `automata.core.symbol.symbol_types.Symbol`\n* `automata.core.symbol.symbol_types.SymbolEmbedding`\n\n## Example\n\nThe following example demonstrates how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n\n```python\nfrom automata.core.embedding.embedding_types import SymbolEmbeddingHandler\nfrom automata.core.symbol.symbol_types import Symbol\n\nclass CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(self, embedding_db, embedding_provider):\n        super().__init__(embedding_db, embedding_provider)\n\n    def get_embedding(self, symbol: Symbol):\n        # Implement logic to get the embedding for a custom symbol\n        pass\n\n    def update_embedding(self, symbol: Symbol):\n        # Implement logic to update the embedding for a custom symbol\n        pass\n\n# Example usage:\ncustom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\ncustom_embedding = custom_handler.get_embedding(custom_symbol)\n```\n\n## Limitations\n\nSince `SymbolEmbeddingHandler` is an abstract class, it cannot be instantiated directly. Instead, it must be subclassed and the abstract methods must be implemented in the derived class.\n\nThe implementation of the `get_embedding()` and `update_embedding()` methods in the derived class will depend on the context and the type of symbol embeddings used. The performance of these methods might vary based on the selected embedding provider and the database used for storing the embeddings.\n\n## Follow-up Questions:\n\n- How can we extend this class to handle other types of embeddings?\n- How can the performance of this class be improved for specific use cases?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolEmbeddingHandler(abc.ABC):\n    \"\"\"An abstract class to handle the embedding of symbols\"\"\"\n\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: EmbeddingProvider,\n    ):\n        \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n        self.embedding_db = embedding_db\n        self.embedding_provider = embedding_provider\n\n    @abc.abstractmethod\n    def get_embedding(self, symbol: Symbol) -> Any:\n        \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n        pass\n\n\n", "summary": "`SymbolEmbeddingHandler` is an abstract class responsible for managing symbol embeddings, specifically fetching and updating vector embeddings for different kinds of symbols. To use this class, it must be subclassed, and the abstract methods `get_embedding()` and `update_embedding()` must be implemented in the derived class. The performance of these methods may vary based on the chosen embedding provider and the database that stores the embeddings. \n\nFor example, here is how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n```python\nfrom automata.core.embedding.embedding_types import SymbolEmbeddingHandler\nfrom automata.core.symbol.symbol_types import Symbol\n\nclass CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(self, embedding_db, embedding_provider):\n        super().__init__(embedding_db, embedding_provider)\n\n    def get_embedding(self, symbol: Symbol):\n        # Implement logic to get the embedding for a custom symbol\n        pass\n\n    def update_embedding(self, symbol: Symbol):\n        # Implement logic to update the embedding for a custom symbol\n        pass\n\n# Example usage:\ncustom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\ncustom_embedding = custom_handler.get_embedding(custom_symbol)\n```", "context": "\n    Generate the documentation for SymbolEmbeddingHandler using the context shown below -\n  Building context for primary symbol - automata.core.embedding.embedding_types.SymbolEmbeddingHandler -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict\n      from automata.core.database.vector import VectorDatabaseProvider\n      from automata.core.symbol.symbol_types import Symbol\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n      # SymbolEmbeddingHandler\n      \n      `SymbolEmbeddingHandler` is an abstract class used to handle the embedding of symbols. It provides an interface for getting and updating the embeddings for symbols using different types of embeddings.\n      \n      ## Overview\n      \n      The `SymbolEmbeddingHandler` defines the basic structure and methods required for managing symbol embeddings. Its main purpose is to fetch and update the vector embeddings associated with different kinds of symbols. This class has to be extended by other classes to provide the implementation of the abstract methods defined in this class.\n      \n      ## Related Symbols\n      \n      * `automata.core.embedding.embedding_types.EmbeddingProvider`\n      * `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      * `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n      * `automata.core.event.vector_storage.VectorDatabaseProvider`\n      * `automata.core.symbol.symbol_types.Symbol`\n      * `automata.core.symbol.symbol_types.SymbolEmbedding`\n      \n      ## Example\n      \n      The following example demonstrates how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n      \n      ```python\n      from automata.core.embedding.embedding_types import SymbolEmbeddingHandler\n      from automata.core.symbol.symbol_types import Symbol\n      \n      class CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n          def __init__(self, embedding_db, embedding_provider):\n              super().__init__(embedding_db, embedding_provider)\n      \n          def get_embedding(self, symbol: Symbol):\n              # Implement logic to get the embedding for a custom symbol\n              pass\n      \n          def update_embedding(self, symbol: Symbol):\n              # Implement logic to update the embedding for a custom symbol\n              pass\n      \n      # Example usage:\n      custom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\n      custom_embedding = custom_handler.get_embedding(custom_symbol)\n      ```\n      \n      ## Limitations\n      \n      Since `SymbolEmbeddingHandler` is an abstract class, it cannot be instantiated directly. Instead, it must be subclassed and the abstract methods must be implemented in the derived class.\n      \n      The implementation of the `get_embedding()` and `update_embedding()` methods in the derived class will depend on the context and the type of symbol embeddings used. The performance of these methods might vary based on the selected embedding provider and the database used for storing the embeddings.\n      \n      ## Follow-up Questions:\n      \n      - How can we extend this class to handle other types of embeddings?\n      - How can the performance of this class be improved for specific use cases?\n      \n    Class Docstring:\n      An abstract class to handle the embedding of symbols\n      \n    Methods:\n      def __init__(\n              self,\n              embedding_db: VectorDatabaseProvider,\n              embedding_provider: EmbeddingProvider,\n          ):\n              \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n              self.embedding_db = embedding_db\n              self.embedding_provider = embedding_provider\n      \n          \n      @abc.abstractmethod\n          def get_embedding(self, symbol: Symbol) -> Any:\n              \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def update_embedding(self, symbol: Symbol):\n              \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n              pass\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.symbol.symbol_types.SymbolDocEmbedding\n    \n        `SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class with added metadata such as source code, summary, and context. This class is utilized alongside `SymbolDocEmbeddingHandler` to manage and access these embeddings for tasks like search and similarity comparison. However, it relies on external handler classes and assumes embeddings are provided as NumPy arrays, potentially limiting usage for other embedding types.\n        \n        ```python\n        import numpy as np\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.symbol.symbol_types import SymbolDocEmbedding\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = Symbol.from_string(symbol_str)\n        \n        document = \"This is a sample document\"\n        vector = np.array([0.1, 0.2, 0.3])\n        source_code = \"class ActionIndicator(Enum): ...\"\n        summary = \"This class represents an enum for action indicators.\"\n        context = \"The ActionIndicator enum is used to describe the current state...\"\n        \n        embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                document: str,\n                vector: np.array,\n                source_code: Optional[str] = None,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, document, vector)\n                # begin additional meta data\n                self.source_code = source_code\n                self.summary = summary\n                self.context = context\n        \n    automata.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n        `SymbolCodeEmbedding` is a class extending the `SymbolEmbedding` base class, used to store code embeddings for a given symbol, the symbol object, source code, and the embedding vector. It primarily serves as a container for these embeddings and does not include functionality for generating or handling them; `SymbolCodeEmbeddingHandler` should be used for those purposes.\n        \n        Here's an example of creating a `SymbolCodeEmbedding` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def example_function():\\n    pass\"\n        vector = np.random.random((300,))\n        \n        embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n                super().__init__(symbol, source_code, vector)\n        \n        \n        \n    automata.tests.unit.test_symbol_embedding.test_get_embedding\n    \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingProvider methods\n            mock_provider = Mock(EmbeddingProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], \"symbol_source\", mock_embedding\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n  Building context for dependencies -\n  \n    automata.core.database.vector.VectorDatabaseProvider\n    \n        `VectorDatabaseProvider` is an abstract base class designed for implementing custom vector database providers. It provides a basic structure for a vector storage system and requires subclasses to implement the `calculate_similarity()` and `get_all_symbols()` abstract methods. The former computes the similarity between a given vector and all stored vectors, while the latter retrieves a list of all symbols in the database. However, the base class does not offer built-in functionality for adding, updating, or removing symbols and their embeddings, requiring implementers to handle these operations themselves. A basic example implementation of the `VectorDatabaseProvider` class can be seen in the provided code snippet.\n        \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.embedding.symbol_similarity`/SymbolSimilarity#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.embedding.symbol_similarity", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolSimilarity", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolSimilarity\n\n`SymbolSimilarity` is a class providing functionality to compute similarity scores between given query texts and symbols using embeddings. You can retrieve the most similar symbols for a specific query and create a dictionary mapping the similarity scores to each symbol. Additionally, you have the flexibility to set the available symbols for similarity calculation.\n\n## Overview\n\nThe `SymbolSimilarity` class takes a `SymbolCodeEmbeddingHandler`, and an optional `NormType` to calculate similarity between query texts and symbols. It offers methods to get available symbols, get the nearest symbols for a query, and get the similarity dictionary for a query. The class uses embeddings and a variety of similarity metrics for determining the similarity between query texts and symbols.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.embedding.embedding_types.EmbeddingSimilarity`\n- `automata.core.symbol.search.symbol_search.SymbolSearch`\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.embedding.embedding_types.NormType`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolSimilarity` using a predefined `SymbolCodeEmbeddingHandler`.\n\n```python\nimport numpy as np\nfrom automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\nfrom automata.core.embedding.embedding_types import EmbeddingProvider, NormType\nfrom automata.core.embedding.symbol_similarity import SymbolSimilarity\n\n# Instance of a SymbolCodeEmbeddingHandler\nembedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n\n# Create an instance of SymbolSimilarity\nsymbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n\n# Set available symbols\nsymbol_similarity.set_available_symbols(available_symbols)\n\n# Get the nearest entries for a query\nnearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n\n# Get the query similarity dictionary\nquery_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n```\n\n## Limitations\n\n- The primary limitation of `SymbolSimilarity` is its reliance on pre-trained embeddings, which means the quality of the similarity scores depends on the quality of the embeddings and the selected norm type. If embeddings do not accurately represent the symbols or the norm type is not suitable for the given problem, the similarity scores might not be as accurate.\n- As `SymbolSimilarity` uses `SymbolCodeEmbeddingHandler` to handle embeddings, if `SymbolCodeEmbeddingHandler` is not properly constructed or initialized, the class may not provide the desired results.\n\n## Follow-up Questions:\n\n- How can we extend `SymbolSimilarity` for other types of embeddings or similarity measurements?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolSimilarity(EmbeddingSimilarity):\n    def __init__(\n        self,\n        symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n        norm_type: NormType = NormType.L2,\n    ):\n        \"\"\"\n        Initialize SymbolSimilarity\n\n        Args:\n            symbol_embedding_manager: A CodeEmbeddingManager\n            norm_type (NormType): The norm type to use for calculating similarity\n\n        Returns:\n            An instance of SymbolSimilarity\n        \"\"\"\n        self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n        self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n        self.norm_type = norm_type\n        supported_symbols = self.embedding_handler.get_all_supported_symbols()\n        self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n        self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n        self.available_symbols: Optional[Set[Symbol]] = None\n\n    def set_available_symbols(self, available_symbols: Set[Symbol]):\n        \"\"\"\n        Set the available symbols to use for similarity calculation\n\n        Args:\n            available_symbols (Set[Symbol]): The available symbols to\n                use for similarity calculation\n        \"\"\"\n        self.available_symbols = available_symbols\n\n    def get_available_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Set the available symbols to use for similarity calculation\n\n        Args:\n            available_symbols (Set[Symbol]): The available symbols to\n                use for similarity calculation\n        \"\"\"\n        return [\n            symbol\n            for symbol in self.symbol_to_index\n            if not self.available_symbols or symbol in self.available_symbols\n        ]\n\n    def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n        \"\"\"\n        Get the similarity scores of all symbols for the query_text\n\n        Args:\n            query_text (str): The query text\n\n        Returns:\n            A dictionary mapping each symbol's uri to its similarity score with the query\n        \"\"\"\n        query_embedding = self.embedding_provider.build_embedding(query_text)\n\n        # Compute the similarity of the query to all symbols\n        similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n\n        similarity_dict = {\n            self.index_to_symbol[i]: similarity_scores[i]\n            for i in range(len(self.index_to_symbol))\n            if (not self.available_symbols) or self.index_to_symbol[i] in self.available_symbols\n        }\n        return similarity_dict\n\n    def get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]:\n        \"\"\"\n        Get the k most similar symbols to the query_text\n        Args:\n            query_text (str): The query text\n            k (int): The number of similar symbols to return\n        Returns:\n            A dictionary mapping the k most similar symbols to their similarity score\n        \"\"\"\n        query_embedding = self.embedding_provider.build_embedding(query_text)\n        # Compute the similarity of the query to all symbols\n        similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n\n        if self.available_symbols is not None:\n            # Filter the indices by available symbols\n            available_indices = [\n                i\n                for i in range(len(self.index_to_symbol))\n                if self.index_to_symbol[i] in self.available_symbols\n            ]\n            # Get the similarity scores for the available symbols\n            available_similarity_scores = similarity_scores[available_indices]\n            # Get the indices of the k symbols with the highest similarity scores among the available symbols\n            top_k_indices_in_available = np.argsort(available_similarity_scores)[-k:]\n            # Convert these indices back to the indices in the original list of symbols\n            top_k_indices = [available_indices[i] for i in top_k_indices_in_available]\n        else:\n            # Get the indices of the k symbols with the highest similarity scores\n            top_k_indices = np.argsort(similarity_scores)[-k:]\n\n        # Return the corresponding symbols\n        return {\n            self.index_to_symbol[index]: similarity_scores[index]\n            for index in reversed(top_k_indices)\n        }\n\n    def _get_ordered_embeddings(self) -> np.ndarray:\n        \"\"\"\n        Get the embeddings in the correct order\n\n        Returns:\n            A numpy array containing the ordered embeddings\n        \"\"\"\n        return np.array(\n            [\n                self.embedding_handler.get_embedding(symbol).vector\n                for symbol in self.index_to_symbol.values()\n            ]\n        )\n\n    def _calculate_query_similarity_vec(self, query_embedding: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Calculate the similarity scores of the query embedding with all symbol embeddings\n        Args:\n            query_embedding (np.ndarray): The query embedding\n            norm_type (str): The type of normalization ('l2' for L2 norm, 'softmax' for softmax)\n        Returns:\n            A numpy array containing the similarity scores\n        \"\"\"\n        embeddings = self._get_ordered_embeddings()\n\n        # Normalize the embeddings and the query embedding\n        embeddings_norm = self._normalize_embeddings(embeddings, self.norm_type)\n        query_embedding_norm = self._normalize_embeddings(\n            query_embedding[np.newaxis, :], self.norm_type\n        )[0]\n\n        # Compute the dot product between normalized embeddings and query\n        similarity_scores = np.dot(embeddings_norm, query_embedding_norm)\n\n        return similarity_scores\n\n    @staticmethod\n    def _normalize_embeddings(embeddings: np.ndarray, norm_type: NormType) -> np.ndarray:\n        \"\"\"\n        Normalize the embeddings.\n        Args:\n            embeddings (np.ndarray): The embeddings\n            norm_type (NormType): The type of normalization (L1, L2, or softmax)\n        Returns:\n            The normalized embeddings\n        \"\"\"\n        if norm_type == NormType.L1:\n            norm = np.sum(np.abs(embeddings), axis=1, keepdims=True)\n            return embeddings / norm\n        elif norm_type == NormType.L2:\n            return embeddings / np.linalg.norm(embeddings, axis=1, keepdims=True)\n        elif norm_type == NormType.SOFTMAX:\n            e_x = np.exp(embeddings - np.max(embeddings, axis=1, keepdims=True))\n            return e_x / np.sum(e_x, axis=1, keepdims=True)\n        else:\n            raise ValueError(f\"Invalid normalization type {norm_type}\")\n", "summary": "The `SymbolSimilarity` class computes similarity scores between query texts and symbols using embeddings. It relies on a `SymbolCodeEmbeddingHandler` and an optional `NormType` to determine similarity. Users can retrieve the most similar symbols for a specific query and create a dictionary mapping similarity scores to each symbol. The class allows users to set available symbols for similarity calculation and supports various similarity metrics. However, its accuracy depends on the quality of pre-trained embeddings and the selected norm type. If the embeddings do not accurately represent symbols, or the norm type is unsuitable, the similarity scores might be inaccurate.\n\nHere's an example:\n\n```python\nimport numpy as np\nfrom automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\nfrom automata.core.embedding.embedding_types import EmbeddingProvider, NormType\nfrom automata.core.embedding.symbol_similarity import SymbolSimilarity\n\n# Instance of a SymbolCodeEmbeddingHandler\nembedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n\n# Create an instance of SymbolSimilarity\nsymbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n\n# Set available symbols\nsymbol_similarity.set_available_symbols(available_symbols)\n\n# Get the nearest entries for a query\nnearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n\n# Get the query similarity dictionary\nquery_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n```\n", "context": "\n    Generate the documentation for SymbolSimilarity using the context shown below -\n  Building context for primary symbol - automata.core.embedding.symbol_similarity.SymbolSimilarity -\n  \n    Import Statements:\n      import logging\n      import numpy as np\n      from typing import Dict, List, Optional, Set\n      from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n      from automata.core.symbol.symbol_types import Symbol\n      from .embedding_types import EmbeddingProvider, EmbeddingSimilarity, NormType\n      \n      # SymbolSimilarity\n      \n      `SymbolSimilarity` is a class providing functionality to compute similarity scores between given query texts and symbols using embeddings. You can retrieve the most similar symbols for a specific query and create a dictionary mapping the similarity scores to each symbol. Additionally, you have the flexibility to set the available symbols for similarity calculation.\n      \n      ## Overview\n      \n      The `SymbolSimilarity` class takes a `SymbolCodeEmbeddingHandler`, and an optional `NormType` to calculate similarity between query texts and symbols. It offers methods to get available symbols, get the nearest symbols for a query, and get the similarity dictionary for a query. The class uses embeddings and a variety of similarity metrics for determining the similarity between query texts and symbols.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.embedding.embedding_types.EmbeddingSimilarity`\n      - `automata.core.symbol.search.symbol_search.SymbolSearch`\n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.embedding.embedding_types.NormType`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `SymbolSimilarity` using a predefined `SymbolCodeEmbeddingHandler`.\n      \n      ```python\n      import numpy as np\n      from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n      from automata.core.embedding.embedding_types import EmbeddingProvider, NormType\n      from automata.core.embedding.symbol_similarity import SymbolSimilarity\n      \n      # Instance of a SymbolCodeEmbeddingHandler\n      embedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n      \n      # Create an instance of SymbolSimilarity\n      symbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n      \n      # Set available symbols\n      symbol_similarity.set_available_symbols(available_symbols)\n      \n      # Get the nearest entries for a query\n      nearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n      \n      # Get the query similarity dictionary\n      query_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n      ```\n      \n      ## Limitations\n      \n      - The primary limitation of `SymbolSimilarity` is its reliance on pre-trained embeddings, which means the quality of the similarity scores depends on the quality of the embeddings and the selected norm type. If embeddings do not accurately represent the symbols or the norm type is not suitable for the given problem, the similarity scores might not be as accurate.\n      - As `SymbolSimilarity` uses `SymbolCodeEmbeddingHandler` to handle embeddings, if `SymbolCodeEmbeddingHandler` is not properly constructed or initialized, the class may not provide the desired results.\n      \n      ## Follow-up Questions:\n      \n      - How can we extend `SymbolSimilarity` for other types of embeddings or similarity measurements?\n      \n    Methods:\n      def __init__(\n              self,\n              symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n              norm_type: NormType = NormType.L2,\n          ):\n              \"\"\"\n              Initialize SymbolSimilarity\n      \n              Args:\n                  symbol_embedding_manager: A CodeEmbeddingManager\n                  norm_type (NormType): The norm type to use for calculating similarity\n      \n              Returns:\n                  An instance of SymbolSimilarity\n              \"\"\"\n              self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n              self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n              self.norm_type = norm_type\n              supported_symbols = self.embedding_handler.get_all_supported_symbols()\n              self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n              self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n              self.available_symbols: Optional[Set[Symbol]] = None\n      \n          \n      def get_available_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Set the available symbols to use for similarity calculation\n      \n              Args:\n                  available_symbols (Set[Symbol]): The available symbols to\n                      use for similarity calculation\n              \"\"\"\n              return [\n                  symbol\n                  for symbol in self.symbol_to_index\n                  if not self.available_symbols or symbol in self.available_symbols\n              ]\n      \n          \n      def get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]:\n              \"\"\"\n              Get the k most similar symbols to the query_text\n              Args:\n                  query_text (str): The query text\n                  k (int): The number of similar symbols to return\n              Returns:\n                  A dictionary mapping the k most similar symbols to their similarity score\n              \"\"\"\n              query_embedding = self.embedding_provider.build_embedding(query_text)\n              # Compute the similarity of the query to all symbols\n              similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n      \n              if self.available_symbols is not None:\n                  # Filter the indices by available symbols\n                  available_indices = [\n                      i\n                      for i in range(len(self.index_to_symbol))\n                      if self.index_to_symbol[i] in self.available_symbols\n                  ]\n                  # Get the similarity scores for the available symbols\n                  available_similarity_scores = similarity_scores[available_indices]\n                  # Get the indices of the k symbols with the highest similarity scores among the available symbols\n                  top_k_indices_in_available = np.argsort(available_similarity_scores)[-k:]\n                  # Convert these indices back to the indices in the original list of symbols\n                  top_k_indices = [available_indices[i] for i in top_k_indices_in_available]\n              else:\n                  # Get the indices of the k symbols with the highest similarity scores\n                  top_k_indices = np.argsort(similarity_scores)[-k:]\n      \n              # Return the corresponding symbols\n              return {\n                  self.index_to_symbol[index]: similarity_scores[index]\n                  for index in reversed(top_k_indices)\n              }\n      \n          \n      def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n              \"\"\"\n              Get the similarity scores of all symbols for the query_text\n      \n              Args:\n                  query_text (str): The query text\n      \n              Returns:\n                  A dictionary mapping each symbol's uri to its similarity score with the query\n              \"\"\"\n              query_embedding = self.embedding_provider.build_embedding(query_text)\n      \n              # Compute the similarity of the query to all symbols\n              similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n      \n              similarity_dict = {\n                  self.index_to_symbol[i]: similarity_scores[i]\n                  for i in range(len(self.index_to_symbol))\n                  if (not self.available_symbols) or self.index_to_symbol[i] in self.available_symbols\n              }\n              return similarity_dict\n      \n          \n      def set_available_symbols(self, available_symbols: Set[Symbol]):\n              \"\"\"\n              Set the available symbols to use for similarity calculation\n      \n              Args:\n                  available_symbols (Set[Symbol]): The available symbols to\n                      use for similarity calculation\n              \"\"\"\n              self.available_symbols = available_symbols\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.embedding.embedding_types.EmbeddingSimilarity\n    \n        `EmbeddingSimilarity` is an abstract base class providing an interface for finding the most similar symbols to a given query text in a codebase using embeddings, which are numerical representations of text data. Primary methods in this class are `get_nearest_entries_for_query` and `get_query_similarity_dict`. Implementations of this class cater to different types of similarity calculations and embedding providers. However, the class itself serves as an interface, and its effectiveness relies on the specific implementation, the choice of embedding provider, and the type of similarity calculation. \n        \n        Example:\n        \n        ```python\n        import numpy as np\n        from automata.core.embedding.embedding_types import EmbeddingSimilarity\n        \n        class CustomEmbeddingSimilarity(EmbeddingSimilarity):\n            \n            def __init__(self, embedding_handler):\n                self.embedding_handler = embedding_handler\n            \n            def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Symbol, float]:\n                # Implement custom logic to find k nearest entries\n                pass\n                \n            def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n                # Implement custom logic to compute similarity between query and symbols\n                pass\n        \n        # Create an instance\n        embedding_handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        custom_similarity = CustomEmbeddingSimilarity(embedding_handler)\n        ```\n        \n      Methods:\n        get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Any, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Any, float]\n        \n    automata.tests.unit.conftest.symbol_searcher\n    \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n        \n    automata.core.symbol.search.symbol_search.SymbolSearch\n    \n        `SymbolSearch` is a class used to search for symbols in a `SymbolGraph` by processing NLP-formatted queries and providing search results in various formats depending on the query type. The class utilizes a symbol similarity algorithm for ranking symbols according to relevance and a SymbolRank algorithm for computing a global symbol ranking. To use `SymbolSearch`, first initialize the necessary objects, such as `SymbolGraph` and `SymbolSimilarity`, then create a `SymbolSearch` object and process a query to obtain the search results.\n        \n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n        # Initialize necessary objects\n        symbol_graph = SymbolGraph()\n        symbol_similarity = SymbolSimilarity()\n        \n        # Create the SymbolSearch object\n        symbol_searcher = SymbolSearch(symbol_graph, symbol_similarity)\n        \n        # Process a query and get the search results\n        query = \"type:symbol_references <symbol_uri>\"\n        result = symbol_searcher.process_query(query)\n        ```\n        \n        Note that `SymbolSearch` relies on the availability of symbols in the `SymbolGraph` and `SymbolSimilarity` objects, and will produce incomplete or incorrect results if the necessary data is missing or the input query does not follow the expected format.\n        \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata.tests.unit.test_symbol_similarity.test_get_nearest_symbols_for_query\n    \n        def test_get_nearest_symbols_for_query(\n            monkeypatch, mock_embedding, mock_simple_method_symbols, temp_output_filename\n        ):\n            # Mocking symbols and their embeddings\n            symbol1 = mock_simple_method_symbols[0]\n            symbol2 = mock_simple_method_symbols[1]\n            symbol3 = mock_simple_method_symbols[2]\n        \n            embedding1 = SymbolCodeEmbedding(\n                symbol=symbol1, vector=np.array([1, 0, 0, 0]), source_code=\"symbol1\"\n            )\n            embedding2 = SymbolCodeEmbedding(\n                symbol=symbol2, vector=np.array([0, 1, 0, 0]), source_code=\"symbol2\"\n            )\n            embedding3 = SymbolCodeEmbedding(\n                symbol=symbol3, vector=np.array([0, 0, 1, 0]), source_code=\"symbol3\"\n            )\n        \n            # Mock JSONVectorDatabase methods\n            embedding_db = JSONVectorDatabase(temp_output_filename)\n            embedding_db.add(embedding1)\n            embedding_db.add(embedding2)\n            embedding_db.add(embedding3)\n        \n            # Create an instance of the class\n            mock_provider = MagicMock(EmbeddingProvider)\n            cem = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=mock_provider)\n        \n            symbol_similarity = SymbolSimilarity(cem)\n        \n            # Test with query_text that is most similar to symbol1\n            cem.embedding_provider.build_embedding.return_value = np.array([1, 0, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol1\", k=1)\n            assert list(result.keys()) == [symbol1]\n        \n            # Test with query_text that is most similar to symbol2\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 1, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol2\", k=1)\n            assert list(result.keys()) == [symbol2]\n        \n            # Test with query_text that is most similar to symbol3\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 0, 1, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol3\", k=1)\n            assert list(result.keys()) == [symbol3]\n        \n        \n    automata.core.symbol.symbol_types.SymbolReference.__eq__\n    \n      Methods:\n        __eq__(self, other) -> None\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.database.vector.VectorDatabaseProvider\n    \n        `VectorDatabaseProvider` is an abstract base class designed for implementing custom vector database providers. It provides a basic structure for a vector storage system and requires subclasses to implement the `calculate_similarity()` and `get_all_symbols()` abstract methods. The former computes the similarity between a given vector and all stored vectors, while the latter retrieves a list of all symbols in the database. However, the base class does not offer built-in functionality for adding, updating, or removing symbols and their embeddings, requiring implementers to handle these operations themselves. A basic example implementation of the `VectorDatabaseProvider` class can be seen in the provided code snippet.\n        \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n  Building context for dependencies -\n  \n    automata.core.embedding.embedding_types.NormType\n    \n        `NormType` is an enumeration class representing various normalization techniques available for calculating similarity in a `SymbolSimilarity` object, offering three options: L1, L2, and softmax. These can be used by the `SymbolSimilarity` class while computing similarities between symbols in a related codebase. However, using different normalization techniques may lead to potential limitations such as differences in interpretation and efficiency of similarity calculations. For example:\n        \n        ```python\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.embedding.embedding_types import NormType\n        from automata.core.embedding.manager.code_embedding_manager import SymbolCodeEmbeddingHandler\n        \n        symbol_embedding_manager = SymbolCodeEmbeddingHandler()\n        custom_norm_type = NormType.L1\n        \n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager, custom_norm_type)\n        ```\n        Possible follow-up questions include exploring other normalization techniques to add to the `NormType` class and understanding the impact of different normalization techniques on the performance and interpretation of similarity calculations.\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler.get_all_supported_symbols\n    \n      Class Docstring:\n        Get all the symbols in the database.\n        \n        Returns:\n        List[Symbol]: List of all the symbols in the database\n        \n      Methods:\n        get_all_supported_symbols(self) -> List[Symbol]\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider.build_embedding\n    \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler.get_embedding\n    \n      Class Docstring:\n        Get the embedding of a symbol.\n        \n        Args:\n        symbol (Symbol): Symbol to get the embedding for\n        \n        Returns:\n        Embedding: The embedding of the symbol\n        \n      Methods:\n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.graph`/GraphBuilder#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "GraphBuilder", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# GraphBuilder\n\n`GraphBuilder` is a class that enables the construction of a symbol graph from an `Index` object. The graph representation aids in exploring symbol relationships within source code.\n\n## Overview\n\nGiven an `Index` object as input, `GraphBuilder` processes the relationships and occurrences of each symbol in the index. The resulting graph is a networkx `MultiDiGraph` object, allowing for the identification of symbol patterns and relationships within the codebase.\n\nBy default, `GraphBuilder` does not include caller-callee relationships, for performance reasons. However, this feature can be enabled upon instantiation with the `build_caller_relationships` flag set to `True`.\n\n## Related Symbols\n\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.parser.parse_symbol`\n\n## Example\n\nThe following example demonstrates how to create a `GraphBuilder` instance and build a graph from an `Index` object.\n\n```python\nfrom automata.core.symbol.graph import GraphBuilder\nfrom automata.core.symbol.scip_pb2 import Index\n\nindex = Index()  # Assuming a populated index object.\nbuild_caller_relationships = True  # Optional\ngraph_builder = GraphBuilder(index, build_caller_relationships)\ngraph = graph_builder.build_graph()\n```\n\n## Limitations\n\n`GraphBuilder` may exhibit performance-related limitations, especially when the `build_caller_relationships` flag is set to `True`. This can lead to significantly longer processing times, as it involves an expensive operation to compute the caller-callee relationships.\n\n## Follow-up Questions:\n\n- Are there any ways to optimize the caller-callee relationship computation within the `GraphBuilder`?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class GraphBuilder:\n    \"\"\"\n    Builds a symbol graph from an Index.\n    \"\"\"\n\n    def __init__(self, index: Index, build_caller_relationships: bool = False):\n        \"\"\"\n        Args:\n            index (Index): An Index object\n            build_caller_relationships (bool, optional): Whether to build\n                caller-callee relationships. Defaults to False.\n        \"\"\"\n        self.index = index\n        self.build_caller_relationships = build_caller_relationships\n        self._graph = nx.MultiDiGraph()\n\n    def build_graph(self):\n        \"\"\"\n        Builds the graph from the index\n        \"\"\"\n        for document in self.index.documents:\n            self._add_file_vertices(document)\n            self._add_symbol_vertices(document)\n            self._process_relationships(document)\n            self._process_occurrences(document)\n            if self.build_caller_relationships:\n                self._process_caller_callee_relationships(document)\n\n        return self._graph\n\n    def _add_file_vertices(self, document: Any):\n        \"\"\"\n        Adds the file vertices to the graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        self._graph.add_node(\n            document.relative_path,\n            file=SymbolFile(document.relative_path, occurrences=document.occurrences),\n            label=\"file\",\n        )\n\n    def _add_symbol_vertices(self, document: Any):\n        \"\"\"\n        Adds the symbol vertices to the graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        for symbol_information in document.symbols:\n            try:\n                symbol = parse_symbol(symbol_information.symbol)\n            except Exception as e:\n                logger.error(f\"Parsing symbol {symbol_information.symbol} failed with error {e}\")\n                continue\n\n            self._graph.add_node(symbol, label=\"symbol\")\n            self._graph.add_edge(document.relative_path, symbol, label=\"contains\")\n\n    def _process_relationships(self, document: Any):\n        \"\"\"\n        Processes the relationships in the local graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        for symbol_information in document.symbols:\n            relationship_manager = _RelationshipManager(self._graph, symbol_information)\n            relationship_manager.process()\n\n    def _process_occurrences(self, document: Any):\n        \"\"\"\n        Processes the occurrences in the local graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        occurrence_manager = _OccurrenceManager(self._graph, document)\n        occurrence_manager.process()\n\n    def _process_caller_callee_relationships(self, document: Any):\n        \"\"\"\n        Processes the caller-callee relationships in the local graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        caller_callee_manager = _CallerCalleeManager(self._graph, document)\n        caller_callee_manager.process()\n\n\n", "summary": "GraphBuilder is a class that constructs a symbol graph from an `Index` object, helping to explore symbol relationships within source code. It processes the relationships and occurrences of each symbol in the index and creates a networkx `MultiDiGraph` object. By default, caller-callee relationships are not included to improve performance, but they can be added by setting the `build_caller_relationships` flag to `True`. To use GraphBuilder simply instantiate it with an `Index` object, and optionally set the build_caller_relationships flag. Note that enabling the caller-callee relationships can lead to performance limitations due to the expensive operation of computing these relationships.\n\nExample:\n```python\nfrom automata.core.symbol.graph import GraphBuilder\nfrom automata.core.symbol.scip_pb2 import Index\n\nindex = Index()  # Assuming a populated index object.\nbuild_caller_relationships = True  # Optional\ngraph_builder = GraphBuilder(index, build_caller_relationships)\ngraph = graph_builder.build_graph()\n```\n", "context": "\n    Generate the documentation for GraphBuilder using the context shown below -\n  Building context for primary symbol - automata.core.symbol.graph.GraphBuilder -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata.config.config_enums import ConfigCategory\n      from automata.core.symbol.parser import parse_symbol\n      from automata.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata.core.utils import config_fpath\n      \n      # GraphBuilder\n      \n      `GraphBuilder` is a class that enables the construction of a symbol graph from an `Index` object. The graph representation aids in exploring symbol relationships within source code.\n      \n      ## Overview\n      \n      Given an `Index` object as input, `GraphBuilder` processes the relationships and occurrences of each symbol in the index. The resulting graph is a networkx `MultiDiGraph` object, allowing for the identification of symbol patterns and relationships within the codebase.\n      \n      By default, `GraphBuilder` does not include caller-callee relationships, for performance reasons. However, this feature can be enabled upon instantiation with the `build_caller_relationships` flag set to `True`.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.symbol_types.SymbolFile`\n      - `automata.core.symbol.parser.parse_symbol`\n      \n      ## Example\n      \n      The following example demonstrates how to create a `GraphBuilder` instance and build a graph from an `Index` object. \n      \n      ```python\n      from automata.core.symbol.graph import GraphBuilder\n      from automata.core.symbol.scip_pb2 import Index\n      \n      index = Index()  # Assuming a populated index object.\n      build_caller_relationships = True  # Optional\n      graph_builder = GraphBuilder(index, build_caller_relationships)\n      graph = graph_builder.build_graph()\n      ```\n      \n      ## Limitations\n      \n      `GraphBuilder` may exhibit performance-related limitations, especially when the `build_caller_relationships` flag is set to `True`. This can lead to significantly longer processing times, as it involves an expensive operation to compute the caller-callee relationships.\n      \n      ## Follow-up Questions:\n      \n      - Are there any ways to optimize the caller-callee relationship computation within the `GraphBuilder`?\n      \n    Class Docstring:\n      Builds a symbol graph from an Index.\n      \n    Methods:\n      def __init__(self, index: Index, build_caller_relationships: bool = False):\n              \"\"\"\n              Args:\n                  index (Index): An Index object\n                  build_caller_relationships (bool, optional): Whether to build\n                      caller-callee relationships. Defaults to False.\n              \"\"\"\n              self.index = index\n              self.build_caller_relationships = build_caller_relationships\n              self._graph = nx.MultiDiGraph()\n      \n          \n      def build_graph(self):\n              \"\"\"\n              Builds the graph from the index\n              \"\"\"\n              for document in self.index.documents:\n                  self._add_file_vertices(document)\n                  self._add_symbol_vertices(document)\n                  self._process_relationships(document)\n                  self._process_occurrences(document)\n                  if self.build_caller_relationships:\n                      self._process_caller_callee_relationships(document)\n      \n              return self._graph\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.core.symbol.search.tests.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n    automata.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata.tests.unit.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n        \n        \n    automata.core.symbol.search.tests.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata.tests.unit.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata.tests.unit.test_symbol_rank.test_generate_random_graph\n    \n        def test_generate_random_graph():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n        \n            assert G.number_of_nodes() == nodes\n            assert G.number_of_edges() <= edges  # It can be less because of randomly identical edges\n        \n        \n        \n        \n    automata.core.symbol.graph.SymbolGraph.SubGraph\n    \n        `SymbolGraph.SubGraph` is a data class designed to maintain and analyze subgraphs of a `SymbolGraph`. It contains a `parent` attribute to track the parent `SymbolGraph` instance and a `graph` attribute representing the actual subgraph with nodes and edges. The class offers a convenient way to encapsulate subgraphs for further analysis, connecting it closely to the `SymbolGraph` class and related methods. However, its main limitation is that it must be created from a `SymbolGraph` instance, requiring the extraction of the desired subgraph from an existing `SymbolGraph`.\n        \n  Building context for dependencies -\n  \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.graph._SymbolGraphNavigator\n    \n      Class Docstring:\n        Handles navigation of a symbol graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                \"\"\"\n                self._graph = graph\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.symbol.graph._OccurrenceManager\n    \n        The `_OccurrenceManager` class manages symbol occurrences in a graph, accepting a networkx graph and document object as arguments during initialization. This class provides a `process` method which processes occurrences, adding edges and information to the graph based on the occurrences' symbol, roles, and location within the document. However, it currently lacks functionality to remove, modify, or search for occurrences within the graph, as well as advanced queries or filtering on the processed occurrences. To utilize the `_OccurrenceManager`, simply initialize it with a graph and document and run the `process` method to handle occurrences.\n        \n      Class Docstring:\n        Manages the occurrences of a symbol in a graph\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, document: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    document (Any): A Document object\n                \"\"\"\n                self._graph = graph\n                self.document = document\n        \n            \n        process(self) -> None\n        \n    automata.core.symbol.graph._RelationshipManager.process\n    \n      Class Docstring:\n        Processes the relationships in the local graph\n        \n      Methods:\n        process(self) -> None\n        \n    automata.core.symbol.graph._CallerCalleeManager.process\n    \n      Class Docstring:\n        Processes the caller-callee relationships in the local graph\n        \n        Note that this is an expensive operation, and should be used sparingly\n        \n      Methods:\n        process(self) -> None\n        \n    automata.core.symbol.symbol_types.SymbolFile\n    \n        `SymbolFile` is a class used to represent files containing symbols, typically within the `SymbolGraph`. It provides methods for equality checks and hashing operations but does not include methods for modifying the file or accessing the symbol within. You can use the `SymbolFile` class to create instances of files containing symbols and compare them as shown in the following example:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolFile\n        \n        file_1 = SymbolFile(\"path/to/symbol/file\")\n        file_2 = SymbolFile(\"path/to/symbol/file\")\n        \n        # Comparing SymbolFile instances\n        assert file_1 == file_2\n        \n        # Comparing SymbolFile instance with a string representing the path\n        assert file_1 == \"path/to/symbol/file\"\n        ```\n        To access the symbol within a `SymbolFile` instance, you may need to use related symbol classes.\n        \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata.core.symbol.graph._OccurrenceManager.process\n    \n      Class Docstring:\n        Processes the occurrences in the local graph\n        \n      Methods:\n        process(self) -> None\n        \n    automata.core.symbol.graph._RelationshipManager\n    \n        The `_RelationshipManager` is a class within the `automata.core.symbol.graph` package that manages relationships between symbols in a graph. It works with the `GraphManager` and related classes, initializing with a `networkx` graph and a `SymbolInformation` object. The main function of the class is to process relationships between symbols and add them as edges in the given graph through the `process` method. However, it is designed for internal use and may not handle errors gracefully, relying on correct and consistent input from the `SymbolInformation` object.\n        \n      Class Docstring:\n        Manages the relationships between symbols in a graph\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, symbol_information: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    symbol_information (Any): A SymbolInformation object\n                \"\"\"\n                self._graph = graph\n                self.symbol_information = symbol_information\n        \n            \n        process(self) -> None\n        \n    automata.core.symbol.graph._CallerCalleeManager\n    \n        The _CallerCalleeManager class manages caller-callee relationships of a symbol in a graph by processing all symbols that call or are called by another symbol within the local graph. This is crucial for understanding how different components of code interact with one another. However, processing these relationships is computationally expensive, so it should be used sparingly. The class relies on a networkx graph and a _SymbolGraphNavigator instance for its operations. There are limitations, such as including non-call statements, which can be mitigated with AST awareness and filtering downstream using the ASTNavigator.\n        \n        Example usage:\n        \n        ```python\n        import networkx as nx\n        from automata.core.symbol.graph import _CallerCalleeManager\n        from automata.core.symbol.graph import _SymbolGraphNavigator\n        \n        # Create a MultiDiGraph\n        graph = nx.MultiDiGraph()\n        \n        # Create a document with symbols\n        document = ...\n        \n        # Initialize CallerCalleeManager\n        manager = _CallerCalleeManager(graph=graph, document=document)\n        \n        # Process caller-callee relationships in the graph\n        manager.process()\n        ```\n        \n      Class Docstring:\n        Manages the caller-callee relationships of a symbol in a graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, document: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    document (Any): A Document object\n                \"\"\"\n                self._graph = graph\n                self.navigator = _SymbolGraphNavigator(graph)\n                self.document = document\n        \n            \n        process(self) -> None\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.graph`/SymbolGraph#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolGraph", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolGraph\n\n`SymbolGraph` represents the symbol graph that captures the relationships between symbols found in various source code files. The symbol graph can be built from an index protobuf file, making it the central class for working with symbols and their relationships. Some of the primary methods in `SymbolGraph` include `get_all_available_symbols`, `get_all_files`, `get_potential_symbol_callees`, `get_potential_symbol_callers`, `get_references_to_symbol`, `get_symbol_dependencies`, and `get_symbol_relationships`.\n\n## Overview\n\n`SymbolGraph` uses NetworkX's MultiDiGraph to represent the relationships between symbols as a directed graph. It includes methods to query for callers, callees, and references to a symbol, as well as obtaining all available symbols and files in the graph. The graph can be filtered to subgraphs containing only rankable symbols. Getting reachable objects in the symbol subgraph requires using the navigator interface, _SymbolGraphNavigator.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.graph.GraphBuilder`\n- `automata.core.symbol.graph._SymbolGraphNavigator`\n- `automata.core.symbol.search.SymbolSearch`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolGraph` using an index protobuf file.\n\n```python\nfrom automata.core.symbol.graph import SymbolGraph\n\n# Assuming the path to a valid index protobuf file, you should replace it with your own file path\nindex_path = \"path/to/index.scip\"\nsymbol_graph = SymbolGraph(index_path)\nall_symbols = symbol_graph.get_all_available_symbols()\n```\n\n## Limitations\n\nSymbolGraph can only be built from an index protobuf file. In addition, the method `get_potential_symbol_callers` returns potential callers, but this list requires downstream filtering to remove non-call statements.\n\n## Follow-up Questions\n\n- How to better handle edge cases in the symbol graph building process?\n- How to make `get_potential_symbol_callers` more efficient with fewer potential callers?\n\n## Footnotes\n\nIn the context provided, some information was referring to 'mock' objects which are used for testing purposes. In the final documentation, it is recommended to replace mocked objects with actual underlying objects whenever possible. A list of some of the imported modules and methods is provided for reference, which may be useful in illustrating certain aspects of the SymbolGraph class.", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolGraph:\n    @dataclass\n    class SubGraph:\n        parent: \"SymbolGraph\"\n        graph: nx.DiGraph\n\n    DEFAULT_SCIP_PATH = os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n\n    def __init__(\n        self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n    ):\n        \"\"\"\n        Initializes SymbolGraph with the path of an index protobuf file.\n\n        Args:\n            index_path (str): Path to index protobuf file\n        Returns:\n            SymbolGraph instance\n        \"\"\"\n        index = self._load_index_protobuf(index_path)\n        builder = GraphBuilder(index, build_caller_relationships)\n        self._graph = builder.build_graph()\n        self.navigator = _SymbolGraphNavigator(self._graph)\n\n    def get_all_files(self) -> List[SymbolFile]:\n        \"\"\"\n        Gets all file nodes in the graph.\n\n        Args:\n            None\n        Returns:\n            List of all defined symbols.\n        \"\"\"\n        return self.navigator.get_all_files()\n\n    def get_all_available_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Gets all symbols defined in the graph.\n\n        Args:\n            None\n        Returns:\n            List[Symbol]: List of all defined symbols.\n        \"\"\"\n        return list(set(self.navigator.get_all_available_symbols()))\n\n    def get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]:\n        \"\"\"\n        Gets all symbols which contain a specified partial path\n\n        Args:\n            partial_py_path (PyPath): The partial path to explain\n        Returns:\n            Set[Symbol]: Set of symbols that follow the partial path\n        \"\"\"\n        return self.navigator.get_symbol_dependencies(symbol)\n\n    def get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]:\n        \"\"\"\n        Gets the set of symbols with relationships to the given symbol.\n\n        Args:\n            symbol (Symbol): The symbol to get relationships for.\n        Returns:\n            Set[Symbol]: The list of relationships for the symbol.\n\n        # TODO: Consider implications of using list instead of set\n        \"\"\"\n        return self.navigator.get_symbol_relationships(symbol)\n\n    def get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]:\n        \"\"\"\n        Gets the (potential) callers of the given symbol.\n        Requires downstream filtering to remove non-call statements.\n\n        Args:\n            symbol (Symbol): The symbol to get callers for.\n        Returns:\n            Dict[Symbol]: The map of callers to callees for the symbol.\n        \"\"\"\n\n        return self.navigator.get_potential_symbol_callers(symbol)\n\n    def get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]:\n        \"\"\"\n        Gets the callers of the given symbol.\n        Requires downstream filtering to remove non-call statements.\n\n        Args:\n            symbol (Symbol): The symbol to get callees for.\n        Returns:\n            Dict[Symbol]: The map of callees to callers for the symbol.\n        \"\"\"\n        return self.navigator.get_potential_symbol_callees(symbol)\n\n    def get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]:\n        \"\"\"\n        Gets all references to a given module in the symbol graph.\n\n        Args:\n            module (Symbol): The module to locate references for\n        Returns:\n            List[SymbolReference]: List of symbol references\n        \"\"\"\n        return self.navigator.get_references_to_symbol(symbol)\n\n    def get_rankable_symbol_subgraph(\n        self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None\n    ) -> SubGraph:\n        \"\"\"\n        Gets a detailed subgraph of rankable symbols.\n\n        Args:\n            symbol (str): The symbol in the form 'module`/ClassOrMethod#'\n\n        Returns:\n            List[str]: The list of dependencies for the symbol.\n        TODO: Consider ways to make this more efficient.\n        TODO: Find ways to better handle edge cases\n        \"\"\"\n        G = nx.DiGraph()\n\n        # Filter the symbols based on the provided path filter\n\n        filtered_symbols = get_rankable_symbols(self.get_all_available_symbols())\n\n        if path_filter is not None:\n            filtered_symbols = [\n                sym for sym in filtered_symbols if sym.dotpath.startswith(path_filter)  # type: ignore\n            ]\n\n        logger.info(\"Building the rankable symbol subgraph...\")\n        for symbol in tqdm(filtered_symbols):\n            try:\n                dependencies = self.get_symbol_dependencies(symbol)\n                relationships = self.get_symbol_relationships(symbol)\n                filtered_related_symbols = get_rankable_symbols(\n                    list(dependencies.union(relationships))\n                )\n                for dependency in filtered_related_symbols:\n                    if flow_rank == \"to_dependents\":\n                        G.add_edge(symbol, dependency)\n                    elif flow_rank == \"from_dependents\":\n                        G.add_edge(dependency, symbol)\n                    elif flow_rank == \"bidirectional\":\n                        G.add_edge(symbol, dependency)\n                        G.add_edge(dependency, symbol)\n                    else:\n                        raise ValueError(\n                            \"flow_rank must be one of 'to_dependents', 'from_dependents', or 'bidirectional'\"\n                        )\n\n            except Exception as e:\n                logger.error(f\"Error processing {symbol.uri}: {e}\")\n\n        logger.info(\"Built the rankable symbol subgraph\")\n\n        return SymbolGraph.SubGraph(graph=G, parent=self)\n\n    @staticmethod\n    def _load_index_protobuf(path: str) -> Index:\n        \"\"\"\n        Loads an index protobuf file from disk\n\n        Args:\n            path (str): The path to the index protobuf file\n\n        Returns:\n            Index: The loaded index protobuf\n        \"\"\"\n        index = Index()\n        with open(path, \"rb\") as f:\n            index.ParseFromString(f.read())\n        return index\n", "summary": "`SymbolGraph` is a central class representing the relationships between symbols in various source code files, using NetworkX's MultiDiGraph as a directed graph. It can be built from an index protobuf file and offers methods to query callers, callees, references to a symbol, as well as obtaining all available symbols and files in the graph. The graph can be filtered to subgraphs containing only rankable symbols. To navigate reachable objects in the symbol subgraph, use the _SymbolGraphNavigator interface. Note that SymbolGraph can only be built from an index protobuf file, and the `get_potential_symbol_callers` method returns potential callers that require downstream filtering.\n\nExample usage:\n```python\nfrom automata.core.symbol.graph import SymbolGraph\n\nindex_path = \"path/to/index.scip\"\nsymbol_graph = SymbolGraph(index_path)\nall_symbols = symbol_graph.get_all_available_symbols()\n```\n", "context": "\n    Generate the documentation for SymbolGraph using the context shown below -\n  Building context for primary symbol - automata.core.symbol.graph.SymbolGraph -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata.config.config_enums import ConfigCategory\n      from automata.core.symbol.parser import parse_symbol\n      from automata.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata.core.utils import config_fpath\n      \n      # SymbolGraph\n      \n      The `SymbolGraph` class represents the symbol graph that captures the relationships between symbols  found in various source code files. The symbol graph can be built from an index protobuf file, making it the central class for working with symbols and their relationships. Some of the primary methods in `SymbolGraph` include `get_all_available_symbols`, `get_all_files`, `get_potential_symbol_callees`, `get_potential_symbol_callers`, `get_references_to_symbol`, `get_symbol_dependencies`, and `get_symbol_relationships`.\n      \n      ## Overview\n      \n      `SymbolGraph` uses NetworkX's MultiDiGraph to represent the relationships between symbols as a directed graph. It includes methods to query for callers, callees, and references to a symbol, as well as obtaining all available symbols and files in the graph. The graph can be filtered to subgraphs containing only rankable symbols. Getting reachable objects in the symbol subgraph requires using the navigator interface, _SymbolGraphNavigator.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.graph.GraphBuilder`\n      - `automata.core.symbol.graph._SymbolGraphNavigator`\n      - `automata.core.symbol.search.SymbolSearch`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `SymbolGraph` using an index protobuf file.\n      \n      ```python\n      from automata.core.symbol.graph import SymbolGraph\n      \n      # Assuming the path to a valid index protobuf file, you should replace it with your own file path\n      index_path = \"path/to/index.scip\"\n      symbol_graph = SymbolGraph(index_path)\n      all_symbols = symbol_graph.get_all_available_symbols()\n      ```\n      \n      ## Limitations\n      \n      SymbolGraph can only be built from an index protobuf file. In addition, the method `get_potential_symbol_callers` returns potential callers, but this list requires downstream filtering to remove non-call statements.\n      \n      ## Follow-up Questions:\n      \n      - How to better handle edge cases in the symbol graph building process?\n      - How to make `get_potential_symbol_callers` more efficient with fewer potential callers?\n      \n      ## Footnotes\n      \n      In the context provided, some information was referring to 'mock' objects which are used for testing purposes. In the final documentation, it is recommended to replace mocked objects with actual underlying objects whenever possible. A list of some of the imported modules and methods is provided for reference, which may be useful in illustrating certain aspects of the SymbolGraph class.\n      \n    Methods:\n      def __init__(\n              self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n          ):\n              \"\"\"\n              Initializes SymbolGraph with the path of an index protobuf file.\n      \n              Args:\n                  index_path (str): Path to index protobuf file\n              Returns:\n                  SymbolGraph instance\n              \"\"\"\n              index = self._load_index_protobuf(index_path)\n              builder = GraphBuilder(index, build_caller_relationships)\n              self._graph = builder.build_graph()\n              self.navigator = _SymbolGraphNavigator(self._graph)\n      \n          \n      def get_all_available_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Gets all symbols defined in the graph.\n      \n              Args:\n                  None\n              Returns:\n                  List[Symbol]: List of all defined symbols.\n              \"\"\"\n              return list(set(self.navigator.get_all_available_symbols()))\n      \n          \n      def get_all_files(self) -> List[SymbolFile]:\n              \"\"\"\n              Gets all file nodes in the graph.\n      \n              Args:\n                  None\n              Returns:\n                  List of all defined symbols.\n              \"\"\"\n              return self.navigator.get_all_files()\n      \n          \n      def get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]:\n              \"\"\"\n              Gets the callers of the given symbol.\n              Requires downstream filtering to remove non-call statements.\n      \n              Args:\n                  symbol (Symbol): The symbol to get callees for.\n              Returns:\n                  Dict[Symbol]: The map of callees to callers for the symbol.\n              \"\"\"\n              return self.navigator.get_potential_symbol_callees(symbol)\n      \n          \n      def get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]:\n              \"\"\"\n              Gets the (potential) callers of the given symbol.\n              Requires downstream filtering to remove non-call statements.\n      \n              Args:\n                  symbol (Symbol): The symbol to get callers for.\n              Returns:\n                  Dict[Symbol]: The map of callers to callees for the symbol.\n              \"\"\"\n      \n              return self.navigator.get_potential_symbol_callers(symbol)\n      \n          \n      def get_rankable_symbol_subgraph(\n              self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None\n          ) -> SubGraph:\n              \"\"\"\n              Gets a detailed subgraph of rankable symbols.\n      \n              Args:\n                  symbol (str): The symbol in the form 'module`/ClassOrMethod#'\n      \n              Returns:\n                  List[str]: The list of dependencies for the symbol.\n              TODO: Consider ways to make this more efficient.\n              TODO: Find ways to better handle edge cases\n              \"\"\"\n              G = nx.DiGraph()\n      \n              # Filter the symbols based on the provided path filter\n      \n              filtered_symbols = get_rankable_symbols(self.get_all_available_symbols())\n      \n              if path_filter is not None:\n                  filtered_symbols = [\n                      sym for sym in filtered_symbols if sym.dotpath.startswith(path_filter)  # type: ignore\n                  ]\n      \n              logger.info(\"Building the rankable symbol subgraph...\")\n              for symbol in tqdm(filtered_symbols):\n                  try:\n                      dependencies = self.get_symbol_dependencies(symbol)\n                      relationships = self.get_symbol_relationships(symbol)\n                      filtered_related_symbols = get_rankable_symbols(\n                          list(dependencies.union(relationships))\n                      )\n                      for dependency in filtered_related_symbols:\n                          if flow_rank == \"to_dependents\":\n                              G.add_edge(symbol, dependency)\n                          elif flow_rank == \"from_dependents\":\n                              G.add_edge(dependency, symbol)\n                          elif flow_rank == \"bidirectional\":\n                              G.add_edge(symbol, dependency)\n                              G.add_edge(dependency, symbol)\n                          else:\n                              raise ValueError(\n                                  \"flow_rank must be one of 'to_dependents', 'from_dependents', or 'bidirectional'\"\n                              )\n      \n                  except Exception as e:\n                      logger.error(f\"Error processing {symbol.uri}: {e}\")\n      \n              logger.info(\"Built the rankable symbol subgraph\")\n      \n              return SymbolGraph.SubGraph(graph=G, parent=self)\n      \n          \n      def get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]:\n              \"\"\"\n              Gets all references to a given module in the symbol graph.\n      \n              Args:\n                  module (Symbol): The module to locate references for\n              Returns:\n                  List[SymbolReference]: List of symbol references\n              \"\"\"\n              return self.navigator.get_references_to_symbol(symbol)\n      \n          \n      def get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]:\n              \"\"\"\n              Gets all symbols which contain a specified partial path\n      \n              Args:\n                  partial_py_path (PyPath): The partial path to explain\n              Returns:\n                  Set[Symbol]: Set of symbols that follow the partial path\n              \"\"\"\n              return self.navigator.get_symbol_dependencies(symbol)\n      \n          \n      def get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]:\n              \"\"\"\n              Gets the set of symbols with relationships to the given symbol.\n      \n              Args:\n                  symbol (Symbol): The symbol to get relationships for.\n              Returns:\n                  Set[Symbol]: The list of relationships for the symbol.\n      \n              # TODO: Consider implications of using list instead of set\n              \"\"\"\n              return self.navigator.get_symbol_relationships(symbol)\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_symbol_graph.test_get_all_symbols\n    \n        def test_get_all_symbols(symbol_graph):\n            graph_symbols = symbol_graph.get_all_available_symbols()\n            assert isinstance(graph_symbols, list)\n            assert all(isinstance(s, Symbol) for s in graph_symbols)\n        \n        \n    automata.core.symbol.search.tests.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n    automata.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata.core.symbol.graph.GraphBuilder\n    \n        `GraphBuilder` is a class that constructs a symbol graph from an `Index` object, facilitating the exploration of symbol relationships within source code. The resulting graph, a networkx `MultiDiGraph` object, allows for identifying symbol patterns and relationships in the codebase. While caller-callee relationships are not included by default due to performance concerns, they can be enabled by setting the `build_caller_relationships` flag to `True`. However, enabling this feature can result in significantly longer processing times due to the expensive computation.\n        \n        Example:\n        \n        ```python\n        from automata.core.symbol.graph import GraphBuilder\n        from automata.core.symbol.scip_pb2 import Index\n        \n        index = Index()  # Assuming a populated index object.\n        build_caller_relationships = True  # Optional\n        graph_builder = GraphBuilder(index, build_caller_relationships)\n        graph = graph_builder.build_graph()\n        ```\n        \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n    automata.core.symbol.search.tests.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata.tests.unit.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata.core.symbol.search.symbol_search.SymbolSearch\n    \n        `SymbolSearch` is a class used to search for symbols in a `SymbolGraph` by processing NLP-formatted queries and providing search results in various formats depending on the query type. The class utilizes a symbol similarity algorithm for ranking symbols according to relevance and a SymbolRank algorithm for computing a global symbol ranking. To use `SymbolSearch`, first initialize the necessary objects, such as `SymbolGraph` and `SymbolSimilarity`, then create a `SymbolSearch` object and process a query to obtain the search results.\n        \n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n        # Initialize necessary objects\n        symbol_graph = SymbolGraph()\n        symbol_similarity = SymbolSimilarity()\n        \n        # Create the SymbolSearch object\n        symbol_searcher = SymbolSearch(symbol_graph, symbol_similarity)\n        \n        # Process a query and get the search results\n        query = \"type:symbol_references <symbol_uri>\"\n        result = symbol_searcher.process_query(query)\n        ```\n        \n        Note that `SymbolSearch` relies on the availability of symbols in the `SymbolGraph` and `SymbolSimilarity` objects, and will produce incomplete or incorrect results if the necessary data is missing or the input query does not follow the expected format.\n        \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata.tests.unit.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n        \n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n  Building context for dependencies -\n  \n    automata.core.symbol.graph._SymbolGraphNavigator.get_references_to_symbol\n    \n      Class Docstring:\n        Gets all references to a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch references for\n        \n        Returns:\n        Dict[str, List[SymbolReference]]: A dictionary of file\n        paths to a list of SymbolReference objects\n        \n      Methods:\n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n    automata.core.symbol.graph.GraphBuilder.build_graph\n    \n      Class Docstring:\n        Builds the graph from the index\n        \n      Methods:\n        build_graph(self) -> None\n        \n    automata.core.symbol.graph._SymbolGraphNavigator.get_all_files\n    \n      Class Docstring:\n        Gets all files in the graph\n        \n        Returns:\n        List[SymbolFile]: A list of SymbolFile objects\n        \n      Methods:\n        get_all_files(self) -> List[SymbolFile]\n        \n    automata.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callees\n    \n      Class Docstring:\n        Gets all potential callees of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch callees for\n        \n        Returns:\n        Dict[Symbol, SymbolReference]: A dictionary of Symbol objects to\n        Symbol callees (SymbolReference objects).\n        \n      Methods:\n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n    automata.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callers\n    \n      Class Docstring:\n        Gets all potential callers of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch callers for\n        \n        Returns:\n        Dict[Symbol, SymbolReference]: A dictionary of Symbol objects to\n        Symbol calleers (SymbolReference objects).\n        TODO - Remove non-call statements from this return object\n        \n      Methods:\n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n    automata.core.symbol.graph._SymbolGraphNavigator.get_symbol_relationships\n    \n      Methods:\n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.symbol.graph._SymbolGraphNavigator.get_all_available_symbols\n    \n      Class Docstring:\n        Gets all available symbols in the graph\n        \n        Returns:\n        List[Symbol]: A list of Symbol objects\n        \n      Methods:\n        get_all_available_symbols(self) -> List[Symbol]\n        \n    automata.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata.core.utils.config_fpath\n    \n      Class Docstring:\n        Get the path to the project config directory\n        \n        Returns:\n        str - A fpath object in string form\n        \n      Methods:\n        config_fpath() -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.graph`/SymbolGraph#SubGraph#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolGraph", "suffix": 2, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SubGraph", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolGraph.SubGraph\n\n`SymbolGraph.SubGraph` is a data class responsible for maintaining the subgraph of a `SymbolGraph`. It contains a `parent` attribute to track the parent `SymbolGraph` instance, and a `graph` attribute representing the actual subgraph with nodes and edges.\n\n## Overview\n\nThe `SymbolGraph.SubGraph` class provides an interface to work with subgraphs of a `SymbolGraph`. It can be used, for example, to analyze a subgraph consisting of only rankable symbols. The class offers a convenient way to encapsulate subgraphs for further analysis, connecting it closely to the `SymbolGraph` class and related methods.\n\n## Related Symbols\n\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.core.symbol.graph.SymbolGraph.get_rankable_symbol_subgraph`\n- `networkx.DiGraph`\n\n## Example\n\nThe following is an example demonstrating how to obtain and use a `SymbolGraph.SubGraph` instance.\n\n```python\nfrom automata.core.symbol.graph import SymbolGraph\n\n# assuming the path to a valid index protobuf file\nindex_path = \"path/to/index.scip\"\nsymbol_graph = SymbolGraph(index_path=index_path)\n\n# Get a SubGraph consisting of only rankable symbols\nsubgraph = symbol_graph.get_rankable_symbol_subgraph()\n\n# Use the SubGraph for further analysis and processing\n```\n\n## Limitations\n\nThe main limitation of `SymbolGraph.SubGraph` is that it must be created from a `SymbolGraph` instance. This means that in order to use a `SymbolGraph.SubGraph`, you must first have a `SymbolGraph` from which you can extract the desired subgraph.\n\n## Follow-up Questions:\n\n- How can we create `SymbolGraph.SubGraph` instances independent of the parent `SymbolGraph`?\n- Are there any specific use cases where such independent `SymbolGraph.SubGraph` instances may be useful?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\n    class SubGraph:\n        parent: \"SymbolGraph\"\n        graph: nx.DiGraph\n\n    ", "summary": "`SymbolGraph.SubGraph` is a data class that manages subgraphs of a `SymbolGraph` instance, with a `parent` attribute connecting it to the parent `SymbolGraph` and a `graph` attribute representing the subgraph's nodes and edges. The class offers a convenient way to analyze specific portions of a `SymbolGraph`, such as rankable symbols, by encapsulating subgraphs for further processing. To create a `SymbolGraph.SubGraph`, you must first have a `SymbolGraph` instance from which the desired subgraph can be extracted. For example, to obtain and analyze a subgraph of rankable symbols:\n\n```python\nfrom automata.core.symbol.graph import SymbolGraph\n\nindex_path = \"path/to/index.scip\"\nsymbol_graph = SymbolGraph(index_path=index_path)\n\nsubgraph = symbol_graph.get_rankable_symbol_subgraph()\n```\nConsiderations for creating independent `SymbolGraph.SubGraph` instances and their potential use cases should be addressed.", "context": "\n    Generate the documentation for SymbolGraph using the context shown below -\n  Building context for primary symbol - automata.core.symbol.graph.SymbolGraph.SubGraph -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata.config.config_enums import ConfigCategory\n      from automata.core.symbol.parser import parse_symbol\n      from automata.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata.core.utils import config_fpath\n      \n      # SymbolGraph.SubGraph\n      \n      `SymbolGraph.SubGraph` is a data class responsible for maintaining the subgraph of a `SymbolGraph`. It contains a `parent` attribute to track the parent `SymbolGraph` instance, and a `graph` attribute representing the actual subgraph with nodes and edges.\n      \n      ## Overview\n      \n      The `SymbolGraph.SubGraph` class provides an interface to work with subgraphs of a `SymbolGraph`. It can be used, for example, to analyze a subgraph consisting of only rankable symbols. The class offers a convenient way to encapsulate subgraphs for further analysis, connecting it closely to the `SymbolGraph` class and related methods.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.core.symbol.graph.SymbolGraph.get_rankable_symbol_subgraph`\n      - `networkx.DiGraph`\n      \n      ## Example\n      \n      The following is an example demonstrating how to obtain and use a `SymbolGraph.SubGraph` instance.\n      \n      ```python\n      from automata.core.symbol.graph import SymbolGraph\n      \n      # assuming the path to a valid index protobuf file\n      index_path = \"path/to/index.scip\"\n      symbol_graph = SymbolGraph(index_path=index_path)\n      \n      # Get a SubGraph consisting of only rankable symbols\n      subgraph = symbol_graph.get_rankable_symbol_subgraph()\n      \n      # Use the SubGraph for further analysis and processing\n      ```\n      \n      ## Limitations\n      \n      The main limitation of `SymbolGraph.SubGraph` is that it must be created from a `SymbolGraph` instance. This means that in order to use a `SymbolGraph.SubGraph`, you must first have a `SymbolGraph` from which you can extract the desired subgraph.\n      \n      ## Follow-up Questions:\n      \n      - How can we create `SymbolGraph.SubGraph` instances independent of the parent `SymbolGraph`?\n      - Are there any specific use cases where such independent `SymbolGraph.SubGraph` instances may be useful?\n      \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.tests.unit.test_symbol_graph.test_get_all_symbols\n    \n        def test_get_all_symbols(symbol_graph):\n            graph_symbols = symbol_graph.get_all_available_symbols()\n            assert isinstance(graph_symbols, list)\n            assert all(isinstance(s, Symbol) for s in graph_symbols)\n        \n        \n    automata.core.symbol.search.tests.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n    automata.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata.core.symbol.graph.GraphBuilder\n    \n        `GraphBuilder` is a class that constructs a symbol graph from an `Index` object, facilitating the exploration of symbol relationships within source code. The resulting graph, a networkx `MultiDiGraph` object, allows for identifying symbol patterns and relationships in the codebase. While caller-callee relationships are not included by default due to performance concerns, they can be enabled by setting the `build_caller_relationships` flag to `True`. However, enabling this feature can result in significantly longer processing times due to the expensive computation.\n        \n        Example:\n        \n        ```python\n        from automata.core.symbol.graph import GraphBuilder\n        from automata.core.symbol.scip_pb2 import Index\n        \n        index = Index()  # Assuming a populated index object.\n        build_caller_relationships = True  # Optional\n        graph_builder = GraphBuilder(index, build_caller_relationships)\n        graph = graph_builder.build_graph()\n        ```\n        \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n    automata.core.symbol.search.tests.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata.tests.unit.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata.core.symbol.search.symbol_search.SymbolSearch\n    \n        `SymbolSearch` is a class used to search for symbols in a `SymbolGraph` by processing NLP-formatted queries and providing search results in various formats depending on the query type. The class utilizes a symbol similarity algorithm for ranking symbols according to relevance and a SymbolRank algorithm for computing a global symbol ranking. To use `SymbolSearch`, first initialize the necessary objects, such as `SymbolGraph` and `SymbolSimilarity`, then create a `SymbolSearch` object and process a query to obtain the search results.\n        \n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n        # Initialize necessary objects\n        symbol_graph = SymbolGraph()\n        symbol_similarity = SymbolSimilarity()\n        \n        # Create the SymbolSearch object\n        symbol_searcher = SymbolSearch(symbol_graph, symbol_similarity)\n        \n        # Process a query and get the search results\n        query = \"type:symbol_references <symbol_uri>\"\n        result = symbol_searcher.process_query(query)\n        ```\n        \n        Note that `SymbolSearch` relies on the availability of symbols in the `SymbolGraph` and `SymbolSimilarity` objects, and will produce incomplete or incorrect results if the necessary data is missing or the input query does not follow the expected format.\n        \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata.tests.unit.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.utils.config_fpath\n    \n      Class Docstring:\n        Get the path to the project config directory\n        \n        Returns:\n        str - A fpath object in string form\n        \n      Methods:\n        config_fpath() -> str\n        \n    automata.config.config_enums.ConfigCategory\n    \n        class ConfigCategory(Enum):\n            \"\"\"\n            An enum which corresponds to the name of a folder holding config\n            \"\"\"\n        \n            PROMPT = \"prompt\"\n            SYMBOL = \"symbol\"\n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.graph`/_CallerCalleeManager#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "_CallerCalleeManager", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# _CallerCalleeManager\n\n`_CallerCalleeManager` is a class that manages the caller-callee relationships of a symbol in a graph. It processes the caller-callee relationships in the local graph in order to generate a connected graph of all symbols that call or are called by another symbol. This is an important step in analyzing how different components of code interact with one another.\n\n## Overview\n\nThe `_CallerCalleeManager` processes and maintains the caller-callee relationships by finding all symbols that call a given symbol or are called by a given symbol within the local graph. The processing of these relationships is an expensive operation and should be used sparingly. The class uses a `networkx` graph and a `_SymbolGraphNavigator` instance to carry out its operations.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.graph.GraphBuilder._process_caller_callee_relationships`\n- `automata.core.context.py_context.retriever.PyContextRetriever`\n- `automata.core.coding.py_coding.writer.PyCodeWriter`\n- `automata.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callers`\n\n## Example\n\nThe following is an example demonstrating how to use the `_CallerCalleeManager` class to process caller-callee relationships.\n\n```python\nimport networkx as nx\nfrom automata.core.symbol.graph import _CallerCalleeManager\nfrom automata.core.symbol.graph import _SymbolGraphNavigator\n\n# Create a MultiDiGraph\ngraph = nx.MultiDiGraph()\n\n# Create a document with symbols\ndocument = ...\n\n# Initialize CallerCalleeManager\nmanager = _CallerCalleeManager(graph=graph, document=document)\n\n# Process caller-callee relationships in the graph\nmanager.process()\n```\n\n## Limitations\n\nThe `_CallerCalleeManager` has the limitation that it may include non-call statements, such as return statements, in its analysis. This is due to the current approach used in processing the relationships. Handling this limitation would require AST (Abstract Syntax Tree) awareness. Filtering for non-call statements is done downstream with the `ASTNavigator`.\n\n## Follow-up Questions:\n\n- Is there a more efficient approach to processing the caller-callee relationships within the `_CallerCalleeManager`?\n- How can the `_CallerCalleeManager` be improved to exclude non-call statements from its analysis?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": "AAAAwMAHkr8AAACg7c2FvwAAAODK+G2/AAAA4E4inr8AAACgDEievwAAAIAH84Q/AAAAwAT1jb8AAADAcsabPwAAACBbFKS/AAAAYGrom78AAACA2c9YvwAAAAA2oYA/AAAAwNcuij8AAAAgiJOOPwAAAGCP6ZE/AAAAAGzQg78AAAAAX+FgvwAAACBbzZq/AAAAAEfPfT8AAACgGpR5PwAAAMDODIS/AAAAYLP/TL8AAABAG9iPvwAAAKBojpa/AAAAADX9bj8AAADg+GKjPwAAAOBhUZU/AAAAoAgJpL8AAAAg9quFPwAAAEAO6Yy/AAAAgDAzlT8AAADAn4xvvwAAAADsLIe/AAAAwMqGUL8AAAAAWaGMvwAAAABjZ5S/AAAAYM9QWr8AAACAg8mUvwAAAIBnMV4/AAAAAAObiD8AAACArAmVPwAAAKCog5G/AAAAQGBpnb8AAACgCMJqvwAAAGDPlwM/AAAAQPxdlz8AAADgjheJvwAAAEAFgJ2/AAAAIBGgSr8AAAAgBPiQPwAAAGBPrZ0/AAAAABVthz8AAADgQXqEvwAAAODzOG6/AAAAgPoDkj8AAABg9AqHvwAAAGBwKJC/AAAAwJtNZb8AAACgyBOJvwAAAECbe3y/AAAAoPFTeT8AAAAALNtYPwAAAID+Qmy/AAAAwMkpWL8AAADgD9GEvwAAAED8pIC/AAAAQKG7gL8AAAAA4mafPwAAAMAkE5g/AAAAoE1TeD8AAADAHAehPwAAAOCXOZ8/AAAAQEDZdb8AAABgmWiAvwAAAKB22mG/AAAAwI0Bmr8AAACAB/OEvwAAACBpGWa/AAAA4De0nL8AAACgEoiSPwAAAKB7dpQ/AAAA4M8ik78AAABADumMvwAAAMDWGKs/AAAAQPfBVL8AAADgarp0PwAAAMDAwHg/AAAAgDqygz8AAAAAsRp4vwAAAAAslJ+/AAAAQOAMqj8AAACgmjemPwAAAGDLEZA/AAAAgFksfD8AAACgcbCcPwAAAIDH/Xk/AAAAoPp1j78AAADAIEZrvwAAAGA9Ing/AAAA4J15g78AAADAqVJ3PwAAAADVvpU/AAAAQCEYhL8AAAAAXoSIPwAAAGBCBZS/AAAAgFXtcT8AAADAbkCYvwAAAECgXoi/AAAAYAH6mT8AAACA0cOBvwAAAABoAzc/AAAAwDf7pT8AAACgaI5WPwAAAIB1fZm/AAAAoK0fhL8AAACAx0SDvwAAAGBmqbE/AAAA4I90kb8AAABA6tKBvwAAAEDchla/AAAAYD0imD8AAACAw3eWPwAAAGCr83W/AAAAoDvIkr8AAABgVJBZPwAAAOBhCow/AAAAQE7el78AAADgVGJSvwAAAKA+8Z2/AAAAIN/2mr8AAADg8zhePwAAAEA3cIa/AAAAIMB8gj8AAADAboehPwAAAIA1FoE/AAAAYNQzdr8AAACAwmGHvwAAAGCQ/5A/AAAAgKcmeT8AAAAArH6lvwAAAOCBKHa/AAAA4PM4Tr8AAAAAdTmTvwAAAGCGOYk/AAAAoB93pb8AAABgb4SePwAAAOCXOY8/AAAAoHoZTL8AAADAJXCQPwAAAKA+8Z2/AAAAAH5bWT8AAAAA2qFxPwAAAEAXUly/AAAAYB2SkL8AAACgH3eFPwAAAGBCBaQ/AAAAoOgxk78AAABABQ6APwAAAMATnqG/AAAAYAvAob8AAACg2uWXvwAAACBEX5k/AAAAYMYuhD8AAAAAorh9vwAAAACMYIs/AAAAYApjmT8AAACADNZwvwAAAECbe3w/AAAAQKnHh78AAABgphB6vwAAAKCIrIA/AAAAQFdHlz8AAAAASCyWvwAAAABn7Zc/AAAA4C+opb8AAAAgWrebvwAAAEBAkoy/AAAAoAPffr8AAAAgFoOWvwAAAMAbqoi/AAAAILIwhz8AAAAAfluZvwAAAMAFUoY/AAAAAMxVlj8AAACgGpSZvwAAAKAfd5W/AAAAoPp1jz8AAACgNixgvwAAAKDEjZU/AAAAYHSukz8AAADAMl+DPwAAAGBKEYs/AAAA4I90gb8AAABAdx5ovwAAAMDJcOG/AAAA4Ao1Yj8AAAAggM6QvwAAAKCE35O/AAAAICAClb8AAADgPFAvPwAAAADD7Ha/AAAAYEbSoD8AAACAdX1ZPwAAAOCGC6I/AAAAoLICkL8AAAAg43x+PwAAAOA3tHy/AAAAILcTcz8AAACAOZykvwAAAECuqpO/AAAAoHGwfD8AAAAAsWGhvwAAAMDJcKE/AAAAAA1hcL8AAAAg9mScvwAAAAAVbYc/AAAAoBFyk78AAAAgxAKGvwAAAEAuwF0/AAAAAMjPoj8AAADARUeRPwAAAKBx93W/AAAA4I7Qnz8AAABgj+mRPwAAAEBu/JG/AAAAQIBAnj8AAADAaV2MPwAAAMDFo5S/AAAA4Phioz8AAADgha55PwAAAICVm2M/AAAAwBbHjD8AAADA/C9wPwAAACB2CIk/AAAAgHDhlr8AAABAxdGbvwAAAGAmtJY/AAAAAAxLoT8AAABAHHyBPwAAAABxbFa/AAAAACNyib8AAACgUSBlPwAAACBI5Xy/AAAAQEV1mL8AAACghN+DvwAAAABf4XC/AAAAALrKgD8AAAAgiJOOPwAAAOCTs5s/AAAAYG/LZ78AAACgTVOYPwAAAADxD5O/AAAAINIHaL8AAADAVxmgvwAAAIAjRIK/AAAAgIwyhL8AAABA93p7PwAAAGDdnGU/AAAA4KFGkD8AAADgha6ZPwAAAOAqDIO/AAAAoNLZkD8AAABADjCGvwAAAAAslG+/AAAAwDN1kr8AAADA5XqVPwAAAGD4kJq/AAAAQLtSnT8AAADAII2UPwAAAOAmP6Y/AAAAgJEVoD8AAABAbm5fvwAAAIBj8lO/AAAAgFlzhT8AAACg+nV/PwAAAMCbTVU/AAAAIBK2mb8AAACADI+XvwAAAIA1FqE/AAAAgD44h78AAACgSLd1vwAAAMAgjUQ/AAAAYJD/kD8AAADgAcySvwAAAGC5P3G/AAAAoBvxcT8AAACAPn+gvwAAAGBd+ai/AAAAAOJmjz8AAABgXfmIPwAAAMASQZm/AAAAwMqGkL8AAABASfubPwAAAOCvBKm/AAAAAMdyir8AAAAgiJOevwAAAMD274u/AAAAYNw/nb8AAAAgfypvPwAAAMAOu5U/AAAAIFvNmr8AAADAROooPwAAAACWJqM/AAAAwKlSl78AAABAjtOCPwAAAIC1cnQ/AAAAACzbiD8AAACgp99vPwAAAICDyYS/AAAAYOJ/ob8AAADgnXmjPwAAAOAmP5Y/AAAAIG3mkj8AAADgIVyKvwAAACCbwpW/AAAAIOSSjT8AAACAh5ZxPwAAAEDA7n+/AAAAAL9moz8AAABgNACCPwAAAIA+f6A/AAAAALXnhL8AAABA2ACTvwAAAICjoDW/AAAAQMA1mb8AAADAPwd9vwAAACDJ5UG/AAAAYNQzZr8AAACghN+TPwAAAEAXUow/AAAAoE2acT8AAABAc5iEvwAAAGDLEYC/AAAAwEAdjL8AAADgV4ttvwAAAMB8jFM/AAAAoFEghb8AAABgC8CRPwAAACC2tpq/AAAAIFq3m78AAADgeAagvwAAACDDpW2/AAAAgAzWkL8AAABA8zuRPwAAAIAdBI6/AAAAAH+4Yb8AAABg3ZyVvwAAAKDa5ac/AAAAwBOegT8AAADAd/CQvwAAAOCPLXi/AAAAQFwqYz8AAADAgFmgvwAAAMA7gZm/AAAAQFPBgz8AAADAoOmHPwAAAAC6yqC/AAAA4Ao1kj8AAABgFOKXvwAAAMC3V0m/AAAAgHkDfb8AAAAAFSY+vwAAAICL1Wu/AAAAQAUOkL8AAABA16OavwAAAAD1lYa/AAAAYLjieL8AAACAGX6aPwAAAGDPUJo/AAAAIIk3MD8AAAAA/xRVPwAAAOA99JA/AAAAIK2UhD8AAADg7/mDvwAAAAC6g3e/AAAAoEi3lT8AAABATt53vwAAAGCZaKC/AAAAIASxlz8AAAAgtv1zPwAAAOB8RZo/AAAAAEz5or8AAABgD/9rvwAAAICwSJ8/AAAA4NiLor8AAABg4n+hPwAAAMBAHay/AAAAgDDse78AAACgCAmUPwAAAMAgRps/AAAAgEehpr8AAABA2ABzvwAAAICiioa/AAAAID98rT8AAADglzl/PwAAAEB4e5A/AAAAYDQAoj8AAADgzyJzvwAAAEDJV3+/AAAAYJD/gD8AAADAALZzPwAAAEBFvDG/AAAAgAIQmT8AAABAobuAvwAAAMCo9V6/AAAAIAArhL8AAAAAdk+CPwAAAMBuQIi/AAAAQG5ujz8AAABgXfmIPwAAAOC884s/AAAAAF6EiD8AAABAigaGvwAAACBkNoo/AAAAwOkAib8AAAAAvgmbPwAAAAC1oIs/AAAAIDLUg78AAAAgrZSUPwAAAMDAwIi/AAAAgFAKdj8AAACADI+HPwAAAOClhZq/AAAAgNnPiL8AAACAmdotvwAAAKBbn5M/AAAAYM9Qir8AAAAgbeaCPwAAAKBtcaI/AAAAoBvxoT8AAADgmN1gvwAAAAAVJn6/AAAAQMXRmz8AAACgWkKLvwAAAGBzUZu/AAAAIBK2eT8AAABANyldvwAAAODYRHm/AAAAgIvVW78AAAAAX+GQvwAAAIC+25M/AAAAQA4whj8AAACAubGOPwAAACDbt6A/AAAAQAUOkL8AAACg1QKcPwAAAKB//Fc/AAAAIPIlQr8AAADA8ml4PwAAAKDIE5k/AAAAwFtYmj8AAABAoF6YPwAAAMDSkqc/AAAAINJOUT8AAABgJVeOPwAAAKAo4IQ/AAAAwJeAiD8AAABgGcVjvwAAAKBNU5g/AAAAgLmxTj8AAABgJm2NPwAAAGB0rpO/AAAAIHbBTz8AAAAge6R7vwAAAMDKhnA/AAAAAHFslr8AAADAzgyEvwAAAOAGaHW/AAAAAN89pD8AAABga0WUvwAAAEBlTHk/AAAAYGromz8AAAAgtxOTPwAAACC2tpq/AAAAgB0Enr8AAACAB/OkvwAAAMBuh5E/AAAAQK6qgz8AAACAR1qdvwAAAOCOF4m/AAAAYIFWfb8AAABgVNeiPwAAAGC4m48/AAAAABpQkz8AAABAbrWYPwAAAGCQ/6A/AAAAgIwypL8AAABAYcaFvwAAAGCBVj0/AAAAoHbakT8AAACg6DGDPwAAAGCKv3y/AAAAgLBIb78AAABgdK6TPwAAAOCzimw/AAAAQJyRiz8AAACgVV9fvwAAAACWJoM/AAAAIIDOoD8AAAAgMtSDvwAAACBSq3Q/AAAAAKw3nL8AAACAcJqdvwAAAMAlcJC/AAAA4GXXaL8AAACA+gNyPwAAAADDM5C/AAAAgIJsjD8AAAAgMXeLPwAAACDaE4+/AAAA4Jc5j78AAABgK5eSPwAAAGCGgKI/AAAAoHH3Rb8AAABgne6DvwAAAEBFdai/AAAAoK0flL8AAABgE4V/PwAAAEBubp8/AAAAQMUYlT8AAADgXcuRvwAAACBkfZO/AAAAgJQ+e78AAABgWF2WvwAAAGCGgKK/AAAAYMptnr8AAADgoKKOPwAAAGDcP42/AAAAIDLUk78AAAAgoKVxPwAAAICCbGy/AAAAQMDunz8AAACgFbGNPwAAACD2ZJw/AAAAwNcumr8AAACAOZx0PwAAAOD4YpO/AAAAoOjqiT8AAABAF5mFPwAAAKBtcaK/AAAAYIKzdb8AAACghN8zPwAAAMA3+5W/AAAAIIk3UL8AAABgmWiAPwAAAIDH/Zk/AAAA4KH/hj8AAADA+9KnvwAAAMDgl5m/AAAAoFa8lz8AAAAAYyBLvwAAAKCog6E/AAAAgGxbk78AAACA2c+oPwAAAGDPUJo/AAAAgGd4lz8AAADgjhdJPwAAAEDA7p+/AAAAwCVwoD8AAAAg0k6BvwAAAACsN4w/AAAAYHAooL8AAACAB6yLPwAAAAAIfqS/AAAAgHXEkj8AAABgcChwvwAAAGD0Cmc/AAAA4JiWh78AAADgM+ePPwAAAODBHZG/AAAAYEIFlL8AAAAgaLx9vwAAAODv+YM/AAAAwDN1cr8AAADAQGR1vwAAAKC2QXq/AAAAoBvxkT8AAABA8ztxPwAAAKARcpO/AAAAwKDpZ78AAADgvPObPwAAAMByxou/AAAAQAlNij8AAADgr0tiPwAAAMCOXnK/AAAA4BzAlz8AAAAgG2ZivwAAAAA1RHg/AAAAAPCymj8AAAAgRF+ZvwAAACDEAoa/AAAAYAJXUr8AAADAyoagPwAAAOBTTGM/AAAAoL/xkj8AAACAEFyEPwAAACDbt4C/AAAAoFpCa78AAAAgd2WRvwAAAABjZ6S/AAAAQM6BVD8AAAAADWGQvwAAAICRFZC/AAAAADahkD8AAAAgvx+KPwAAAED414O/AAAAAGzQo78AAABgQgWUPwAAAACIIZG/AAAAoNtCYL8AAACAAsl/PwAAAKDDMJ2/AAAAILIwZ78AAACg5GR2vwAAAOD86Ia/AAAAYI/pkT8AAAAA2qGRvwAAACCaZY2/AAAA4HgGYL8AAADAl4B4vwAAAEAA5Iq/AAAA4MVci78AAACAi9VrvwAAAGAB+om/AAAAwJKdnD8AAADgPFBvPwAAAGB4NJe/AAAA4Gq6dD8AAABg3Zx1PwAAAMAgRmu/AAAA4HxFer8AAADgyvh9PwAAAGChdIc/AAAAwJxjZL8AAADA1y6aPwAAAICwSJ8/AAAAgJVUaj8AAADAzgyUvwAAAGDUM1a/AAAAoHaTeD8AAACgkc6WPwAAAEB8upo/AAAAgHkDnb8AAACAK1CJPwAAAGB47V0/AAAAwFcZgL8AAACAPjh3vwAAAGCmEHq/AAAA4IpKjD8AAABAV0d3PwAAACC/H4q/AAAAoO3Npb8AAABgLx2WvwAAAGCZaIA/AAAAgAsyj78AAAAAcA+OPwAAAIDVSZW/AAAAwIASZ78AAAAg4FOTvwAAAIBZLJw/AAAAgMIaXj8AAACg+nWfvwAAACDbcJc/AAAAwDzeob8AAAAAliaDvwAAAOChRqA/AAAAgCytoT8AAABgpleTPwAAAGBU14K/AAAAQNejSr8AAACAB6yLvwAAAEAXUpy/AAAAINu3kD8AAAAAQ5BjvwAAAOClhZo/AAAAICTPoT8AAAAADASYPwAAAIC+lGq/AAAAYAvAoT8AAACAHmGGPwAAAGCqln2/AAAAYHNRG78AAADgxVybPwAAAODzOG6/AAAAYCVXjr8AAAAAQ5CTPwAAAMCXx5G/AAAAAKMVdj8AAABgQgWUvwAAAACRQ6c/AAAAgGd4h78AAAAAteeEvwAAAMBJzXS/AAAAwIl7lj8AAAAgTiWBPwAAAICDyUQ/AAAAoFqJhL8AAAAAsWGhvwAAAODmkJS/AAAAoCP9iD8AAACAkLiXvwAAAEBFvFE/AAAAoEPUqb8AAAAgjb2TvwAAAED3wZQ/AAAAIOQgkL8AAADA/C+QPwAAAIBneHc/AAAAYCuXcr8AAAAgEv2CvwAAAGCBnZY/AAAA4IEoJj8AAACA/omlPwAAAABoSmA/AAAAoG1xgj8AAABgmAuovwAAAOCdeYM/AAAA4Ao1gj8AAACgtohzvwAAAOCcHJs/AAAAwDIYmj8AAADg3BE2vwAAACA79mk/AAAAYPntcj8AAAAgzSScPwAAAGCBnaa/AAAAoJZqmT8AAACAGX6KvwAAAIAjRII/AAAAwGldrL8AAABAE8yYvwAAAGD9c4a/AAAAIFeOcD8AAACgWkJrvwAAACAkz3G/AAAAoPsZkT8AAACArAmVPwAAAMAEPKe/AAAAYFhddj8AAABAExOiPwAAAOAUtKA/AAAAoHt2lL8AAACg+nVvPwAAAKAxSXQ/AAAAgBrbkr8AAAAAWv6UPwAAAOAqxYk/AAAAgAzWoD8AAACgO8iSvwAAAKCfGpI/AAAAYNw/jT8AAABAialtvwAAAEAFgG0/AAAAgCeDTL8AAADgNIuRvwAAAKBWvIe/AAAAYOqLqL8AAABgVNeCPwAAAKBoR50/AAAAwK41oz8AAABAdx54vwAAAIDnG5Q/AAAAwE0Mf78AAAAglzyCPwAAAEDBkoE/AAAAQHcemD8AAAAA7CyXPwAAAKDIWpK/AAAAgF2yn78AAABAYLB2PwAAAACsfmU/AAAAIFKrdD8AAAAg9quFPwAAAECYUpG/AAAA4N0nhb8AAABAPFOCvwAAAICeBFM/AAAA4IWuaT8AAADg+BuaPwAAAID+iWW/AAAAwOCXib8AAADg83+HvwAAAOCGC5I/AAAAIFvNmr8AAACAZ7+QvwAAAAA1/Y6/AAAAAGgDlz8AAADAALajPwAAAEAlnpe/AAAAYJlooL8AAADAKa+aPwAAAGChLY4/AAAAgOOVoD8AAABAQe+EvwAAACAE+JC/AAAAAGyJWr8AAACAC3mYvwAAAKAb8UG/AAAAgD5/kD8AAADgM+dvvwAAAKBIcHy/AAAAgOfUSj8AAACgFbEdPwAAAICeBGM/AAAAIFYxmL8AAAAgw6WNPwAAAOBdy5E/AAAA4FNMo78AAADganObvwAAAEDF0Ws/AAAA4C5LjT8AAAAACH6UPwAAAKASiGK/AAAAgFWmWL8AAACgOmuavwAAAGC0XJU/AAAAwGmkhb8AAACg+ryoPwAAAAAoVYW/AAAAoPKwgT8AAADATrCgvwAAAACxGoi/AAAAQJyRiz8AAADg63OgvwAAAIDCGp4/AAAAYL1+i78AAABgxueavwAAAOD4G5q/AAAAwEBkhT8AAAAA2f2fPwAAAAA2oWA/AAAAoFVfb78AAAAgpCtlvwAAAIALMp8/AAAAAMjPkj8AAABgHZKAvwAAAKCpmZA/AAAAwGA7lj8AAAAgiJNuvwAAAIDst5a/AAAAYB2SoD8AAABA2ABjvwAAAEAqgYM/AAAAIOBTQz8AAACAPjiXvwAAAADfPYQ/AAAAgJEVkL8AAACg8VP5vgAAAICevZm/AAAAoEQxIr8AAADgXG5JPwAAAMCAEne/AAAA4EUAWL8AAABgfReTvwAAAEDTHXe/AAAAoFYDoT8AAADA8iI/vwAAAGDqi3i/AAAAANV3nD8AAACAHmGGPwAAAIAwM5U/AAAA4EW5nj8AAADAxaOEvwAAAABILIa/AAAAQMGScT8AAACAdX2JvwAAAMAbqqi/AAAAIPHIeb8AAACg7HBtPwAAAIAMj4c/AAAAQJf1iD8AAAAgwHxivwAAAMClzJO/AAAA4EW5nr8AAABAJZ6XvwAAAKBNU5i/AAAAAB7Whr8AAADAu918PwAAAIA1FoG/AAAAwAQ8d78AAABg2RaSvwAAAAA+rYc/AAAA4EZdkL8AAADAjl6CPwAAAKCaN5a/AAAA4Lw6ZT8AAABA0sCuPwAAAECKBqY/AAAAoEw9mT8AAACgv6qZvwAAACAt8Ze/AAAAAP63fL8AAACgDEh+vwAAAICHT5g/AAAA4AGFib8AAADAhfWiPwAAAAB61ZW/AAAAgOy3lr8AAADggSiGvwAAAACQ5o6/AAAA4HMjZD8AAAAgiTdgPwAAACBt5oK/AAAAINIHKD8AAACA3VWcPwAAAECgXog/AAAAoNUCjD8AAADgc9yKvwAAAED8pHA/AAAAwKXMc78AAABgK5eSvwAAAEB3144/AAAAYOJ/cb8AAAAg8t6YvwAAAKAo4JQ/AAAAAHZPcj8AAADAUu+KPwAAAIDQrYI/AAAAwNKSRz8AAACA1UmlPwAAAMB7L5s/AAAAQKG7gD8AAACg+nWfvwAAAMASQXm/AAAAYLDWkT8AAADgyj+XvwAAAECJqX2/AAAAoOxwjT8AAADgXG6JvwAAACCIk36/AAAAACyUnz8AAADArjVzPwAAAMA83lG/AAAAQJhSkb8AAADAAG+avwAAAMB7L5u/AAAAoD7xfT8AAABA/KSAvwAAAOD8oZ2/AAAAQPfBhD8AAACAeUqGvwAAAGD9c1Y/AAAAAA1hkL8AAAAA2lqYvwAAAMDyaYi/AAAAIB+lXL8AAABAV0eHPwAAAICQuJc/AAAAgHXEgr8AAABA7liVPwAAAKDkZGa/AAAAIN/2ij8AAABgKjqavwAAAKCE34M/AAAAQFdHxz8AAADgWOh1PwAAAMBuh5G/AAAAgJEVoD8AAADgIaOTvwAAAGACV4I/AAAAgJEVgL8AAADgxVxrvwAAAIC5sX4/AAAAICTPcb8AAADgoUZgvwAAAEA8DIk/AAAAwFcZoL8AAADgUwWKPwAAAECl+po/AAAAoF9sgL8AAACAy4OtvwAAACBt5pK/AAAAIA0ap78AAAAgrZSUvwAAAKCWaok/AAAAIA0aR78AAACAwmF3PwAAAOChRqC/AAAA4MVcmz8AAADArdiKvwAAAMCuNaO/AAAAYFSQib8AAABAzjqbPwAAAEABQaM/AAAAgKOgpb8AAABgb4SePwAAAODqz14/AAAAwCVwkD8AAADAiTSdPwAAACDbt3C/AAAAwESjfz8AAACgzfaUvwAAAOCTs4s/AAAAwE0Mbz8AAABghoCCPwAAAKCswqu/AAAAgL6UWr8AAACAufiXvwAAAID0w50/AAAAAGzQoz8AAADgPFBfvwAAAGD57ZK/AAAAgDXPd78AAACgjOuaPwAAACB3ZbG/AAAAoIOCSz8AAAAATPmiPwAAAEAyjYo/AAAAgIdPeL8AAAAgf3F4vwAAAOCYlne/AAAA4Pzolj8AAABghoCiPwAAACDRqo8/AAAAgBU/UD8AAAAAp5uJPwAAAIBHWn2/AAAAAA1hUL8AAADAVxmQvwAAAOAX3Ys/AAAAwIBZUD8AAACgxI2VPwAAAAAIfpQ/AAAAgLBIf78AAABgQgWEPwAAAECYUqG/AAAAgJEVkD8AAADgk/qUvwAAAGChdIe/AAAAgLHsYL8AAADAfIyjPwAAACDW1HS/AAAAIElClT8AAADAIEabPwAAAABa/kS/AAAAQPfBpD8AAABgq/OVvwAAACA/fI0/AAAAoGQIg78AAABAyvtwPwAAAGDr6HA/AAAAoBvxkb8AAADgRhaXPwAAAACVyTo/AAAAYCo6ij8AAACgTPZ/PwAAACD/zYu/AAAAwEmGez8AAADgvPN7PwAAAMDyaVi/AAAAILIwhz8AAADg2IuSPwAAAKCtH4S/AAAAwPwvgL8AAADA13WjvwAAAIBmG68/AAAAgLBIfz8AAABAbxKRPwAAAKDscJ2/AAAAIOQgcL8AAADA1y56vwAAACDk2XY/AAAAwNKSp78AAABgOIaVvwAAAMDyaYi/AAAAQMr7kL8AAADA/C+APwAAAIBHWl0/AAAAYCIuk78AAAAA6KaTPwAAAMCF9WK/AAAA4IqRlb8AAACgemCVvwAAAOBGXZC/AAAAYNPWbb8AAABAxdFbPwAAAACVyYq/AAAAQDxTkj8AAACAwmGXvwAAAMC73Xw/AAAA4IYLgr8AAACgv6qZvwAAAIAM1mC/AAAAAKebeb8AAACg406XPwAAAOBUYqK/AAAAQDcpnT8AAACAGtuSvwAAAGArl5K/AAAAIMnlob8AAABAkhKNPwAAAKDoMZO/AAAAILb9Uz8AAABA0sBuPwAAAKAICXQ/AAAAYFTXkj8AAABgGGibvwAAAODYi4I/AAAAgEK+ar8AAACgVV+PvwAAAEAl5WA/AAAAQCWelz8AAABAMo2KvwAAAAANYaC/AAAA4JiWVz8AAAAgErZJvwAAAGA0uZg/AAAAwBOekb8AAABA7liVPwAAAIAwM6W/AAAAYCa0hj8AAACAPjiHvwAAAKDVAow/AAAAYNkWkr8AAACA+gOivwAAACBXjpC/AAAAwHsviz8AAABAmFKBPwAAAEDJV4+/AAAAYLDWcT8AAABgHUvHvwAAAOCqaEY/AAAAIBL9Qj8AAACATISSvwAAAIBmG58/AAAAIJplbb8AAABAPAyJPwAAAKCIrJC/AAAAIDs9k78AAAAghFSEvwAAAMCo9Z4/AAAAYKEtTj8AAABAwO6PvwAAAMBgO5a/AAAAwESjfz8AAACgTPZvPwAAAEBFdYi/AAAAAGftl78AAABA2ACTPwAAAKBkCKM/AAAAYOuhlz8AAACgaI6mvwAAAEDYAIM/AAAA4MEdcT8AAABAJEGPPwAAAEAl5YA/AAAA4M8io78AAAAg+0eIvwAAAGBCBYS/AAAAgMdEg78AAAAAuoOnvwAAACB/Kn8/AAAA4GY0gT8AAAAgtv1zvwAAAOAqxXk/AAAAABoJij8AAAAg8ciJvwAAAOAqxam/AAAAINoTf78AAADgru6JvwAAAIADbaE/AAAAgEK+ij8AAADgZjSRvwAAAOATV5g/AAAAwHfwoL8AAABgz1CaPwAAAMA83qE/AAAAwLK7hr8AAAAgP8OWPwAAAMDODJS/AAAAADVEiD8AAAAglzySvwAAAIDRw5E/AAAAYI/pkb8AAAAgiTeAPwAAACBEX4k/AAAAYMbnqj8AAAAg8ciZPwAAAKCIrKA/AAAAwPPGkD8AAAAAoxVmvwAAAMC7JGY/AAAAIH8qj78AAACALK2RPwAAAEA8U3K/AAAA4LhtiL8AAADgj3SBvwAAAKCpmZA/AAAAANE4or8AAAAAMb50PwAAACCEDZu/AAAAIIiTjj8AAADgvVCEvwAAAMAzdZK/AAAAQDdwlj8AAADgMy6ZPwAAAEA3KY2/AAAA4NNhnT8AAACA8D16PwAAAKB22oG/AAAAYLDWYT8AAABAILurPwAAAOAho5M/AAAAYBhoq78AAAAgVjF4vwAAACD2q2W/AAAAoNF8iL8AAADgeL9WPwAAAGBd+Zi/AAAAIE4lkb8AAADAAG96vwAAAABMspm/AAAA4KH/Zr8AAADgWOh1vwAAAEDhaZI/AAAAoMgTmT8AAAAgNhN+vwAAAEDA7p+/AAAAYB2SkD8AAACgDaWmvwAAAKBMPXm/AAAAoFufkz8AAADAPwedvwAAAAA1/U4/AAAAAB6PnT8AAABg+JCKPwAAAADjw5e/AAAAQO5YhT8AAADASc2EvwAAAABwD46/AAAAwFy1gr8AAABAqiSAvwAAAOD4YpM/AAAA4I90kT8AAADAaaRlPwAAAIAi53k/AAAAoJrwjD8AAABA8zuRvwAAAOD86Ia/AAAAQA4whj8AAADAboexPwAAAECAh6c/AAAAYBzuTr8AAACgyBNZvwAAACDaE5+/AAAAYCVXfr8AAABghoCyvwAAAAA1RGi/AAAAQLgpkr8AAAAgTQ+SPwAAAGAG3YW/AAAAIA0al78AAABAU8GTvwAAAEAl5XA/AAAAAKPOnL8AAACAPn+QPwAAAODunJu/AAAAoIgejr8AAAAgLk6QvwAAAECuY4q/AAAAQHwBhL8AAABg9ApnvwAAACBJQpW/AAAAAEOQk78AAACgW5+TPwAAAACo+JE/AAAAYBTihz8AAAAAusqAvwAAAMDJKVg/AAAA4NwRlj8AAADgof9mPwAAAGAZxZM/AAAAYNi5ib8AAABgr8ByPwAAAOAYOoS/AAAA4BS0sD8AAACgiGWHvwAAAMCyu4a/AAAAgGv+ij8AAAAg7ft8vwAAAGBvhI6/AAAAAGMgi78AAABACqpSvwAAAEDgDJq/AAAAgL6Umj8AAABgT/SWvwAAAOAz548/AAAAoMSNZT8AAACgFg6GvwAAAGCBVo2/AAAAQDdwlr8AAADASc0kPwAAAEDJV4+/AAAAABpQkz8AAABALsCNvwAAACAS/ZK/AAAAADBhrL8AAABAU8GjvwAAAGBd+Wg/AAAAINIHmL8AAACAEBWbPwAAAMDXdZO/AAAAoAPfnr8AAADg6hZ4PwAAAGBvhJ6/AAAAQEW8kb8AAACgzJmMPwAAAMCXx5E/AAAAgOOVkD8AAABgYtyEPwAAAGBCBZQ/AAAAAOJmbz8AAADA6QB5vwAAAACjzoy/AAAAALWgiz8AAABggVZdvwAAAEAcfKG/AAAAYJlooD8AAAAg5CCQvwAAACDEu1y/AAAAwPwvgL8AAADANp59vwAAAEAKqjK/AAAAQDcpfT8AAABgD/97PwAAAKCWsZK/AAAAoJHOhj8AAADggMudvwAAAKC2iIM/AAAAIOQggD8AAACAFT+AvwAAAOClhYo/AAAAwGldjD8AAABgxi6EPwAAAGD0Coc/AAAAgMN3lr8AAADA5B1NPwAAAMDyIm+/AAAAgHDhpj8AAADATmlnvwAAAIB+LYI/AAAAQAFBYz8AAAAALCKSPwAAAODKP5c/AAAAAP7+lb8AAADg+BtqPwAAAGCTKKy/AAAAwPJpiD8AAABA5e+1vwAAAMAbqog/AAAAYF1Acj8AAADg3BF2vwAAACAIN4s/AAAAQGCwpr8AAADALpKmPwAAACDEAoa/AAAAYGapkT8AAAAgrZR0PwAAAADHcoq/AAAAwHfwkD8AAACgpLaUPwAAAGCUhYS/AAAAYD0imL8AAACgqDyIvwAAAGAdkpA/AAAAYKvzpb8AAACAvtuTPwAAAKAICYQ/AAAAQMXRm78AAACAh0+YPwAAAMCo9Z4/AAAAANW+pT8AAABgkP+APwAAAGDLEXA/AAAAQKrddj8AAADgXcuRPwAAAKA2LIA/AAAAQECSnL8AAABAXOOJPwAAAIB5Spa/AAAAYAJXoj8AAACgcfelPwAAAGBmqaE/AAAAIJJZdj8AAAAAI3J5PwAAAGChdFc/AAAA4Gq6pD8AAABAc5ikPwAAAIBVpni/AAAAIMQCpr8AAAAgGx+ZPwAAAKASiJK/AAAAIJJZRj8AAACAXlZhvwAAAKCyAnC/AAAA4AGFeb8AAAAg1tRUPwAAAKCa8Hw/AAAAQJNvlT8AAACANc+HvwAAAGDZFqK/AAAAoFufo78AAACAAhCJPwAAAODBHaG/AAAAQFcAjj8AAAAgtxOjvwAAACAAK5S/AAAA4Jc5j78AAADgru6ZPwAAAKAMSJ4/AAAA4NiLcr8AAABgb4RuPwAAAMCgMGG/AAAAgCytkb8AAADAII2kvwAAAEAXmXW/AAAAYFhdlj8AAACgFg6GvwAAAEBc45m/AAAAwPPGYD8AAABgvGg8vwAAAADnSXu/AAAAYL1+i78AAABggrOlvwAAAOCh/3a/AAAAgNBmmT8AAAAAv2aTvwAAACDkIJA/AAAAYMvKlj8AAADgfEWavwAAAEDSwI6/AAAAYGF/fD8AAACg6DGTPwAAAACQ5n6/AAAAQKG7gL8AAACgEXKTvwAAAMD70oc/AAAAYAbdNb8AAADAXLVyvwAAAEDpdZk/AAAAQKVBhD8AAACAMDN1PwAAAIA1FnE/AAAA4G+doD8AAABAu1KdvwAAAKDRfHi/AAAAwBOeoT8AAADAsrtWvwAAAMDJcHG/AAAAQHOYhD8AAABA7hF8PwAAAEBhxoU/AAAA4FNMk78AAABAHHyRPwAAACB2CHm/AAAAAD5mTr8AAABgmWiAPwAAAOCTs4s/AAAAAMjPcj8AAAAgcoKVvwAAAEA8U4I/AAAAYLk/gT8AAABgPSKIPwAAAODB1nc/AAAAAA1hgD8AAACA+aaZvwAAACBpGYa/AAAA4GY0kT8AAABgoXSHPwAAAGDqi4i/AAAAQBeZlT8AAADACdiZPwAAAOBPf5Y/AAAAAAPioT8AAAAAOuCKvwAAACB/Kp+/AAAAIIDOQD8AAABAAOSavwAAAADIz4I/AAAAAJ+PEj8AAAAAkYqgvwAAAACo+JG/AAAAQA7pnL8AAABAHHyRvwAAAMBOsGC/AAAAAJGKgD8AAADgSpyKvwAAAMCXx7E/AAAAQEW8gT8AAADA4N6CPwAAAGDGLoQ/AAAAgJEVkL8AAABggVaNPwAAACB/cZg/AAAAQIBAfr8AAACgcfd1vwAAAOBqupS/AAAAIK1Niz8AAADA5XqlvwAAAGAZxZO/AAAAQPM7cb8AAACg8rBxvwAAAIBDG6M/AAAAIDZal78AAADguG2oPwAAAACiuJ0/AAAAQO5YZb8AAADAQGSVPwAAAOBqunS/AAAAoBvxkT8AAADAVnVuPwAAAIA+f4C/AAAAgBrbkr8AAAAAR8+NPwAAAACHfX+/AAAAYB2SgD8AAABAYcalvwAAACBSq1S/AAAA4CrFiT8AAAAADASYvwAAAIC5sY4/AAAAQMDuf78AAACgWkKbvwAAAABMsom/AAAAgGxbg78AAABAZZOSPwAAAOBPf5Y/AAAAYBhoa78AAADg2ItyvwAAAGB0roO/AAAAIClrpL8AAAAgRF+ZvwAAAKDDMI0/AAAAYMptjr8AAABAbxJxvwAAAGBmqbG/"}]}]}, "source_code": "class _CallerCalleeManager:\n    \"\"\"\n    Manages the caller-callee relationships of a symbol in a graph.\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, document: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            document (Any): A Document object\n        \"\"\"\n        self._graph = graph\n        self.navigator = _SymbolGraphNavigator(graph)\n        self.document = document\n\n    def process(self):\n        \"\"\"\n        Processes the caller-callee relationships in the local graph\n\n        Note that this is an expensive operation, and should be used sparingly\n        \"\"\"\n        for symbol in self.document.symbols:\n            try:\n                symbol_object = parse_symbol(symbol.symbol)\n            except Exception as e:\n                logger.error(f\"Parsing symbol {symbol.symbol} failed with error {e}\")\n                continue\n\n            if symbol_object.symbol_kind_by_suffix() != SymbolDescriptor.PyKind.Method:\n                continue\n\n            try:\n                references_in_scope = self.navigator._get_symbol_references_in_scope(symbol_object)\n            except Exception as e:\n                logger.error(\n                    f\"Failed to get references in scope for symbol {symbol} with error {e}\"\n                )\n                continue\n\n            for ref in references_in_scope:\n                try:\n                    if (\n                        ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Method\n                        or ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Class\n                    ):\n                        if ref.symbol == symbol_object:\n                            continue\n                        # TODO - This approach will include non-call statements, like return statements\n                        # unfortunately, this seems necessary to get the full set of callers\n                        # e.g. omitting classes appears to remove constructor calls for X, like X()\n                        # For, we filtering is done downstream with the ASTNavigator\n                        # with current understanding, it seems handling will require AST awareness\n                        self._graph.add_edge(\n                            symbol_object,\n                            ref.symbol,\n                            line_number=ref.line_number,\n                            column_number=ref.column_number,\n                            roles=ref.roles,\n                            label=\"caller\",\n                        )\n                        self._graph.add_edge(\n                            ref.symbol,\n                            symbol_object,\n                            line_number=ref.line_number,\n                            column_number=ref.column_number,\n                            roles=ref.roles,\n                            label=\"callee\",\n                        )\n                except Exception as e:\n                    logger.error(f\"Failed to add caller-callee edge for {symbol} with error {e} \")\n                    continue\n\n\n", "summary": "_CallerCalleeManager is a class that manages caller-callee relationships in a symbol graph by generating a connected graph of all symbols that call or are called by another symbol. This helps analyze how different components of code interact with each other. The class uses a networkx graph and a _SymbolGraphNavigator instance for its operations, making it resource-intensive and should be used sparingly. The manager has limitations, such as including non-call statements like return statements; resolving this limitation would require AST awareness.\n\nAn example of using the _CallerCalleeManager class:\n```python\nimport networkx as nx\nfrom automata.core.symbol.graph import _CallerCalleeManager\nfrom automata.core.symbol.graph import _SymbolGraphNavigator\n\n# Create a MultiDiGraph\ngraph = nx.MultiDiGraph()\n\n# Create a document with symbols\ndocument = ...\n\n# Initialize CallerCalleeManager\nmanager = _CallerCalleeManager(graph=graph, document=document)\n\n# Process caller-callee relationships in the graph\nmanager.process()\n```", "context": "\n    Generate the documentation for _CallerCalleeManager using the context shown below -\n  Building context for primary symbol - automata.core.symbol.graph._CallerCalleeManager -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata.config.config_enums import ConfigCategory\n      from automata.core.symbol.parser import parse_symbol\n      from automata.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata.core.utils import config_fpath\n      \n      # _CallerCalleeManager\n      \n      `_CallerCalleeManager` is a class that manages the caller-callee relationships of a symbol in a graph. It processes the caller-callee relationships in the local graph in order to generate a connected graph of all symbols that call or are called by another symbol. This is an important step in analyzing how different components of code interact with one another.\n      \n      ## Overview\n      \n      The `_CallerCalleeManager` processes and maintains the caller-callee relationships by finding all symbols that call a given symbol or are called by a given symbol within the local graph. The processing of these relationships is an expensive operation and should be used sparingly. The class uses a `networkx` graph and a `_SymbolGraphNavigator` instance to carry out its operations.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.graph.GraphBuilder._process_caller_callee_relationships`\n      - `automata.tests.unit.test_py_writer.MockCodeGenerator`\n      - `automata.core.context.py_context.retriever.PyContextRetriever`\n      - `automata.core.coding.py_coding.writer.PyCodeWriter`\n      - `automata.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callers`\n      \n      ## Example\n      \n      The following is an example demonstrating how to use the `_CallerCalleeManager` class to process caller-callee relationships.\n      \n      ```python\n      import networkx as nx\n      from automata.core.symbol.graph import _CallerCalleeManager\n      from automata.core.symbol.graph import _SymbolGraphNavigator\n      \n      # Create a MultiDiGraph\n      graph = nx.MultiDiGraph()\n      \n      # Create a document with symbols\n      document = ...\n      \n      # Initialize CallerCalleeManager\n      manager = _CallerCalleeManager(graph=graph, document=document)\n      \n      # Process caller-callee relationships in the graph\n      manager.process()\n      ```\n      \n      ## Limitations\n      \n      The `_CallerCalleeManager` has the limitation that it may include non-call statements, such as return statements, in its analysis. This is due to the current approach used in processing the relationships. Handling this limitation would require AST (Abstract Syntax Tree) awareness. Filtering for non-call statements is done downstream with the `ASTNavigator`.\n      \n      ## Follow-up Questions:\n      \n      - Is there a more efficient approach to processing the caller-callee relationships within the `_CallerCalleeManager`?\n      - How can the `_CallerCalleeManager` be improved to exclude non-call statements from its analysis?\n      \n    Class Docstring:\n      Manages the caller-callee relationships of a symbol in a graph.\n      \n    Methods:\n      def __init__(self, graph: nx.MultiDiGraph, document: Any):\n              \"\"\"\n              Args:\n                  graph (nx.MultiDiGraph): A networkx graph\n                  document (Any): A Document object\n              \"\"\"\n              self._graph = graph\n              self.navigator = _SymbolGraphNavigator(graph)\n              self.document = document\n      \n          \n      def process(self):\n              \"\"\"\n              Processes the caller-callee relationships in the local graph\n      \n              Note that this is an expensive operation, and should be used sparingly\n              \"\"\"\n              for symbol in self.document.symbols:\n                  try:\n                      symbol_object = parse_symbol(symbol.symbol)\n                  except Exception as e:\n                      logger.error(f\"Parsing symbol {symbol.symbol} failed with error {e}\")\n                      continue\n      \n                  if symbol_object.symbol_kind_by_suffix() != SymbolDescriptor.PyKind.Method:\n                      continue\n      \n                  try:\n                      references_in_scope = self.navigator._get_symbol_references_in_scope(symbol_object)\n                  except Exception as e:\n                      logger.error(\n                          f\"Failed to get references in scope for symbol {symbol} with error {e}\"\n                      )\n                      continue\n      \n                  for ref in references_in_scope:\n                      try:\n                          if (\n                              ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Method\n                              or ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Class\n                          ):\n                              if ref.symbol == symbol_object:\n                                  continue\n                              # TODO - This approach will include non-call statements, like return statements\n                              # unfortunately, this seems necessary to get the full set of callers\n                              # e.g. omitting classes appears to remove constructor calls for X, like X()\n                              # For, we filtering is done downstream with the ASTNavigator\n                              # with current understanding, it seems handling will require AST awareness\n                              self._graph.add_edge(\n                                  symbol_object,\n                                  ref.symbol,\n                                  line_number=ref.line_number,\n                                  column_number=ref.column_number,\n                                  roles=ref.roles,\n                                  label=\"caller\",\n                              )\n                              self._graph.add_edge(\n                                  ref.symbol,\n                                  symbol_object,\n                                  line_number=ref.line_number,\n                                  column_number=ref.column_number,\n                                  roles=ref.roles,\n                                  label=\"callee\",\n                              )\n                      except Exception as e:\n                          logger.error(f\"Failed to add caller-callee edge for {symbol} with error {e} \")\n                          continue\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.graph.GraphBuilder._process_caller_callee_relationships\n    \n      Class Docstring:\n        Processes the caller-callee relationships in the local graph\n        \n        Args:\n        document (Any): A Document object\n        \n      Methods:\n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callers\n    \n      Class Docstring:\n        Gets all potential callers of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch callers for\n        \n        Returns:\n        Dict[Symbol, SymbolReference]: A dictionary of Symbol objects to\n        Symbol calleers (SymbolReference objects).\n        TODO - Remove non-call statements from this return object\n        \n      Methods:\n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n    automata.core.coding.py_coding.retriever.PyCodeRetriever\n    \n        `PyCodeRetriever` is a class designed to fetch Python code from a specified module, enabling the retrieval of source code, docstrings, and source code without docstrings for a given module, class, or function/method. Through methods like `get_docstring`, `get_source_code`, and `get_source_code_without_docstrings`, it offers a way to programmatically analyze, extract, and comprehend Python projects. However, this class assumes a specific directory structure for the modules and relies on the RedBaron library for parsing, which may have limitations when parsing complex or unconventional code patterns.\n        \n        An example usage of `PyCodeRetriever` for retrieving the source code of a function from a specified module is as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        \n        module_tree_map = LazyModuleTreeMap.cached_default()\n        code_retriever = PyCodeRetriever(module_tree_map)\n        \n        module_dotpath = \"mymodule.example\"\n        object_path = \"ExampleClass.example_function\"\n        \n        source_code = code_retriever.get_source_code(module_dotpath, object_path)\n        print(source_code)\n        ```\n        \n        \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n        The `LazyModuleTreeMap` class is a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching the modules in memory as they are accessed. It provides methods for fetching existing module dotpaths and filepaths, as well as fetching, putting, and updating modules by their dotpaths. However, it assumes a specific directory structure according to the `DotPathMap` class and does not support custom directory structures for modules.\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.utils import root_fpath\n        \n        path_to_root = root_fpath()\n        module_tree_map = LazyModuleTreeMap(path_to_root)\n        \n        # Fetch an existing module by its dotpath\n        module_dotpath = \"automata.core.agent.automata_agent\"\n        module = module_tree_map.fetch_module(module_dotpath)\n        \n        # Check if a module with the given dotpath exists\n        exists = module_dotpath in module_tree_map\n        ```\n        \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callees\n    \n      Class Docstring:\n        Gets all potential callees of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch callees for\n        \n        Returns:\n        Dict[Symbol, SymbolReference]: A dictionary of Symbol objects to\n        Symbol callees (SymbolReference objects).\n        \n      Methods:\n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n  Building context for dependencies -\n  \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.symbol_types.SymbolDescriptor.PyKind\n    \n        `SymbolDescriptor` is a Python object representing the descriptor component of a URI within the `automata.core.symbol` framework. It serves as a building block for creating and parsing symbols and provides methods to work with descriptor components. For example, to create a `SymbolDescriptor` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolDescriptor\n        from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n        \n        descriptor = SymbolDescriptor(\n            name=\"ActionIndicator\",\n            suffix=DescriptorProto.TYPE,\n        )\n        ```\n        \n        It is closely tied to the `automata.core.symbol` framework and may require updates if the underlying descriptor format or parser implementation changes.\n        \n    automata.core.symbol.graph._SymbolGraphNavigator\n    \n      Class Docstring:\n        Handles navigation of a symbol graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                \"\"\"\n                self._graph = graph\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.symbol.graph.GraphBuilder\n    \n        `GraphBuilder` is a class that constructs a symbol graph from an `Index` object, facilitating the exploration of symbol relationships within source code. The resulting graph, a networkx `MultiDiGraph` object, allows for identifying symbol patterns and relationships in the codebase. While caller-callee relationships are not included by default due to performance concerns, they can be enabled by setting the `build_caller_relationships` flag to `True`. However, enabling this feature can result in significantly longer processing times due to the expensive computation.\n        \n        Example:\n        \n        ```python\n        from automata.core.symbol.graph import GraphBuilder\n        from automata.core.symbol.scip_pb2 import Index\n        \n        index = Index()  # Assuming a populated index object.\n        build_caller_relationships = True  # Optional\n        graph_builder = GraphBuilder(index, build_caller_relationships)\n        graph = graph_builder.build_graph()\n        ```\n        \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n    automata.core.symbol.graph._SymbolGraphNavigator._get_symbol_references_in_scope\n    \n      Class Docstring:\n        Gets all symbol references in the scope of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch references for\n        \n        Returns:\n        List[SymbolReference]: A list of SymbolReference objects in scope\n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.graph`/_OccurrenceManager#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "_OccurrenceManager", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# _OccurrenceManager\n\nThe `_OccurrenceManager` is a class responsible for managing the occurrences of a symbol within a graph. It accepts a networkx graph and a document object as its arguments during initialization. The class provides a `process` method which processes the occurrences in the local graph, adding edges and information to the graph based on the occurrences' symbol, roles, and location within the document.\n\n## Overview\n\nThe `_OccurrenceManager` class is designed to manage occurrences of symbols within a graph. It initializes with a given graph and document and provides the `process` method for processing occurrences in the local graph. This method adds edges and information to the graph based on the occurrences' symbol, roles, and location within the document.\n\n## Related Symbols\n\n- `automata.core.symbol.graph.GraphBuilder._process_occurrences`\n- `automata.core.context.py_context.retriever.PyContextRetriever.IndentManager`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n- `automata.core.context.py_context.retriever.PyContextRetriever`\n- `automata.core.symbol.graph._CallerCalleeManager`\n- `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.core.symbol.graph.GraphBuilder`\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n\n## Example\n\nThe following example demonstrates how to create an `_OccurrenceManager` object and process occurrences in a given graph and document.\n\n```python\nimport networkx as nx\nfrom automata.core.symbol.graph import _OccurrenceManager\n\n# Assume that graph and document are already defined\ngraph = nx.MultiDiGraph()\ndocument = ...\n\n# Initialize the _OccurrenceManager\noccurrence_manager = _OccurrenceManager(graph, document)\n\n# Process occurrences in the graph and document\noccurrence_manager.process()\n```\n\n## Limitations\n\nThe `_OccurrenceManager` class currently does not provide any functionality to remove, modify, or search for occurrences within the graph. Additionally, it does not support advanced queries or filtering on the processed occurrences.\n\n## Follow-up Questions:\n\n- What would be the appropriate way to remove or modify occurrences within the graph after processing with the `_OccurrenceManager`?\n- Can you provide an example of what advanced queries could be supported for `process` method or other parts of the `_OccurrenceManager`?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 7}, false, {"py/b64": ""}]}]}, "source_code": "class _OccurrenceManager:\n    \"\"\"\n    Manages the occurrences of a symbol in a graph\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, document: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            document (Any): A Document object\n        \"\"\"\n        self._graph = graph\n        self.document = document\n\n    def process(self):\n        \"\"\"\n        Processes the occurrences in the local graph\n        \"\"\"\n        for occurrence in self.document.occurrences:\n            try:\n                occurrence_symbol = parse_symbol(occurrence.symbol)\n            except Exception as e:\n                logger.error(f\"Parsing symbol {occurrence.symbol} failed with error {e}\")\n                continue\n\n            occurrence_range = tuple(occurrence.range)\n            occurrence_roles = _OccurrenceManager._process_symbol_roles(occurrence.symbol_roles)\n            occurrence_reference = SymbolReference(\n                symbol=occurrence_symbol,\n                line_number=occurrence_range[0],\n                column_number=occurrence_range[1],\n                roles=occurrence_roles,\n            )\n            self._graph.add_edge(\n                occurrence_symbol,\n                self.document.relative_path,\n                symbol_reference=occurrence_reference,\n                label=\"reference\",\n            )\n            if occurrence_roles.get(SymbolRole.Name(SymbolRole.Definition)):\n                # TODO this is gross\n                incorrect_contains_edges = [\n                    (source, target)\n                    for source, target, data in self._graph.in_edges(occurrence_symbol, data=True)\n                    if data.get(\"label\") == \"contains\"\n                ]\n                for source, target in incorrect_contains_edges:\n                    self._graph.remove_edge(source, target)\n\n                self._graph.add_edge(\n                    self.document.relative_path,\n                    occurrence_symbol,\n                    label=\"contains\",\n                )\n\n    @staticmethod\n    def _process_symbol_roles(role: int) -> Dict[str, bool]:\n        \"\"\"\n        Processes the symbol roles into a dictionary of role names to booleans\n\n        Args:\n            role (int): The symbol role\n        \"\"\"\n        result = {}\n        for role_name, role_value in SymbolRole.items():\n            if (role & role_value) > 0:\n                result[role_name] = (role & role_value) > 0\n        return result\n\n\n", "summary": "The `_OccurrenceManager` class is responsible for managing the occurrences of a symbol within a networkx graph, taking a graph and a document object as its arguments. The class provides a `process` method, which processes the occurrences in the local graph, adding edges and information based on the symbol, roles, and location within the document. However, the class currently lacks functionality to remove, modify, or search for occurrences within the graph and does not support advanced queries or filtering on the processed occurrences.", "context": "\n    Generate the documentation for _OccurrenceManager using the context shown below -\n  Building context for primary symbol - automata.core.symbol.graph._OccurrenceManager -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata.config.config_enums import ConfigCategory\n      from automata.core.symbol.parser import parse_symbol\n      from automata.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata.core.utils import config_fpath\n      \n      # _OccurrenceManager\n      \n      `_OccurrenceManager` class manages the occurrences of a symbol in a graph. It consists of methods to initialize the class with a given graph and document, as well as process the occurrences in the local graph.\n      \n      ## Overview\n      \n      The `_OccurrenceManager` is responsible for managing the occurrences of a symbol within a graph. It accepts a networkx graph and a document object as its arguments during initialization. The class provides a `process` method which processes the occurrences in the local graph, adding edges and information to the graph based on the occurrences' symbol, roles, and location within the document.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.graph.GraphBuilder._process_occurrences`\n      - `automata.core.context.py_context.retriever.PyContextRetriever.IndentManager`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n      - `automata.core.context.py_context.retriever.PyContextRetriever`\n      - `automata.core.symbol.graph._CallerCalleeManager`\n      - `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.core.symbol.graph.GraphBuilder`\n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      \n      ## Example\n      \n      The following example demonstrates how to create an `_OccurrenceManager` object and process occurrences in a given graph and document.\n      \n      ```python\n      import networkx as nx\n      from automata.core.symbol.graph import _OccurrenceManager\n      \n      # Assume that graph and document are already defined\n      graph = nx.MultiDiGraph()\n      document = ...\n      \n      # Initialize the _OccurrenceManager\n      occurrence_manager = _OccurrenceManager(graph, document)\n      \n      # Process occurrences in the graph and document\n      occurrence_manager.process()\n      ```\n      \n      ## Limitations\n      \n      The `_OccurrenceManager` class currently does not provide any functionality to remove, modify, or search for occurrences within the graph. Additionally, it does not support advanced queries or filtering on the processed occurrences.\n      \n      ## Follow-up Questions:\n      \n      - What would be the appropriate way to remove or modify occurrences within the graph after processing with the `_OccurrenceManager`?\n      - Can you provide an example of what advanced queries could be supported for `process` method or other parts of the `_OccurrenceManager`?\n      \n    Class Docstring:\n      Manages the occurrences of a symbol in a graph\n      \n    Methods:\n      def __init__(self, graph: nx.MultiDiGraph, document: Any):\n              \"\"\"\n              Args:\n                  graph (nx.MultiDiGraph): A networkx graph\n                  document (Any): A Document object\n              \"\"\"\n              self._graph = graph\n              self.document = document\n      \n          \n      def process(self):\n              \"\"\"\n              Processes the occurrences in the local graph\n              \"\"\"\n              for occurrence in self.document.occurrences:\n                  try:\n                      occurrence_symbol = parse_symbol(occurrence.symbol)\n                  except Exception as e:\n                      logger.error(f\"Parsing symbol {occurrence.symbol} failed with error {e}\")\n                      continue\n      \n                  occurrence_range = tuple(occurrence.range)\n                  occurrence_roles = _OccurrenceManager._process_symbol_roles(occurrence.symbol_roles)\n                  occurrence_reference = SymbolReference(\n                      symbol=occurrence_symbol,\n                      line_number=occurrence_range[0],\n                      column_number=occurrence_range[1],\n                      roles=occurrence_roles,\n                  )\n                  self._graph.add_edge(\n                      occurrence_symbol,\n                      self.document.relative_path,\n                      symbol_reference=occurrence_reference,\n                      label=\"reference\",\n                  )\n                  if occurrence_roles.get(SymbolRole.Name(SymbolRole.Definition)):\n                      # TODO this is gross\n                      incorrect_contains_edges = [\n                          (source, target)\n                          for source, target, data in self._graph.in_edges(occurrence_symbol, data=True)\n                          if data.get(\"label\") == \"contains\"\n                      ]\n                      for source, target in incorrect_contains_edges:\n                          self._graph.remove_edge(source, target)\n      \n                      self._graph.add_edge(\n                          self.document.relative_path,\n                          occurrence_symbol,\n                          label=\"contains\",\n                      )\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.graph.GraphBuilder._process_occurrences\n    \n      Class Docstring:\n        Processes the occurrences in the local graph\n        \n        Args:\n        document (Any): A Document object\n        \n      Methods:\n    automata.core.context.py_context.retriever.PyContextRetriever.IndentManager\n    \n      Class Docstring:\n        A context manager to manage the indentation level\n        \n      Methods:\n        IndentManager(self) -> None\n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.core.symbol.graph._CallerCalleeManager\n    \n        The _CallerCalleeManager class manages caller-callee relationships of a symbol in a graph by processing all symbols that call or are called by another symbol within the local graph. This is crucial for understanding how different components of code interact with one another. However, processing these relationships is computationally expensive, so it should be used sparingly. The class relies on a networkx graph and a _SymbolGraphNavigator instance for its operations. There are limitations, such as including non-call statements, which can be mitigated with AST awareness and filtering downstream using the ASTNavigator.\n        \n        Example usage:\n        \n        ```python\n        import networkx as nx\n        from automata.core.symbol.graph import _CallerCalleeManager\n        from automata.core.symbol.graph import _SymbolGraphNavigator\n        \n        # Create a MultiDiGraph\n        graph = nx.MultiDiGraph()\n        \n        # Create a document with symbols\n        document = ...\n        \n        # Initialize CallerCalleeManager\n        manager = _CallerCalleeManager(graph=graph, document=document)\n        \n        # Process caller-callee relationships in the graph\n        manager.process()\n        ```\n        \n      Class Docstring:\n        Manages the caller-callee relationships of a symbol in a graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, document: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    document (Any): A Document object\n                \"\"\"\n                self._graph = graph\n                self.navigator = _SymbolGraphNavigator(graph)\n                self.document = document\n        \n            \n        process(self) -> None\n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.embedding.symbol_similarity.SymbolSimilarity\n    \n        `SymbolSimilarity` is a class that computes similarity scores between query texts and symbols using embeddings, and allows users to retrieve the most similar symbols for a specific query and create a dictionary mapping the similarity scores to each symbol. Users can set the available symbols for the calculation, and the similarity scores depend on the quality of the supplied pre-trained embeddings and selected norm type. The class uses a `SymbolCodeEmbeddingHandler` for handling embeddings, which affects the accuracy of the results.\n        \n        Example usage of `SymbolSimilarity`:\n        ```python\n        import numpy as np\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        from automata.core.embedding.embedding_types import EmbeddingProvider, NormType\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        \n        embedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n        symbol_similarity.set_available_symbols(available_symbols)\n        nearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n        query_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.graph.GraphBuilder\n    \n        `GraphBuilder` is a class that constructs a symbol graph from an `Index` object, facilitating the exploration of symbol relationships within source code. The resulting graph, a networkx `MultiDiGraph` object, allows for identifying symbol patterns and relationships in the codebase. While caller-callee relationships are not included by default due to performance concerns, they can be enabled by setting the `build_caller_relationships` flag to `True`. However, enabling this feature can result in significantly longer processing times due to the expensive computation.\n        \n        Example:\n        \n        ```python\n        from automata.core.symbol.graph import GraphBuilder\n        from automata.core.symbol.scip_pb2 import Index\n        \n        index = Index()  # Assuming a populated index object.\n        build_caller_relationships = True  # Optional\n        graph_builder = GraphBuilder(index, build_caller_relationships)\n        graph = graph_builder.build_graph()\n        ```\n        \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n  Building context for dependencies -\n  \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.graph`/_RelationshipManager#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "_RelationshipManager", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# _RelationshipManager\n\n`_RelationshipManager` is a class that manages the relationships between symbols in a graph. It is used internally by the `GraphManager` and related classes in the `automata.core.symbol.graph` package. The main functionality of the class is to process relationships between symbols and add them as edges in the given graph.\n\n## Overview\n\nThe `_RelationshipManager` class is initialized with a `networkx` graph and a `SymbolInformation` object. The `process` method takes these relationships and adds them as edges in the graph. \n\n## Related Symbols\n\n- `automata.core.symbol.graph._CallerCalleeManager`\n- `automata.core.symbol.graph.GraphBuilder`\n- `automata.core.symbol.graph._SymbolGraphNavigator.get_symbol_relationships`\n- `automata.core.symbol.symbol_types.Symbol`\n\n## Usage Example\n\nThis example demonstrates how to create a `_RelationshipManager` and process symbol relationships in a sample `networkx` graph:\n\n```python\nimport networkx as nx\nfrom automata.core.symbol.graph import _RelationshipManager\nfrom automata.core.utils import config_fpath\n\n# Create a sample SymbolInformation object\nsymbol_information = ...\ngraph = nx.MultiDiGraph()\n\n# Create a _RelationshipManager instance\nrelationship_manager = _RelationshipManager(graph=graph, symbol_information=symbol_information)\n\n# Process the relationships in the local graph\nrelationship_manager.process()\n```\n\n## Limitations\n\nThe `_RelationshipManager` class is designed to be used internally by other classes in the `automata.core.symbol.graph` package. It relies on correct and consistent input from the `SymbolInformation` object and may not handle errors gracefully.\n\n## Follow-up Questions:\n\n- How can we improve error handling and robustness in the `_RelationshipManager` class?\n- Can the `_RelationshipManager` be used in isolation for specific use cases or is it strictly an internal class?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/reduce": [{"py/type": "numpy.dtype"}, {"py/tuple": ["f8", false, true]}, {"py/tuple": [3, "<", null, null, null, -1, -1, 0]}]}, false, {"py/b64": ""}]}]}, "source_code": "class _RelationshipManager:\n    \"\"\"\n    Manages the relationships between symbols in a graph\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, symbol_information: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            symbol_information (Any): A SymbolInformation object\n        \"\"\"\n        self._graph = graph\n        self.symbol_information = symbol_information\n\n    def process(self):\n        \"\"\"\n        Processes the relationships in the local graph\n        \"\"\"\n        for relationship in self.symbol_information.relationships:\n            relationship_labels = MessageToDict(relationship)\n            relationship_labels.pop(\"symbol\")\n            related_symbol = parse_symbol(relationship.symbol)\n            self._graph.add_edge(\n                self.symbol_information.symbol,\n                related_symbol,\n                label=\"relationship\",\n                **relationship_labels,\n            )\n\n\n", "summary": "The `_RelationshipManager` is a class that manages relationships between symbols in a graph, primarily processing these relationships and representing them as edges in a given graph. It is initialized with a `networkx` graph and a `SymbolInformation` object and is designed to be used internally by the `GraphManager` and related classes in the `automata.core.symbol.graph` package. An example of creating a `_RelationshipManager` instance and processing symbol relationships in a sample `networkx` graph is provided in the documentation. It relies on correct and consistent input from the `SymbolInformation` object and may not handle errors gracefully.", "context": "\n    Generate the documentation for _RelationshipManager using the context shown below -\n  Building context for primary symbol - automata.core.symbol.graph._RelationshipManager -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata.config.config_enums import ConfigCategory\n      from automata.core.symbol.parser import parse_symbol\n      from automata.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata.core.utils import config_fpath\n      \n      # _RelationshipManager\n      \n      `_RelationshipManager` is a class that manages the relationships between symbols in a graph. It is used internally by the `GraphManager` and related classes in the `automata.core.symbol.graph` package. The main functionality of the class is to process relationships between symbols and add them as edges in the given graph.\n      \n      ## Overview\n      \n      The `_RelationshipManager` class is initialized with a `networkx` graph and a `SymbolInformation` object. The `process` method takes these relationships and adds them as edges in the graph. \n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.graph._CallerCalleeManager`\n      - `automata.core.symbol.graph.GraphBuilder`\n      - `automata.core.symbol.graph._SymbolGraphNavigator.get_symbol_relationships`\n      - `automata.core.symbol.symbol_types.Symbol`\n      \n      ## Example\n      \n      This example demonstrates how to create a `_RelationshipManager` and process symbol relationships in a sample `networkx` graph:\n      \n      ```python\n      import networkx as nx\n      from automata.core.symbol.graph import _RelationshipManager\n      from automata.core.utils import config_fpath\n      \n      # Create a sample SymbolInformation object\n      symbol_information = ...\n      graph = nx.MultiDiGraph()\n      \n      # Create a _RelationshipManager instance\n      relationship_manager = _RelationshipManager(graph=graph, symbol_information=symbol_information)\n      \n      # Process the relationships in the local graph\n      relationship_manager.process()\n      ```\n      \n      ## Limitations\n      \n      The `_RelationshipManager` class is designed to be used internally by other classes in the `automata.core.symbol.graph` package. It relies on correct and consistent input from the `SymbolInformation` object and may not handle errors gracefully.\n      \n      ## Follow-up Questions:\n      \n      - How can we improve error handling and robustness in the `_RelationshipManager` class?\n      - Can the `_RelationshipManager` be used in isolation for specific use cases or is it strictly an internal class?\n      \n    Class Docstring:\n      Manages the relationships between symbols in a graph\n      \n    Methods:\n      def __init__(self, graph: nx.MultiDiGraph, symbol_information: Any):\n              \"\"\"\n              Args:\n                  graph (nx.MultiDiGraph): A networkx graph\n                  symbol_information (Any): A SymbolInformation object\n              \"\"\"\n              self._graph = graph\n              self.symbol_information = symbol_information\n      \n          \n      def process(self):\n              \"\"\"\n              Processes the relationships in the local graph\n              \"\"\"\n              for relationship in self.symbol_information.relationships:\n                  relationship_labels = MessageToDict(relationship)\n                  relationship_labels.pop(\"symbol\")\n                  related_symbol = parse_symbol(relationship.symbol)\n                  self._graph.add_edge(\n                      self.symbol_information.symbol,\n                      related_symbol,\n                      label=\"relationship\",\n                      **relationship_labels,\n                  )\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.symbol.graph._CallerCalleeManager\n    \n        The _CallerCalleeManager class manages caller-callee relationships of a symbol in a graph by processing all symbols that call or are called by another symbol within the local graph. This is crucial for understanding how different components of code interact with one another. However, processing these relationships is computationally expensive, so it should be used sparingly. The class relies on a networkx graph and a _SymbolGraphNavigator instance for its operations. There are limitations, such as including non-call statements, which can be mitigated with AST awareness and filtering downstream using the ASTNavigator.\n        \n        Example usage:\n        \n        ```python\n        import networkx as nx\n        from automata.core.symbol.graph import _CallerCalleeManager\n        from automata.core.symbol.graph import _SymbolGraphNavigator\n        \n        # Create a MultiDiGraph\n        graph = nx.MultiDiGraph()\n        \n        # Create a document with symbols\n        document = ...\n        \n        # Initialize CallerCalleeManager\n        manager = _CallerCalleeManager(graph=graph, document=document)\n        \n        # Process caller-callee relationships in the graph\n        manager.process()\n        ```\n        \n      Class Docstring:\n        Manages the caller-callee relationships of a symbol in a graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, document: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    document (Any): A Document object\n                \"\"\"\n                self._graph = graph\n                self.navigator = _SymbolGraphNavigator(graph)\n                self.document = document\n        \n            \n        process(self) -> None\n        \n    automata.core.symbol.graph.GraphBuilder\n    \n        `GraphBuilder` is a class that constructs a symbol graph from an `Index` object, facilitating the exploration of symbol relationships within source code. The resulting graph, a networkx `MultiDiGraph` object, allows for identifying symbol patterns and relationships in the codebase. While caller-callee relationships are not included by default due to performance concerns, they can be enabled by setting the `build_caller_relationships` flag to `True`. However, enabling this feature can result in significantly longer processing times due to the expensive computation.\n        \n        Example:\n        \n        ```python\n        from automata.core.symbol.graph import GraphBuilder\n        from automata.core.symbol.scip_pb2 import Index\n        \n        index = Index()  # Assuming a populated index object.\n        build_caller_relationships = True  # Optional\n        graph_builder = GraphBuilder(index, build_caller_relationships)\n        graph = graph_builder.build_graph()\n        ```\n        \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n    automata.core.symbol.graph._SymbolGraphNavigator.get_symbol_relationships\n    \n      Methods:\n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.symbol.graph.GraphBuilder._process_relationships\n    \n      Class Docstring:\n        Processes the relationships in the local graph\n        \n        Args:\n        document (Any): A Document object\n        \n      Methods:\n    automata.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n    automata.core.symbol.graph._CallerCalleeManager.process\n    \n      Class Docstring:\n        Processes the caller-callee relationships in the local graph\n        \n        Note that this is an expensive operation, and should be used sparingly\n        \n      Methods:\n        process(self) -> None\n        \n    automata.core.symbol.graph.GraphBuilder._process_caller_callee_relationships\n    \n      Class Docstring:\n        Processes the caller-callee relationships in the local graph\n        \n        Args:\n        document (Any): A Document object\n        \n      Methods:\n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.parser`/SymbolParser#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.parser", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolParser", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolParser\n\n`SymbolParser` is a class that provides functionality to parse URIs into structured objects. It is based on the logic defined in [sourcegraph's scip repository](https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go) and is used to parse URIs into a structured `Symbol` object. Although this implementation is not in hard sync with the Go version, it's good enough for now.\n\nThe `SymbolParser` class has methods for accepting and parsing various parts of the symbol string like identifiers, namespaces, characters, or descriptor suffixes.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.parser.parse_symbol`\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.core.symbol.symbol_types.SymbolDescriptor`\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.context.py_context.retriever.PyContextRetriever`\n\n## Example\n\nThe following example demonstrates how to use the `parse_symbol` function to create a `Symbol` object from a symbol URI string.\n\n```python\nfrom automata.core.symbol.parser import parse_symbol\n\nsymbol_class = parse_symbol(\n    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n)\n\nsymbol_method = parse_symbol(\n    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n)\n```\n\n## Limitations\n\nOne of the limitations of the current implementation is that it's not in hard sync with the Go version of the `SymbolParser`, which means that it may not be able to parse all the symbols that the Go version can.\n\n## Follow-up Questions:\n\n- Are there any plans to update this implementation to be in sync with the Go version?\n- What changes or improvements can be made to this implementation to better handle parsing limitations?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 198}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolParser:\n    \"\"\"\n    Translation of the logic defined in\n    https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n    to parse URIs into structured objects.\n    It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n    \"\"\"\n\n    def __init__(self, symbol: str):\n        \"\"\"\n        Args:\n            symbol (str): The symbol URI to parse\n        \"\"\"\n        self.symbol = symbol\n        self.index = 0\n        self.symbol_str = symbol\n\n    def error(self, message: str) -> ValueError:\n        \"\"\"\n        Create a ValueError with the symbol and a pointer to the error location\n\n        Args:\n            message (str): The error message\n        \"\"\"\n        return ValueError(f\"{message}\\n{self.symbol_str}\\n{'_' * self.index}^\")\n\n    def current(self) -> str:\n        \"\"\"\n        Get the current character in the symbol\n\n        Returns:\n            str - The current character in the symbol\n        \"\"\"\n        return self.symbol[self.index]\n\n    def peek_next(self) -> Optional[str]:\n        \"\"\"\n        Peek at the next character in the symbol\n\n        Returns:\n            Optional[str] - The next character in the symbol,\n                or None if there is no next character\n        \"\"\"\n        if self.index + 1 < len(self.symbol):\n            return self.symbol[self.index + 1]\n        return None\n\n    def parse_descriptors(self) -> List[SymbolDescriptor]:\n        \"\"\"\n        Parse all descriptors in the symbol\n\n        Returns:\n            List[SymbolDescriptor] - The descriptors in the symbol\n        \"\"\"\n        result = []\n        while self.index < len(self.symbol):\n            descriptor = self.parse_descriptor()\n            result.append(descriptor)\n        return result\n\n    def parse_descriptor(self) -> SymbolDescriptor:\n        \"\"\"\n        Parse a single descriptor in the symbol\n\n        Returns:\n            SymbolDescriptor - The descriptor in the symbol\n        \"\"\"\n        next_char = self.current()\n        if next_char == \"(\":\n            self.index += 1\n            name = self.accept_identifier(\"parameter name\")\n            descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Parameter)\n            self.accept_character(\")\", \"closing parameter name\")\n            return descriptor\n        elif next_char == \"[\":\n            self.index += 1\n            name = self.accept_identifier(\"type parameter name\")\n            descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.TypeParameter)\n            self.accept_character(\"]\", \"closing type parameter name\")\n            return descriptor\n        else:\n            name = self.accept_identifier(\"descriptor name\")\n            suffix = self.current()\n            self.index += 1\n            if suffix == \"(\":\n                disambiguator = \"\"\n                if self.current() != \")\":\n                    disambiguator = self.accept_identifier(\"method disambiguator\")\n                descriptor = SymbolDescriptor(\n                    name, SymbolDescriptor.ScipSuffix.Method, disambiguator\n                )\n                self.accept_character(\")\", \"closing method\")\n                self.accept_character(\".\", \"closing method\")\n                return descriptor\n            elif suffix == \"/\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Namespace)\n            elif suffix == \".\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Term)\n            elif suffix == \"#\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Type)\n            elif suffix == \":\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Meta)\n            elif suffix == \"!\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Macro)\n            else:\n                raise self.error(\"Expected a descriptor suffix\")\n\n    def accept_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        if self.current() == \"`\":\n            self.index += 1\n            return self.accept_backtick_escaped_identifier(what)\n        start = self.index\n        while self.index < len(self.symbol) and self.is_identifier_character(self.current()):\n            self.index += 1\n        if start == self.index:\n            raise self.error(\"empty identifier: \" + what)\n        return self.symbol[start : self.index]\n\n    def accept_space_escaped_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol, where the identifier is escaped by spaces\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        return self.accept_escaped_identifier(what, \" \")\n\n    def accept_backtick_escaped_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol,\n            where the identifier is escaped by backticks\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        return self.accept_escaped_identifier(what, \"`\")\n\n    def accept_escaped_identifier(self, what: str, escape_character: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol,\n            where the identifier is escaped by a given character\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        builder = []\n        while self.index < len(self.symbol):\n            ch = self.current()\n            if ch == escape_character:\n                self.index += 1\n                if self.index >= len(self.symbol):\n                    break\n                if self.current() == escape_character:\n                    builder.append(ch)\n                else:\n                    return \"\".join(builder)\n            else:\n                builder.append(ch)\n            self.index += 1\n        raise self.error(\n            f\"reached end of symbol while parsing <{what}>, expected a '{escape_character}' character\"\n        )\n\n    def accept_character(self, r: str, what: str):\n        \"\"\"\n        Accepts a character from the symbol\n\n        Args:\n            r (str): The character to accept\n            what (str): The name of the character\n        \"\"\"\n        if self.current() == r:\n            self.index += 1\n        else:\n            raise self.error(f\"expected '{r}', obtained '{self.current()}', while parsing {what}\")\n\n    @staticmethod\n    def is_identifier_character(c: str) -> bool:\n        \"\"\"\n        Checks if a character is a valid identifier character\n\n        Args:\n            c (str): The character to check\n\n        \"\"\"\n        return c.isalpha() or c.isdigit() or c in [\"-\", \"+\", \"$\", \"_\"]\n\n\n", "summary": "SymbolParser is a class that offers functionality for parsing URIs into structured Symbol objects, using logic from the Sourcegraph's SCIP repository. The class contains methods for processing and parsing various aspects of symbol strings, such as identifiers, namespaces, characters, or descriptor suffixes. It's important to note that the current implementation is not in full sync with its Go counterpart, which may result in some parsing limitations. An example provided demonstrates how to utilize the `parse_symbol` function to create a Symbol object from a symbol URI string.", "context": "\n    Generate the documentation for SymbolParser using the context shown below -\n  Building context for primary symbol - automata.core.symbol.parser.SymbolParser -\n  \n    Import Statements:\n      import re\n      from typing import List, Optional\n      from automata.core.symbol.symbol_types import Symbol, SymbolDescriptor, SymbolPackage\n      \n      # SymbolParser\n      \n      SymbolParser is a class that provides functionality to parse URIs into structured objects. This implementation is based on the logic defined in [sourcegraph's scip repository](https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go) and is used to parse URIs into a structured `Symbol` object. Although this implementation is not in hard sync with the Go version, it's good enough for now. \n      \n      The SymbolParser class has methods for accepting and parsing various parts of the symbol string like identifiers, namespaces, characters, or descriptor suffixes.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.parser.parse_symbol`\n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.core.symbol.symbol_types.SymbolDescriptor`\n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.context.py_context.retriever.PyContextRetriever`\n      \n      ## Example\n      \n      The following example demonstrates how to use the `parse_symbol` function to create a `Symbol` object from a symbol URI string.\n      \n      ```python\n      from automata.core.symbol.parser import parse_symbol\n      \n      symbol_class = parse_symbol(\n          \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n      )\n      \n      symbol_method = parse_symbol(\n          \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n      )\n      ```\n      \n      ## Limitations\n      \n      One of the limitations of the current implementation is that it's not in hard sync with the Go version of the SymbolParser, which means that it may not be able to parse all the symbols that the Go version can.\n      \n      ## Follow-up Questions:\n      \n      - Are there any plans to update this implementation to be in sync with the Go version?\n      - What changes or improvements can be made to this implementation to better handle parsing limitations?\n      \n    Class Docstring:\n      Translation of the logic defined in\n      https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n      to parse URIs into structured objects.\n      It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n      \n    Methods:\n      def __init__(self, symbol: str):\n              \"\"\"\n              Args:\n                  symbol (str): The symbol URI to parse\n              \"\"\"\n              self.symbol = symbol\n              self.index = 0\n              self.symbol_str = symbol\n      \n          \n      def accept_backtick_escaped_identifier(self, what: str) -> str:\n              \"\"\"\n              Accepts an identifier from the symbol,\n                  where the identifier is escaped by backticks\n      \n              Args:\n                  what (str): The name of the identifier\n      \n              Returns:\n                  str - The identifier\n              \"\"\"\n              return self.accept_escaped_identifier(what, \"`\")\n      \n          \n      def accept_character(self, r: str, what: str):\n              \"\"\"\n              Accepts a character from the symbol\n      \n              Args:\n                  r (str): The character to accept\n                  what (str): The name of the character\n              \"\"\"\n              if self.current() == r:\n                  self.index += 1\n              else:\n                  raise self.error(f\"expected '{r}', obtained '{self.current()}', while parsing {what}\")\n      \n          \n      def accept_escaped_identifier(self, what: str, escape_character: str) -> str:\n              \"\"\"\n              Accepts an identifier from the symbol,\n                  where the identifier is escaped by a given character\n      \n              Args:\n                  what (str): The name of the identifier\n      \n              Returns:\n                  str - The identifier\n              \"\"\"\n              builder = []\n              while self.index < len(self.symbol):\n                  ch = self.current()\n                  if ch == escape_character:\n                      self.index += 1\n                      if self.index >= len(self.symbol):\n                          break\n                      if self.current() == escape_character:\n                          builder.append(ch)\n                      else:\n                          return \"\".join(builder)\n                  else:\n                      builder.append(ch)\n                  self.index += 1\n              raise self.error(\n                  f\"reached end of symbol while parsing <{what}>, expected a '{escape_character}' character\"\n              )\n      \n          \n      def accept_identifier(self, what: str) -> str:\n              \"\"\"\n              Accepts an identifier from the symbol\n      \n              Args:\n                  what (str): The name of the identifier\n      \n              Returns:\n                  str - The identifier\n              \"\"\"\n              if self.current() == \"`\":\n                  self.index += 1\n                  return self.accept_backtick_escaped_identifier(what)\n              start = self.index\n              while self.index < len(self.symbol) and self.is_identifier_character(self.current()):\n                  self.index += 1\n              if start == self.index:\n                  raise self.error(\"empty identifier: \" + what)\n              return self.symbol[start : self.index]\n      \n          \n      def accept_space_escaped_identifier(self, what: str) -> str:\n              \"\"\"\n              Accepts an identifier from the symbol, where the identifier is escaped by spaces\n      \n              Args:\n                  what (str): The name of the identifier\n      \n              Returns:\n                  str - The identifier\n              \"\"\"\n              return self.accept_escaped_identifier(what, \" \")\n      \n          \n      def current(self) -> str:\n              \"\"\"\n              Get the current character in the symbol\n      \n              Returns:\n                  str - The current character in the symbol\n              \"\"\"\n              return self.symbol[self.index]\n      \n          \n      def error(self, message: str) -> ValueError:\n              \"\"\"\n              Create a ValueError with the symbol and a pointer to the error location\n      \n              Args:\n                  message (str): The error message\n              \"\"\"\n              return ValueError(f\"{message}\\n{self.symbol_str}\\n{'_' * self.index}^\")\n      \n          \n      @staticmethod\n          def is_identifier_character(c: str) -> bool:\n              \"\"\"\n              Checks if a character is a valid identifier character\n      \n              Args:\n                  c (str): The character to check\n      \n              \"\"\"\n              return c.isalpha() or c.isdigit() or c in [\"-\", \"+\", \"$\", \"_\"]\n      \n      \n      \n      def parse_descriptor(self) -> SymbolDescriptor:\n              \"\"\"\n              Parse a single descriptor in the symbol\n      \n              Returns:\n                  SymbolDescriptor - The descriptor in the symbol\n              \"\"\"\n              next_char = self.current()\n              if next_char == \"(\":\n                  self.index += 1\n                  name = self.accept_identifier(\"parameter name\")\n                  descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Parameter)\n                  self.accept_character(\")\", \"closing parameter name\")\n                  return descriptor\n              elif next_char == \"[\":\n                  self.index += 1\n                  name = self.accept_identifier(\"type parameter name\")\n                  descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.TypeParameter)\n                  self.accept_character(\"]\", \"closing type parameter name\")\n                  return descriptor\n              else:\n                  name = self.accept_identifier(\"descriptor name\")\n                  suffix = self.current()\n                  self.index += 1\n                  if suffix == \"(\":\n                      disambiguator = \"\"\n                      if self.current() != \")\":\n                          disambiguator = self.accept_identifier(\"method disambiguator\")\n                      descriptor = SymbolDescriptor(\n                          name, SymbolDescriptor.ScipSuffix.Method, disambiguator\n                      )\n                      self.accept_character(\")\", \"closing method\")\n                      self.accept_character(\".\", \"closing method\")\n                      return descriptor\n                  elif suffix == \"/\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Namespace)\n                  elif suffix == \".\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Term)\n                  elif suffix == \"#\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Type)\n                  elif suffix == \":\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Meta)\n                  elif suffix == \"!\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Macro)\n                  else:\n                      raise self.error(\"Expected a descriptor suffix\")\n      \n          \n      def parse_descriptors(self) -> List[SymbolDescriptor]:\n              \"\"\"\n              Parse all descriptors in the symbol\n      \n              Returns:\n                  List[SymbolDescriptor] - The descriptors in the symbol\n              \"\"\"\n              result = []\n              while self.index < len(self.symbol):\n                  descriptor = self.parse_descriptor()\n                  result.append(descriptor)\n              return result\n      \n          \n      def peek_next(self) -> Optional[str]:\n              \"\"\"\n              Peek at the next character in the symbol\n      \n              Returns:\n                  Optional[str] - The next character in the symbol,\n                      or None if there is no next character\n              \"\"\"\n              if self.index + 1 < len(self.symbol):\n                  return self.symbol[self.index + 1]\n              return None\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.tests.unit.test_symbol_parser.test_parse_symbol\n    \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.context.py_context.retriever.PyContextRetriever\n    \n        PyContextRetriever is a class that retrieves the context of a symbol in a Python project, helping generate documentation and understanding symbol relationships. It processes abstract syntax tree (AST) nodes and operates on a SymbolGraph with a PyContextRetrieverConfig object. To use it, create a SymbolGraph instance, instantiate the PyContextRetriever with the graph, process a symbol using the `process_symbol` method, and retrieve the context buffer. Note that PyContextRetriever relies on accurate SymbolGraph and PyContextRetrieverConfig inputs; errors in these may cause issues when processing symbols. \n        \n        Usage Example:\n        \n        ```python\n        from automata.core.context.py_context.retriever import PyContextRetriever\n        from automata.core.symbol.graph import SymbolGraph\n        \n        graph = SymbolGraph()\n        py_context_retriever = PyContextRetriever(graph)\n        symbol = some_symbol\n        \n        # Process the context of the symbol\n        py_context_retriever.process_symbol(symbol)\n        \n        # Retrieve the context buffer\n        context_buffer = py_context_retriever.get_context_buffer()\n        ```\n        \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n                doc_embedding_db: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.doc_embedding_db = doc_embedding_db\n                self.encoding = tiktoken.encoding_for_model(self.config.model_name)\n        \n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_documentation(self, symbol: Symbol, is_main_symbol: bool) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata.core.symbol.symbol_types.SymbolDescriptor\n    \n        `SymbolDescriptor` is a Python class that wraps the descriptor component of a Universal Resource Identifier (URI) and represents various symbols such as local, namespace, type, method, term, macro, parameter, and type-parameter. It provides methods to convert the descriptor suffix from the URI representation to a Python representation, extract the escaped name from a string, and represent the object as a URI string. However, it may not support custom URI representations or descriptors that do not follow the predefined format and structure. For example, an instance of `SymbolDescriptor` can be created using a name, suffix, and an optional disambiguator like this:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolDescriptor\n        from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n        \n        name = \"example_descriptor\"\n        suffix = DescriptorProto.Type\n        disambiguator = \"example_disambiguator\"\n        \n        descriptor = SymbolDescriptor(name, suffix, disambiguator)\n        ```\n        \n        Follow-up questions include exploring ways to update `SymbolDescriptor` to handle custom URI representations or descriptors that do not follow the predefined format and understanding any precautions that need to be taken when using `SymbolDescriptor`.\n        \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata.tests.unit.conftest.symbols\n    \n        @pytest.fixture\n        def symbols():\n            symbols = [\n                # Symbol with a simple attribute\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#description.\"\n                ),\n                # Symbol with a method with foreign argument\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#load().(config_name)\"\n                ),\n                # Symbol with a class method, self as argument\n                # parse_symbol(\n                #     \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `tools.python_tools.python_ast_indexer`/PythonASTIndexer#get_module_path().(self)\"\n                # ),\n                # Symbol with a locally defined object\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.tasks.automata_task_executor`/logger.\"\n                ),\n                # Symbol with a class object and class variable\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#verbose.\"\n                ),\n                # Symbol with a function in a module\n                # parse_symbol(\"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.coordinator.tests.test_automata_coordinator`/test().(coordinator)\"),\n                # Symbol with a class method\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `evals.eval_helpers`/EvalAction#__init__().(action)\"\n                ),\n                # Symbol with an object\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#CODE.\"\n                ),\n                # Class Name\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#\"\n                ),\n                # Init\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.base.tool`/ToolNotFoundError#__init__().\"\n                ),\n            ]\n        \n            return symbols\n        \n        \n        \n        \n    automata.core.symbol.search.tests.conftest.symbols\n    \n        @pytest.fixture\n        def symbols():\n            symbols = [\n                # Symbol with a simple attribute\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#description.\"\n                ),\n                # Symbol with a method with foreign argument\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#load().(config_name)\"\n                ),\n                # Symbol with a class method, self as argument\n                # parse_symbol(\n                #     \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `tools.python_tools.python_ast_indexer`/PythonASTIndexer#get_module_path().(self)\"\n                # ),\n                # Symbol with a locally defined object\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.tasks.automata_task_executor`/logger.\"\n                ),\n                # Symbol with a class object and class variable\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#verbose.\"\n                ),\n                # Symbol with a function in a module\n                # parse_symbol(\"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.coordinator.tests.test_automata_coordinator`/test().(coordinator)\"),\n                # Symbol with a class method\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `evals.eval_helpers`/EvalAction#__init__().(action)\"\n                ),\n                # Symbol with an object\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#CODE.\"\n                ),\n                # Class Name\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#\"\n                ),\n                # Init\n                parse_symbol(\n                    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `core.base.tool`/ToolNotFoundError#__init__().\"\n                ),\n            ]\n        \n            return symbols\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.search.rank`/SymbolRank#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.search.rank", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolRank", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolRank\n\n`SymbolRank` is a class that computes the PageRank algorithm on symbols in a graph. It takes a directed graph as input and calculates the SymbolRanks of each node in the graph. It provides a way to rank the relevance of symbols in a given graph based on their connectivity and usage.\n\n## Overview\n\nThe `SymbolRank` class is used to calculate the symbol ranks for a directed graph. It uses the PageRank algorithm to assign a rank value to each symbol in the graph based on their connections and usage. This ranking can be used to determine the importance of symbols in various contexts, such as symbol search, code analysis, and documentation generation.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.search.symbol_search.SymbolSearch`\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata.core.symbol.graph.SymbolGraph`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolRank` and calculate the symbol ranks for a simple directed graph.\n\n```python\nimport networkx as nx\nfrom automata.core.symbol.search.rank import SymbolRank\n\n# Create a simple directed graph\nG = nx.DiGraph()\nG.add_edge(1, 2)\nG.add_edge(2, 3)\nG.add_edge(3, 1)\n\n# Initialize SymbolRank with the graph\nsymbol_rank = SymbolRank(G)\n\n# Calculate SymbolRanks for the graph\nranks = symbol_rank.get_ranks()\n\nprint(ranks)\n```\n\n## Limitations\n\nThe primary limitation of the `SymbolRank` class is that it only supports directed graphs with symbols as nodes. Additionally, the convergence of the power iteration used by the PageRank algorithm is not guaranteed for all graphs.\n\n## Follow-up Questions:\n\n- Is there a way to make the SymbolRank algorithm more efficient for larger graphs?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 198}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolRank:\n    \"\"\"Computes the PageRank algorithm on symbols in a graph\"\"\"\n\n    def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n        \"\"\"\n        Args:\n            graph (nx.DiGraph): A directed graph\n            config (Optional[SymbolRankConfig]): SymbolRank configuration\n        \"\"\"\n        if not config:\n            config = SymbolRankConfig()\n        self.graph = graph\n        self.config = config\n        self.config.validate(self.config)\n\n    def get_ranks(\n        self,\n        query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n        initial_weights: Optional[Dict[Symbol, float]] = None,\n        dangling: Optional[Dict[Symbol, float]] = None,\n    ) -> List[Tuple[Symbol, float]]:\n        \"\"\"\n        Calculate the SymbolRanks of each node in the graph\n\n        Args:\n            query_to_symbol_similarity (Optional[Dict[Symbol, float]]):\n                query_to_symbol_similarity dictionary\n            initial_weights (Optional[Dict[Symbol, float]]): Initial weights dictionary\n            dangling (Optional[Dict[Symbol, float]]): List of dangling nodes\n\n        Returns:\n            (Dict[str, float]): A dictionary mapping each node to its SymbolRank\n        \"\"\"\n        stochastic_graph = self._prepare_graph()\n        node_count = stochastic_graph.number_of_nodes()\n\n        rank_vec = self._prepare_initial_ranks(stochastic_graph, initial_weights)\n        prepared_similarity = self._prepare_query_to_symbol_similarity(\n            node_count, stochastic_graph, query_to_symbol_similarity\n        )\n        dangling_weights = self._prepare_dangling_weights(dangling, prepared_similarity)\n        dangling_nodes = self._get_dangling_nodes(stochastic_graph)\n\n        for _ in range(self.config.max_iterations):\n            last_rank_vec = rank_vec\n            rank_vec = {k: 0.0 for k in last_rank_vec.keys()}\n            danglesum = self.config.alpha * sum(last_rank_vec[node] for node in dangling_nodes)  # type: ignore\n            for node in rank_vec:\n                for nbr in stochastic_graph[node]:\n                    rank_vec[nbr] += (\n                        self.config.alpha\n                        * last_rank_vec[node]\n                        * stochastic_graph[node][nbr][self.config.weight_key]\n                    )\n                rank_vec[node] += (\n                    danglesum * dangling_weights[node]\n                    + (1.0 - self.config.alpha) * prepared_similarity[node]\n                )\n\n            err = sum(abs(rank_vec[node] - last_rank_vec[node]) for node in rank_vec)\n            if err < node_count * self.config.tolerance:\n                sorted_dict = sorted(rank_vec.items(), key=lambda x: x[1], reverse=True)\n                return sorted_dict\n\n        raise NetworkXError(\n            \"SymbolRank: power iteration failed to converge in %d iterations.\"\n            % self.config.max_iterations\n        )\n\n    def _prepare_graph(self) -> nx.DiGraph:\n        \"\"\"\n        Prepare the graph for the SymbolRank algorithm. If the graph is not directed,\n        convert it to a directed graph. Create a stochastic graph from the given graph\n\n        Returns:\n            stochastic_graph (nx.DiGraph): A NetworkX stochastic DiGraph\n        \"\"\"\n        if not self.graph.is_directed():\n            direct_graph = self.graph.to_directed()\n        else:\n            direct_graph = self.graph\n\n        stochastic_graph = nx.stochastic_graph(direct_graph, weight=self.config.weight_key)\n        return stochastic_graph\n\n    def _prepare_initial_ranks(\n        self,\n        stochastic_graph: nx.DiGraph,\n        initial_weights: Optional[Dict[Symbol, float]],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare initial rank values for each node in the graph\n\n        Args:\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph.\n            initial_weights (Optional[Dict[Symbol, float]]): Initial weight for each node\n\n        Returns:\n            (Dict[Symbol, float]): A dictionary mapping each node to its initial rank\n        \"\"\"\n\n        node_count = stochastic_graph.number_of_nodes()\n        if initial_weights is None:\n            return {k: 1.0 / node_count for k in stochastic_graph}\n        else:\n            s = sum(initial_weights.values())\n            return {k: v / s for k, v in initial_weights.items()}\n\n    def _prepare_query_to_symbol_similarity(\n        self,\n        node_count: int,\n        stochastic_graph: nx.DiGraph,\n        query_to_symbol_similarity: Optional[Dict[Symbol, float]],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare the symbol similarity matrix\n\n        Note - The term \"personalization\" is used in the context of the PageRank algorithm\n            to refer to a mechanism that allows the modification of the rank computation\n            based on some user-defined preferences. In this instance, symbol similarity is\n            an implementation of personalization that allows the modification of the rank\n            computation based on symbol source-code similarity\n\n        Args:\n            node_count (int): Number of nodes in the graph\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph\n            query_to_symbol_similarity (Optional[Dict[Symbol, float]]): Similarity between the query\n                and each node\n\n        Returns:\n            (Dict[Symbol, float]): A dictionary mapping each node to its symbol similarity\n        \"\"\"\n        if query_to_symbol_similarity is None:\n            return {k: 1.0 / node_count for k in stochastic_graph}\n        else:\n            missing = set(self.graph) - set(query_to_symbol_similarity)\n            if missing:\n                raise NetworkXError(\n                    \"query_to_symbol_similarity dictionary must have a value for every node. Missing nodes %s\"\n                    % missing\n                )\n            s = sum(query_to_symbol_similarity.values())\n            return {k: v / s for k, v in query_to_symbol_similarity.items()}\n\n    def _prepare_dangling_weights(\n        self,\n        dangling: Optional[Dict[Symbol, float]],\n        query_to_symbol_similarity: Dict[Symbol, float],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare the weights for dangling nodes\n\n        Args:\n            dangling (list): List of dangling nodes.\n            query_to_symbol_similarity (Dict[str, float]): query_to_symbol_similarity dictionary\n\n        Returns:\n            (Dict[str, float]): A dictionary mapping each node to its weight\n        \"\"\"\n        if dangling is None:\n            return query_to_symbol_similarity\n        else:\n            missing = set(self.graph) - set(dangling)\n            if missing:\n                raise NetworkXError(\n                    \"Dangling node dictionary must have a value for every node. Missing nodes %s\"\n                    % missing\n                )\n            s = sum(dangling.values())\n            return {k: v / s for k, v in dangling.items()}\n\n    def _get_dangling_nodes(self, stochastic_graph: nx.DiGraph) -> List[Hashable]:\n        \"\"\"\n        Identify dangling nodes in the graph\n\n        Args:\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph\n\n        Returns:\n            (list): List of dangling nodes\n        \"\"\"\n        return [\n            node\n            for node in stochastic_graph\n            if stochastic_graph.out_degree(node, weight=self.config.weight_key) == 0.0\n        ]\n", "summary": "`SymbolRank` is a class that computes the PageRank algorithm on symbols in a directed graph, calculating the SymbolRanks of each node based on their connectivity and usage. This ranking system is useful in various contexts such as symbol search, code analysis, and documentation generation. However, the primary limitation is that it only supports directed graphs with symbols as nodes and the convergence of the algorithm isn't guaranteed for all graphs. An example of creating an instance of `SymbolRank` and calculating the symbol ranks for a simple directed graph is included below:\n\n```python\nimport networkx as nx\nfrom automata.core.symbol.search.rank import SymbolRank\n\n# Create a simple directed graph\nG = nx.DiGraph()\nG.add_edge(1, 2)\nG.add_edge(2, 3)\nG.add_edge(3, 1)\n\n# Initialize SymbolRank with the graph\nsymbol_rank = SymbolRank(G)\n\n# Calculate SymbolRanks for the graph\nranks = symbol_rank.get_ranks()\n\nprint(ranks)\n```", "context": "\n    Generate the documentation for SymbolRank using the context shown below -\n  Building context for primary symbol - automata.core.symbol.search.rank.SymbolRank -\n  \n    Import Statements:\n      import networkx as nx\n      from typing import Dict, Hashable, List, Optional, Tuple\n      from networkx.exception import NetworkXError\n      from pydantic import BaseModel\n      from automata.core.symbol.symbol_types import Symbol\n      \n      # SymbolRank\n      \n      `SymbolRank` is a class that computes the PageRank algorithm on symbols in a graph. It takes a directed graph as input and calculates the SymbolRanks of each node in the graph. It provides a way to rank the relevance of symbols in a given graph based on their connectivity and usage.\n      \n      ## Overview\n      \n      The `SymbolRank` class is used to calculate the symbol ranks for a directed graph. It uses the PageRank algorithm to assign a rank value to each symbol in the graph based on their connections and usage. This ranking can be used to determine the importance of symbols in various contexts, such as symbol search, code analysis, and documentation generation.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.search.symbol_search.SymbolSearch`\n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n      - `automata.core.symbol.graph.SymbolGraph`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `SymbolRank` and calculate the symbol ranks for a simple directed graph.\n      \n      ```python\n      import networkx as nx\n      from automata.core.symbol.search.rank import SymbolRank\n      \n      # Create a simple directed graph\n      G = nx.DiGraph()\n      G.add_edge(1, 2)\n      G.add_edge(2, 3)\n      G.add_edge(3, 1)\n      \n      # Initialize SymbolRank with the graph\n      symbol_rank = SymbolRank(G)\n      \n      # Calculate SymbolRanks for the graph\n      ranks = symbol_rank.get_ranks()\n      \n      print(ranks)\n      ```\n      \n      ## Limitations\n      \n      The primary limitation of the `SymbolRank` class is that it only supports directed graphs with symbols as nodes. Additionally, the convergence of the power iteration used by the PageRank algorithm is not guaranteed for all graphs.\n      \n      ## Follow-up Questions:\n      \n      - Is there a way to make the SymbolRank algorithm more efficient for larger graphs?\n      \n    Class Docstring:\n      Computes the PageRank algorithm on symbols in a graph\n      \n    Methods:\n      def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n              \"\"\"\n              Args:\n                  graph (nx.DiGraph): A directed graph\n                  config (Optional[SymbolRankConfig]): SymbolRank configuration\n              \"\"\"\n              if not config:\n                  config = SymbolRankConfig()\n              self.graph = graph\n              self.config = config\n              self.config.validate(self.config)\n      \n          \n      def get_ranks(\n              self,\n              query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n              initial_weights: Optional[Dict[Symbol, float]] = None,\n              dangling: Optional[Dict[Symbol, float]] = None,\n          ) -> List[Tuple[Symbol, float]]:\n              \"\"\"\n              Calculate the SymbolRanks of each node in the graph\n      \n              Args:\n                  query_to_symbol_similarity (Optional[Dict[Symbol, float]]):\n                      query_to_symbol_similarity dictionary\n                  initial_weights (Optional[Dict[Symbol, float]]): Initial weights dictionary\n                  dangling (Optional[Dict[Symbol, float]]): List of dangling nodes\n      \n              Returns:\n                  (Dict[str, float]): A dictionary mapping each node to its SymbolRank\n              \"\"\"\n              stochastic_graph = self._prepare_graph()\n              node_count = stochastic_graph.number_of_nodes()\n      \n              rank_vec = self._prepare_initial_ranks(stochastic_graph, initial_weights)\n              prepared_similarity = self._prepare_query_to_symbol_similarity(\n                  node_count, stochastic_graph, query_to_symbol_similarity\n              )\n              dangling_weights = self._prepare_dangling_weights(dangling, prepared_similarity)\n              dangling_nodes = self._get_dangling_nodes(stochastic_graph)\n      \n              for _ in range(self.config.max_iterations):\n                  last_rank_vec = rank_vec\n                  rank_vec = {k: 0.0 for k in last_rank_vec.keys()}\n                  danglesum = self.config.alpha * sum(last_rank_vec[node] for node in dangling_nodes)  # type: ignore\n                  for node in rank_vec:\n                      for nbr in stochastic_graph[node]:\n                          rank_vec[nbr] += (\n                              self.config.alpha\n                              * last_rank_vec[node]\n                              * stochastic_graph[node][nbr][self.config.weight_key]\n                          )\n                      rank_vec[node] += (\n                          danglesum * dangling_weights[node]\n                          + (1.0 - self.config.alpha) * prepared_similarity[node]\n                      )\n      \n                  err = sum(abs(rank_vec[node] - last_rank_vec[node]) for node in rank_vec)\n                  if err < node_count * self.config.tolerance:\n                      sorted_dict = sorted(rank_vec.items(), key=lambda x: x[1], reverse=True)\n                      return sorted_dict\n      \n              raise NetworkXError(\n                  \"SymbolRank: power iteration failed to converge in %d iterations.\"\n                  % self.config.max_iterations\n              )\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_symbol_rank.test_get_ranks\n    \n        def test_get_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == nodes\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n        \n        \n    automata.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata.tests.unit.test_symbol_rank.test_prepare_initial_ranks\n    \n        def test_prepare_initial_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            initial_ranks = pagerank._prepare_initial_ranks(G, None)\n            assert len(initial_ranks) == nodes\n            assert sum(initial_ranks.values()) == pytest.approx(1.0)\n        \n        \n        \n        \n    automata.core.symbol.search.symbol_search.SymbolSearch\n    \n        `SymbolSearch` is a class used to search for symbols in a `SymbolGraph` by processing NLP-formatted queries and providing search results in various formats depending on the query type. The class utilizes a symbol similarity algorithm for ranking symbols according to relevance and a SymbolRank algorithm for computing a global symbol ranking. To use `SymbolSearch`, first initialize the necessary objects, such as `SymbolGraph` and `SymbolSimilarity`, then create a `SymbolSearch` object and process a query to obtain the search results.\n        \n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n        # Initialize necessary objects\n        symbol_graph = SymbolGraph()\n        symbol_similarity = SymbolSimilarity()\n        \n        # Create the SymbolSearch object\n        symbol_searcher = SymbolSearch(symbol_graph, symbol_similarity)\n        \n        # Process a query and get the search results\n        query = \"type:symbol_references <symbol_uri>\"\n        result = symbol_searcher.process_query(query)\n        ```\n        \n        Note that `SymbolSearch` relies on the availability of symbols in the `SymbolGraph` and `SymbolSimilarity` objects, and will produce incomplete or incorrect results if the necessary data is missing or the input query does not follow the expected format.\n        \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.embedding.symbol_similarity.SymbolSimilarity\n    \n        `SymbolSimilarity` is a class that computes similarity scores between query texts and symbols using embeddings, and allows users to retrieve the most similar symbols for a specific query and create a dictionary mapping the similarity scores to each symbol. Users can set the available symbols for the calculation, and the similarity scores depend on the quality of the supplied pre-trained embeddings and selected norm type. The class uses a `SymbolCodeEmbeddingHandler` for handling embeddings, which affects the accuracy of the results.\n        \n        Example usage of `SymbolSimilarity`:\n        ```python\n        import numpy as np\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        from automata.core.embedding.embedding_types import EmbeddingProvider, NormType\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        \n        embedding_handler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager=embedding_handler, norm_type=NormType.L2)\n        symbol_similarity.set_available_symbols(available_symbols)\n        nearest_entries = symbol_similarity.get_nearest_entries_for_query(\"example query\", k=5)\n        query_similarity_dict = symbol_similarity.get_query_similarity_dict(\"example query\")\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata.tests.unit.conftest.symbol_searcher\n    \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n        \n    automata.core.embedding.embedding_types.NormType\n    \n        `NormType` is an enumeration class representing various normalization techniques available for calculating similarity in a `SymbolSimilarity` object, offering three options: L1, L2, and softmax. These can be used by the `SymbolSimilarity` class while computing similarities between symbols in a related codebase. However, using different normalization techniques may lead to potential limitations such as differences in interpretation and efficiency of similarity calculations. For example:\n        \n        ```python\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.embedding.embedding_types import NormType\n        from automata.core.embedding.manager.code_embedding_manager import SymbolCodeEmbeddingHandler\n        \n        symbol_embedding_manager = SymbolCodeEmbeddingHandler()\n        custom_norm_type = NormType.L1\n        \n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager, custom_norm_type)\n        ```\n        Possible follow-up questions include exploring other normalization techniques to add to the `NormType` class and understanding the impact of different normalization techniques on the performance and interpretation of similarity calculations.\n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.search.rank`/SymbolRankConfig#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.search.rank", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolRankConfig", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolRankConfig\n\n`SymbolRankConfig` is a configuration class for the `SymbolRank` algorithm, which computes the PageRank algorithm on a given symbol graph. The `SymbolRankConfig` class contains various attributes like `alpha`, `max_iterations`, `tolerance`, and `weight_key` that control the behavior of the algorithm.\n\n## Overview\n\n`SymbolRankConfig` allows users to set custom configuration parameters for the `SymbolRank` algorithm. The class exposes various attributes to control the algorithm's behavior, such as convergence rate, maximum number of iterations, stopping criteria (tolerance), and edge weights. It also provides a validation method to ensure the input configuration parameters are within acceptable limits.\n\n## Related Symbols\n\n- `automata.core.symbol.search.rank.SymbolRank`\n- `automata.tests.unit.test_symbol_rank.test_get_ranks`\n- `automata.tests.unit.test_symbol_rank.test_get_ranks_small_graph`\n- `automata.tests.unit.test_symbol_rank.test_prepare_initial_ranks`\n- `automata.tests.unit.test_symbol_rank.test_pagerank_config_validation`\n\n## Example\n\nThe following example demonstrates the creation of an instance of `SymbolRankConfig` with custom configuration parameters and validation.\n\n```python\nfrom automata.core.symbol.search.rank import SymbolRankConfig\n\n# Custom configuration parameters\ncustom_config = SymbolRankConfig(\n    alpha=0.3,\n    max_iterations=200,\n    tolerance=1.0e-7,\n    weight_key=\"custom_weight\"\n)\n\n# Validate the custom configuration parameters\ncustom_config.validate(custom_config)\n```\n\n## Limitations\n\nThe primary limitation of `SymbolRankConfig` is the restricted range of allowable values for `alpha` and `tolerance`. This might not be suitable for all use cases or specific graphs. Moreover, the validation method raises a `ValueError` for invalid inputs, which could be handled more gracefully.\n\n## Follow-up Questions:\n\n- Are there other configuration parameters that can enhance the `SymbolRankConfig` class?\n- How can we improve validation and error handling in the `SymbolRankConfig` class?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 198}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolRankConfig(BaseModel):\n    \"\"\"A configuration class for SymbolRank\"\"\"\n\n    alpha: float = 0.25\n    max_iterations: int = 100\n    tolerance: float = 1.0e-6\n    weight_key: str = \"weight\"\n\n    @classmethod\n    def validate(cls, config):\n        \"\"\"\n        Validate configuration parameters.\n\n        Args:\n            config (SymbolRankConfig): Configuration parameters.\n\n        Raises:\n            ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n        \"\"\"\n        if not 0 < config.alpha < 1:\n            raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n\n        if not 1.0e-8 < config.tolerance < 1.0e-4:\n            raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n\n\n", "summary": "`SymbolRankConfig` is a configuration class for the `SymbolRank` algorithm, which computes the PageRank algorithm on symbol graphs. It allows users to set custom parameters controlling algorithm behavior, such as convergence rate, maximum iterations, stopping criteria (tolerance), and edge weights. Additionally, it provides a validation method to ensure input parameters are within acceptable limits. One limitation is the restricted range of allowable values for `alpha` and `tolerance`, which might not be suitable for all use cases or specific graphs. Here's an example of creating a `SymbolRankConfig` instance with custom parameters and validation:\n\n```python\nfrom automata.core.symbol.search.rank import SymbolRankConfig\n\n# Custom configuration parameters\ncustom_config = SymbolRankConfig(\n    alpha=0.3,\n    max_iterations=200,\n    tolerance=1.0e-7,\n    weight_key=\"custom_weight\"\n)\n\n# Validate the custom configuration parameters\ncustom_config.validate(custom_config)\n```", "context": "\n    Generate the documentation for SymbolRankConfig using the context shown below -\n  Building context for primary symbol - automata.core.symbol.search.rank.SymbolRankConfig -\n  \n      class SymbolRankConfig(BaseModel):\n          \"\"\"A configuration class for SymbolRank\"\"\"\n      \n          alpha: float = 0.25\n          max_iterations: int = 100\n          tolerance: float = 1.0e-6\n          weight_key: str = \"weight\"\n      \n          @classmethod\n          def validate(cls, config):\n              \"\"\"\n              Validate configuration parameters.\n      \n              Args:\n                  config (SymbolRankConfig): Configuration parameters.\n      \n              Raises:\n                  ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n              \"\"\"\n              if not 0 < config.alpha < 1:\n                  raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n      \n              if not 1.0e-8 < config.tolerance < 1.0e-4:\n                  raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.test_symbol_rank.test_get_ranks\n    \n        def test_get_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == nodes\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata.core.symbol.search.rank.SymbolRank\n    \n        `SymbolRank` is a class that computes the PageRank algorithm to rank the relevance of symbols in a directed graph based on their connectivity and usage. This ranking can be utilized in various contexts such as symbol search, code analysis, and documentation generation. Although the class only supports directed graphs with symbols as nodes and the convergence of the power iteration isn't guaranteed for all graphs, it provides an effective way to analyze symbol importance. \n        \n        For example, to create an instance of `SymbolRank` and calculate the symbol ranks for a simple directed graph: \n        ```python\n        import networkx as nx\n        from automata.core.symbol.search.rank import SymbolRank\n        \n        # Create a simple directed graph\n        G = nx.DiGraph()\n        G.add_edge(1, 2)\n        G.add_edge(2, 3)\n        G.add_edge(3, 1)\n        \n        # Initialize SymbolRank with the graph\n        symbol_rank = SymbolRank(G)\n        \n        # Calculate SymbolRanks for the graph\n        ranks = symbol_rank.get_ranks()\n        \n        print(ranks)\n        ```\n        \n      Class Docstring:\n        Computes the PageRank algorithm on symbols in a graph\n        \n      Methods:\n        def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n                \"\"\"\n                Args:\n                    graph (nx.DiGraph): A directed graph\n                    config (Optional[SymbolRankConfig]): SymbolRank configuration\n                \"\"\"\n                if not config:\n                    config = SymbolRankConfig()\n                self.graph = graph\n                self.config = config\n                self.config.validate(self.config)\n        \n            \n        get_ranks(self,\n                query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n                initial_weights: Optional[Dict[Symbol, float]] = None,\n                dangling: Optional[Dict[Symbol, float]] = None,\n            ) -> List[Tuple[Symbol, float]]\n        \n    automata.tests.unit.test_symbol_rank.test_prepare_initial_ranks\n    \n        def test_prepare_initial_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            initial_ranks = pagerank._prepare_initial_ranks(G, None)\n            assert len(initial_ranks) == nodes\n            assert sum(initial_ranks.values()) == pytest.approx(1.0)\n        \n        \n        \n        \n    automata.tests.unit.test_symbol_rank.test_pagerank_config_validation\n    \n        def test_pagerank_config_validation():\n            with pytest.raises(ValueError):\n                invalid_config_alpha = SymbolRankConfig(alpha=1.5, max_iterations=100, tolerance=1.0e-5)\n                invalid_config_alpha.validate(invalid_config_alpha)\n            with pytest.raises(ValueError):\n                invalid_config_tolerance = SymbolRankConfig(\n                    alpha=0.5, max_iterations=100, tolerance=1.0e-3\n                )\n                invalid_config_tolerance.validate(invalid_config_tolerance)\n        \n        \n        \n        \n    automata.tests.unit.conftest.symbol_searcher\n    \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n        \n    automata.core.embedding.embedding_types.NormType\n    \n        `NormType` is an enumeration class representing various normalization techniques available for calculating similarity in a `SymbolSimilarity` object, offering three options: L1, L2, and softmax. These can be used by the `SymbolSimilarity` class while computing similarities between symbols in a related codebase. However, using different normalization techniques may lead to potential limitations such as differences in interpretation and efficiency of similarity calculations. For example:\n        \n        ```python\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.embedding.embedding_types import NormType\n        from automata.core.embedding.manager.code_embedding_manager import SymbolCodeEmbeddingHandler\n        \n        symbol_embedding_manager = SymbolCodeEmbeddingHandler()\n        custom_norm_type = NormType.L1\n        \n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager, custom_norm_type)\n        ```\n        Possible follow-up questions include exploring other normalization techniques to add to the `NormType` class and understanding the impact of different normalization techniques on the performance and interpretation of similarity calculations.\n        \n    automata.core.symbol.search.symbol_search.SymbolSearch\n    \n        `SymbolSearch` is a class used to search for symbols in a `SymbolGraph` by processing NLP-formatted queries and providing search results in various formats depending on the query type. The class utilizes a symbol similarity algorithm for ranking symbols according to relevance and a SymbolRank algorithm for computing a global symbol ranking. To use `SymbolSearch`, first initialize the necessary objects, such as `SymbolGraph` and `SymbolSimilarity`, then create a `SymbolSearch` object and process a query to obtain the search results.\n        \n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n        # Initialize necessary objects\n        symbol_graph = SymbolGraph()\n        symbol_similarity = SymbolSimilarity()\n        \n        # Create the SymbolSearch object\n        symbol_searcher = SymbolSearch(symbol_graph, symbol_similarity)\n        \n        # Process a query and get the search results\n        query = \"type:symbol_references <symbol_uri>\"\n        result = symbol_searcher.process_query(query)\n        ```\n        \n        Note that `SymbolSearch` relies on the availability of symbols in the `SymbolGraph` and `SymbolSimilarity` objects, and will produce incomplete or incorrect results if the necessary data is missing or the input query does not follow the expected format.\n        \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.search.symbol_search`/SymbolSearch#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.search.symbol_search", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolSearch", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolSearch\n\n`SymbolSearch` is a class that searches for symbols in a `SymbolGraph`. It provides methods to process NLP-formatted queries and searches for exact matches, symbol references, symbol rankings, and source code retrieval.\n\n## Overview\n\n`SymbolSearch` is initialized with a `SymbolGraph`, a `SymbolSimilarity` object, an optional `SymbolRankConfig` object, and an optional `SymbolGraph.SubGraph`. The class contains methods such as `exact_search`, `filter_graph`, `find_pattern_in_modules`, `process_query`, `retrieve_source_code_by_symbol`, `shifted_z_score_sq`, `symbol_rank_search`, and `symbol_references` to perform various search operations.\n\nThe class uses a symbol similarity algorithm to rank symbols based on their relevance to the input query and a SymbolRank algorithm to compute a global ranking of symbols in the codebase. It provides search results in different formats depending on the search type specified in the query.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.core.symbol.parser.parse_symbol`\n- `automata.core.symbol.symbol_utils.convert_to_fst_object`\n- `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata.core.symbol.search.rank.SymbolRank`\n\n## Example\n\nThe following example demonstrates how to use `SymbolSearch` to process a query and retrieve the search results.\n\n```python\nfrom automata.core.symbol.graph import SymbolGraph\nfrom automata.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata.core.symbol.search.symbol_search import SymbolSearch\n\n# Initialize necessary objects\nsymbol_graph = SymbolGraph()\nsymbol_similarity = SymbolSimilarity()\n\n# Create the SymbolSearch object\nsymbol_searcher = SymbolSearch(symbol_graph, symbol_similarity)\n\n# Process a query and get the search results\nquery = \"type:symbol_references <symbol_uri>\"\nresult = symbol_searcher.process_query(query)\n```\n\n## Limitations\n\n`SymbolSearch` relies on the availability of symbols in the `SymbolGraph` and the `SymbolSimilarity` object. If either of these objects doesn't have the necessary data, the search results might be incomplete or incorrect. Moreover, the class assumes a specific format for NLP-formatted queries and raises errors if the input query does not follow the expected format.\n\n## Follow-up Questions:\n\n- How can we improve the search performance of the `SymbolSearch` class?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 198}, false, {"py/b64": "AAAAgPVThb8AAACg6lSAPwAAAMAFX4m/AAAAgO5sor8AAAAgtXp/vwAAAMC/kp0/AAAAgFKwbb8AAAAgKghnPwAAAIBAypW/AAAAYOJgl78AAABArLh4PwAAAABnsGG/AAAAIH9NdL8AAACgkidZvwAAAAAbj5U/AAAAAD/WiL8AAABgBf2OPwAAAEBufou/AAAAIHV+dz8AAACAgXFpPwAAAIAXXnq/AAAAIJgaf78AAADAb3JYvwAAAKAiv4m/AAAAAPdHkr8AAABgbU6TPwAAAEDGMI8/AAAAgM/Po78AAADACgmOvwAAAICsn18/AAAAwNKehD8AAABgLxSWvwAAAGCa0qC/AAAAwEhDaz8AAAAgcNSCvwAAAIDtwXY/AAAAIK4OcD8AAAAAK7OSvwAAAMCOD5c/AAAAoB7AkL8AAAAgmcVqPwAAAIBhKU8/AAAAoOwWm78AAABA5c19vwAAAKATRoi/AAAAIP2Deb8AAADgAvKSvwAAACDnI5W/AAAAID4rjT8AAADgwc+bPwAAACCYGn8/AAAAYM2SlT8AAAAgHcyjvwAAAKC0rIE/AAAAgG+LcT8AAAAA4DxSPwAAACByEaE/AAAA4KwBWj8AAAAAaXJ8vwAAACAsRTU/AAAAoAxfhb8AAADgQCyQvwAAAOApIZC/AAAAYAmQlL8AAAAgNNdzvwAAAGBwu5m/AAAAYPaDjb8AAAAAZ7CRPwAAAEARIoO/AAAAgMRVez8AAABAESKTPwAAAKC9Va8/AAAAgB/weL8AAABA0P+LPwAAAGD5a5c/AAAAQBm0kb8AAACAb4uRvwAAACDFGWA/AAAAgIaWgT8AAABgghyFPwAAAOApIUA/AAAAIFsGgb8AAACAq4iAvwAAAIAKIpc/AAAAQND/S78AAACA1raWPwAAAEBSyZY/AAAAoPeQoz8AAACAziSIvwAAAMDwkJe/AAAAQDoTqz8AAABAYUKYPwAAACC1ep8/AAAA4Oo7h78AAAAAAZx7vwAAAEBfBVo/AAAAAJpwlr8AAAAAw2GePwAAAGADO4Q/AAAAYEvJmr8AAADAzguPvwAAAKCZDnw/AAAAwDgffr8AAAAgjsZ1PwAAAMBj4aC/AAAAYOVIgb8AAAAgDaiWvwAAAGDI6IC/AAAAwLU+dD8AAABA+hZDvwAAAMAQ2aG/AAAAYMBWkj8AAAAgAGxDPwAAAEBhQpi/AAAA4GwFkj8AAACAb4uRvwAAAKBZEqQ/AAAAgJtkg78AAABAufSLvwAAAEAjCJu/AAAAAJ1YkD8AAACA9v6APwAAAGChuYM/AAAAIImhnb8AAABA8y+QPwAAAEDtX2w/AAAAYEx0lr8AAABgbU6TvwAAACCoPpy/AAAAgHFNnL8AAAAg45BvvwAAAMD7j5w/AAAAIAbBYz8AAACALmmaPwAAAMDhF5a/AAAAYD84oz8AAADg/CGfvwAAAGCzn3s/AAAAQF5afr8AAACg/yKivwAAAMAcaok/AAAAQE0foj8AAAAAnxqLvwAAACBqf5K/AAAAoKwao78AAAAglBuWPwAAAOBV+nE/AAAAQLn0ez8AAAAgw9xhPwAAAMCtrJW/AAAAANLanz8AAADAPLKDvwAAAIDLPE6/AAAAgKAOeL8AAAAgpnyBPwAAAEDMAIO/AAAAYJJAgr8AAACAFrOePwAAAEAT5H2/AAAAwEOZlr8AAAAAbpeEvwAAAIBhKZ8/AAAAYHXggb8AAACA+MCLPwAAAGB9cmC/AAAAQINMjT8AAACgCMyfPwAAAOAG8Xu/AAAAQBGnn78AAAAAkt6HvwAAAADNMHu/AAAA4FX6gb8AAACg3PKdvwAAAADDYY6/AAAA4OKpaL8AAADA83iRvwAAAEBp1KY/AAAAgF9nhD8AAADAVX+OvwAAAAA/1oi/AAAA4Joboj8AAACgdceYvwAAAMA+76E/AAAAoNzyjT8AAAAgiaGNvwAAAAA87n6/AAAA4OWRkj8AAABAWbB5vwAAAGAqaoE/AAAAgFx/Wj8AAAAAZ7CBPwAAAGAqaqE/AAAAwIzSiD8AAABglH2AvwAAAEACqeG/AAAAAOjOkL8AAAAABISFvwAAAIBBdaG/AAAAAJ8amz8AAADAxyR8vwAAAKDq2Xy/AAAAQKcOlD8AAACgRMl+vwAAAMDKDKY/AAAAYB2zmr8AAADAZaNrvwAAAMAdFZW/AAAAoLSsoT8AAABg7C90vwAAAEAT5J2/AAAAQE/hnD8AAADAOweYvwAAAAD1CpQ/AAAA4LGrTj8AAABAZCqSvwAAAMBfTns/AAAAAIWilL8AAADgYYuJPwAAAMB/loW/AAAAIJNwmj8AAAAgU3SCPwAAAABkyKe/AAAAAKQ/kz8AAACgenGNPwAAAKABYKC/AAAAIAPZmT8AAAAgJyCdPwAAAEAM/Uq/AAAAYGsRpT8AAAAgagQfPwAAAMAZgn+/AAAAoEqZoj8AAAAApgGOPwAAAEAHU5Y/AAAAwAC1pL8AAACA/eWDvwAAAIAhLXc/AAAAgIRZgz8AAADgNbKXPwAAACDFGYA/AAAAgEDKhT8AAABgffeMPwAAAGCb6Y+/AAAAAPzxlr8AAABA4COZPwAAAGBB+l2/AAAAIL2HoT8AAABgqUuSPwAAAOCIuqY/AAAAwDE4ez8AAACgc4qaPwAAAICM66G/AAAAYFZDc78AAADAALV0PwAAACCWWJQ/AAAA4L5ihT8AAADAzEmEPwAAAADdVJi/AAAAAMZJiL8AAADga1qmPwAAAOBz7IQ/AAAAwMxJlL8AAACgnPaFvwAAAMB/lnW/AAAAYOVIoT8AAABg6UeaPwAAAKDqVFA/AAAAwNmFlz8AAAAAIDlavwAAAEDq8pU/AAAAQEKlqT8AAABA+NlkPwAAACBqBG+/AAAAYFvtlz8AAACArUqbPwAAAOARa3S/AAAAIOOQn78AAADA6+aCvwAAAMDra58/AAAAwBotm78AAABADP2avwAAAMA5ypm/AAAAYHXgkT8AAAAgxRlgvwAAAMD5zXG/AAAA4HSXoD8AAACgNcugvwAAAGDKqqu/AAAAQOMLY78AAADA3G2RPwAAACBYHoe/AAAAALRjcD8AAACAjq2cPwAAAKAIzI+/AAAAoCWnkz8AAAAgWwahvwAAAICsn2+/AAAAgFiAQb8AAACAm2RzPwAAAAA6LIQ/AAAAIGoEf78AAABgfzSLPwAAAMBTvZM/AAAAIFU2jb8AAACA0QxSvwAAAIDRDKK/AAAAwAVfeb8AAADgxvRzPwAAAGCb6Y8/AAAAgNmeoL8AAABAiRyhPwAAAACGTYC/AAAAAFuLfb8AAACAOeOSvwAAAGDX5j4/AAAAAIWilL8AAACAb4uBvwAAAIBso4e/AAAAgD6Nlz8AAADAxWKRPwAAAAAJLoq/AAAAAFuLjb8AAACg4IWTvwAAAKBOmHs/AAAAIC3woD8AAAAAIyGUvwAAAACmAW4/AAAA4KdXZT8AAADgmN5jPwAAAEDbeYS/AAAAYG1Okz8AAADgoq2QvwAAACDFnoy/AAAA4P5ejb8AAABgffd8vwAAAEBhQni/AAAAwNxtcT8AAADAM3WJvwAAAOAC8oK/AAAAQFpbVb8AAADAzEmEvwAAAODQSI0/AAAAgDFRlL8AAAAgd7t1vwAAAGA8UJm/AAAAYH1ykD8AAADAGGugvwAAAOBXvKw/AAAAQFWxoL8AAADAZaObvwAAAEDzL6C/AAAAYFQGdb8AAADAf5aFvwAAAOCF0oy/AAAAoPw6mD8AAAAgInaYPwAAAIA4OJe/AAAAAESAbT8AAADAHGqJvwAAAEDQ/4u/AAAAgJDqir8AAADA9uWnPwAAAKCVD3O/AAAAIJytpL8AAADA62t/vwAAAIB+BJO/AAAAANOFWz8AAACAoA6YPwAAAGAJkJQ/AAAAIHTTKz8AAABAYu2TvwAAAOD8IY8/AAAAgLJvgz8AAACAfomPvwAAAMD25Yc/AAAAoA6cgz8AAABgUHOfvwAAAMDR85i/AAAAABw6oT8AAABgbdNvPwAAAEBxZpU/AAAA4JKJgz8AAABAVbFwvwAAAOD6X5Q/AAAAQGbsTL8AAACAHIOCPwAAAGA3pqS/AAAAAKTEjz8AAAAgo5RnPwAAAADgPKI/AAAA4E1ok78AAABAhjSHPwAAAEB+omg/AAAAQPMvkD8AAAAgUTeUPwAAAKCauYc/AAAAQJADdL8AAADgSdVdPwAAAIBNBom/AAAAAA5Tgr8AAAAAkt6HPwAAAOBHE5O/AAAA4Lk9jT8AAAAg+0abPwAAAEAcIZg/AAAAoBYugj8AAAAA0Bg1PwAAAGCCHHU/AAAAgC5pmj8AAACApbh8PwAAAOCPoYk/AAAAIGCwdT8AAADAGYKPvwAAAKAtOZI/AAAAwOmphD8AAABA6LWHPwAAAKC4q5o/AAAAQOAjib8AAABAF3eTPwAAAIBlvKQ/AAAAoEREoj8AAABgiq6DPwAAAIDtwYa/AAAAwDsHmL8AAADgVfqBPwAAAECxYn2/AAAAoAu0ib8AAACAWICBvwAAAEDLVac/AAAAYJJAoj8AAAAAfruhPwAAAGCMcI6/AAAAQAo7kD8AAACgqTKJvwAAAAB705e/AAAAINk8Zr8AAACAIS2HPwAAAMBk+H+/AAAAADUHfD8AAABADP2KvwAAAAAUqKI/AAAAAO+1kz8AAACgvgBrvwAAAMCHKIQ/AAAA4LGrnr8AAABgNL5qPwAAACDkO5s/AAAAAMtugD8AAAAA7XiVPwAAACDcJJA/AAAAwNxtkT8AAACAF16aPwAAAGDNkmU/AAAAAGYFdj8AAAAA9QqUPwAAAEBi7XM/AAAAYNI8mj8AAACAJteLPwAAAKBjZn0/AAAAIJZYlL8AAAAgmBp/vwAAAOB5QYW/AAAAAPkJbb8AAADAH1KDPwAAAAD3R5K/AAAAQNZUnL8AAAAA9Qo0vwAAACAymnW/AAAAwFhnqD8AAADA/cyavwAAAAA475U/AAAAYJJAkj8AAACglQ+TPwAAAKDTSZC/AAAAIOOQj78AAABAONaMvwAAAKA6dZU/AAAAIHDUoj8AAABAjRuKvwAAAGBJB4C/AAAAIFE3lL8AAAAAFuWAPwAAAEDlzX0/AAAAYIIclT8AAACA6JyOPwAAAEAfCZI/AAAAgIaWkb8AAACgKlGIvwAAAMBlo3u/AAAA4AecZ78AAADANl2TPwAAAMAn5HG/AAAAIFbhiL8AAACAxpKZPwAAACCPcZE/AAAAYGsRlT8AAAAgS+KTvwAAAOB0l3A/AAAAYFBzrz8AAACAqt1EPwAAAOAqOI+/AAAAgGyjl78AAACAgMZ9vwAAACBvKZe/AAAAADNFgT8AAACgn2OMPwAAACALa5i/AAAAQNGqZz8AAACA9VOVPwAAAAAW5YA/AAAAIMIxlj8AAACgRgadPwAAAGALzXI/AAAAgLJvoz8AAADAJ+SRvwAAAMAYa6C/AAAAgCm/Vb8AAACAApCYPwAAACBJpaU/AAAAICoIpz8AAABANWl2vwAAAEDgI2m/AAAAYOJgZz8AAABADP2KPwAAAMBDmZa/AAAA4HSXoL8AAACAdDWGPwAAAMDcbYE/AAAA4E1ok78AAAAgeihMPwAAAKAEzYa/AAAAIC3wML8AAAAgaEKEPwAAAABcNok/AAAAIMIxpr8AAABgTHR2PwAAAKBSK5E/AAAAoMMlUz8AAAAAR2iXPwAAAGDVJIS/AAAAYLqGjr8AAADgV7xsPwAAAGCa0lC/AAAAgOPymb8AAAAgt7eNPwAAAMB/loU/AAAAAHYpg78AAABgW+2nvwAAAACs0ZG/AAAAAJXGgT8AAABAnT9XPwAAACASUos/AAAAgP3lk78AAACA9VOlPwAAACDpYKM/AAAAAN1UiD8AAACg00mQPwAAAOAC8oK/AAAAgGLUmj8AAADAeuyAPwAAAGCx3YA/AAAAwIHTcz8AAACAyf9vPwAAAKAJd3u/AAAAAIZNcL8AAACAF14KvwAAAOAG8Uu/AAAAIG8pRz8AAABAQqWJvwAAAEA4UaC/AAAAwIRAmr8AAAAAy26QPwAAACBqf1K/AAAA4LbQdj8AAAAAl4hsPwAAAGDDw1g/AAAAIKZ8cb8AAACAqKCmvwAAAOBc4XS/AAAAwKrEi78AAAAgVuGYPwAAAECJHHE/AAAAQIDfhr8AAAAgrg6QPwAAAKAWLoI/AAAAwOEXdj8AAACgRMmOvwAAAODd/5M/AAAAoM15nD8AAABAiRxxvwAAAMBj4YC/AAAAIC+ym78AAADAM3V5PwAAAKBM1pC/AAAAwIOVjj8AAABglH1gPwAAAOCLooC/AAAAwH7rWT8AAABAoumbvwAAACBJpaW/AAAAoOLCkb8AAADgvmJ1PwAAAMDuUxm/AAAAwFhnmL8AAADAJ+SBPwAAACB4ZnE/AAAAIE2knr8AAACgmrmHPwAAAABKUGE/AAAAoJz2hT8AAABgbxCevwAAAOC5PY2/AAAAwBIWgL8AAABgyqqLPwAAAKC9VZ8/AAAAAHjrnT8AAACgswF2PwAAAEBaW5W/AAAAYCSajb8AAABAXlp+vwAAAAAWam2/AAAA4Ey9d78AAABgNL5KvwAAAMB/lpW/AAAAwEaBgD8AAACg7BaLPwAAAMBqyJO/AAAAAPF3bj8AAADgFhWZPwAAAKAnaX4/AAAAIMfber8AAADAdwSXPwAAAMA8spM/AAAAYPlrd78AAABgw8OIvwAAAAC5DaU/AAAAAMkxkj8AAAAAjTSjvwAAAGCu9Xa/AAAAwBmCjz8AAABg4bWbPwAAAMAfUpM/AAAA4Lm4YL8AAAAADlOSPwAAACB1fpe/AAAAwNxtgb8AAACgCMx/vwAAAKCCA1y/AAAAwMckjL8AAACgIIJrPwAAAEBVsaC/AAAAgBdeir8AAAAAK7OSPwAAAKC0rKE/AAAAwB0Vpb8AAABgML+RvwAAAGBmZ5C/AAAAoLw+kD8AAAAA1m11vwAAAIAkFTG/AAAAAKzRgb8AAACgCMx/vwAAAACDZZa/AAAAYMPDmL8AAABgbU5jPwAAACDZPJY/AAAAYN22kj8AAADgKHaUPwAAAGBt03+/AAAAADNFkT8AAACAHIOCvwAAAOCaG4K/AAAAYCVFaT8AAABAmld9vwAAACDmeGk/AAAAwBmCnz8AAACgJaeDPwAAAAAjIaQ/AAAAwPU6nD8AAADAoPUevwAAACAGwXM/AAAAYJvpfz8AAADAasiTPwAAAKCc9oU/AAAAAKnphz8AAACAWkJcPwAAAADRw5C/AAAA4Co4fz8AAAAgmBqPPwAAAABbi42/AAAAwM+2er8AAAAAfruhvwAAAOCsAYo/AAAAoHOKmj8AAABA2JF6PwAAAGDazlg/AAAAAKqUk78AAABATR+ivwAAAKAewGA/AAAAYLHdkD8AAAAgJV5CPwAAAEDUknE/AAAAwPCQp78AAAAgvYehvwAAAKAb2IY/AAAAQGnUdr8AAACAXSqWPwAAAEDRqoc/AAAAYIIclT8AAAAA8Xd+vwAAAIAFeIK/AAAAYA2PfT8AAADglzOYPwAAACA8aaK/AAAAoFYqej8AAAAA2KqjvwAAAEDQ/0s/AAAAYIfGeT8AAAAALXWNvwAAAGBrEaU/AAAAoKwagz8AAADgtJOIPwAAAGBOsZQ/AAAAYMqqiz8AAAAgd7uFPwAAAICyb5O/AAAAQAo7oD8AAABgEHd3vwAAAEB2EHq/AAAAoKGgmr8AAADAz7aqvwAAAGAGqIo/AAAAAJLel78AAABAkAOUPwAAAED0Rn8/AAAAAOXmdj8AAADAVX+OPwAAAKAewKC/AAAAwEaBgL8AAAAgTk96PwAAAOCnV6U/AAAAIMD0R78AAABg9MGSPwAAAGBB+p0/AAAAIEj6Sb8AAACArJ9vPwAAAMC66Hg/AAAAACuzkj8AAADAzEl0vwAAAGDdtpI/AAAAIOJ5oD8AAADAojKdvwAAAEAKO4A/AAAAwAoJLj8AAAAgbeyIvwAAAOAtIIm/AAAAICSzpr8AAABAtzJxvwAAAIDCk6A/AAAAQLINmT8AAADgCoSBvwAAAIB+iU+/AAAAwL+Snb8AAACgJ2mePwAAAIAWs46/AAAAwOEXlj8AAACg6lSQPwAAAMD4IoY/AAAAwDsHaL8AAADgOJqhPwAAAECsuHi/AAAAoBvYpj8AAADgZjV+vwAAAMA+74E/AAAAIEvic78AAADg4qmIvwAAAOAZ/XI/AAAAgDMTPz8AAACAVZiXPwAAAEArmnk/AAAAICcgfb8AAAAgTaR+vwAAAICtSps/AAAAYJGVZr8AAACAJBWRvwAAAOBmNX4/AAAA4HWuPz8AAADAW0+iPwAAAGAGqIq/AAAAYJyUm78AAAAgWwahvwAAAIAkFYG/AAAAIGCwlT8AAACALmlqPwAAAMCHKJS/AAAAoJF8nT8AAADgLSBpvwAAAGA3ppQ/AAAAYDemlD8AAABgR8pxvwAAAGAsLHw/AAAAYETidz8AAACAhFlzPwAAAKDqVIA/AAAA4EeYT78AAACgLTlyPwAAAGBe1ZE/AAAAQGLto78AAABgyqqbvwAAAKAb2Ha/AAAAIMfbej8AAAAgOYGYPwAAAGBB+n2/AAAAIDKapb8AAACgl0xxPwAAAIDm2qM/AAAAIK4OkL8AAACgMKZ4PwAAAMD5zZE/AAAA4AqEoT8AAACAF16avwAAAMB8rmu/AAAAwNKehL8AAAAAhk2gvwAAACBBE5c/AAAAgPVThb8AAAAA0tqfvwAAAOCNZJu/AAAAAPIiir8AAADAFYOWPwAAAGDXYaI/AAAAAJXGIb8AAAAgBsGTPwAAAOC+YoU/AAAAoDCmOL8AAADgEWtUPwAAAEBufns/AAAAYEYflj8AAAAAy26AvwAAAIC6AZK/AAAAYEYflj8AAAAADBaEvwAAAAD6tJg/AAAAQCMIe78AAADg5ZGivwAAAICbZFM/AAAAoExbrb8AAADglEuOvwAAAKCKlZq/AAAAgE0Gib8AAACAxFWLvwAAAADJMVI/AAAAQLINib8AAACgTNaAPwAAAKAWLoK/AAAAgDFRhD8AAAAAy26QvwAAAOCxq44/AAAAYGsRlT8AAADACglePwAAAGCzn2u/AAAA4KwBij8AAADgT6WhvwAAAKDc8p2/AAAAwAVfWT8AAADggxBiPwAAAGDiYIe/AAAAYGpmWT8AAACg4IVDPwAAAGBHyqE/AAAAoPeQkz8AAACA9v6gvwAAAOBXN6C/AAAA4Pd3mr8AAAAgw9yhvwAAAGANj40/AAAA4Ii6hr8AAABAMyyIPwAAAACfGnu/AAAAYJR9gD8AAABAQ1CVvwAAAKCkiJQ/AAAAwLAZnL8AAADgmhuCPwAAAKB4r5K/AAAAgDsggT8AAAAAWclSvwAAAKAMX5U/AAAA4EeYfz8AAACgTNaAPwAAAOA1sme/AAAAIDKadb8AAADg7SNhvwAAAGBTW5k/AAAAwMoMhr8AAAAgUIyoPwAAAECNG5q/AAAAIHe7lb8AAADg6juHvwAAAOAmOZa/AAAAQCFGkD8AAAAAxkmIPwAAAODtI4G/AAAA4IuigL8AAADA3G1BPwAAAGDknZU/AAAAQPXxir8AAABgw8OYvwAAAEA6E5s/AAAA4Ld7kj8AAACg2POEvwAAAIBxTYw/AAAA4E+lkb8AAACADQqRvwAAAADqkHu/AAAAgItANr8AAABg33iNPwAAAEA9+4S/AAAAgKP2gT8AAACgmrmnPwAAAECA34Y/AAAAAFSkWr8AAAAgfGWavwAAAGBRHnu/AAAAANZtdT8AAACAxz11vwAAACDFGZC/AAAAoG01mr8AAACAtxloPwAAAOApIaC/AAAAgFKwjT8AAABgiq6TPwAAAECGNIe/AAAAAFSker8AAAAApgGOvwAAAKAy46a/AAAA4PpflD8AAACgOnWFvwAAAADgPJK/AAAAoJ9jjD8AAADgcARrvwAAAADvtXO/AAAAYLHdkL8AAAAgCP6BvwAAAIACkJi/AAAAAFeMZL8AAADgn8WWPwAAAICDrpe/AAAAQDVpZr8AAAAAWcmivwAAAGCMcH4/AAAAAEUrmT8AAADgubigvwAAAKBJ7oa/AAAAoN/axz8AAAAglliEPwAAAADLbpA/AAAAwLromD8AAAAgMpqFvwAAACAnm6C/AAAAgA0KkT8AAABAXJiTPwAAAAAZUpe/AAAAwBKbnL8AAACgcB1kPwAAAOARa4Q/AAAAQMYwn78AAACgKlF4PwAAAGB6ioY/AAAAoJq5h78AAADgAvKivwAAAKCpMqm/AAAAYN/zkL8AAADgIY+BvwAAAKAiv4k/AAAAIDxpUj8AAADgjWSLvwAAAGBgl4y/AAAAQNPnhT8AAADgu3qLvwAAACCE94i/AAAA4NvChb8AAADgda6fPwAAAGCzn5s/AAAAgKAOmL8AAAAAmnCWPwAAAEAjCJs/AAAAgGQReb8AAAAg+YRwPwAAAOBJ1V2/AAAAICJ2iD8AAADAENlxPwAAAEDgI4m/AAAA4N/Bjj8AAACAwpOQvwAAAKD0qJm/AAAAoHsceb8AAACgwyWTvwAAAEDWVJw/AAAAAA7Yjr8AAAAgWB6XvwAAAOBz7FS/AAAA4NvCdT8AAADgsauePwAAAACAfay/AAAAYKG5c78AAAAg35GGPwAAAMCR93A/AAAAgObac78AAAAAyIaGvwAAAIDRDHI/AAAAgMn/j78AAADA0p6UPwAAAOBmNW4/AAAAgPjAm78AAABgKC1zvwAAAEBufps/AAAAIB3Mkz8AAADAYPmGvwAAAGB993w/AAAA4CWOar8AAABgkkCSPwAAACBYHpc/AAAAQKnQjj8AAACAdx2QvwAAAKCXTJG/AAAAIBJSm78AAABgVkOjvwAAAIAZm3i/AAAAgEM3jL8AAABAXlqePwAAAEC3MpE/AAAAoPw6iD8AAABAQGibPwAAAMAU2Gq/AAAAAJXGoT8AAACABXhyPwAAAACXiIw/AAAAwIOVfj8AAACgct9+PwAAAMBoi5U/AAAAYFNbib8AAABgkkCCPwAAAGD+FXw/AAAAQNGqh78AAADAQLF8PwAAAMAxOIu/AAAAQJiVkj8AAACAoA5oPwAAACDSVUM/AAAA4HlBpT8AAAAgtfWSPwAAAMD5zaG/AAAAYH80m78AAACAWkKMvwAAAOBkc7M/AAAAQCHLjD8AAACgct+ePwAAAMD7j2y/AAAAIFN0Uj8AAADA7lOJvwAAACD7Rou/AAAAwH+Wlb8AAAAAg2VmvwAAAKCAQZE/AAAAgFDukr8AAADg28KVPwAAAEAhRoA/AAAAIFU2bb8AAAAAfRCGPwAAAGCKrnM/AAAAgIOuNz8AAACgl0xxPwAAAGADO4Q/AAAAYCVFib8AAAAAP9aYPwAAAGAwv4G/AAAAoGGkoj8AAADA3G2hvwAAAKBGBn2/AAAAgFKwnb8AAADAxWKBvwAAAKAlp5O/AAAAYJJAor8AAADACEeTPwAAAECIcaW/AAAAQDhRgD8AAACgR7F4vwAAAED18Xo/AAAAYLjEo78AAABAgYqivwAAAEA1aXa/AAAAQGnUlr8AAADgGf2CvwAAAGCpS4I/AAAAAC11jT8AAAAgTaSOvwAAAMCEQJo/AAAA4IMQUr8AAAAgbylXvwAAAAA/1pi/AAAAoIqVmj8AAACgK/yTvwAAAOA4mnG/AAAAAESAXT8AAADAGGuAvwAAACD9g5k/AAAAQBGnn78AAABg0jx6PwAAAODQSK2/AAAAIJytlL8AAADgsSaivwAAAMCB04M/AAAAILe3bT8AAACggEGxvwAAAOAKhGE/AAAA4L8Ncb8AAABglH2APwAAACDD3EE/AAAAQNiRir8AAADgiLrGvwAAACBE+5A/AAAAIC3woD8AAABAg8egvwAAAAAtdV0/AAAAIAIubj8AAABA75yaPwAAAIAzjpK/AAAAAF8ek78AAABA23lkPwAAAAAUqJI/AAAAoBjwbD8AAACgcB2kvwAAAKDv/qS/AAAAwCyOlr8AAADAfuuJvwAAAEDvnHo/AAAA4LGrjr8AAACgvgCbPwAAAAB4650/AAAAAFeMlD8AAABAMyyovwAAAOBuQnA/AAAAoJz2pT8AAABATR9iPwAAACB003s/AAAAwM+2ir8AAADgBvGLPwAAAIDPz5M/AAAAQKXRpb8AAABAtzJBvwAAAIBQ7oI/AAAA4O/li78AAAAg2ueBvwAAAED/wIe/AAAAIFE3hD8AAABgEHd3vwAAAMB+65m/AAAAAOL+nL8AAADgGf2CPwAAAGCRlZY/AAAAgBEJij8AAACgVO2LPwAAAKAWLoK/AAAAoFkSlL8AAABgBf1+PwAAACAFFpg/AAAAoK7cnb8AAACgjz9/PwAAAMCHKHQ/AAAAABSokj8AAACgNcuAvwAAAKCpMok/AAAAYIfGib8AAABAtEqXPwAAAICdJn4/AAAAgB5FjT8AAABA8EdWPwAAAOB2WYs/AAAAAA7YXj8AAACglGSXvwAAAIDJ/5+/AAAAAMNhfj8AAAAAuQ2VvwAAAOC3e4K/AAAAILDQmr8AAADAgdOTvwAAAECDx1A/AAAAAINllr8AAABgtoeVvwAAAOBUT2a/AAAA4LEmoj8AAAAg1/9nvwAAAIDHPYU/AAAAwIZ9eD8AAADARoGgPwAAAGBvEH6/AAAAAA5Tcj8AAADA6+ZyvwAAAACs0YG/AAAAQLRKh78AAABAzj2xPwAAAGBgl3w/AAAAwPsKYL8AAACgAyKbPwAAAKDnbEY/AAAAIJcDgD8AAABgaxGlvwAAAKCCA4y/AAAAQOudgb8AAADgvmKVPwAAAADNMJs/AAAA4P5efb8AAAAA/PGWPwAAACC9h0G/AAAAYPTBgj8AAABAYu2DvwAAAADRw3C/AAAAQGbsfL8AAADAQLGcvwAAAIBBdZE/AAAAwObBej8AAADAOcqpvwAAAMAFX2m/AAAAQGLtkz8AAAAgQROHPwAAAOBwBJu/AAAA4ALygj8AAAAA1m2FPwAAAIBfZ2S/AAAAYEYfpr8AAADgYYuJPwAAAKA/H5o/AAAAAOXmlj8AAABg5J2lvwAAAIBhKZ8/AAAAQEWNkz8AAABAMESevwAAAMC90KI/AAAAANHDgL8AAADgda6vPwAAAADQGIW/AAAA4FRPhj8AAADgxLd1vwAAAICtSns/AAAAYH33bL8AAABgc6OzvwAAACCRM3y/AAAAgMzneT8AAABAAqmRPwAAACA016O/AAAAoOUveL8AAABAAqmRvwAAAGC7MWq/AAAAQJpXnb8AAACgIr+ZPwAAACChV3k/AAAAABblkL8AAABAWbCZvwAAAOCaG5K/AAAAYA46eb8AAADg8s2FPwAAAGAoLZO/AAAAIPaclr8AAADg8s1FPwAAAMDFYpE/AAAAIPaclj8AAABgR8qRPwAAAIDubGK/AAAAYNI8ej8AAACA3kh1PwAAAIBkEUm/AAAAwBxqib8AAABAESJzvwAAAGBvEI4/AAAAQBGnnz8AAACgj7qCPwAAACDSVYO/AAAAwGWjWz8AAADAjNKYvwAAAKBhpII/AAAA4EqAWT8AAADg7SOBvwAAAMAZgo+/AAAAIDxpoj8AAABgqw2NvwAAAADQGHU/AAAAAOXmdr8AAACgtKyRPwAAAIAU8XM/AAAAADzunr8AAAAAeOt9PwAAAMByWpK/AAAAoKkymT8AAADAPLJzPwAAAIBgEpC/AAAAgMRVe78AAADgubiQvwAAAEAbdpy/AAAAwBhroL8AAAAg45CfPwAAACBgsGU/AAAAIE2kbr8AAADA62tfPwAAAAA474W/AAAAYGZnkD8AAABA7V+MvwAAAKDv/oQ/AAAA4K/pk78AAABAadR2vwAAAOAbv30/AAAAgCm/lT8AAAAg0lWjvwAAAGBJB3A/AAAA4EnVbT8AAADAPLKTvwAAACDKw6S/AAAAQPRGnz8AAACguVaGvwAAAKAB5Yw/AAAAAA7Ybj8AAACA4/KZPwAAAICvhyk/AAAAIGoEn78AAACA6JxuvwAAAADO23a/AAAAoCdpjr8AAACA22CLvwAAAMDra28/AAAAQD6moL8AAABgwhiNvwAAAMCyVjo/AAAAwPblhz8AAADgZjV+PwAAAAB9EKY/AAAA4PpfpL8AAAAguGKJPwAAACDUF44/AAAAoEIHpD8AAABAHwlyvwAAAMCeM3Q/AAAAoMA9ib8AAABAdhCKvwAAACAa5Hm/AAAAYN/zgL8AAACg52yWPwAAAACp6ae/AAAA4FRPlr8AAADANl2zvwAAAIDwLo0/AAAAIGCwhT8AAADA6+aSvwAAAADteHU/AAAA4LGrrr8AAAAg8fKBPwAAAEDvnIo/AAAAAKQ/gz8AAADg4GxqvwAAAGDSPKq/AAAAwNmFh78AAAAAhk2AvwAAAEC3MoG/AAAAoHscmb8AAADgIOSFvwAAAMDMSZQ/AAAAoMu3kb8AAADAo92oPwAAACBQjJg/AAAA4Fc3cL8AAADAW09yvwAAAODlkZI/AAAAIET7oD8AAABA6vKVvwAAAOCPoZm/AAAA4Fc3kL8AAADg6P6IPwAAAKBERJK/AAAAoOdslr8AAADg38F+PwAAAMDzeJG/AAAAgJPSdL8AAABA1lScPwAAAGATX5E/AAAAIAUWiL8AAABgBqiaPwAAAECNG3q/AAAAYLXciT8AAAAgmBqfPwAAAMCWoZW/AAAAYJknlb8AAABgyOiAPwAAACCTcIq/AAAAwPnNob8AAACApTOQvwAAAGAgm4Q/AAAAQNPnhT8AAADg7SNhPwAAAIBSsG0/AAAAgNa2lj8AAACgB7VwPwAAAMDR83i/AAAA4Fn5qr8AAADgWfmKPwAAAICyb4O/AAAA4CDklT8AAAAA1m2VPwAAAICyb3O/AAAAgDg4d78AAADgVfqhPwAAAIAzjpI/AAAAgFiAgT8AAADgJjmWvwAAAGAoLaM/AAAAYC8Ulr8AAABAXwWqvwAAAECQA2S/AAAAgAV4kj8AAADgeUGFvwAAACCmfJG/AAAAoLlWRj8AAACgRESSPwAAAAA3REq/AAAA4HlBZb8AAACA7cGGvwAAAMAvdpC/AAAAQNSScT8AAADgZHOTvwAAACDmeGk/AAAAwMxJlD8AAACADQqRvwAAAMAsjoY/AAAAIHIRgT8AAACgDpyjPwAAAODqOxc/AAAAoJInmb8AAABAZCqSvwAAAOA6XGy/AAAAYEx0lr8AAADgRdZ0PwAAAIB533o/AAAAYF7VYb8AAADAasiDPwAAAOC/DZE/AAAAIE5PWj8AAAAArpOcvwAAAICluHy/AAAAYDemlD8AAAAgbEGNPwAAAADgPJK/AAAAYLXcib8AAAAgAPF/vwAAAAAcOpG/AAAAYF7Vob8AAABAadR2PwAAAKC8PpC/AAAAQBd3k78AAAAAG491PwAAAOC5PV0/AAAAIO4KiD8AAADgtJOYvwAAACBNpH6/AAAAoOgXcj8AAABACjtwPwAAAOBpHZi/AAAAIADxj78AAABAFI95vwAAAOCIupa/AAAAoPlSjj8AAACgbTV6vwAAAEBeWo6/AAAAQIY0pz8AAADAeuyAPwAAAIBSsG0/AAAAoOCFgz8AAADAZ+CJPwAAAOCxJpK/AAAAYBNfYT8AAAAA04WLvwAAAGDknYW/AAAA4C7LZL8AAACAMxOfvwAAACDfkXa/AAAAoOLCkb8AAAAAXx6jvwAAAEAzLHi/AAAAQMhtnb8AAABglj87PwAAAEDLVbc/AAAAoDXLoD8AAACAZBGJPwAAAKCfY0y/AAAAINyprL8AAACA4/KZPwAAAICq3ZQ/AAAAYDKBbL8AAACgRMmevwAAAKD0qJm/AAAA4FISaL8AAAAAGKebvwAAAACkxH8/AAAAgIkDiL8AAACAFrN+PwAAAAAUqFK/AAAAYHqKlr8AAACgHsBwPwAAAGChuYM/AAAAgM4kaL8AAAAA/9mgPwAAAOB7fpM/AAAA4GwFgj8AAADg6P54PwAAAKC9VY8/AAAAYHXgcT8AAACAwpOQPwAAAKC9VY+/AAAAIBCQkD8AAADAasijvwAAAAABnJs/AAAAgIRZcz8AAADg/wmpvwAAACAVOpW/AAAAgKJLlj8AAAAgJ5uAPwAAAABbi32/AAAAQOudcT8AAACgSe6mPwAAAKB4r5I/AAAAYOSddT8AAAAAMF2XPwAAAICgDmi/AAAAgPr9mb8AAABAwYaavwAAAGCZJ5U/AAAAAPzxZr8AAADgNbKXvwAAAICOray/"}]}]}, "source_code": "class SymbolSearch:\n    \"\"\"Searches for symbols in a SymbolGraph\"\"\"\n\n    def __init__(\n        self,\n        symbol_graph: SymbolGraph,\n        symbol_similarity: SymbolSimilarity,\n        symbol_rank_config: Optional[SymbolRankConfig],\n        code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n        *args,\n        **kwargs,\n    ):\n        \"\"\"\n        Args:\n            symbol_graph (SymbolGraph): A SymbolGraph\n            symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n            symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n            code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n        \"\"\"\n\n        if not code_subgraph:\n            code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                kwargs.get(\"flow_rank\", \"bidirectional\")\n            )\n        else:\n            if not code_subgraph.parent == symbol_graph:\n                raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n\n        graph_symbols = symbol_graph.get_all_available_symbols()\n        embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n        available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n        SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n\n        # TODO - Do we need to filter the SymbolGraph as well?\n        self.symbol_graph = symbol_graph\n        self.symbol_similarity = symbol_similarity\n        symbol_similarity.set_available_symbols(available_symbols)\n        self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n\n    def symbol_rank_search(self, query: str) -> SymbolRankResult:\n        \"\"\"\n        Fetches the list of the SymbolRank similar symbols ordered by rank\n\n        Args:\n            query (str): The query to search for\n\n        Returns:\n            A list of tuples of the form (symbol_uri, rank)\n        \"\"\"\n        query_vec = self.symbol_similarity.get_query_similarity_dict(query)\n        transformed_query_vec = SymbolSearch.transform_dict_values(\n            query_vec, SymbolSearch.shifted_z_score_sq\n        )\n        ranks = self.symbol_rank.get_ranks(query_to_symbol_similarity=transformed_query_vec)\n        return ranks\n\n    def symbol_references(self, symbol_uri: str) -> SymbolReferencesResult:\n        \"\"\"\n        Gets the list a symbol-based search\n\n        Args:\n            symbol_uri (str): The symbol to search for\n\n        Returns:\n            A dict of paths to files that contain the\n                symbol and corresponding line numbers\n        \"\"\"\n        # TODO - Add parsing upstream or here to parse references\n        return self.symbol_graph.get_references_to_symbol(parse_symbol(symbol_uri))\n\n    def retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult:\n        \"\"\"\n        Finds the raw text of a module, class, method, or standalone function\n\n        Args:\n            symbol_uri (str): The symbol to retrieve\n\n        Returns:\n            The raw text of the symbol or None if not found\n        \"\"\"\n        node = convert_to_fst_object(parse_symbol(symbol_uri))\n        return str(node) if node else None\n\n    def exact_search(self, pattern: str) -> ExactSearchResult:\n        \"\"\"\n        Performs a exact search across the indexed codebase\n\n        Args:\n            pattern (str): The pattern to search for\n\n        Returns:\n            A dict of paths to files that contain the pattern and corresponding line numbers\n        \"\"\"\n        return SymbolSearch.find_pattern_in_modules(pattern)\n\n    def process_query(\n        self, query: str\n    ) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]:\n        \"\"\"\n        Processes an NLP-formatted query and return the results of the appropriate search\n\n        Args:\n            query: The query to process\n\n        Returns:\n            The results of the search\n        \"\"\"\n        parts = query.split()\n        if len(parts) < 2:\n            raise ValueError(\n                \"Invalid NLP query. It must have at least two parts: 'type:...' and 'query...'\"\n            )\n\n        search_type = parts[0][len(\"type:\") :].lower()\n        query_remainder = \" \".join(parts[1:])\n\n        if search_type == \"symbol_references\":\n            return self.symbol_references(query_remainder)\n        elif search_type == \"symbol_rank\":\n            return self.symbol_rank_search(query_remainder)\n        elif search_type == \"exact\":\n            return self.exact_search(query_remainder)\n        elif search_type == \"source\":\n            return self.retrieve_source_code_by_symbol(query_remainder)\n        else:\n            raise ValueError(f\"Unknown search type: {search_type}\")\n\n    @staticmethod\n    def filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]):\n        \"\"\"\n        Filters a graph to only contain nodes that are in the available_symbols set\n\n        Args:\n            graph: The graph to filter\n            available_symbols: The set of symbols to keep\n        \"\"\"\n        graph_nodes = deepcopy(graph.nodes())\n        for symbol in graph_nodes:\n            if symbol not in available_symbols:\n                graph.remove_node(symbol)\n\n    @staticmethod\n    def shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray:\n        \"\"\"\n        Compute z-score of a list of values\n\n        Args:\n            values: List of values to compute z-score for\n\n        Returns:\n            List of z-scores\n        \"\"\"\n        if not isinstance(values, np.ndarray):\n            values = np.array(values)\n\n        mean = np.mean(values)\n        std_dev = np.std(values)\n        zscores = [(value - mean) / std_dev for value in values]\n        return (zscores - np.min(zscores)) ** 2\n\n    @staticmethod\n    def transform_dict_values(\n        dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n    ):\n        \"\"\"\n        Apply a function to each value in a dictionary and return a new dictionary\n\n        Args:\n            dictionary: Dictionary to transform\n            func: Function to apply to each value\n\n        Returns:\n            Dictionary with transformed values\n        \"\"\"\n        # Apply the function to the accumulated values\n        transformed_values = func([dictionary[key] for key in dictionary])\n\n        # Re-distribute the transformed values back into the dictionary\n        transformed_dict = {}\n        for i, key in enumerate(dictionary):\n            transformed_dict[key] = transformed_values[i]\n        return transformed_dict\n\n    @staticmethod\n    def find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]:\n        \"\"\"\n        Finds exact line matches for a given pattern string in all modules\n\n        Args:\n            pattern (str): The pattern string to search for\n\n        Returns:\n            Dict[str, List[int]]: A dictionary with module paths as keys and a list of line numbers as values\n        \"\"\"\n        matches = {}\n        module_map = LazyModuleTreeMap.cached_default()\n        for module_path, module in module_map.items():\n            if module:\n                lines = module.dumps().splitlines()\n                line_numbers = [i + 1 for i, line in enumerate(lines) if pattern in line.strip()]\n                if line_numbers:\n                    matches[module_path] = line_numbers\n        return matches\n", "summary": "`SymbolSearch` is a class that searches for symbols in a `SymbolGraph`, providing methods to process NLP-formatted queries and search for exact matches, symbol references, symbol rankings, and source code retrieval. The class ranks symbols based on their relevance to the query and computes a global ranking of symbols in the codebase using a symbol similarity algorithm and SymbolRank algorithm. The search results are provided in different formats depending on the search type specified in the query. However, `SymbolSearch` relies on the availability of symbols in the `SymbolGraph` and the `SymbolSimilarity` object, with limitations including the potential for incomplete or incorrect results and errors for queries that do not follow the expected format.\n\nExample usage:\n```python\nfrom automata.core.symbol.graph import SymbolGraph\nfrom automata.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata.core.symbol.search.symbol_search import SymbolSearch\n\n# Initialize necessary objects\nsymbol_graph = SymbolGraph()\nsymbol_similarity = SymbolSimilarity()\n\n# Create the SymbolSearch object\nsymbol_searcher = SymbolSearch(symbol_graph, symbol_similarity)\n\n# Process a query and get the search results\nquery = \"type:symbol_references <symbol_uri>\"\nresult = symbol_searcher.process_query(query)\n```\n", "context": "\n    Generate the documentation for SymbolSearch using the context shown below -\n  Building context for primary symbol - automata.core.symbol.search.symbol_search.SymbolSearch -\n  \n    Import Statements:\n      import networkx as nx\n      import numpy as np\n      from copy import deepcopy\n      from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Union\n      from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n      from automata.core.embedding.symbol_similarity import SymbolSimilarity\n      from automata.core.symbol.graph import SymbolGraph\n      from automata.core.symbol.parser import parse_symbol\n      from automata.core.symbol.search.rank import SymbolRank, SymbolRankConfig\n      from automata.core.symbol.symbol_types import Symbol, SymbolReference\n      from automata.core.symbol.symbol_utils import convert_to_fst_object\n      \n      # SymbolSearch\n      \n      `SymbolSearch` is a class that searches for symbols in a `SymbolGraph`. It provides methods to process NLP-formatted queries and searches for exact matches, symbol references, symbol rankings, and source code retrieval.\n      \n      ## Overview\n      \n      `SymbolSearch` is initialized with a `SymbolGraph`, a `SymbolSimilarity` object, an optional `SymbolRankConfig` object, and an optional `SymbolGraph.SubGraph`. The class contains methods such as `exact_search`, `filter_graph`, `find_pattern_in_modules`, `process_query`, `retrieve_source_code_by_symbol`, `shifted_z_score_sq`, `symbol_rank_search`, and `symbol_references` to perform various search operations.\n      \n      The class uses a symbol similarity algorithm to rank symbols based on their relevance to the input query and a SymbolRank algorithm to compute a global ranking of symbols in the codebase. It provides search results in different formats depending on the search type specified in the query.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.core.symbol.parser.parse_symbol`\n      - `automata.core.symbol.symbol_utils.convert_to_fst_object`\n      - `automata.core.embedding.symbol_similarity.SymbolSimilarity`\n      - `automata.core.symbol.search.rank.SymbolRank`\n      \n      ## Example\n      \n      The following example demonstrates how to use `SymbolSearch` to process a query and retrieve the search results.\n      \n      ```python\n      from automata.core.symbol.graph import SymbolGraph\n      from automata.core.embedding.symbol_similarity import SymbolSimilarity\n      from automata.core.symbol.search.symbol_search import SymbolSearch\n      \n      # Initialize necessary objects\n      symbol_graph = SymbolGraph()\n      symbol_similarity = SymbolSimilarity()\n      \n      # Create the SymbolSearch object\n      symbol_searcher = SymbolSearch(symbol_graph, symbol_similarity)\n      \n      # Process a query and get the search results\n      query = \"type:symbol_references <symbol_uri>\"\n      result = symbol_searcher.process_query(query)\n      ```\n      \n      ## Limitations\n      \n      `SymbolSearch` relies on the availability of symbols in the `SymbolGraph` and the `SymbolSimilarity` object. If either of these objects doesn't have the necessary data, the search results might be incomplete or incorrect. Moreover, the class assumes a specific format for NLP-formatted queries and raises errors if the input query does not follow the expected format.\n      \n      ## Follow-up Questions:\n      \n      - How can we improve the search performance of the `SymbolSearch` class?\n      \n    Class Docstring:\n      Searches for symbols in a SymbolGraph\n      \n    Methods:\n      def __init__(\n              self,\n              symbol_graph: SymbolGraph,\n              symbol_similarity: SymbolSimilarity,\n              symbol_rank_config: Optional[SymbolRankConfig],\n              code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n              *args,\n              **kwargs,\n          ):\n              \"\"\"\n              Args:\n                  symbol_graph (SymbolGraph): A SymbolGraph\n                  symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                  symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                  code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n              \"\"\"\n      \n              if not code_subgraph:\n                  code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                      kwargs.get(\"flow_rank\", \"bidirectional\")\n                  )\n              else:\n                  if not code_subgraph.parent == symbol_graph:\n                      raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n      \n              graph_symbols = symbol_graph.get_all_available_symbols()\n              embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n              available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n              SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n      \n              # TODO - Do we need to filter the SymbolGraph as well?\n              self.symbol_graph = symbol_graph\n              self.symbol_similarity = symbol_similarity\n              symbol_similarity.set_available_symbols(available_symbols)\n              self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n      \n          \n      def exact_search(self, pattern: str) -> ExactSearchResult:\n              \"\"\"\n              Performs a exact search across the indexed codebase\n      \n              Args:\n                  pattern (str): The pattern to search for\n      \n              Returns:\n                  A dict of paths to files that contain the pattern and corresponding line numbers\n              \"\"\"\n              return SymbolSearch.find_pattern_in_modules(pattern)\n      \n          \n      @staticmethod\n          def filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]):\n              \"\"\"\n              Filters a graph to only contain nodes that are in the available_symbols set\n      \n              Args:\n                  graph: The graph to filter\n                  available_symbols: The set of symbols to keep\n              \"\"\"\n              graph_nodes = deepcopy(graph.nodes())\n              for symbol in graph_nodes:\n                  if symbol not in available_symbols:\n                      graph.remove_node(symbol)\n      \n          \n      @staticmethod\n          def find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]:\n              \"\"\"\n              Finds exact line matches for a given pattern string in all modules\n      \n              Args:\n                  pattern (str): The pattern string to search for\n      \n              Returns:\n                  Dict[str, List[int]]: A dictionary with module paths as keys and a list of line numbers as values\n              \"\"\"\n              matches = {}\n              module_map = LazyModuleTreeMap.cached_default()\n              for module_path, module in module_map.items():\n                  if module:\n                      lines = module.dumps().splitlines()\n                      line_numbers = [i + 1 for i, line in enumerate(lines) if pattern in line.strip()]\n                      if line_numbers:\n                          matches[module_path] = line_numbers\n              return matches\n      \n      def process_query(\n              self, query: str\n          ) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]:\n              \"\"\"\n              Processes an NLP-formatted query and return the results of the appropriate search\n      \n              Args:\n                  query: The query to process\n      \n              Returns:\n                  The results of the search\n              \"\"\"\n              parts = query.split()\n              if len(parts) < 2:\n                  raise ValueError(\n                      \"Invalid NLP query. It must have at least two parts: 'type:...' and 'query...'\"\n                  )\n      \n              search_type = parts[0][len(\"type:\") :].lower()\n              query_remainder = \" \".join(parts[1:])\n      \n              if search_type == \"symbol_references\":\n                  return self.symbol_references(query_remainder)\n              elif search_type == \"symbol_rank\":\n                  return self.symbol_rank_search(query_remainder)\n              elif search_type == \"exact\":\n                  return self.exact_search(query_remainder)\n              elif search_type == \"source\":\n                  return self.retrieve_source_code_by_symbol(query_remainder)\n              else:\n                  raise ValueError(f\"Unknown search type: {search_type}\")\n      \n          \n      def retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult:\n              \"\"\"\n              Finds the raw text of a module, class, method, or standalone function\n      \n              Args:\n                  symbol_uri (str): The symbol to retrieve\n      \n              Returns:\n                  The raw text of the symbol or None if not found\n              \"\"\"\n              node = convert_to_fst_object(parse_symbol(symbol_uri))\n              return str(node) if node else None\n      \n          \n      @staticmethod\n          def shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray:\n              \"\"\"\n              Compute z-score of a list of values\n      \n              Args:\n                  values: List of values to compute z-score for\n      \n              Returns:\n                  List of z-scores\n              \"\"\"\n              if not isinstance(values, np.ndarray):\n                  values = np.array(values)\n      \n              mean = np.mean(values)\n              std_dev = np.std(values)\n              zscores = [(value - mean) / std_dev for value in values]\n              return (zscores - np.min(zscores)) ** 2\n      \n          \n      def symbol_rank_search(self, query: str) -> SymbolRankResult:\n              \"\"\"\n              Fetches the list of the SymbolRank similar symbols ordered by rank\n      \n              Args:\n                  query (str): The query to search for\n      \n              Returns:\n                  A list of tuples of the form (symbol_uri, rank)\n              \"\"\"\n              query_vec = self.symbol_similarity.get_query_similarity_dict(query)\n              transformed_query_vec = SymbolSearch.transform_dict_values(\n                  query_vec, SymbolSearch.shifted_z_score_sq\n              )\n              ranks = self.symbol_rank.get_ranks(query_to_symbol_similarity=transformed_query_vec)\n              return ranks\n      \n          \n      def symbol_references(self, symbol_uri: str) -> SymbolReferencesResult:\n              \"\"\"\n              Gets the list a symbol-based search\n      \n              Args:\n                  symbol_uri (str): The symbol to search for\n      \n              Returns:\n                  A dict of paths to files that contain the\n                      symbol and corresponding line numbers\n              \"\"\"\n              # TODO - Add parsing upstream or here to parse references\n              return self.symbol_graph.get_references_to_symbol(parse_symbol(symbol_uri))\n      \n          \n      @staticmethod\n          def transform_dict_values(\n              dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n          ):\n              \"\"\"\n              Apply a function to each value in a dictionary and return a new dictionary\n      \n              Args:\n                  dictionary: Dictionary to transform\n                  func: Function to apply to each value\n      \n              Returns:\n                  Dictionary with transformed values\n              \"\"\"\n              # Apply the function to the accumulated values\n              transformed_values = func([dictionary[key] for key in dictionary])\n      \n              # Re-distribute the transformed values back into the dictionary\n              transformed_dict = {}\n              for i, key in enumerate(dictionary):\n                  transformed_dict[key] = transformed_values[i]\n              return transformed_dict\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_symbol_search.test_exact_search\n    \n        def test_exact_search(symbol_searcher):\n            with patch(\n                \"automata.core.symbol.search.symbol_search.SymbolSearch.find_pattern_in_modules\",\n                return_value=[\"file1\", \"file2\"],\n            ):\n                result = symbol_searcher.exact_search(\"pattern1\")\n                assert result == [\"file1\", \"file2\"]\n        \n        \n        \n        \n    automata.tests.unit.conftest.symbol_searcher\n    \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n        \n    automata.tests.unit.test_symbol_search.test_process_queries\n    \n        def test_process_queries(symbols, symbol_searcher, symbol_graph_mock):\n            with patch.object(\n                symbol_searcher, \"symbol_references\", return_value=[\"ref1\", \"ref2\"]\n            ) as mock_method_0:\n                result = symbol_searcher.process_query(\"type:symbol_references %s\" % symbols[0].uri)\n                assert result == [\"ref1\", \"ref2\"]\n            mock_method_0.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(symbol_searcher, \"exact_search\", return_value={\"test\": 0}) as mock_method_1:\n                result = symbol_searcher.process_query(\"type:exact %s\" % symbols[0].uri)\n                assert result == {\"test\": 0}\n            mock_method_1.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"retrieve_source_code_by_symbol\", return_value=\"test\"\n            ) as mock_method_2:\n                result = symbol_searcher.process_query(\"type:source %s\" % symbols[0].uri)\n                assert result == \"test\"\n            mock_method_2.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"symbol_rank_search\", return_value=[(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            ) as mock_method_4:\n                result = symbol_searcher.process_query(\"type:symbol_rank %s\" % symbols[0].uri)\n                assert result == [(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            mock_method_4.assert_called_once_with(symbols[0].uri)\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"invalid_query\")\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"type:unknown query\")\n        \n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.parser.SymbolParser\n    \n        SymbolParser is a class that enables parsing URIs into structured objects, such as `Symbol`. Although it is not fully in sync with the Go version found in Sourcegraph's SCIP repository, it retains acceptable functionality. The class has methods to accept and parse various parts of symbol strings, including identifiers and namespaces. Limitations include possible difficulties in parsing symbols that the Go version can handle. An example of using the `parse_symbol` function to create a `Symbol` object from a symbol URI string is provided, although future improvements to better handle parsing limitations may be necessary.\n        \n      Class Docstring:\n        Translation of the logic defined in\n        https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n        to parse URIs into structured objects.\n        It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n        \n      Methods:\n        def __init__(self, symbol: str):\n                \"\"\"\n                Args:\n                    symbol (str): The symbol URI to parse\n                \"\"\"\n                self.symbol = symbol\n                self.index = 0\n                self.symbol_str = symbol\n        \n            \n        accept_backtick_escaped_identifier(self, what: str) -> str\n        \n        accept_character(self, r: str, what: str) -> None\n        \n        accept_escaped_identifier(self, what: str, escape_character: str) -> str\n        \n        accept_identifier(self, what: str) -> str\n        \n        accept_space_escaped_identifier(self, what: str) -> str\n        \n        current(self) -> str\n        \n        error(self, message: str) -> ValueError\n        \n        is_identifier_character(c: str) -> bool\n        \n        parse_descriptor(self) -> SymbolDescriptor\n        \n        parse_descriptors(self) -> List[SymbolDescriptor]\n        \n        peek_next(self) -> Optional[str]\n        \n    automata.tests.unit.test_symbol_search.test_retrieve_source_code_by_symbol\n    \n        def test_retrieve_source_code_by_symbol(symbols, symbol_searcher):\n            with patch(\n                \"automata.core.symbol.search.symbol_search.convert_to_fst_object\",\n                return_value=\"module1\",\n            ) as mock_method:\n                result = symbol_searcher.retrieve_source_code_by_symbol(symbols[0].uri)\n                assert result == \"module1\"\n            mock_method.assert_called_once_with(symbols[0])\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata.tests.unit.test_database_vector.test_lookup_symbol\n    \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.embedding.symbol_similarity.SymbolSimilarity.get_query_similarity_dict\n    \n      Class Docstring:\n        Get the similarity scores of all symbols for the query_text\n        \n        Args:\n        query_text (str): The query text\n        \n        Returns:\n        A dictionary mapping each symbol's uri to its similarity score with the query\n        \n      Methods:\n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n    automata.core.symbol.graph.SymbolGraph.get_all_available_symbols\n    \n      Class Docstring:\n        Gets all symbols defined in the graph.\n        \n        Args:\n        None\n        Returns:\n        List[Symbol]: List of all defined symbols.\n        \n      Methods:\n        get_all_available_symbols(self) -> List[Symbol]\n        \n    automata.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata.core.symbol.graph.SymbolGraph.SubGraph\n    \n        `SymbolGraph.SubGraph` is a data class designed to maintain and analyze subgraphs of a `SymbolGraph`. It contains a `parent` attribute to track the parent `SymbolGraph` instance and a `graph` attribute representing the actual subgraph with nodes and edges. The class offers a convenient way to encapsulate subgraphs for further analysis, connecting it closely to the `SymbolGraph` class and related methods. However, its main limitation is that it must be created from a `SymbolGraph` instance, requiring the extraction of the desired subgraph from an existing `SymbolGraph`.\n        \n    automata.core.embedding.symbol_similarity.SymbolSimilarity.set_available_symbols\n    \n      Class Docstring:\n        Set the available symbols to use for similarity calculation\n        \n        Args:\n        available_symbols (Set[Symbol]): The available symbols to\n        use for similarity calculation\n        \n      Methods:\n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.items\n    \n      Class Docstring:\n        Returns:\n        A dictionary containing the module dotpath to module RedBaron FST object mapping\n        \n      Methods:\n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n    automata.core.symbol.search.rank.SymbolRank.get_ranks\n    \n      Class Docstring:\n        Calculate the SymbolRanks of each node in the graph\n        \n        Args:\n        query_to_symbol_similarity (Optional[Dict[Symbol, float]]):\n        query_to_symbol_similarity dictionary\n        initial_weights (Optional[Dict[Symbol, float]]): Initial weights dictionary\n        dangling (Optional[Dict[Symbol, float]]): List of dangling nodes\n        \n        Returns:\n        (Dict[str, float]): A dictionary mapping each node to its SymbolRank\n        \n      Methods:\n        get_ranks(self,\n                query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n                initial_weights: Optional[Dict[Symbol, float]] = None,\n                dangling: Optional[Dict[Symbol, float]] = None,\n            ) -> List[Tuple[Symbol, float]]\n        \n    automata.core.symbol.search.rank.SymbolRankConfig\n    \n        class SymbolRankConfig(BaseModel):\n            \"\"\"A configuration class for SymbolRank\"\"\"\n        \n            alpha: float = 0.25\n            max_iterations: int = 100\n            tolerance: float = 1.0e-6\n            weight_key: str = \"weight\"\n        \n            @classmethod\n            def validate(cls, config):\n                \"\"\"\n                Validate configuration parameters.\n        \n                Args:\n                    config (SymbolRankConfig): Configuration parameters.\n        \n                Raises:\n                    ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n                \"\"\"\n                if not 0 < config.alpha < 1:\n                    raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n        \n                if not 1.0e-8 < config.tolerance < 1.0e-4:\n                    raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n        \n        \n        \n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n        The `LazyModuleTreeMap` class is a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching the modules in memory as they are accessed. It provides methods for fetching existing module dotpaths and filepaths, as well as fetching, putting, and updating modules by their dotpaths. However, it assumes a specific directory structure according to the `DotPathMap` class and does not support custom directory structures for modules.\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.utils import root_fpath\n        \n        path_to_root = root_fpath()\n        module_tree_map = LazyModuleTreeMap(path_to_root)\n        \n        # Fetch an existing module by its dotpath\n        module_dotpath = \"automata.core.agent.automata_agent\"\n        module = module_tree_map.fetch_module(module_dotpath)\n        \n        # Check if a module with the given dotpath exists\n        exists = module_dotpath in module_tree_map\n        ```\n        \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/Symbol#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "Symbol", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# Symbol\n\n`Symbol` is a class that identifies a class, method, or local variable in a package. It works similarly to a URI and includes rich metadata such as the docstring. It has a standardized string representation that can be used interchangeably with `Symbol`. The syntax and examples of `Symbol` can be found below.\n\n## Overview\n\n`Symbol` identifies a class, method, or local variable and includes rich metadata. It has a standardized string representation that can be used interchangeably with `Symbol`. `Symbol` instances can be created from string representations and can be compared with one another. Each `Symbol` instance comes with utility methods for parsing, creating, and querying symbolic data. Related symbols include those within embedding, graph, and parser modules.\n\n## Related Symbols\n\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.tests.unit.test_symbol_parser.test_parse_symbol`\n- `automata.core.symbol.parser.parse_symbol`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.tests.unit.test_database_vector.test_delete_symbol`\n- `automata.tests.unit.test_database_vector.test_lookup_symbol`\n- `automata.tests.unit.test_symbol_parser.test_is_local_symbol`\n- `automata.tests.unit.test_symbol_graph.test_get_all_symbols`\n- `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n\n## Example\n\nThe following examples demonstrate how to create an instance of `Symbol` using the `parse_symbol` function.\n\n```python\nfrom automata.core.symbol.parser import parse_symbol\n\nsymbol_class = parse_symbol(\n    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n)\n\nsymbol_method = parse_symbol(\n    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n)\n```\n\n## Limitations\n\n`Symbol` assumes specific syntax when parsing string representations and can only handle specific symbol types. It does not support custom symbol types or variations in syntax.\n\n## Follow-up Questions:\n\n- How can we extend `Symbol` to support custom symbol types and variations in syntax?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 198}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass Symbol:\n    \"\"\"\n    Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n\n    Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n\n    # (<x>)+ stands for one or more repetitions of <x>\n    <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n    <package>              ::= <manager> ' ' <package-name> ' ' <version>\n    <scheme>               ::= any UTF-8, escape spaces with double space.\n    <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n    <package-name>         ::= same as above\n    <version>              ::= same as above\n    <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n    <namespace>            ::= <name> '/'\n    <type>                 ::= <name> '#'\n    <term>                 ::= <name> '.'\n    <meta>                 ::= <name> ':'\n    <macro>                ::= <name> '!'\n    <method>               ::= <name> '(' <method-disambiguator> ').'\n    <type-parameter>       ::= '[' <name> ']'\n    <parameter>            ::= '(' <name> ')'\n    <name>                 ::= <identifier>\n    <method-disambiguator> ::= <simple-identifier>\n    <identifier>           ::= <simple-identifier> | <escaped-identifier>\n    <simple-identifier>    ::= (<identifier-character>)+\n    <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n    <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n    <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n\n    Examples -\n    from automata.core.symbol.search.symbol_parser import parse_symbol\n\n    symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n    )\n\n    symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n    )\n    \"\"\"\n\n    uri: str\n    scheme: str\n    package: SymbolPackage\n    descriptors: Tuple[SymbolDescriptor, ...]\n\n    def __repr__(self) -> str:\n        \"\"\"Converts back into URI string\"\"\"\n        return f\"Symbol({self.uri}, {self.scheme}, {self.package}, {self.descriptors})\"\n\n    def __hash__(self) -> int:\n        \"\"\"Hashes the URI string\"\"\"\n        return hash(self.uri)\n\n    def __eq__(self, other):\n        \"\"\"Compares the URI string\"\"\"\n        if isinstance(other, Symbol):\n            return self.uri == other.uri\n        elif isinstance(other, str):\n            return self.uri == other\n        return False\n\n    def symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind:\n        \"\"\"Converts the suffix of the URI into a PyKind\"\"\"\n        return SymbolDescriptor.convert_scip_to_python_suffix(self.symbol_raw_kind_by_suffix())\n\n    def symbol_raw_kind_by_suffix(self) -> DescriptorProto:\n        \"\"\"Converts the suffix of the URI into a DescriptorProto\"\"\"\n        if self.uri.startswith(\"local\"):\n            return SymbolDescriptor.ScipSuffix.Local\n        if self.uri.endswith(\"/\"):\n            return SymbolDescriptor.ScipSuffix.Namespace\n        elif self.uri.endswith(\"#\"):\n            return SymbolDescriptor.ScipSuffix.Type\n        elif self.uri.endswith(\").\"):\n            return SymbolDescriptor.ScipSuffix.Method\n        elif self.uri.endswith(\".\"):\n            return SymbolDescriptor.ScipSuffix.Term\n        elif self.uri.endswith(\":\"):\n            return SymbolDescriptor.ScipSuffix.Meta\n        elif self.uri.endswith(\")\"):\n            return SymbolDescriptor.ScipSuffix.Parameter\n        elif self.uri.endswith(\"]\"):\n            return SymbolDescriptor.ScipSuffix.TypeParameter\n        else:\n            raise ValueError(f\"Invalid descriptor suffix: {self.uri}\")\n\n    def parent(self) -> \"Symbol\":\n        \"\"\"Returns the parent symbol of the current symbol\"\"\"\n        parent_descriptors = list(self.descriptors)[:-1]\n        return Symbol(self.uri, self.scheme, self.package, tuple(parent_descriptors))\n\n    @property\n    def dotpath(self) -> str:\n        \"\"\"Returns the dotpath of the symbol\"\"\"\n        return \".\".join([ele.name for ele in self.descriptors])\n\n    @property\n    def module_name(self) -> str:\n        \"\"\"Returns the module name of the symbol\"\"\"\n        return self.descriptors[0].name\n\n    @staticmethod\n    def is_local(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is local\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Local\n\n    @staticmethod\n    def is_meta(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is meta\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Meta\n\n    @staticmethod\n    def is_parameter(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is parameter\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Parameter\n\n    @staticmethod\n    def is_protobuf(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is a protobuf symbol\"\"\"\n        return symbol.module_name.endswith(\"pb2\")\n\n    @classmethod\n    def from_string(cls, symbol_str: str) -> \"Symbol\":\n        \"\"\"\n        Creates a Symbol instance from a string representation\n\n        :param symbol_str: The string representation of the Symbol\n        :return: A Symbol instance\n        \"\"\"\n        # Assuming symbol_str is in the format: \"Symbol({uri}, {scheme}, Package({manager} {name} {version}), [{Descriptor},...])\"\n        # Parse the symbol_str to extract the uri, scheme, package_str, and descriptors_str\n        match = re.search(r\"Symbol\\((.*?), (.*?), Package\\((.*?)\\), \\((.*?)\\)\\)\", symbol_str)\n        if not match:\n            raise ValueError(f\"Invalid symbol_str: {symbol_str}\")\n        uri, _, __, ___ = match.groups()\n        # In current implementation, only the uri is used in re-construcing the symbol\n        from automata.core.symbol.parser import parse_symbol\n\n        return parse_symbol(uri)\n\n\n", "summary": "`Symbol` is a class used to identify and store metadata about a class, method, or local variable in a package, similar to a URI. It has a standardized string representation that can be used interchangeably with `Symbol`. Instances of `Symbol` can be created from string representations, compared with other instances, and contain utility methods for parsing, creating, and querying symbolic data. However, `Symbol` has limitations in handling specific symbol types and syntax variations.\n\nHere is an example of creating an instance of `Symbol` using the `parse_symbol` function:\n\n```python\nfrom automata.core.symbol.parser import parse_symbol\n\nsymbol_class = parse_symbol(\n    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n)\n\nsymbol_method = parse_symbol(\n    \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n)\n```", "context": "\n    Generate the documentation for Symbol using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.Symbol -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # Symbol\n      \n      `Symbol` is a class that identifies a class, method, or local variable in a package. It works similarly to a URI and includes rich metadata such as the docstring. It has a standardized string representation that can be used interchangeably with Symbol. The syntax and examples of Symbol can be found below.\n      \n      ## Overview\n      \n      `Symbol` identifies a class, method, or local variable and includes rich metadata. It has a standardized string representation that can be used interchangeably with Symbol. `Symbol` instances can be created from string representations and can be compared with one another. Each `Symbol` instance comes with utility methods for parsing, creating, and querying symbolic data. Related symbols include those within embedding, graph, and parser modules.\n      \n      ## Related Symbols\n      \n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.tests.unit.test_symbol_parser.test_parse_symbol`\n      - `automata.core.symbol.parser.parse_symbol`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      - `automata.tests.unit.test_database_vector.test_delete_symbol`\n      - `automata.tests.unit.test_database_vector.test_lookup_symbol`\n      - `automata.tests.unit.test_symbol_parser.test_is_local_symbol`\n      - `automata.tests.unit.test_symbol_graph.test_get_all_symbols`\n      - `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n      \n      ## Example\n      \n      The following examples demonstrate how to create an instance of `Symbol` using the `parse_symbol` function.\n      \n      ```python\n      from automata.core.symbol.search.symbol_parser import parse_symbol\n      \n      symbol_class = parse_symbol(\n          \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n      )\n      \n      symbol_method = parse_symbol(\n          \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n      )\n      ```\n      \n      ## Limitations\n      \n      `Symbol` assumes specific syntax when parsing string representations, and it can only handle specific symbol types. It does not support custom symbol types or variations in syntax.\n      \n      ## Follow-up Questions:\n      \n      - How can we extend Symbol to support custom symbol types and variations in syntax?\n      \n    Class Docstring:\n      Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n      \n      Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n      \n      # (<x>)+ stands for one or more repetitions of <x>\n      <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n      <package>              ::= <manager> ' ' <package-name> ' ' <version>\n      <scheme>               ::= any UTF-8, escape spaces with double space.\n      <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n      <package-name>         ::= same as above\n      <version>              ::= same as above\n      <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n      <namespace>            ::= <name> '/'\n      <type>                 ::= <name> '#'\n      <term>                 ::= <name> '.'\n      <meta>                 ::= <name> ':'\n      <macro>                ::= <name> '!'\n      <method>               ::= <name> '(' <method-disambiguator> ').'\n      <type-parameter>       ::= '[' <name> ']'\n      <parameter>            ::= '(' <name> ')'\n      <name>                 ::= <identifier>\n      <method-disambiguator> ::= <simple-identifier>\n      <identifier>           ::= <simple-identifier> | <escaped-identifier>\n      <simple-identifier>    ::= (<identifier-character>)+\n      <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n      <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n      <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n      \n      Examples -\n      from automata.core.symbol.search.symbol_parser import parse_symbol\n      \n      symbol_class = parse_symbol(\n      \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n      )\n      \n      symbol_method = parse_symbol(\n      \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n      )\n      \n    Methods:\n      def __eq__(self, other):\n              \"\"\"Compares the URI string\"\"\"\n              if isinstance(other, Symbol):\n                  return self.uri == other.uri\n              elif isinstance(other, str):\n                  return self.uri == other\n              return False\n      \n          \n      def __hash__(self) -> int:\n              \"\"\"Hashes the URI string\"\"\"\n              return hash(self.uri)\n      \n          \n      def __repr__(self) -> str:\n              \"\"\"Converts back into URI string\"\"\"\n              return f\"Symbol({self.uri}, {self.scheme}, {self.package}, {self.descriptors})\"\n      \n          \n      @property\n          def dotpath(self) -> str:\n              \"\"\"Returns the dotpath of the symbol\"\"\"\n              return \".\".join([ele.name for ele in self.descriptors])\n      \n          \n      @classmethod\n          def from_string(cls, symbol_str: str) -> \"Symbol\":\n              \"\"\"\n              Creates a Symbol instance from a string representation\n      \n              :param symbol_str: The string representation of the Symbol\n              :return: A Symbol instance\n              \"\"\"\n              # Assuming symbol_str is in the format: \"Symbol({uri}, {scheme}, Package({manager} {name} {version}), [{Descriptor},...])\"\n              # Parse the symbol_str to extract the uri, scheme, package_str, and descriptors_str\n              match = re.search(r\"Symbol\\((.*?), (.*?), Package\\((.*?)\\), \\((.*?)\\)\\)\", symbol_str)\n              if not match:\n                  raise ValueError(f\"Invalid symbol_str: {symbol_str}\")\n              uri, _, __, ___ = match.groups()\n              # In current implementation, only the uri is used in re-construcing the symbol\n              from automata.core.symbol.parser import parse_symbol\n      \n              return parse_symbol(uri)\n      \n      \n      \n      @staticmethod\n          def is_local(symbol: \"Symbol\") -> bool:\n              \"\"\"Returns True if the symbol is local\"\"\"\n              return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Local\n      \n          \n      @staticmethod\n          def is_meta(symbol: \"Symbol\") -> bool:\n              \"\"\"Returns True if the symbol is meta\"\"\"\n              return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Meta\n      \n          \n      @staticmethod\n          def is_parameter(symbol: \"Symbol\") -> bool:\n              \"\"\"Returns True if the symbol is parameter\"\"\"\n              return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Parameter\n      \n          \n      @staticmethod\n          def is_protobuf(symbol: \"Symbol\") -> bool:\n              \"\"\"Returns True if the symbol is a protobuf symbol\"\"\"\n              return symbol.module_name.endswith(\"pb2\")\n      \n          \n      @property\n          def module_name(self) -> str:\n              \"\"\"Returns the module name of the symbol\"\"\"\n              return self.descriptors[0].name\n      \n          \n      def parent(self) -> \"Symbol\":\n              \"\"\"Returns the parent symbol of the current symbol\"\"\"\n              parent_descriptors = list(self.descriptors)[:-1]\n              return Symbol(self.uri, self.scheme, self.package, tuple(parent_descriptors))\n      \n          \n      def symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind:\n              \"\"\"Converts the suffix of the URI into a PyKind\"\"\"\n              return SymbolDescriptor.convert_scip_to_python_suffix(self.symbol_raw_kind_by_suffix())\n      \n          \n      def symbol_raw_kind_by_suffix(self) -> DescriptorProto:\n              \"\"\"Converts the suffix of the URI into a DescriptorProto\"\"\"\n              if self.uri.startswith(\"local\"):\n                  return SymbolDescriptor.ScipSuffix.Local\n              if self.uri.endswith(\"/\"):\n                  return SymbolDescriptor.ScipSuffix.Namespace\n              elif self.uri.endswith(\"#\"):\n                  return SymbolDescriptor.ScipSuffix.Type\n              elif self.uri.endswith(\").\"):\n                  return SymbolDescriptor.ScipSuffix.Method\n              elif self.uri.endswith(\".\"):\n                  return SymbolDescriptor.ScipSuffix.Term\n              elif self.uri.endswith(\":\"):\n                  return SymbolDescriptor.ScipSuffix.Meta\n              elif self.uri.endswith(\")\"):\n                  return SymbolDescriptor.ScipSuffix.Parameter\n              elif self.uri.endswith(\"]\"):\n                  return SymbolDescriptor.ScipSuffix.TypeParameter\n              else:\n                  raise ValueError(f\"Invalid descriptor suffix: {self.uri}\")\n      \n          \n  Building context for related symbols -\n  \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.tests.unit.test_symbol_parser.test_parse_symbol\n    \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n        \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.tests.unit.test_database_vector.test_delete_symbol\n    \n        def test_delete_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol)\n            vector_db.discard(symbol)\n        \n        \n        \n        \n    automata.tests.unit.test_database_vector.test_lookup_symbol\n    \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n        \n    automata.tests.unit.test_symbol_parser.test_is_local_symbol\n    \n        def test_is_local_symbol(symbols):\n            for symbol in symbols:\n                assert is_local_symbol(\"local \" + symbol.uri)\n        \n        \n        \n        \n    automata.tests.unit.test_symbol_graph.test_get_all_symbols\n    \n        def test_get_all_symbols(symbol_graph):\n            graph_symbols = symbol_graph.get_all_available_symbols()\n            assert isinstance(graph_symbols, list)\n            assert all(isinstance(s, Symbol) for s in graph_symbols)\n        \n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/SymbolCodeEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolCodeEmbedding", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolCodeEmbedding\n\n`SymbolCodeEmbedding` is a class that represents code embeddings for a given symbol. It is an extension of the `SymbolEmbedding` base class and is primarily used to store and handle code embeddings of symbols in a given codebase.\n\n## Overview\n\n`SymbolCodeEmbedding` is an extension of the `SymbolEmbedding` abstract base class. It is a class used to store the code embeddings for a given symbol, along with the symbol object, the source code, and the embedding vector. It comes with an initializer method that takes the symbol object, source code, and a vector as arguments.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.symbol.symbol_types.SymbolEmbedding`\n- `automata.core.symbol.scip_pb2.Descriptor as DescriptorProto`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolCodeEmbedding`.\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolCodeEmbedding\nfrom automata.core.symbol.parser import parse_symbol\nimport numpy as np\n\nsymbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = parse_symbol(symbol_str)\nsource_code = \"def example_function():\\n    pass\"\nvector = np.random.random((300,))\n\nembedding = SymbolCodeEmbedding(symbol, source_code, vector)\n```\n\n## Limitations\n\n`SymbolCodeEmbedding` is primarily a container for symbol code embeddings, and it does not include functionality for generating or handling embeddings on its own. To generate and manage symbol code embeddings, the `SymbolCodeEmbeddingHandler` class should be used.\n\n## Follow-up Questions:\n\n- Can we implement a method in `SymbolCodeEmbedding` to generate the code embeddings for the given source code?\n\n## Class Details\n\n- Embedding for symbol code\n\n### Methods\n\n- `__init__(self, symbol: Symbol, source_code: str, vector: np.array)`: Constructor for the SymbolCodeEmbedding class that initializes the instance with the provided symbol, source code, and vector.", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 198}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolCodeEmbedding(SymbolEmbedding):\n    \"\"\"Embedding for symbol code\"\"\"\n\n    def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n        super().__init__(symbol, source_code, vector)\n\n\n", "summary": "`SymbolCodeEmbedding` is a class extending the `SymbolEmbedding` base class and is used for storing and handling code embeddings of symbols in a given codebase. It takes in a symbol object, source code, and an embedding vector as arguments and stores the data along with the symbol object and the source code. It serves as a container for symbol code embeddings but does not include functionality for generating or handling embeddings on its own. To achieve these functionalities, the `SymbolCodeEmbeddingHandler` class should be used. \n\nHere's an example of how to create an instance of `SymbolCodeEmbedding`:\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolCodeEmbedding\nfrom automata.core.symbol.parser import parse_symbol\nimport numpy as np\n\nsymbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = parse_symbol(symbol_str)\nsource_code = \"def example_function():\\n    pass\"\nvector = np.random.random((300,))\n\nembedding = SymbolCodeEmbedding(symbol, source_code, vector)\n```", "context": "\n    Generate the documentation for SymbolCodeEmbedding using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.SymbolCodeEmbedding -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # SymbolCodeEmbedding\n      \n      `SymbolCodeEmbedding` is a class that represents code embeddings for a given symbol. It is an extension of the `SymbolEmbedding` base class and is primarily used to store and handle code embeddings of symbols in a given codebase.\n      \n      ## Overview\n      \n      `SymbolCodeEmbedding` is an extension of the `SymbolEmbedding` abstract base class. It is a class used to store the code embeddings for a given symbol, along with the symbol object, the source code, and the embedding vector. It comes with an initializer method that takes the symbol object, source code, and a vector as arguments.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.symbol.symbol_types.SymbolEmbedding`\n      - `automata.core.symbol.scip_pb2.Descriptor as DescriptorProto`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `SymbolCodeEmbedding`.\n      \n      ```python\n      from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n      from automata.core.symbol.parser import parse_symbol\n      import numpy as np\n      \n      symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n      symbol = parse_symbol(symbol_str)\n      source_code = \"def example_function():\\n    pass\"\n      vector = np.random.random((300,))\n      \n      embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n      ```\n      \n      ## Limitations\n      \n      `SymbolCodeEmbedding` is primarily a container for symbol code embeddings, and it does not include functionality for generating or handling embeddings on its own. To generate and manage symbol code embeddings, the `SymbolCodeEmbeddingHandler` class should be used.\n      \n      ## Follow-up Questions:\n      \n      - Can we implement a method in `SymbolCodeEmbedding` to generate the code embeddings for the given source code?\n      \n    Class Docstring:\n      Embedding for symbol code\n      \n    Methods:\n      def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n              super().__init__(symbol, source_code, vector)\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolDocEmbedding\n    \n        `SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class with added metadata such as source code, summary, and context. This class is utilized alongside `SymbolDocEmbeddingHandler` to manage and access these embeddings for tasks like search and similarity comparison. However, it relies on external handler classes and assumes embeddings are provided as NumPy arrays, potentially limiting usage for other embedding types.\n        \n        ```python\n        import numpy as np\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.symbol.symbol_types import SymbolDocEmbedding\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = Symbol.from_string(symbol_str)\n        \n        document = \"This is a sample document\"\n        vector = np.array([0.1, 0.2, 0.3])\n        source_code = \"class ActionIndicator(Enum): ...\"\n        summary = \"This class represents an enum for action indicators.\"\n        context = \"The ActionIndicator enum is used to describe the current state...\"\n        \n        embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                document: str,\n                vector: np.array,\n                source_code: Optional[str] = None,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, document, vector)\n                # begin additional meta data\n                self.source_code = source_code\n                self.summary = summary\n                self.context = context\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata.core.embedding.embedding_types.SymbolEmbeddingHandler\n    \n        `SymbolEmbeddingHandler` is an abstract class that manages symbol embeddings by fetching and updating the vector embeddings related to various kinds of symbols. It must be subclassed by other classes that provide implementations of the defined abstract methods, such as `get_embedding()` and `update_embedding()`. The performance of these methods may depend on the chosen embedding provider and database used for storing the embeddings.\n        \n        Here is an example of how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n        \n        ```python\n        from automata.core.embedding.embedding_types import SymbolEmbeddingHandler\n        from automata.core.symbol.symbol_types import Symbol\n        \n        class CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n            def __init__(self, embedding_db, embedding_provider):\n                super().__init__(embedding_db, embedding_provider)\n        \n            def get_embedding(self, symbol: Symbol):\n                # Implement logic to get the embedding for a custom symbol\n                pass\n        \n            def update_embedding(self, symbol: Symbol):\n                # Implement logic to update the embedding for a custom symbol\n                pass\n        \n        # Example usage:\n        custom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\n        custom_embedding = custom_handler.get_embedding(custom_symbol)\n        ```\n        \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider\n        \n            \n        get_embedding(self, symbol: Symbol) -> Any\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata.core.symbol.symbol_types.SymbolEmbedding.__init__\n    \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/SymbolDescriptor#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDescriptor", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolDescriptor\n\n`SymbolDescriptor` is a class that wraps the descriptor component of the URI into a Python object. It represents different symbols of a URI such as local, namespace, type, method, term, macro, parameter, and type-parameter. The `SymbolDescriptor` class provides methods to convert the descriptor suffix from the URI representation to a Python representation, extract the escaped name from a given string, and represent the object as a URI string.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.parser.SymbolParser.parse_descriptor`\n- `automata.core.symbol.parser.SymbolParser.parse_descriptors`\n- `automata.core.symbol.parser.parse_symbol`\n- `automata.core.symbol.symbol_types.Symbol.dotpath`\n- `automata.core.symbol.symbol_types.Symbol.is_local`\n- `automata.core.symbol.symbol_types.Symbol.is_meta`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `SymbolDescriptor` using a name, suffix, and an optional disambiguator.\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolDescriptor\nfrom automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n\nname = \"example_descriptor\"\nsuffix = DescriptorProto.Type\ndisambiguator = \"example_disambiguator\"\n\ndescriptor = SymbolDescriptor(name, suffix, disambiguator)\n```\n\n## Limitations\n\n`SymbolDescriptor` relies on the specific structure of the URI representation and assumes a specific format for the descriptor suffix. As a result, it may not support handling custom URI representations or descriptors that do not follow the predefined format and structure.\n\n## Follow-up Questions:\n\n- Is there a way to update `SymbolDescriptor` to handle custom URI representations or descriptors that do not follow the predefined format?\n- Are there any precautions that need to be taken when using `SymbolDescriptor`, e.g., ensuring a correct format for the descriptor suffix and disambiguator?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 198}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDescriptor:\n    \"\"\"\n    Wraps the descriptor component of the URI into a python object\n    \"\"\"\n\n    ScipSuffix = DescriptorProto\n\n    class PyKind(Enum):\n        Local = \"local\"\n        Module = \"module\"\n        Class = \"class\"\n        Method = \"method\"\n        Value = \"value\"\n        Meta = \"meta\"\n        Macro = \"macro\"\n        Parameter = \"parameter\"\n        TypeParameter = \"type_parameter\"\n\n    def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n        self.name = name\n        self.suffix = suffix\n        self.disambiguator = disambiguator\n\n    def __repr__(self):\n        return f\"Descriptor({self.name}, {self.suffix}\" + (\n            f\", {self.disambiguator})\" if self.disambiguator else \")\"\n        )\n\n    def unparse(self):\n        \"\"\"Converts back into URI string\"\"\"\n        escaped_name = SymbolDescriptor.get_escaped_name(self.name)\n        if self.suffix == SymbolDescriptor.ScipSuffix.Namespace:\n            return f\"{escaped_name}/\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Type:\n            return f\"{escaped_name}#\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Term:\n            return f\"{escaped_name}.\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Meta:\n            return f\"{escaped_name}:\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Method:\n            return f\"{escaped_name}({self.disambiguator}).\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Parameter:\n            return f\"({escaped_name})\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n            return f\"[{escaped_name}]\"\n        else:\n            raise ValueError(f\"Invalid descriptor suffix: {self.suffix}\")\n\n    @staticmethod\n    def get_escaped_name(name):\n        def is_simple_identifier(name):\n            return re.match(r\"^[\\w$+-]+$\", name) is not None\n\n        if not name:\n            return \"\"\n        if is_simple_identifier(name):\n            return name\n        return \"`\" + re.sub(\"`\", \"``\", name) + \"`\"\n\n    @staticmethod\n    def convert_scip_to_python_suffix(\n        descriptor_suffix: DescriptorProto,\n    ) -> PyKind:\n        if descriptor_suffix == SymbolDescriptor.ScipSuffix.Local:\n            return SymbolDescriptor.PyKind.Local\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Namespace:\n            return SymbolDescriptor.PyKind.Module\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Type:\n            return SymbolDescriptor.PyKind.Class\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Method:\n            return SymbolDescriptor.PyKind.Method\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Term:\n            return SymbolDescriptor.PyKind.Value\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Macro:\n            return SymbolDescriptor.PyKind.Macro\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Parameter:\n            return SymbolDescriptor.PyKind.Parameter\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n            return SymbolDescriptor.PyKind.TypeParameter\n\n        else:\n            return SymbolDescriptor.PyKind.Meta\n\n\n", "summary": "`SymbolDescriptor` is a Python class that encapsulates the descriptor component of a URI, representing various URI symbols like local, namespace, type, method, term, macro, parameter, and type-parameter. This class offers methods to convert a descriptor suffix from URI to Python representation, extract an escaped name from a string, and represent the object as a URI string. However, it may not support custom URI representations or descriptors that diverge from the predetermined format. An example of creating a `SymbolDescriptor` instance is shown below:\n```python\nfrom automata.core.symbol.symbol_types import SymbolDescriptor\nfrom automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n\nname = \"example_descriptor\"\nsuffix = DescriptorProto.Type\ndisambiguator = \"example_disambiguator\"\n\ndescriptor = SymbolDescriptor(name, suffix, disambiguator)\n```\n", "context": "\n    Generate the documentation for SymbolDescriptor using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.SymbolDescriptor -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # SymbolDescriptor\n      \n      `SymbolDescriptor` is a class that wraps the descriptor component of the URI into a Python object. It represents different symbols of a URI such as local, namespace, type, method, term, macro, parameter, and type-parameter. The `SymbolDescriptor` class provides methods to convert the descriptor suffix from the URI representation to a Python representation, extract the escaped name from a given string, and represent the object as a URI string.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.parser.SymbolParser.parse_descriptor`\n      - `automata.core.symbol.parser.SymbolParser.parse_descriptors`\n      - `automata.core.symbol.parser.parse_symbol`\n      - `automata.core.symbol.symbol_types.Symbol.dotpath`\n      - `automata.core.symbol.symbol_types.Symbol.is_local`\n      - `automata.core.symbol.symbol_types.Symbol.is_meta`\n      \n      ## Example\n      \n      The following is an example demonstrating how to create an instance of `SymbolDescriptor` using a name, suffix, and an optional disambiguator.\n      \n      ```python\n      from automata.core.symbol.symbol_types import SymbolDescriptor\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      \n      name = \"example_descriptor\"\n      suffix = DescriptorProto.Type\n      disambiguator = \"example_disambiguator\"\n      \n      descriptor = SymbolDescriptor(name, suffix, disambiguator)\n      ```\n      \n      ## Limitations\n      \n      `SymbolDescriptor` relies on the specific structure of the URI representation and assumes a specific format for the descriptor suffix. As a result, it may not support handling custom URI representations or descriptors that do not follow the predefined format and structure.\n      \n      ## Follow-up Questions:\n      \n      - Is there a way to update `SymbolDescriptor` to handle custom URI representations or descriptors that do not follow the predefined format?\n      - Are there any precautions that need to be taken when using `SymbolDescriptor`, e.g., ensuring a correct format for the descriptor suffix and disambiguator?\n      \n    Class Docstring:\n      Wraps the descriptor component of the URI into a python object\n      \n    Methods:\n      def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n              self.name = name\n              self.suffix = suffix\n              self.disambiguator = disambiguator\n      \n          \n      def __repr__(self):\n              return f\"Descriptor({self.name}, {self.suffix}\" + (\n                  f\", {self.disambiguator})\" if self.disambiguator else \")\"\n              )\n      \n          \n      @staticmethod\n          def convert_scip_to_python_suffix(\n              descriptor_suffix: DescriptorProto,\n          ) -> PyKind:\n              if descriptor_suffix == SymbolDescriptor.ScipSuffix.Local:\n                  return SymbolDescriptor.PyKind.Local\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Namespace:\n                  return SymbolDescriptor.PyKind.Module\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Type:\n                  return SymbolDescriptor.PyKind.Class\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Method:\n                  return SymbolDescriptor.PyKind.Method\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Term:\n                  return SymbolDescriptor.PyKind.Value\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Macro:\n                  return SymbolDescriptor.PyKind.Macro\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Parameter:\n                  return SymbolDescriptor.PyKind.Parameter\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n                  return SymbolDescriptor.PyKind.TypeParameter\n      \n              else:\n                  return SymbolDescriptor.PyKind.Meta\n      \n      \n      \n      @staticmethod\n          def get_escaped_name(name):\n              def is_simple_identifier(name):\n                  return re.match(r\"^[\\w$+-]+$\", name) is not None\n      \n              if not name:\n                  return \"\"\n              if is_simple_identifier(name):\n                  return name\n              return \"`\" + re.sub(\"`\", \"``\", name) + \"`\"\n      \n          \n      def is_simple_identifier(name):\n                  return re.match(r\"^[\\w$+-]+$\", name) is not None\n      \n              \n      def unparse(self):\n              \"\"\"Converts back into URI string\"\"\"\n              escaped_name = SymbolDescriptor.get_escaped_name(self.name)\n              if self.suffix == SymbolDescriptor.ScipSuffix.Namespace:\n                  return f\"{escaped_name}/\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Type:\n                  return f\"{escaped_name}#\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Term:\n                  return f\"{escaped_name}.\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Meta:\n                  return f\"{escaped_name}:\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Method:\n                  return f\"{escaped_name}({self.disambiguator}).\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Parameter:\n                  return f\"({escaped_name})\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n                  return f\"[{escaped_name}]\"\n              else:\n                  raise ValueError(f\"Invalid descriptor suffix: {self.suffix}\")\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.parser.SymbolParser.parse_descriptor\n    \n      Class Docstring:\n        Parse a single descriptor in the symbol\n        \n        Returns:\n        SymbolDescriptor - The descriptor in the symbol\n        \n      Methods:\n        parse_descriptor(self) -> SymbolDescriptor\n        \n    automata.core.symbol.parser.SymbolParser.parse_descriptors\n    \n      Class Docstring:\n        Parse all descriptors in the symbol\n        \n        Returns:\n        List[SymbolDescriptor] - The descriptors in the symbol\n        \n      Methods:\n        parse_descriptors(self) -> List[SymbolDescriptor]\n        \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata.core.symbol.symbol_types.Symbol.is_local\n    \n      Class Docstring:\n        Returns True if the symbol is local\n        \n      Methods:\n        is_local(symbol: \"Symbol\") -> bool\n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.symbol.parser.SymbolParser\n    \n        SymbolParser is a class that enables parsing URIs into structured objects, such as `Symbol`. Although it is not fully in sync with the Go version found in Sourcegraph's SCIP repository, it retains acceptable functionality. The class has methods to accept and parse various parts of symbol strings, including identifiers and namespaces. Limitations include possible difficulties in parsing symbols that the Go version can handle. An example of using the `parse_symbol` function to create a `Symbol` object from a symbol URI string is provided, although future improvements to better handle parsing limitations may be necessary.\n        \n      Class Docstring:\n        Translation of the logic defined in\n        https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n        to parse URIs into structured objects.\n        It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n        \n      Methods:\n        def __init__(self, symbol: str):\n                \"\"\"\n                Args:\n                    symbol (str): The symbol URI to parse\n                \"\"\"\n                self.symbol = symbol\n                self.index = 0\n                self.symbol_str = symbol\n        \n            \n        accept_backtick_escaped_identifier(self, what: str) -> str\n        \n        accept_character(self, r: str, what: str) -> None\n        \n        accept_escaped_identifier(self, what: str, escape_character: str) -> str\n        \n        accept_identifier(self, what: str) -> str\n        \n        accept_space_escaped_identifier(self, what: str) -> str\n        \n        current(self) -> str\n        \n        error(self, message: str) -> ValueError\n        \n        is_identifier_character(c: str) -> bool\n        \n        parse_descriptor(self) -> SymbolDescriptor\n        \n        parse_descriptors(self) -> List[SymbolDescriptor]\n        \n        peek_next(self) -> Optional[str]\n        \n    automata.core.symbol.symbol_types.Symbol.is_meta\n    \n      Class Docstring:\n        Returns True if the symbol is meta\n        \n      Methods:\n        is_meta(symbol: \"Symbol\") -> bool\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/SymbolDescriptor#PyKind#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDescriptor", "suffix": 2, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PyKind", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolDescriptor\n\n`SymbolDescriptor` is a class that wraps the descriptor component of the URI into a Python object. It serves as a building block for creating and parsing symbols within the `automata.core.symbol` framework. Additionally, it provides methods for working with descriptor components, such as converting descriptor suffixes and unparsing descriptor objects.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.parser.SymbolParser`\n- `automata.core.symbol.parser.parse_symbol`\n- `automata.core.symbol.symbol_types.SymbolReference`\n- `automata.core.symbol.graph.SymbolGraph`\n\n## Example\n\nThe following example demonstrates how to create a `SymbolDescriptor` instance:\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolDescriptor\nfrom automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n\ndescriptor = SymbolDescriptor(\n    name=\"ActionIndicator\",\n    suffix=DescriptorProto.TYPE,\n)\n```\n\n## Methods\n\n- `__init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None)`: Initializes a `SymbolDescriptor` instance with the given `name`, `suffix`, and an optional `disambiguator`.\n- `__repr__(self) -> None`: Represents the `SymbolDescriptor` as a string.\n- `convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto) -> PyKind`: Converts a descriptor suffix from the `DescriptorProto` format to the `PyKind` format.\n- `get_escaped_name(name) -> None`: Escapes a string name with backticks.\n- `is_simple_identifier(name) -> None`: Determines if the given name is a simple identifier or not.\n- `unparse(self) -> None`: Unparses the `SymbolDescriptor` instance into a string.\n\n## Limitations\n\n`SymbolDescriptor` is closely tied to the `automata.core.symbol` framework and assumes a specific syntax and representation for descriptor components. If the underlying descriptor format or parser implementation changes, updates to `SymbolDescriptor` may be necessary.\n\n## Follow-up Questions:\n\n- How does the `SymbolDescriptor` interact with other parts of the `automata.core.symbol` framework?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/reduce": [{"py/type": "numpy.dtype"}, {"py/tuple": ["f8", false, true]}, {"py/tuple": [3, "<", null, null, null, -1, -1, 0]}]}, false, {"py/b64": ""}]}]}, "source_code": "class PyKind(Enum):\n        Local = \"local\"\n        Module = \"module\"\n        Class = \"class\"\n        Method = \"method\"\n        Value = \"value\"\n        Meta = \"meta\"\n        Macro = \"macro\"\n        Parameter = \"parameter\"\n        TypeParameter = \"type_parameter\"\n\n    ", "summary": "`SymbolDescriptor` is a class within the `automata.core.symbol` framework that wraps the descriptor component of a URI into a Python object. It is a building block for creating and parsing symbols and provides methods for working with descriptor components, such as converting descriptor suffixes and unparsing descriptor objects. It is closely tied to the framework and may require updates if the underlying descriptor format or parser implementation changes.\n\nExample of creating a `SymbolDescriptor` instance:\n```python\nfrom automata.core.symbol.symbol_types import SymbolDescriptor\nfrom automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n\ndescriptor = SymbolDescriptor(\n    name=\"ActionIndicator\",\n    suffix=DescriptorProto.TYPE,\n)\n```", "context": "\n    Generate the documentation for SymbolDescriptor using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.SymbolDescriptor.PyKind -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # SymbolDescriptor\n      \n      `SymbolDescriptor` is a class that wraps the descriptor component of the URI into a Python object. It serves as a building block for creating and parsing symbols within the `automata.core.symbol` framework. Additionally, it provides methods for working with descriptor components, such as converting descriptor suffixes and unparsing descriptor objects.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.parser.SymbolParser`\n      - `automata.core.symbol.parser.parse_symbol`\n      - `automata.core.symbol.symbol_types.SymbolReference`\n      - `automata.core.symbol.graph.SymbolGraph`\n      \n      ## Example\n      \n      The following example demonstrates how to create a `SymbolDescriptor` instance:\n      \n      ```python\n      from automata.core.symbol.symbol_types import SymbolDescriptor\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      \n      descriptor = SymbolDescriptor(\n          name=\"ActionIndicator\",\n          suffix=DescriptorProto.TYPE,\n      )\n      ```\n      \n      ## Methods\n      \n      - `__init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None)`: Initializes a `SymbolDescriptor` instance with the given `name`, `suffix`, and an optional `disambiguator`.\n      - `__repr__(self) -> None`: Represents the `SymbolDescriptor` as a string.\n      - `convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto) -> PyKind`: Converts a descriptor suffix from the `DescriptorProto` format to the `PyKind` format.\n      - `get_escaped_name(name) -> None`: Escapes a string name with backticks.\n      - `is_simple_identifier(name) -> None`: Determines if the given name is a simple identifier or not.\n      - `unparse(self) -> None`: Unparses the `SymbolDescriptor` instance into a string.\n      \n      ## Limitations\n      \n      `SymbolDescriptor` is closely tied to the `automata.core.symbol` framework and assumes a specific syntax and representation for descriptor components. If the underlying descriptor format or parser implementation changes, updates to `SymbolDescriptor` may be necessary.\n      \n      ## Follow-up Questions:\n      \n      - How does the `SymbolDescriptor` interact with other parts of the `automata.core.symbol` framework?\n      \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.symbol_types.SymbolDescriptor\n    \n        `SymbolDescriptor` is a Python class that wraps the descriptor component of a Universal Resource Identifier (URI) and represents various symbols such as local, namespace, type, method, term, macro, parameter, and type-parameter. It provides methods to convert the descriptor suffix from the URI representation to a Python representation, extract the escaped name from a string, and represent the object as a URI string. However, it may not support custom URI representations or descriptors that do not follow the predefined format and structure. For example, an instance of `SymbolDescriptor` can be created using a name, suffix, and an optional disambiguator like this:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolDescriptor\n        from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n        \n        name = \"example_descriptor\"\n        suffix = DescriptorProto.Type\n        disambiguator = \"example_disambiguator\"\n        \n        descriptor = SymbolDescriptor(name, suffix, disambiguator)\n        ```\n        \n        Follow-up questions include exploring ways to update `SymbolDescriptor` to handle custom URI representations or descriptors that do not follow the predefined format and understanding any precautions that need to be taken when using `SymbolDescriptor`.\n        \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata.core.symbol.symbol_types.SymbolDescriptor.__repr__\n    \n      Methods:\n        __repr__(self) -> None\n        \n    automata.core.symbol.parser.SymbolParser.parse_descriptor\n    \n      Class Docstring:\n        Parse a single descriptor in the symbol\n        \n        Returns:\n        SymbolDescriptor - The descriptor in the symbol\n        \n      Methods:\n        parse_descriptor(self) -> SymbolDescriptor\n        \n    automata.core.symbol.parser.SymbolParser.parse_descriptors\n    \n      Class Docstring:\n        Parse all descriptors in the symbol\n        \n        Returns:\n        List[SymbolDescriptor] - The descriptors in the symbol\n        \n      Methods:\n        parse_descriptors(self) -> List[SymbolDescriptor]\n        \n    automata.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.symbol_types.Symbol.is_local\n    \n      Class Docstring:\n        Returns True if the symbol is local\n        \n      Methods:\n        is_local(symbol: \"Symbol\") -> bool\n        \n    automata.core.symbol.symbol_types.SymbolDescriptor.convert_scip_to_python_suffix\n    \n      Methods:\n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/SymbolDocEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDocEmbedding", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolDocEmbedding\n\n`SymbolDocEmbedding` is a class that represents the embedding for symbol documents. It extends the `SymbolEmbedding` class and adds additional metadata such as the source code, summary, and context of the symbol.\n\n## Overview\n\n`SymbolDocEmbedding` provides a way to store and access the embeddings for symbol documents, which are important for tasks like search and similarity comparison. The class is used in conjunction with `SymbolDocEmbeddingHandler` to create, update, and retrieve embeddings for a given symbol.\n\n## Related Symbols\n\n- `Symbol`: A class representing the primary symbol URI, which can be a class, method, or a local variable.\n- `SymbolDocEmbeddingHandler`: A handler class to manage `SymbolDocEmbedding` objects, providing methods to create, update, and retrieve embeddings.\n- `SymbolCodeEmbedding`: A class representing the embeddings for symbol code.\n- `SymbolCodeEmbeddingHandler`: A handler class to manage `SymbolCodeEmbedding` objects, providing methods to create, update, and retrieve embeddings.\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolDocEmbedding`.\n\n```python\nimport numpy as np\nfrom automata.core.symbol.symbol_types import Symbol\nfrom automata.core.symbol.symbol_types import SymbolDocEmbedding\n\nsymbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = Symbol.from_string(symbol_str)\n\ndocument = \"This is a sample document\"\nvector = np.array([0.1, 0.2, 0.3])\nsource_code = \"class ActionIndicator(Enum): ...\"\nsummary = \"This class represents an enum for action indicators.\"\ncontext = \"The ActionIndicator enum is used to describe the current state...\"\n\nembedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n```\n\n## Limitations\n\n`SymbolDocEmbedding` relies on external handler classes like `SymbolDocEmbeddingHandler` for proper creation, updating, and retrieval of embeddings. Moreover, it assumes the embeddings are provided as NumPy arrays, which may limit the usage of other types of embeddings.\n\n## Follow-up Questions:\n\n- Can the `SymbolDocEmbedding` class be extended to support different types of embeddings, other than NumPy arrays?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDocEmbedding(SymbolEmbedding):\n    \"\"\"Embedding for symbol documents\"\"\"\n\n    def __init__(\n        self,\n        symbol: Symbol,\n        document: str,\n        vector: np.array,\n        source_code: Optional[str] = None,\n        summary: Optional[str] = None,\n        context: Optional[str] = None,\n    ):\n        super().__init__(symbol, document, vector)\n        # begin additional meta data\n        self.source_code = source_code\n        self.summary = summary\n        self.context = context\n", "summary": "`SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class and adding metadata such as source code, summary, and context. It is used for tasks like search and similarity comparison and works with `SymbolDocEmbeddingHandler` to create, update, and retrieve embeddings for a symbol. It relies on handler classes like `SymbolDocEmbeddingHandler` and assumes embeddings are provided as NumPy arrays, potentially limiting usage with other types of embeddings.\n\nExample usage:\n```python\nimport numpy as np\nfrom automata.core.symbol.symbol_types import Symbol\nfrom automata.core.symbol.symbol_types import SymbolDocEmbedding\n\nsymbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = Symbol.from_string(symbol_str)\n\ndocument = \"This is a sample document\"\nvector = np.array([0.1, 0.2, 0.3])\nsource_code = \"class ActionIndicator(Enum): ...\"\nsummary = \"This class represents an enum for action indicators.\"\ncontext = \"The ActionIndicator enum is used to describe the current state...\"\n\nembedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n```", "context": "\n    Generate the documentation for SymbolDocEmbedding using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.SymbolDocEmbedding -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # SymbolDocEmbedding\n      \n      `SymbolDocEmbedding` is a class that represents the embedding for symbol documents. It extends the `SymbolEmbedding` class and adds additional metadata such as the source code, summary, and context of the symbol.\n      \n      ## Overview\n      \n      `SymbolDocEmbedding` provides a way to store and access the embeddings for symbol documents, which are important for tasks like search and similarity comparison. The class is used in conjunction with `SymbolDocEmbeddingHandler` to create, update, and retrieve embeddings for a given symbol.\n      \n      ## Related Symbols\n      \n      - `Symbol`: A class representing the primary symbol URI, which can be a class, method, or a local variable.\n      - `SymbolDocEmbeddingHandler`: A handler class to manage `SymbolDocEmbedding` objects, providing methods to create, update, and retrieve embeddings.\n      - `SymbolCodeEmbedding`: A class representing the embeddings for symbol code.\n      - `SymbolCodeEmbeddingHandler`: A handler class to manage `SymbolCodeEmbedding` objects, providing methods to create, update, and retrieve embeddings.\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `SymbolDocEmbedding`.\n      \n      ```python\n      import numpy as np\n      from automata.core.symbol.symbol_types import Symbol\n      from automata.core.symbol.symbol_types import SymbolDocEmbedding\n      \n      symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n      symbol = Symbol.from_string(symbol_str)\n      \n      document = \"This is a sample document\"\n      vector = np.array([0.1, 0.2, 0.3])\n      source_code = \"class ActionIndicator(Enum): ...\"\n      summary = \"This class represents an enum for action indicators.\"\n      context = \"The ActionIndicator enum is used to describe the current state...\"\n      \n      embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n      ```\n      \n      ## Limitations\n      \n      `SymbolDocEmbedding` relies on external handler classes like `SymbolDocEmbeddingHandler` for proper creation, updating, and retrieval of embeddings. Moreover, it assumes the embeddings are provided as NumPy arrays, which may limit the usage of other types of embeddings.\n      \n      ## Follow-up Questions:\n      \n      - Can the `SymbolDocEmbedding` class be extended to support different types of embeddings, other than NumPy arrays?\n      \n      \n    Class Docstring:\n      Embedding for symbol documents\n      \n    Methods:\n      def __init__(\n              self,\n              symbol: Symbol,\n              document: str,\n              vector: np.array,\n              source_code: Optional[str] = None,\n              summary: Optional[str] = None,\n              context: Optional[str] = None,\n          ):\n              super().__init__(symbol, document, vector)\n              # begin additional meta data\n              self.source_code = source_code\n              self.summary = summary\n              self.context = context\n      \n  Building context for related symbols -\n  \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler.build_symbol_doc_embedding\n    \n      Class Docstring:\n        Build the embedding for a symbol's documentation\n        \n        Args:\n        source_code (str): The source code of the symbol\n        symbol (Symbol): The symbol to build the embedding for\n        \n        Returns:\n        SymbolDocEmbedding: The embedding for the symbol's documentation\n        \n      Methods:\n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_summary(input_doc: str) -> str\n        \n    automata.tests.unit.sample_modules.sample.OuterClass.InnerClass.inner_method\n    \n        def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n        `SymbolCodeEmbedding` is a class extending the `SymbolEmbedding` base class, used to store code embeddings for a given symbol, the symbol object, source code, and the embedding vector. It primarily serves as a container for these embeddings and does not include functionality for generating or handling them; `SymbolCodeEmbeddingHandler` should be used for those purposes.\n        \n        Here's an example of creating a `SymbolCodeEmbedding` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def example_function():\\n    pass\"\n        vector = np.random.random((300,))\n        \n        embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n                super().__init__(symbol, source_code, vector)\n        \n        \n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n  Building context for dependencies -\n  \n    automata.core.symbol.symbol_types.SymbolEmbedding.__init__\n    \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/SymbolEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolEmbedding", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolEmbedding\n\n`SymbolEmbedding` is an abstract base class for different types of embeddings representing symbols, such as `SymbolCodeEmbedding` and `SymbolDocEmbedding`. It provides a basic structure for initializing and managing symbol embeddings, considering the source of the embedding and the vector representing the embedding in the feature space. `SymbolEmbedding` is used in various embedding handlers, such as `SymbolCodeEmbeddingHandler` and `SymbolDocEmbeddingHandler`.\n\n## Related Symbols\n\n- `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n- `automata.core.symbol.symbol_types.SymbolCodeEmbedding`\n- `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n- `automata.core.embedding.embedding_types.EmbeddingProvider`\n- `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n- `automata.core.database.vector.JSONVectorDatabase`\n\n## Example\n\nThe following example demonstrates how to create an instance of a derived class `SymbolCodeEmbedding`:\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolCodeEmbedding\nfrom automata.core.symbol.parser import parse_symbol\nimport numpy as np\n\nsymbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_str)\nsource_code = \"def __init__(self, message): pass\"\nvector = np.array([0.1, 0.2, 0.3])\n\nsymbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n```\n\n## Limitations\n\n`SymbolEmbedding` serves as a base class to be extended by classes with specific embedding types, like `SymbolCodeEmbedding` or `SymbolDocEmbedding`. So, the functionality provided by `SymbolEmbedding` is limited to its role as a base class.\n\n## Follow-up Questions:\n\n- Are there more concrete classes derived from `SymbolEmbedding` other than `SymbolCodeEmbedding` and `SymbolDocEmbedding`?\n- How are the embedding vectors for `SymbolEmbedding` instances usually generated?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolEmbedding(abc.ABC):\n    \"\"\"Abstract base class for different types of embeddings\"\"\"\n\n    def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n        self.symbol = symbol\n        self.embedding_source = embedding_source\n        self.vector = vector\n\n\n", "summary": "`SymbolEmbedding` is an abstract base class for various types of embeddings representing symbols, such as `SymbolCodeEmbedding` and `SymbolDocEmbedding`. This class provides a basic structure for initializing and managing symbol embeddings, focusing on the source of the embedding and the vector representing it in the feature space. `SymbolEmbedding` is utilized in numerous embedding handlers, including `SymbolCodeEmbeddingHandler` and `SymbolDocEmbeddingHandler`.\n\nTo create an instance of a derived class like `SymbolCodeEmbedding`, you can use the example code provided:\n```python\nfrom automata.core.symbol.symbol_types import SymbolCodeEmbedding\nfrom automata.core.symbol.parser import parse_symbol\nimport numpy as np\n\nsymbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_str)\nsource_code = \"def __init__(self, message): pass\"\nvector = np.array([0.1, 0.2, 0.3])\n\nsymbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n```\nRemember that the functionality of `SymbolEmbedding` is limited as it serves as a base class for more specific embedding types.", "context": "\n    Generate the documentation for SymbolEmbedding using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.SymbolEmbedding -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # SymbolEmbedding\n      \n      `SymbolEmbedding` is an abstract base class for different types of embeddings representing symbols, such as `SymbolCodeEmbedding` and `SymbolDocEmbedding`. It provides a basic structure for initializing and managing symbol embeddings, considering the source of the embedding and the vector representing the embedding in the feature space. `SymbolEmbedding` is used in various embedding handlers, such as `SymbolCodeEmbeddingHandler` and `SymbolDocEmbeddingHandler`.\n      \n      ## Related Symbols\n      \n      - `automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.symbol_types.SymbolDocEmbedding`\n      - `automata.core.symbol.symbol_types.SymbolCodeEmbedding`\n      - `automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler`\n      - `automata.core.embedding.embedding_types.EmbeddingProvider`\n      - `automata.core.embedding.embedding_types.SymbolEmbeddingHandler`\n      - `automata.core.database.vector.JSONVectorDatabase`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of a derived class `SymbolCodeEmbedding`:\n      \n      ```python\n      from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n      from automata.core.symbol.parser import parse_symbol\n      import numpy as np\n      \n      symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n      symbol = parse_symbol(symbol_str)\n      source_code = \"def __init__(self, message): pass\"\n      vector = np.array([0.1, 0.2, 0.3])\n      \n      symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n      ```\n      \n      ## Limitations\n      \n      `SymbolEmbedding` serves as a base class to be extended by classes with specific embedding types, like `SymbolCodeEmbedding` or `SymbolDocEmbedding`. So, the functionality provided by `SymbolEmbedding` is limited to its role as a base class.\n      \n      ## Follow-up Questions:\n      \n      - Are there more concrete classes derived from `SymbolEmbedding` other than `SymbolCodeEmbedding` and `SymbolDocEmbedding`?\n      - How are the embedding vectors for `SymbolEmbedding` instances usually generated?\n      \n    Class Docstring:\n      Abstract base class for different types of embeddings\n      \n    Methods:\n      def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n              self.symbol = symbol\n              self.embedding_source = embedding_source\n              self.vector = vector\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.symbol_types.SymbolDocEmbedding\n    \n        `SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class with added metadata such as source code, summary, and context. This class is utilized alongside `SymbolDocEmbeddingHandler` to manage and access these embeddings for tasks like search and similarity comparison. However, it relies on external handler classes and assumes embeddings are provided as NumPy arrays, potentially limiting usage for other embedding types.\n        \n        ```python\n        import numpy as np\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.symbol.symbol_types import SymbolDocEmbedding\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = Symbol.from_string(symbol_str)\n        \n        document = \"This is a sample document\"\n        vector = np.array([0.1, 0.2, 0.3])\n        source_code = \"class ActionIndicator(Enum): ...\"\n        summary = \"This class represents an enum for action indicators.\"\n        context = \"The ActionIndicator enum is used to describe the current state...\"\n        \n        embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                document: str,\n                vector: np.array,\n                source_code: Optional[str] = None,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, document, vector)\n                # begin additional meta data\n                self.source_code = source_code\n                self.summary = summary\n                self.context = context\n        \n    automata.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n        `SymbolCodeEmbedding` is a class extending the `SymbolEmbedding` base class, used to store code embeddings for a given symbol, the symbol object, source code, and the embedding vector. It primarily serves as a container for these embeddings and does not include functionality for generating or handling them; `SymbolCodeEmbeddingHandler` should be used for those purposes.\n        \n        Here's an example of creating a `SymbolCodeEmbedding` instance:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def example_function():\\n    pass\"\n        vector = np.random.random((300,))\n        \n        embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, source_code: str, vector: np.array):\n                super().__init__(symbol, source_code, vector)\n        \n        \n        \n    automata.core.embedding.doc_embedding.SymbolDocEmbeddingHandler\n    \n        The `SymbolDocEmbeddingHandler` class is responsible for generating, storing, and managing document embeddings for symbols in an AutomataDocs project. It relies on the `VectorDatabaseProvider`, `EmbeddingProvider` classes, and uses methods like `build_symbol_doc_embedding`, `update_embedding`, `get_embedding`, `get_doc`, and `get_summary` for managing symbol document embeddings and their summaries. The class utilizes various other components like `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig` to search, rank, and generate context for symbol embeddings. However, it has limitations concerning the embedding models and algorithms used and can sometimes produce suboptimal context or examples. Improving the underlying components can potentially enhance the embedding quality.\n        \n        Example usage:\n        \n        ```python\n        from automata.core.embedding.doc_embedding import SymbolDocEmbeddingHandler\n        from automata.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n        from automata.core.embedding.embedding_types import OpenAIEmbedding, EmbeddingProvider\n        from automata.core.symbol.symbol_types import Symbol\n        \n        # Initialize the database provider and embedding provider\n        db_provider = VectorDatabaseProvider(JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\"))\n        embedding_provider = EmbeddingProvider(OpenAIEmbedding())\n        \n        # Create an instance of SymbolDocEmbeddingHandler\n        embedding_handler = SymbolDocEmbeddingHandler(db_provider, embedding_provider)\n        \n        # Example symbol and source code\n        symbol = Symbol.from_string(\"symbol-uri-as-string\")\n        source_code = \"def example_function():\\n    pass\"\n        \n        # Build the symbol document embedding\n        symbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(source_code, symbol)\n        ```\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n                code_embedding_handler: SymbolCodeEmbeddingHandler,\n                embedding_db_l2: Optional[VectorDatabaseProvider] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolDocEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (EmbeddingProvider): The provider to get the embeddings from\n                    code_embedding_handler (SymbolCodeEmbeddingHandler): The code embedding handler\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n                from automata.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata.core.symbol.search.rank import SymbolRankConfig\n                from automata.core.symbol.search.symbol_search import SymbolSearch\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n                self.embedding_db_l2 = embedding_db_l2\n        \n            \n        build_symbol_doc_embedding(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n        get_summary(input_doc: str) -> str\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.embedding.embedding_types.EmbeddingProvider\n    \n        `EmbeddingProvider` is an abstract base class that serves as an interface for obtaining mathematical representations called embeddings for symbols, used in tasks such as similarity search, ranking, and other natural language processing-related work. Its single abstract method, `build_embedding`, should be implemented by all subclasses to provide specific embedding implementations. Users must create their own classes that inherit from `EmbeddingProvider` and implement these methods, which might be a limitation for those unfamiliar with custom classes and abstract methods.\n        \n        Here is an example of using the `OpenAIEmbedding` class, a concrete implementation of `EmbeddingProvider`:\n        \n        ```python\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        import numpy as np\n        \n        symbol_source = \"This is an example of a Python function.\"\n        embedding_provider = OpenAIEmbedding() \n        embedding = embedding_provider.build_embedding(symbol_source)\n        \n        # Check if the generated embedding is a numpy array\n        assert isinstance(embedding, np.ndarray)\n        ```\n        Performance and accuracy of embeddings depend on the specific model and approach used in the concrete implementation of `EmbeddingProvider`.\n        \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata.core.embedding.embedding_types.SymbolEmbeddingHandler\n    \n        `SymbolEmbeddingHandler` is an abstract class that manages symbol embeddings by fetching and updating the vector embeddings related to various kinds of symbols. It must be subclassed by other classes that provide implementations of the defined abstract methods, such as `get_embedding()` and `update_embedding()`. The performance of these methods may depend on the chosen embedding provider and database used for storing the embeddings.\n        \n        Here is an example of how to subclass `SymbolEmbeddingHandler` and implement the abstract methods:\n        \n        ```python\n        from automata.core.embedding.embedding_types import SymbolEmbeddingHandler\n        from automata.core.symbol.symbol_types import Symbol\n        \n        class CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n            def __init__(self, embedding_db, embedding_provider):\n                super().__init__(embedding_db, embedding_provider)\n        \n            def get_embedding(self, symbol: Symbol):\n                # Implement logic to get the embedding for a custom symbol\n                pass\n        \n            def update_embedding(self, symbol: Symbol):\n                # Implement logic to update the embedding for a custom symbol\n                pass\n        \n        # Example usage:\n        custom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\n        custom_embedding = custom_handler.get_embedding(custom_symbol)\n        ```\n        \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"An abstract constructor for SymbolEmbeddingHandler\"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider\n        \n            \n        get_embedding(self, symbol: Symbol) -> Any\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.tests.unit.test_symbol_embedding.test_get_embedding\n    \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingProvider methods\n            mock_provider = Mock(EmbeddingProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], \"symbol_source\", mock_embedding\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n        \n    automata.tests.unit.conftest.patch_get_embedding\n    \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/SymbolFile#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolFile", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolFile\n\n`SymbolFile` is a class that represents a file that contains a symbol. It provides methods to perform equality checks and hashing operations on a file. This class is primarily used within the `SymbolGraph` to represent files containing symbols.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.graph.SymbolGraph`\n- `automata.core.symbol.symbol_types.SymbolReference`\n\n## Example\n\nThe following example demonstrates how to use the `SymbolFile` class to create an instance of a file containing a symbol and compare it with another instance.\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolFile\n\nfile_1 = SymbolFile(\"path/to/symbol/file\")\nfile_2 = SymbolFile(\"path/to/symbol/file\")\n\n# Comparing SymbolFile instances\nassert file_1 == file_2\n\n# Comparing SymbolFile instance with a string representing the path\nassert file_1 == \"path/to/symbol/file\"\n```\n\n## Limitations\n\n`SymbolFile` is a simple class and focuses on providing a way to represent files containing symbols. It does not provide methods to modify the file or access the symbol within the file.\n\n## Follow-up Questions:\n\n- What is the process to access the symbol within a `SymbolFile` instance?\n\n## Class\n\nRepresents a file that contains a symbol\n\n### Methods\n\n`__eq__(self, other)`: Checks the equality of the SymbolFile with other SymbolFiles and strings representing paths.\n\n`__hash__(self) -> int`: Returns the hash value of the SymbolFile, based on its path.", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass SymbolFile:\n    \"\"\"Represents a file that contains a symbol\"\"\"\n\n    path: str\n    occurrences: str\n\n    def __hash__(self) -> int:\n        return hash(self.path)\n\n    def __eq__(self, other):\n        if isinstance(other, SymbolFile):\n            return self.path == other.path\n        elif isinstance(other, str):\n            return self.path == other\n        return False\n\n\n", "summary": "The `SymbolFile` class represents a file containing a symbol and is primarily used within the `SymbolGraph`. It offers methods for equality checks and hashing operations but does not provide methods to modify the file or access the symbol within the file. To create an instance and compare it with another, use:\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolFile\n\nfile_1 = SymbolFile(\"path/to/symbol/file\")\nfile_2 = SymbolFile(\"path/to/symbol/file\")\n\nassert file_1 == file_2\nassert file_1 == \"path/to/symbol/file\"\n```", "context": "\n    Generate the documentation for SymbolFile using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.SymbolFile -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # SymbolFile\n      \n      `SymbolFile` is a class that represents a file that contains a symbol. It provides methods to perform equality checks and hashing operations on a file. This class is primarily used within the `SymbolGraph` to represent files containing symbols.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.graph.SymbolGraph`\n      - `automata.core.symbol.symbol_types.SymbolReference`\n      \n      ## Example\n      \n      The following example demonstrates how to use the `SymbolFile` class to create an instance of a file containing a symbol and compare it with another instance.\n      \n      ```python\n      from automata.core.symbol.symbol_types import SymbolFile\n      \n      file_1 = SymbolFile(\"path/to/symbol/file\")\n      file_2 = SymbolFile(\"path/to/symbol/file\")\n      \n      # Comparing SymbolFile instances\n      assert file_1 == file_2\n      \n      # Comparing SymbolFile instance with a string representing the path\n      assert file_1 == \"path/to/symbol/file\"\n      ```\n      \n      ## Limitations\n      \n      `SymbolFile` is a simple class and focuses on providing a way to represent files containing symbols. It does not provide methods to modify the file or access the symbol within the file.\n      \n      ## Follow-up Questions:\n      \n      - What is the process to access the symbol within a `SymbolFile` instance?\n      \n    Class Docstring:\n      Represents a file that contains a symbol\n      \n    Methods:\n      def __eq__(self, other):\n              if isinstance(other, SymbolFile):\n                  return self.path == other.path\n              elif isinstance(other, str):\n                  return self.path == other\n              return False\n      \n      \n      \n      def __hash__(self) -> int:\n              return hash(self.path)\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.symbol.symbol_types.SymbolReference\n    \n        `SymbolReference` is a class representing a reference to a symbol in a file, used for managing references to symbols within a codebase. It offers utility methods for comparing and hashing symbol references based on their URI, line number, and column number. In conjunction with other symbol-related classes, it helps track and manage references to symbols in files based on their location and usage. However, there is a potential limitation of causing collisions when the same symbol is referenced in different files at the same location (line and column). This is rare, but important to consider when working with multiple symbol references across files.\n        \n        Example usage: \n        ```python\n        from automata.core.symbol.symbol_types import SymbolReference\n        from automata.core.symbol.parser import parse_symbol\n        \n        symbol_uri = \"example_uri\"\n        line_number = 10\n        column_number = 5\n        symbol = parse_symbol(symbol_uri)\n        \n        symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n        symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n        \n        assert symbol_ref1 != symbol_ref2\n        assert hash(symbol_ref1) != hash(symbol_ref2)\n        \n        symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n        assert symbol_ref1 == symbol_ref3\n        ```\n        \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata.tests.unit.test_symbol_graph.test_get_all_files\n    \n        def test_get_all_files(symbol_graph):\n            files = symbol_graph.get_all_files()\n            assert isinstance(files, list)\n            for f in files:\n                assert isinstance(f, SymbolFile)\n        \n        \n        \n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.tests.unit.test_database_vector.test_lookup_symbol\n    \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], \"y\", [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n        \n    automata.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.tests.unit.test_database_vector.test_add_symbol\n    \n        def test_add_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, \"x\", [1, 2, 3])\n            vector_db.add(embedded_symbol)\n        \n        \n        \n        \n    automata.tests.unit.test_symbol_search.test_retrieve_source_code_by_symbol\n    \n        def test_retrieve_source_code_by_symbol(symbols, symbol_searcher):\n            with patch(\n                \"automata.core.symbol.search.symbol_search.convert_to_fst_object\",\n                return_value=\"module1\",\n            ) as mock_method:\n                result = symbol_searcher.retrieve_source_code_by_symbol(symbols[0].uri)\n                assert result == \"module1\"\n            mock_method.assert_called_once_with(symbols[0])\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/SymbolPackage#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolPackage", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolPackage\n\n`SymbolPackage` is a class that wraps the package component of the URI. It helps manage and handle packages in the context of symbols, which are like URIs identifying a class, method, or a local variable.\n\n## Overview\n\nThe `SymbolPackage` class consists of utility methods to work with packages in the context of a `Symbol`. It provides methods to unparse a package into a URI string and get the string representation of the package.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.parser.parse_symbol`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `SymbolPackage` and unparse it into a URI string.\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolPackage\n\nexample_package = SymbolPackage(manager=\"python\", name=\"automata\", version=\"75482692a6fe30c72db516201a6f47d9fb4af065\")\nprint(repr(example_package))  # Output: Package(python automata 75482692a6fe30c72db516201a6f47d9fb4af065)\n```\n\n```python\nunparsed_package = example_package.unparse()\nprint(unparsed_package)  # Output: python automata 75482692a6fe30c72db516201a6f47d9fb4af065\n```\n\n## Limitations\n\n`SymbolPackage` is limited in its functionality and mainly serves as an abstraction of the package component of a symbol URI. It does not provide any advanced features for package management or manipulation beyond its primary functionalities of unparsing a package into a URI string and obtaining its string representation.\n\n## Follow-up Questions:\n\n- Are there any additional methods or features that would be useful to include in the `SymbolPackage` class?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass SymbolPackage:\n    \"\"\"Wraps the package component of the URI\"\"\"\n\n    manager: str\n    name: str\n    version: str\n\n    def __repr__(self):\n        return f\"Package({self.unparse()})\"\n\n    def unparse(self):\n        \"\"\"Converts back into URI string\"\"\"\n        return f\"{self.manager} {self.name} {self.version}\"\n\n\n", "summary": "The `SymbolPackage` class, within the context of symbols (URIs identifying a class, method, or local variable), helps manage and handle packages. It contains utility methods for working with packages, offering functionality to unparse a package into a URI string and obtain the package's string representation. However, `SymbolPackage` is limited in its functionality, mainly serving as an abstraction of the package component of a symbol URI and does not provide advanced features for package management or manipulation. Here is an example of using `SymbolPackage`:\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolPackage\n\nexample_package = SymbolPackage(manager=\"python\", name=\"automata\", version=\"75482692a6fe30c72db516201a6f47d9fb4af065\")\nprint(repr(example_package))\n\nunparsed_package = example_package.unparse()\nprint(unparsed_package)\n```", "context": "\n    Generate the documentation for SymbolPackage using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.SymbolPackage -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # SymbolPackage\n      \n      `SymbolPackage` is a class that wraps the package component of the URI. It helps manage and handle packages in the context of symbols, which are like URIs identifying a class, method, or a local variable.\n      \n      ## Overview\n      \n      The `SymbolPackage` class consists of utility methods to work with packages in the context of a `Symbol`. It provides methods to unparse a package into a URI string and get the string representation of the package.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.parser.parse_symbol`\n      \n      ## Example\n      \n      The following is an example demonstrating how to create an instance of `SymbolPackage` and unparse it into a URI string.\n      \n      ```python\n      from automata.core.symbol.symbol_types import SymbolPackage\n      \n      example_package = SymbolPackage(manager=\"python\", name=\"automata\", version=\"75482692a6fe30c72db516201a6f47d9fb4af065\")\n      print(repr(example_package))  # Output: Package(python automata 75482692a6fe30c72db516201a6f47d9fb4af065)\n      ```\n      \n      ```python\n      unparsed_package = example_package.unparse()\n      print(unparsed_package)  # Output: python automata 75482692a6fe30c72db516201a6f47d9fb4af065\n      ```\n      \n      ## Limitations\n      \n      `SymbolPackage` is limited in its functionality and mainly serves as an abstraction of the package component of a symbol URI. It does not provide any advanced features for package management or manipulation beyond its primary functionalities of unparsing a package into a URI string and obtaining its string representation.\n      \n      ## Follow-up Questions:\n      \n      - Are there any additional methods or features that would be useful to include in the `SymbolPackage` class?\n      \n      \n    Class Docstring:\n      Wraps the package component of the URI\n      \n    Methods:\n      def __repr__(self):\n              return f\"Package({self.unparse()})\"\n      \n          \n      def unparse(self):\n              \"\"\"Converts back into URI string\"\"\"\n              return f\"{self.manager} {self.name} {self.version}\"\n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_symbol_parser.test_parse_symbol\n    \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolDescriptor\n    \n        `SymbolDescriptor` is a Python class that wraps the descriptor component of a Universal Resource Identifier (URI) and represents various symbols such as local, namespace, type, method, term, macro, parameter, and type-parameter. It provides methods to convert the descriptor suffix from the URI representation to a Python representation, extract the escaped name from a string, and represent the object as a URI string. However, it may not support custom URI representations or descriptors that do not follow the predefined format and structure. For example, an instance of `SymbolDescriptor` can be created using a name, suffix, and an optional disambiguator like this:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolDescriptor\n        from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n        \n        name = \"example_descriptor\"\n        suffix = DescriptorProto.Type\n        disambiguator = \"example_disambiguator\"\n        \n        descriptor = SymbolDescriptor(name, suffix, disambiguator)\n        ```\n        \n        Follow-up questions include exploring ways to update `SymbolDescriptor` to handle custom URI representations or descriptors that do not follow the predefined format and understanding any precautions that need to be taken when using `SymbolDescriptor`.\n        \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.symbol.symbol_types`/SymbolReference#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolReference", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# SymbolReference\n\n`SymbolReference` is a class that represents a reference to a symbol in a file. It is used for tracking and managing references to symbols within a codebase. It provides utility methods for comparing and hashing symbol references based on their URI, line number, and column number. This class is used in conjunction with other classes related to symbols, such as `Symbol`, `SymbolDescriptor`, and `SymbolEmbedding`.\n\n## Overview\n\nA `SymbolReference` object represents a unique reference to a symbol based on its URI, line number, and column number. It provides methods to check for equality and uniqueness with other symbol references. It is useful in tracking and managing references to symbols in files based on their location and use in the codebase.\n\n## Related Symbols\n\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.symbol.parser.parse_symbol`\n- `automata.core.symbol.symbol_types.SymbolDescriptor`\n- `automata.core.symbol.symbol_types.SymbolEmbedding`\n- `automata.core.symbol.graph.SymbolGraph`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolReference` and compare it with other symbol references.\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolReference\nfrom automata.core.symbol.parser import parse_symbol\n\nsymbol_uri = \"example_uri\"\nline_number = 10\ncolumn_number = 5\nsymbol = parse_symbol(symbol_uri)\n\nsymbol_ref1 = SymbolReference(symbol, line_number, column_number)\nsymbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n\nassert symbol_ref1 != symbol_ref2\nassert hash(symbol_ref1) != hash(symbol_ref2)\n\nsymbol_ref3 = SymbolReference(symbol, line_number, column_number)\nassert symbol_ref1 == symbol_ref3\n```\n\n## Limitations\n\nThe primary limitation of `SymbolReference` is that it could cause collisions when the same symbol is referenced in different files at the same location (line and column). This situation is relatively rare, but it is worth noting as a potential limitation when working with a large number of symbol references across multiple files.\n\n## Follow-up Questions:\n\n- Is there any way to mitigate the collision issue while maintaining the utility methods provided by `SymbolReference`?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass SymbolReference:\n    \"\"\"Represents a reference to a symbol in a file\"\"\"\n\n    symbol: Symbol\n    line_number: int\n    column_number: int\n    roles: Dict[str, Any]\n\n    def __hash__(self) -> int:\n        # This could cause collisions if the same symbol is referenced in different files at the same location\n        return hash(f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\")\n\n    def __eq__(self, other):\n        if isinstance(other, SymbolReference):\n            return (\n                f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\"\n                == f\"{other.symbol.uri}-{other.line_number}-{other.column_number}\"\n            )\n        return False\n\n\n", "summary": "`SymbolReference` is a class representing a reference to a symbol in a file, used for tracking and managing symbol references within a codebase. It provides methods for comparing and hashing symbol references based on their URI, line number, and column number. This class works in conjunction with other related classes such as `Symbol`, `SymbolDescriptor`, and `SymbolEmbedding`. However, a limitation is that it may cause collisions when the same symbol is referenced in different files at the same location, although this issue is relatively rare. The example below demonstrates creating an instance of `SymbolReference` and comparing it with other symbol references.\n\n```python\nfrom automata.core.symbol.symbol_types import SymbolReference\nfrom automata.core.symbol.parser import parse_symbol\n\nsymbol_uri = \"example_uri\"\nline_number = 10\ncolumn_number = 5\nsymbol = parse_symbol(symbol_uri)\n\nsymbol_ref1 = SymbolReference(symbol, line_number, column_number)\nsymbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n\nassert symbol_ref1 != symbol_ref2\nassert hash(symbol_ref1) != hash(symbol_ref2)\n\nsymbol_ref3 = SymbolReference(symbol, line_number, column_number)\nassert symbol_ref1 == symbol_ref3\n```", "context": "\n    Generate the documentation for SymbolReference using the context shown below -\n  Building context for primary symbol - automata.core.symbol.symbol_types.SymbolReference -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata.core.symbol.parser import parse_symbol\n      \n      # SymbolReference\n      \n      `SymbolReference` is a class that represents a reference to a symbol in a file. It is used for tracking and managing references to symbols within a codebase. It provides utility methods for comparing and hashing symbol references based on their URI, line number, and column number. This class is used in conjunction with other classes related to symbols, such as `Symbol`, `SymbolDescriptor`, and `SymbolEmbedding`.\n      \n      ## Overview\n      \n      A `SymbolReference` object represents a unique reference to a symbol based on its URI, line number, and column number. It provides methods to check for equality and uniqueness with other symbol references. It is useful in tracking and managing references to symbols in files based on their location and use in the codebase.\n      \n      ## Related Symbols\n      \n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.symbol.parser.parse_symbol`\n      - `automata.core.symbol.symbol_types.SymbolDescriptor`\n      - `automata.core.symbol.symbol_types.SymbolEmbedding`\n      - `automata.core.symbol.graph.SymbolGraph`\n      \n      ## Example\n      \n      The following example demonstrates how to create an instance of `SymbolReference` and compare it with other symbol references.\n      \n      ```python\n      from automata.core.symbol.symbol_types import SymbolReference\n      from automata.core.symbol.parser import parse_symbol\n      \n      symbol_uri = \"example_uri\"\n      line_number = 10\n      column_number = 5\n      symbol = parse_symbol(symbol_uri)\n      \n      symbol_ref1 = SymbolReference(symbol, line_number, column_number)\n      symbol_ref2 = SymbolReference(symbol, line_number + 1, column_number)\n      \n      assert symbol_ref1 != symbol_ref2\n      assert hash(symbol_ref1) != hash(symbol_ref2)\n      \n      symbol_ref3 = SymbolReference(symbol, line_number, column_number)\n      assert symbol_ref1 == symbol_ref3\n      ```\n      \n      ## Limitations\n      \n      The primary limitation of `SymbolReference` is that it could cause collisions when the same symbol is referenced in different files at the same location (line and column). This situation is relatively rare, but it is worth noting as a potential limitation when working with a large number of symbol references across multiple files.\n      \n      ## Follow-up Questions:\n      \n      - Is there any way to mitigate the collision issue while maintaining the utility methods provided by `SymbolReference`?\n      \n    Class Docstring:\n      Represents a reference to a symbol in a file\n      \n    Methods:\n      def __eq__(self, other):\n              if isinstance(other, SymbolReference):\n                  return (\n                      f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\"\n                      == f\"{other.symbol.uri}-{other.line_number}-{other.column_number}\"\n                  )\n              return False\n      \n      \n      \n      def __hash__(self) -> int:\n              # This could cause collisions if the same symbol is referenced in different files at the same location\n              return hash(f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\")\n      \n          \n  Building context for related symbols -\n  \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_symbol_search.test_symbol_references\n    \n        def test_symbol_references(symbols, symbol_searcher, symbol_graph_mock):\n            symbol_graph_mock.get_references_to_symbol.return_value = [\"ref1\", \"ref2\"]\n            result = symbol_searcher.symbol_references(symbols[0].uri)\n            assert result == [\"ref1\", \"ref2\"]\n            symbol_graph_mock.get_references_to_symbol.assert_called_once_with(\n                parse_symbol(symbols[0].uri)\n            )\n        \n        \n        \n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.core.symbol.graph.SymbolGraph\n    \n        The `SymbolGraph` class represents a symbol graph that captures relationships between symbols found in source code files and is built from an index protobuf file. Utilizing NetworkX's MultiDiGraph, `SymbolGraph` represents relationships as a directed graph and includes methods for querying relationships, obtaining all available symbols and files, and filtering to subgraphs of rankable symbols. A navigator interface, _SymbolGraphNavigator, is required for getting reachable objects in the symbol subgraph.\n        \n        Example usage:\n        ```python\n        from automata.core.symbol.graph import SymbolGraph\n        \n        # Replace with your own file path\n        index_path = \"path/to/index.scip\"\n        symbol_graph = SymbolGraph(index_path)\n        all_symbols = symbol_graph.get_all_available_symbols()\n        ```\n        \n        Limitations include only being built from index protobuf files and the `get_potential_symbol_callers` method requiring downstream filtering to remove non-call statements. Future improvements may address these limitations and better handle edge cases in the symbol graph building process.\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolDescriptor\n    \n        `SymbolDescriptor` is a Python class that wraps the descriptor component of a Universal Resource Identifier (URI) and represents various symbols such as local, namespace, type, method, term, macro, parameter, and type-parameter. It provides methods to convert the descriptor suffix from the URI representation to a Python representation, extract the escaped name from a string, and represent the object as a URI string. However, it may not support custom URI representations or descriptors that do not follow the predefined format and structure. For example, an instance of `SymbolDescriptor` can be created using a name, suffix, and an optional disambiguator like this:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolDescriptor\n        from automata.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n        \n        name = \"example_descriptor\"\n        suffix = DescriptorProto.Type\n        disambiguator = \"example_disambiguator\"\n        \n        descriptor = SymbolDescriptor(name, suffix, disambiguator)\n        ```\n        \n        Follow-up questions include exploring ways to update `SymbolDescriptor` to handle custom URI representations or descriptors that do not follow the predefined format and understanding any precautions that need to be taken when using `SymbolDescriptor`.\n        \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata.core.symbol.graph._SymbolGraphNavigator._get_symbol_references_in_scope\n    \n      Class Docstring:\n        Gets all symbol references in the scope of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch references for\n        \n        Returns:\n        List[SymbolReference]: A list of SymbolReference objects in scope\n        \n      Methods:\n    automata.tests.unit.test_symbol_search.test_process_queries\n    \n        def test_process_queries(symbols, symbol_searcher, symbol_graph_mock):\n            with patch.object(\n                symbol_searcher, \"symbol_references\", return_value=[\"ref1\", \"ref2\"]\n            ) as mock_method_0:\n                result = symbol_searcher.process_query(\"type:symbol_references %s\" % symbols[0].uri)\n                assert result == [\"ref1\", \"ref2\"]\n            mock_method_0.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(symbol_searcher, \"exact_search\", return_value={\"test\": 0}) as mock_method_1:\n                result = symbol_searcher.process_query(\"type:exact %s\" % symbols[0].uri)\n                assert result == {\"test\": 0}\n            mock_method_1.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"retrieve_source_code_by_symbol\", return_value=\"test\"\n            ) as mock_method_2:\n                result = symbol_searcher.process_query(\"type:source %s\" % symbols[0].uri)\n                assert result == \"test\"\n            mock_method_2.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"symbol_rank_search\", return_value=[(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            ) as mock_method_4:\n                result = symbol_searcher.process_query(\"type:symbol_rank %s\" % symbols[0].uri)\n                assert result == [(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            mock_method_4.assert_called_once_with(symbols[0].uri)\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"invalid_query\")\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"type:unknown query\")\n        \n        \n    automata.core.symbol.symbol_types.SymbolDocEmbedding\n    \n        `SymbolDocEmbedding` is a class representing the embedding for symbol documents, extending the `SymbolEmbedding` class with added metadata such as source code, summary, and context. This class is utilized alongside `SymbolDocEmbeddingHandler` to manage and access these embeddings for tasks like search and similarity comparison. However, it relies on external handler classes and assumes embeddings are provided as NumPy arrays, potentially limiting usage for other embedding types.\n        \n        ```python\n        import numpy as np\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.symbol.symbol_types import SymbolDocEmbedding\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        symbol = Symbol.from_string(symbol_str)\n        \n        document = \"This is a sample document\"\n        vector = np.array([0.1, 0.2, 0.3])\n        source_code = \"class ActionIndicator(Enum): ...\"\n        summary = \"This class represents an enum for action indicators.\"\n        context = \"The ActionIndicator enum is used to describe the current state...\"\n        \n        embedding = SymbolDocEmbedding(symbol, document, vector, source_code=source_code, summary=summary, context=context)\n        ```\n        \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                document: str,\n                vector: np.array,\n                source_code: Optional[str] = None,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, document, vector)\n                # begin additional meta data\n                self.source_code = source_code\n                self.summary = summary\n                self.context = context\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.utils`/HandlerDict#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "HandlerDict", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# HandlerDict\n\n`HandlerDict` is a Python dictionary class representing a logging handler in the context of logging configuration. This class is used together with other related symbols in different parts of the library to manage and configure logging settings.\n\n## Related Symbols\n\n- `automata.core.utils.RootDict`\n- `automata.core.utils.LoggingConfig`\n- `automata.tests.unit.sample_modules.sample_module_2.fhFSO`\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.tests.unit.sample_modules.sample_module_2.EmptyClass`\n- `automata.core.coding.py_coding.writer.PyCodeWriter.ModuleNotFound`\n- `automata.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `HandlerDict` and use it within the context of creating a `LoggingConfig` object.\n\n```python\nfrom automata.core.utils import HandlerDict, LoggingConfig, RootDict\n\nhandler_dict = HandlerDict({\"level\": \"WARNING\", \"class\": \"logging.StreamHandler\", \"formatter\": \"simple\"})\n\nlogging_config = LoggingConfig(\n    version=1,\n    disable_existing_loggers=False,\n    formatters={\n        \"simple\": {\n            \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n        }\n    },\n    handlers={\n        \"console\": handler_dict\n    },\n    root=RootDict({\"level\": \"DEBUG\", \"handlers\": [\"console\"]})\n)\n```\n\n## Limitations\n\n`HandlerDict` itself is a utility class with limited functionality, and its primary purpose is to serve as a structured representation for logging handlers. It is highly dependent on the context it is used in, meaning it may not provide much value when used in isolation.\n\n## Follow-up Questions\n\n- Is there any specific functionality or methods that should be added to the `HandlerDict` class for better flexibility and usage?\n- Are there any other potential use cases in which `HandlerDict` might be beneficial?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class HandlerDict(TypedDict):\n    \"\"\"A dictionary representing a logging handler\"\"\"\n\n    class_: str\n    formatter: str\n    level: int\n    filename: Optional[str]\n\n\n", "summary": "The `HandlerDict` is a Python dictionary class, used for representing a logging handler in the context of logging configuration. It is mainly utilized alongside other symbols in different parts of the library to manage and configure logging settings. The primary function of `HandlerDict` is to serve as a structured representation for logging handlers, and its effectiveness depends on the context it is used in. The example demonstrates how to create an instance of `HandlerDict` and use it within the context of creating a `LoggingConfig` object. Limitations of this utility class include limited functionality and its dependence on the context, which affects its value in isolation.", "context": "\n    Generate the documentation for HandlerDict using the context shown below -\n  Building context for primary symbol - automata.core.utils.HandlerDict -\n  \n    Import Statements:\n      import json\n      import logging\n      import os\n      import yaml\n      from typing import Any, List, Optional, TypedDict, Union, cast\n      \n      # HandlerDict\n      \n      `HandlerDict` is a dictionary class, representing a logging handler in the context of logging configuration. This class is used together with other related symbols in different parts of the library to manage and configure logging settings.\n      \n      ## Related Symbols\n      \n      - `automata.core.utils.RootDict`\n      - `automata.core.utils.LoggingConfig`\n      - `automata.tests.unit.sample_modules.sample_module_2.fhFSO`\n      - `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.tests.unit.sample_modules.sample_module_2.EmptyClass`\n      - `automata.core.coding.py_coding.writer.PyCodeWriter.ModuleNotFound`\n      - `automata.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n      \n      ## Example\n      \n      The following is an example demonstrating how to create an instance of `HandlerDict` and use it within the context of creating a `LoggingConfig` object.\n      \n      ```python\n      from automata.core.utils import HandlerDict, LoggingConfig, RootDict\n      \n      handler_dict = HandlerDict({\"level\": \"WARNING\", \"class\": \"logging.StreamHandler\", \"formatter\": \"simple\"})\n      \n      logging_config = LoggingConfig(\n          version=1,\n          disable_existing_loggers=False,\n          formatters={\n              \"simple\": {\n                  \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n              }\n          },\n          handlers={\n              \"console\": handler_dict\n          },\n          root=RootDict({\"level\": \"DEBUG\", \"handlers\": [\"console\"]})\n      )\n      ```\n      \n      ## Limitations\n      \n      `HandlerDict` itself is a utility class with limited functionality and its primary purpose is to serve as a structured representation for logging handlers. It is highly dependent on the context it is used in, meaning it may not provide much value when used in isolation.\n      \n      ## Follow-up Questions\n      \n      - Is there any specific functionality or methods that should be added to the `HandlerDict` class for better flexibility and usage?\n      - Are there any other potential use cases in which `HandlerDict` might be beneficial?\n      \n    Class Docstring:\n      A dictionary representing a logging handler\n      \n  Building context for related symbols -\n  \n    automata.core.utils.RootDict\n    \n        RootDict is a typed dictionary subclass derived from TypedDict that represents the root logger in an application's logging configuration. It provides a type-safe way to store root logger information such as logging level and handlers. Primarily used with the automata.core.utils.LoggingConfig class and other related symbols, RootDict ensures the correct structure for the root logger information but doesn't provide built-in functionality for managing logging settings or interactions with other components. \n        \n        An example of creating a RootDict instance:\n        \n        ```python\n        from automata.core.utils import RootDict\n        \n        root_dict: RootDict = {\n            \"level\": \"INFO\",\n            \"handlers\": [\"console\"],\n        }\n        ```\n        \n      Class Docstring:\n        A dictionary representing the root logger\n        \n    automata.core.utils.LoggingConfig\n    \n        class LoggingConfig(TypedDict, total=False):\n            \"\"\"A dictionary representing the logging configuration\"\"\"\n        \n            version: int\n            disable_existing_loggers: bool\n            formatters: dict\n            handlers: dict[str, Union[HandlerDict, dict]]\n            root: RootDict\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.fhFSO\n    \n        def fhFSO():\n            \"\"\"GEjBUXtHLGzJDCDsnFFp\"\"\"\n        \n            pass\n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.__init__\n    \n        def __init__(self):\n                pass\n        \n            \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter.ModuleNotFound\n    \n        PyCodeWriter is a utility class that enables the writing of Python code alongside Abstract Syntax Tree (AST) nodes. It permits the creation, updating, deletion, and manipulation of source code in Python modules while also generating documentation. Working in conjunction with PyCodeRetriever, the PyCodeWriter allows for seamless extraction and alteration of Python code. The main use of PyCodeWriter is to modify source code within Python modules using a PyCodeRetriever instance for code manipulation. However, its primary limitation is its reliance on source code structured in a specific way, as it may struggle with edge cases or unconventional coding structures.\n        \n        Example:\n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        python_retriever = PyCodeRetriever()  # create a PyCodeRetriever instance\n        code_writer = PyCodeWriter(python_retriever)  # initialize PyCodeWriter with the PyCodeRetriever instance\n        \n        source_code = \"\"\"def foo():\n            return 'Hello, world!'\n        \"\"\"\n        code_writer.create_new_module(\"sample_module\", source_code, do_write=True)\n        ```\n        \n        \n      Class Docstring:\n        Raised when a module is not found in the module dictionary\n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n        The `LazyModuleTreeMap` class is a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching the modules in memory as they are accessed. It provides methods for fetching existing module dotpaths and filepaths, as well as fetching, putting, and updating modules by their dotpaths. However, it assumes a specific directory structure according to the `DotPathMap` class and does not support custom directory structures for modules.\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.utils import root_fpath\n        \n        path_to_root = root_fpath()\n        module_tree_map = LazyModuleTreeMap(path_to_root)\n        \n        # Fetch an existing module by its dotpath\n        module_dotpath = \"automata.core.agent.automata_agent\"\n        module = module_tree_map.fetch_module(module_dotpath)\n        \n        # Check if a module with the given dotpath exists\n        exists = module_dotpath in module_tree_map\n        ```\n        \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.utils`/LoggingConfig#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "LoggingConfig", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# LoggingConfig\n\n`LoggingConfig` is a typed dictionary class used to represent the logging configuration within the Automata Docs library. This class provides a structured way to store logging settings, ensuring the correct structure for the configuration.\n\n## Overview\n\nThe class contains various attributes, such as `version`, `disable_existing_loggers`, `formatters`, `handlers`, and `root`. These attributes represent key configuration settings for managing and configuring logging settings. The primary purpose of this utility class is to serve as a structured representation for logging configurations. As the class derives from TypedDict, it doesn't provide built-in functionality for managing logging settings or interactions with other components.\n\n## Related Symbols\n\n- `automata.core.utils.HandlerDict`\n- `automata.cli.commands.reconfigure_logging`\n- `automata.core.utils.RootDict`\n- `automata.core.utils.get_logging_config`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `LoggingConfig` and use it to configure a logging setup:\n\n```python\nfrom automata.core.utils import LoggingConfig\nfrom automata.cli.commands import reconfigure_logging\n\nlogging_config: LoggingConfig = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"simple\": {\n            \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        },\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"INFO\",\n            \"formatter\": \"simple\",\n            \"stream\": \"ext://sys.stdout\",\n        },\n    },\n    \"root\": {\n        \"level\": \"INFO\",\n        \"handlers\": [\"console\"],\n    },\n}\nreconfigure_logging.setup_logging(logging_config)\n```\n\n## Limitations\n\nAs the class is a TypedDict subclass, it does not provide any built-in methods to manipulate the settings or interact with logging handlers. Users need to work with included symbols like `reconfigure_logging`, `HandlerDict`, and `RootDict` to configure the logging settings effectively.\n\n## Follow-up Questions:\n\n- Is there a need for additional functionality within the `LoggingConfig` class to manage or interact with logging configurations?\n\n- Are there any other related symbols or functionality that should be covered in this documentation?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class LoggingConfig(TypedDict, total=False):\n    \"\"\"A dictionary representing the logging configuration\"\"\"\n\n    version: int\n    disable_existing_loggers: bool\n    formatters: dict\n    handlers: dict[str, Union[HandlerDict, dict]]\n    root: RootDict\n\n\n", "summary": "`LoggingConfig` is a typed dictionary class in the Automata Docs library that represents the logging configuration. It contains attributes such as `version`, `disable_existing_loggers`, `formatters`, `handlers`, and `root`, which represent key configuration settings for logging. The class serves as a structured representation for logging configurations and is derived from TypedDict, meaning it does not provide built-in functionality for managing logging settings or interactions with other components. Users must work with related symbols like `reconfigure_logging`, `HandlerDict`, and `RootDict` to configure the logging settings effectively.\n\nExample:\n\n```python\nfrom automata.core.utils import LoggingConfig\nfrom automata.cli.commands import reconfigure_logging\n\nlogging_config: LoggingConfig = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"simple\": {\n            \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        },\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"INFO\",\n            \"formatter\": \"simple\",\n            \"stream\": \"ext://sys.stdout\",\n        },\n    },\n    \"root\": {\n        \"level\": \"INFO\",\n        \"handlers\": [\"console\"],\n    },\n}\nreconfigure_logging.setup_logging(logging_config)\n```", "context": "\n    Generate the documentation for LoggingConfig using the context shown below -\n  Building context for primary symbol - automata.core.utils.LoggingConfig -\n  \n      class LoggingConfig(TypedDict, total=False):\n          \"\"\"A dictionary representing the logging configuration\"\"\"\n      \n          version: int\n          disable_existing_loggers: bool\n          formatters: dict\n          handlers: dict[str, Union[HandlerDict, dict]]\n          root: RootDict\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata.core.utils.HandlerDict\n    \n        The `HandlerDict` class is a dictionary used to represent a logging handler in the context of logging configuration in the Automata Docs library. It's primarily used in conjunction with other related symbols to manage and configure logging settings. A sample use case of `HandlerDict` involves creating an instance of it and using it within a LoggingConfig object. The primary purpose of this utility class is to serve as a structured representation for logging handlers and it may not provide much value when used in isolation.\n        \n      Class Docstring:\n        A dictionary representing a logging handler\n        \n    automata.cli.commands.reconfigure_logging\n    \n      Class Docstring:\n        Configure the logging settings.\n        \n        :param verbose: Boolean, if True, set log level to DEBUG, else set to INFO.\n        \n      Methods:\n        reconfigure_logging(log_level_str: str) -> None\n        \n    automata.core.utils.RootDict\n    \n        RootDict is a typed dictionary subclass derived from TypedDict that represents the root logger in an application's logging configuration. It provides a type-safe way to store root logger information such as logging level and handlers. Primarily used with the automata.core.utils.LoggingConfig class and other related symbols, RootDict ensures the correct structure for the root logger information but doesn't provide built-in functionality for managing logging settings or interactions with other components. \n        \n        An example of creating a RootDict instance:\n        \n        ```python\n        from automata.core.utils import RootDict\n        \n        root_dict: RootDict = {\n            \"level\": \"INFO\",\n            \"handlers\": [\"console\"],\n        }\n        ```\n        \n      Class Docstring:\n        A dictionary representing the root logger\n        \n    automata.core.utils.get_logging_config\n    \n      Class Docstring:\n        Returns logging configuration.\n        \n        Args:\n        log_level (int): The log level.\n        log_file (Optional[str]): The log file path.\n        Returns\n        dict[str, Any]: The logging configuration.\n        \n      Methods:\n        get_logging_config(log_level: int = logging.INFO, log_file: Optional[str] = None) -> dict[str, Any]\n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.core.symbol.search.rank.SymbolRankConfig\n    \n        class SymbolRankConfig(BaseModel):\n            \"\"\"A configuration class for SymbolRank\"\"\"\n        \n            alpha: float = 0.25\n            max_iterations: int = 100\n            tolerance: float = 1.0e-6\n            weight_key: str = \"weight\"\n        \n            @classmethod\n            def validate(cls, config):\n                \"\"\"\n                Validate configuration parameters.\n        \n                Args:\n                    config (SymbolRankConfig): Configuration parameters.\n        \n                Raises:\n                    ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n                \"\"\"\n                if not 0 < config.alpha < 1:\n                    raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n        \n                if not 1.0e-8 < config.tolerance < 1.0e-4:\n                    raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.core.utils`/RootDict#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "RootDict", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# RootDict\n\n`RootDict` is a dictionary representing the root logger in the logging configuration. \n\n## Overview\n\n`RootDict` is a typed dictionary subclass derived from the `TypedDict` base class. It provides a type-safe way to store the root logger information, which includes logging level, handlers, and others. The primary purpose of the `RootDict` class is to be used in conjunction with the `automata.core.utils.LoggingConfig` class and other related symbols for configuring logging settings in an application.\n\n## Related Symbols\n\n- `automata.core.utils.LoggingConfig`\n- `automata.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.core.utils.HandlerDict`\n- `automata.tests.unit.sample_modules.sample.EmptyClass`\n- `automata.core.coding.py_coding.module_tree.DotPathMap`\n- `automata.core.coding.directory.DirectoryManager`\n\n## Example\n\nThe following example demonstrates how to create a `RootDict` instance to store root logger information:\n\n```python\nfrom automata.core.utils import RootDict\n\nroot_dict: RootDict = {\n    \"level\": \"INFO\",\n    \"handlers\": [\"console\"],\n}\n```\n\n## Limitations\n\n`RootDict` is just a typed dictionary that ensures the correct structure for the root logger information, but it doesn't provide any built-in functionality for managing logging settings or interactions with other logging components. For that purpose, you need to use other related symbols and classes as shown in the Related Symbols section.\n\n## Follow-up Questions:\n\n- Are there any other important methods or attributes that should be included in the documentation for `RootDict`?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class RootDict(TypedDict):\n    \"\"\"A dictionary representing the root logger\"\"\"\n\n    handlers: List[str]\n    level: int\n\n\n", "summary": "RootDict is a typed dictionary subclass derived from TypedDict base class that stores root logger information, including logging level and handlers. Primarily used with the automata.core.utils.LoggingConfig class and other related symbols, it provides a type-safe way to configure logging settings in an application. However, RootDict only ensures the correct structure for root logger information and does not manage logging settings or interactions with other logging components. Here's an example of using RootDict:\n\n```python\nfrom automata.core.utils import RootDict\n\nroot_dict: RootDict = {\n    \"level\": \"INFO\",\n    \"handlers\": [\"console\"],\n}\n```", "context": "\n    Generate the documentation for RootDict using the context shown below -\n  Building context for primary symbol - automata.core.utils.RootDict -\n  \n    Import Statements:\n      import json\n      import logging\n      import os\n      import yaml\n      from typing import Any, List, Optional, TypedDict, Union, cast\n      \n      # RootDict\n      \n      `RootDict` is a dictionary representing the root logger in the logging configuration.\n      \n      ## Overview\n      \n      `RootDict` is a typed dictionary subclass derived from the `TypedDict` base class. It provides a type-safe way to store the root logger information, which includes logging level, handlers, and others. The primary purpose of the `RootDict` class is to be used in conjunction with the `automata.core.utils.LoggingConfig` class and other related symbols for configuring logging settings in an application.\n      \n      ## Related Symbols\n      \n      - `automata.core.utils.LoggingConfig`\n      - `automata.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n      - `automata.core.symbol.symbol_types.Symbol`\n      - `automata.core.utils.HandlerDict`\n      - `automata.tests.unit.sample_modules.sample.EmptyClass`\n      - `automata.core.coding.py_coding.module_tree.DotPathMap`\n      - `automata.tests.unit.test_py_code_retriever.module_map`\n      - `automata.core.coding.directory.DirectoryManager`\n      \n      ## Example\n      \n      The following example demonstrates how to create a `RootDict` instance to store root logger information.\n      \n      ```python\n      from automata.core.utils import RootDict\n      \n      root_dict: RootDict = {\n          \"level\": \"INFO\",\n          \"handlers\": [\"console\"],\n      }\n      ```\n      \n      ## Limitations\n      \n      `RootDict` is just a typed dictionary that ensures the correct structure for the root logger information, but it doesn't provide any built-in functionality for managing logging settings or interactions with other logging components. For that purpose, you need to use other related symbols and classes as shown in the Related Symbols section.\n      \n      ## Follow-up Questions:\n      \n      - Are there any other important methods or attributes that should be included in the documentation for `RootDict`?\n      \n    Class Docstring:\n      A dictionary representing the root logger\n      \n  Building context for related symbols -\n  \n    automata.core.utils.LoggingConfig\n    \n        class LoggingConfig(TypedDict, total=False):\n            \"\"\"A dictionary representing the logging configuration\"\"\"\n        \n            version: int\n            disable_existing_loggers: bool\n            formatters: dict\n            handlers: dict[str, Union[HandlerDict, dict]]\n            root: RootDict\n        \n        \n        \n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n        The `LazyModuleTreeMap` class is a lazy dictionary that maps module dotpaths to their corresponding RedBaron FST objects, loading and caching the modules in memory as they are accessed. It provides methods for fetching existing module dotpaths and filepaths, as well as fetching, putting, and updating modules by their dotpaths. However, it assumes a specific directory structure according to the `DotPathMap` class and does not support custom directory structures for modules.\n        \n        ```python\n        from automata.core.coding.py_coding.module_tree import LazyModuleTreeMap\n        from automata.core.utils import root_fpath\n        \n        path_to_root = root_fpath()\n        module_tree_map = LazyModuleTreeMap(path_to_root)\n        \n        # Fetch an existing module by its dotpath\n        module_dotpath = \"automata.core.agent.automata_agent\"\n        module = module_tree_map.fetch_module(module_dotpath)\n        \n        # Check if a module with the given dotpath exists\n        exists = module_dotpath in module_tree_map\n        ```\n        \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.cached_default\n    \n      Class Docstring:\n        Creates a new LazyModuleTreeMap instance with the default root path\n        \n      Methods:\n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.core.utils.HandlerDict\n    \n        The `HandlerDict` class is a dictionary used to represent a logging handler in the context of logging configuration in the Automata Docs library. It's primarily used in conjunction with other related symbols to manage and configure logging settings. A sample use case of `HandlerDict` involves creating an instance of it and using it within a LoggingConfig object. The primary purpose of this utility class is to serve as a structured representation for logging handlers and it may not provide much value when used in isolation.\n        \n      Class Docstring:\n        A dictionary representing a logging handler\n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.core.coding.py_coding.module_tree.DotPathMap\n    \n        DotPathMap is a class designed to map module dotpaths to module filepaths within Python codebases, allowing for easy programmatic access. The class is initialized with the absolute path to the root of the module tree and offers utility methods, such as checking if a dotpath or filepath are in the map, getting the corresponding dotpath for a given module filepath and vice versa, and adding a module with a specific dotpath to the map. However, DotPathMap has a limitation in that it solely supports Python projects with a specific directory structure and doesn't handle cases with different structures, such as virtual environments or nested packages.\n        \n      Class Docstring:\n        A map from module dotpaths to module filepaths\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                if not os.path.isabs(path):\n                    path = os.path.join(root_fpath(), path)\n                self._abs_path = path\n                self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n                self._module_fpath_to_dotpath_map = {\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        \n            \n        contains_dotpath(self, module_dotpath: str) -> bool\n        \n        contains_fpath(self, module_fpath: str) -> bool\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        get_module_fpath_by_dotpath(self, module_dotpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, str]]\n        \n        put_module(self, module_dotpath: str) -> None\n        \n    automata.core.coding.py_coding.module_tree.LazyModuleTreeMap.__init__\n    \n      Class Docstring:\n        Args:\n        path: The absolute path to the root of the module tree\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n    automata.core.coding.directory.DirectoryManager\n    \n        DirectoryManager is a utility class for handling directory structures, providing methods for creating directories and obtaining lists of files and subdirectories within a given directory. To create a DirectoryManager instance, simply import the class and initialize it with the base path of the desired directory structure. However, it has some limitations, such as assuming a specific directory structure based on the base path provided and not having error handling for incorrect or inaccessible paths. Here's an example usage:\n        \n        ```python\n        from automata.core.coding.directory import DirectoryManager\n        \n        # Creating a new directory\n        base_path = \"/path/to/base/directory\"\n        dm = DirectoryManager(base_path)\n        dm.ensure_directory_exists(\"new_directory\")\n        \n        # Retrieving the list of files and subdirectories in a given directory\n        files = dm.get_files_in_dir(\"new_directory\")\n        subdirs = dm.get_subdirectories(\"new_directory\")\n        print(\"Files:\", files)\n        print(\"Subdirectories:\", subdirs)\n        ```\n        \n        \n      Class Docstring:\n        Handles operations related to directory structure.\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): Base path of the directory structure\n                \"\"\"\n                self.root = self._load_directory_structure(base_path)\n        \n            \n        ensure_directory_exists(self, directory_path: str) -> None\n        \n        get_files_in_dir(self, path: str) -> List[str]\n        \n        get_subdirectories(self, path: str) -> List[str]\n        \n    automata.tests.unit.test_py_code_retriever.module_map\n    \n        @pytest.fixture\n        def module_map():\n            # get latest path\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            # Set the root directory to the folder containing test modules\n            return LazyModuleTreeMap(sample_dir)\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.tests.unit.sample_modules.sample`/EmptyClass#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "EmptyClass", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# EmptyClass\n\n`EmptyClass` is a simple class with no methods or attributes and is defined in the `automata.tests.unit.sample_modules.sample module`. The class definition is as follows:\n\n```python\nclass EmptyClass:\n    pass\n```\n\n## Related Symbols\n\n- `automata.tests.unit.sample_modules.sample.OuterClass`\n- `automata.tests.unit.sample_modules.sample.OuterClass.InnerClass`\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n- `automata.tests.unit.test_py_code_retriever.test_get_code_no_docstring_no_code`\n\n## Example\n\nThe following example demonstrates how to create an instance of `EmptyClass`.\n\n```python\nfrom automata.tests.unit.sample_modules.sample import EmptyClass\n\nempty_instance = EmptyClass()\n```\n\n## Limitations\n\n`EmptyClass` is an example of a trivial class with no functionality. It serves as a placeholder and can be used in testing scenarios where a simple class is needed without any specific behavior or attributes.\n\n## Follow-up Questions:\n\n- What is the purpose of `EmptyClass` in the module?\n- Are there any specific use cases for `EmptyClass` in the project?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class EmptyClass:\n    pass\n\n\n", "summary": "`EmptyClass` is a basic class with no methods or attributes, located in the `automata.tests.unit.sample_modules.sample module`. It serves as a placeholder and can be used in testing scenarios requiring a simple class with no specific behavior or attributes. To create an instance of `EmptyClass`, use the following code:\n\n```python\nfrom automata.tests.unit.sample_modules.sample import EmptyClass\nempty_instance = EmptyClass()\n```", "context": "\n    Generate the documentation for EmptyClass using the context shown below -\n  Building context for primary symbol - automata.tests.unit.sample_modules.sample.EmptyClass -\n  \n      class EmptyClass:\n          pass\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_code_no_docstring_no_code\n    \n        def test_get_code_no_docstring_no_code(getter):\n            module_name = \"sample\"\n            object_path = \"EmptyClass\"\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = \"class EmptyClass:\\n    pass\\n\\n\\n\"\n            assert result == expected_match\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.__init__\n    \n        def __init__(self):\n                pass\n        \n            \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound\n    \n        PyCodeWriter is a utility class for managing Python modules using AST nodes. It builds on the PyCodeRetriever object and offers methods for creating, updating, and deleting modules. To create an instance of PyCodeWriter, pass a PyCodeRetriever instance as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        from automata.core.coding.directory import DirectoryManager\n        \n        python_retriever = PyCodeRetriever(DirectoryManager().module_tree_map)\n        code_writer = PyCodeWriter(python_retriever)\n        ```\n        \n        Note that PyCodeWriter assumes a particular module structure and may be less flexible for working with different module structures.\n        \n      Class Docstring:\n        Raised when a class or function is not found in the module\n        \n    automata.tests.unit.sample_modules.sample_module_2.fhFSO\n    \n        def fhFSO():\n            \"\"\"GEjBUXtHLGzJDCDsnFFp\"\"\"\n        \n            pass\n        \n        \n    automata.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.tests.unit.sample_modules.sample`/OuterClass#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "OuterClass", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# OuterClass\n\n`OuterClass` is a sample class that contains an inner class called `InnerClass` within it. This inner class has a method named `inner_method`.\n\n## Overview\n\n`OuterClass` demonstrates an example of using nested classes in Python, with outer and inner classes structures. The `InnerClass` has its own method `inner_method`. \n\n## Related Symbols\n\n- `sample.EmptyClass`\n- `sample.OuterClass.InnerClass`\n- `sample.OuterClass.InnerClass.inner_method`\n- `sample_module_2.ObNMl`\n- `core.symbol.symbol_types.Symbol`\n- `test_py_writer.MockCodeGenerator`\n- `sample.Person`\n- `sample_module_2.ObNMl.method`\n- `core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound`\n- `sample_module_2.fhFSO`\n\n## Example\n\nThe following is an example demonstrating how to use `OuterClass` and its nested `InnerClass`.\n\n```python\nfrom automata.tests.unit.sample_modules.sample import OuterClass\n\nouter_instance = OuterClass()\ninner_instance = OuterClass.InnerClass()\n\ninner_result = inner_instance.inner_method()\n```\n\n## Limitations\n\n`OuterClass` is a simple example with limited functionality. It might not cover all functionalities related to nested classes in Python. It assumes the `InnerClass` to have only a single method, limiting the complexity it can handle.\n\n## Follow-up Questions:\n\n- Are there more complex examples of nested classes in the given context?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class OuterClass:\n    class InnerClass:\n        \"\"\"Inner doc strings\"\"\"\n\n        def inner_method(self):\n            \"\"\"Inner method doc strings\"\"\"\n", "summary": "`OuterClass` is a sample class in Python that utilizes nested classes, containing an inner class named `InnerClass` which has a method called `inner_method`. To use `OuterClass` and its nested `InnerClass`, create instances of both classes and call the `inner_method`. However, this example has limited functionality as it only assumes one method within the `InnerClass`, thus not covering all aspects of nested classes in Python.", "context": "\n    Generate the documentation for OuterClass using the context shown below -\n  Building context for primary symbol - automata.tests.unit.sample_modules.sample.OuterClass -\n  \n      class OuterClass:\n          class InnerClass:\n              \"\"\"Inner doc strings\"\"\"\n      \n              def inner_method(self):\n                  \"\"\"Inner method doc strings\"\"\"\n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_docstring_nested_class\n    \n        def test_get_docstring_nested_class(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner doc strings\"\n            assert result == expected_match\n        \n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_docstring_nested_class_method\n    \n        def test_get_docstring_nested_class_method(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass.inner_method\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner method doc strings\"\n            assert result == expected_match\n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound\n    \n        PyCodeWriter is a utility class for managing Python modules using AST nodes. It builds on the PyCodeRetriever object and offers methods for creating, updating, and deleting modules. To create an instance of PyCodeWriter, pass a PyCodeRetriever instance as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        from automata.core.coding.directory import DirectoryManager\n        \n        python_retriever = PyCodeRetriever(DirectoryManager().module_tree_map)\n        code_writer = PyCodeWriter(python_retriever)\n        ```\n        \n        Note that PyCodeWriter assumes a particular module structure and may be less flexible for working with different module structures.\n        \n      Class Docstring:\n        Raised when a class or function is not found in the module\n        \n    automata.tests.unit.sample_modules.sample_module_2.fhFSO\n    \n        def fhFSO():\n            \"\"\"GEjBUXtHLGzJDCDsnFFp\"\"\"\n        \n            pass\n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.tests.unit.sample_modules.sample`/OuterClass#InnerClass#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "OuterClass", "suffix": 2, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "InnerClass", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# OuterClass\n\n`OuterClass` is a container class that has an inner class called `InnerClass`. `InnerClass` contains a method called `inner_method`. The purpose of `OuterClass` is to provide a simple example of a nested class structure. You can create an instance of `OuterClass` and subsequently access the `InnerClass` and its methods.\n\n## Related Symbols\n\n- `automata.tests.unit.sample_modules.sample.EmptyClass`\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata.tests.unit.sample_modules.sample.Person`\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl.method`\n- `automata.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `OuterClass` and access the `InnerClass` and its method.\n\n```python\nfrom automata.tests.unit.sample_modules.sample import OuterClass\n\n# Create an instance of OuterClass\nouter_instance = OuterClass()\n\n# Create an instance of InnerClass\ninner_instance = outer_instance.InnerClass()\n\n# Call the inner_method of InnerClass\ninner_result = inner_instance.inner_method()\n```\n\n## Limitations\n\nThe primary limitation of `OuterClass` is that it has a very narrow use case, primarily for demonstrating nested class structures. It does not have any real-world application or functionality. Apart from that, it serves as a good example of how to create, access and utilize nested classes in Python.\n\n## Follow-up Questions:\n\n- Are there any other examples of nested classes and their use cases?\n- How can we extend the functionality of `OuterClass` and `InnerClass` to better demonstrate the potential of nested classes?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": "AAAAwNuXfT8AAACg3xFxPwAAACARuX6/AAAA4OBZgr8AAAAAJUaPvwAAAGBaOHi/AAAAQDZDbT8AAACgLS2KvwAAAEDraqS/AAAAYBM4c78AAADAOQpjvwAAAIBgj3C/AAAAID0viT8AAABgvo5OPwAAACCxC3S/AAAAQB3FX78AAAAANcyTPwAAAMB3cI+/AAAAoH4tgz8AAABgwgiSPwAAAIA0SD6/AAAAQJpqiz8AAACgAYiXvwAAAKC23oa/AAAAwDIedz8AAAAgVtyOPwAAAOAuRpM/AAAAgLG+ob8AAADgJayaPwAAAICYb4y/AAAAQFueoz8AAAAghWZxPwAAAADz66O/AAAAYL5flr8AAABgCTh/PwAAAAAMmZm/AAAAYHdfoT8AAABAHcWfvwAAAEC2/HA/AAAAAChahz8AAACgxpOTPwAAAADtZZM/AAAAgFDag78AAAAA59+CvwAAAGAih4S/AAAAYJ8skD8AAACgSe6XvwAAAICMNKO/AAAAYK8QhT8AAAAgw52FPwAAAEDrmYw/AAAAIHtmnT8AAACA+SSivwAAACA0Zog/AAAAoOWXcT8AAAAgPQBxPwAAAEDraoS/AAAAwIo5lD8AAAAg3417vwAAAOAf96G/AAAAoBo1nT8AAAAAmfNxvwAAAICIi4e/AAAAIFathr8AAACAse15PwAAAKCX2lg/AAAAYOfBeD8AAADA25eNPwAAAMCsr3o/AAAAQIdyfj8AAADgHLShPwAAAADg86Y/AAAAIIVmUb8AAACgT3RIPwAAAOArMps/AAAAANGklb8AAAAgIT+TvwAAAMA5CoM/AAAAoM+LXL8AAACgxsJbPwAAAECX+HK/AAAA4JWwcb8AAABgKDydvwAAAAASH5o/AAAAoH4tc78AAADA/a+DPwAAAGBtX42/AAAAoF9YjT8AAABAoMGDPwAAAGAJOJ+/AAAAgMprlz8AAAAAjIGVPwAAAADmqI8/AAAA4IMegL8AAACg5cZpPwAAAAAD0Hg/AAAAQMkjJj8AAAAASweRPwAAAMD0FWs/AAAAYO0Yob8AAAAATkqhvwAAAGBhJJQ/AAAA4Cjvir8AAACgBMt3vwAAAGBBupq/AAAAwINNiD8AAABA65mMPwAAAKDTBZC/AAAAIG9ajD8AAADgu8+DPwAAAGDzzXm/AAAAILR9nD8AAAAARBuFvwAAAOBRIqW/AAAAQHRLeT8AAACgjhFovwAAAADz64M/AAAAIHXgnL8AAABgFqpbPwAAAIA+SHK/AAAAINbEar8AAADgkpypPwAAAEBrUzC/AAAAIPtOib8AAADAd3BPPwAAAEAE6YG/AAAA4IZhkL8AAABg93aFvwAAAMBew3m/AAAAwPGjkr8AAACALsJtPwAAAABK0I0/AAAA4AZ5dD8AAADAGaBZvwAAAADEMnk/AAAAwE7flD8AAABgfeWRvwAAAAC7OkC/AAAA4OYOSz8AAABAjcmGvwAAAGBq7ZQ/AAAAYInxkj8AAACAMdZ1PwAAACBsF4w/AAAAAFcTkr8AAACALsJdvwAAAEDYoX8/AAAAQFuekz8AAACAaYdpPwAAAGCTT3e/AAAAwHqEVz8AAABA1S+HvwAAACCb0HY/AAAAwIo5lL8AAABAFxCXPwAAAODHCq0/AAAAoL3KYj8AAAAAFWI6PwAAAEBuloA/AAAAQFLVkj8AAADARRaEPwAAAED0M5U/AAAAYDWuSb8AAABAIxxovwAAAGAs5Wg/AAAAYHPlnT8AAAAgNDeQvwAAAEC2/IC/AAAAIEBDgb8AAAAgYx+TPwAAAIBAVG8/AAAAIIVmcT8AAADgRIGAvwAAAIDTNHg/AAAAYHdfQb8AAACApHudPwAAACDN+4k/AAAAQE/Bij8AAADAZBqivwAAAMApVYa/AAAAoPWqjj8AAADA/a+TvwAAAAAG5KA/AAAAoP5Elz8AAADACiKgvwAAAMD6m4s/AAAAYBm+kz8AAACgSe5nPwAAAEAE6aE/AAAAgKR7jT8AAADAL9t2vwAAAMBx6p4/AAAAAPYudL8AAACgsIeOPwAAAGATOOO/AAAAAHZGeL8AAADAW4BpvwAAAOCMFqm/AAAAwOQxhj8AAACgHUl1PwAAAMAmEma/AAAAwGddkj8AAAAgw52VvwAAAIBmRJk/AAAAAPCoo78AAABgOMKRPwAAAEBoEHC/AAAAQJAMlz8AAADgXV1+PwAAAKBPRaC/AAAA4NeQoT8AAACg+zCfvwAAAMBCAky/AAAAYC8oWT8AAADg9sOHPwAAAGBI1Y4/AAAAoLYNn78AAABANhR1PwAAAKAaBmU/AAAAIFAnlj8AAADg/BqQPwAAAAB5iYi/AAAAYDjCoT8AAACgz4tcvwAAAKB1ZKK/AAAAgC7CjT8AAACgXOaUPwAAACAFrY2/AAAAQM+ppj8AAACAUx10PwAAACAIwYW/AAAAwMhBoD8AAAAgEYp2PwAAAABESp0/AAAA4B8mWj8AAADAXsOJvwAAAIC0MIo/AAAAoCd4gT8AAAAAREp9PwAAAKDll2G/AAAAIKGFjz8AAAAACVaZPwAAAMAsx36/AAAAAMQDkb8AAADgxJiUPwAAACAFrW0/AAAAoEardz8AAAAg7P+HPwAAAEBxCJk/AAAAoM+LjL8AAADgooCePwAAAOActJG/AAAAIEb4eb8AAAAgU2qGvwAAAIDpno0/AAAAgGMBmT8AAAAAR151PwAAAED7H6G/AAAAQNLsZr8AAADAy4SQPwAAAMCmKZq/AAAAoJergD8AAADAfcd3vwAAAIC3RGK/AAAAQOuZjL8AAACANEiePwAAAIDvJI6/AAAAQJ1+gz8AAAAgaaVzvwAAAOBXqKU/AAAAgC7CnT8AAABgLLaQvwAAAOCSbZG/AAAAQEx+qj8AAACAlSyMPwAAAMCQv4S/AAAAoEnud78AAABAXhCMvwAAACDNzJE/AAAAAChah78AAABg6gSJvwAAAICexmS/AAAAICE/kz8AAABgH0SEvwAAACC3kVS/AAAA4HxhjD8AAAAAV0J6vwAAAEAE6aG/AAAAQIdybr8AAACAK1B1vwAAAAC4Joi/AAAA4F1dfr8AAADAtXg7vwAAAAAoWoc/AAAAIEByiT8AAABAs+iYvwAAAIB5a56/AAAAgLG+kb8AAADALMd+PwAAAKD1qn6/AAAAQN9ekz8AAABA+NygPwAAAKBMMag/AAAAYMQUn78AAAAgX3ZnvwAAAADB75i/AAAAQA3har8AAAAgglKZPwAAAIAkZIk/AAAAQKMznL8AAABA96WdPwAAAMBx6n6/AAAAgGZEmT8AAAAgQ7WZvwAAAIDpno2/AAAAgBtskD8AAAAAXch6vwAAAABjTou/AAAAQNIbjz8AAADgrl2HPwAAAEBx2UC/AAAAoKoBnr8AAAAgQHKZvwAAAEC8gpG/AAAAQDlXhb8AAAAg//d0PwAAAEAHLJI/AAAA4F1dXj8AAABgiSCbPwAAAOBX140/AAAAoENolz8AAABgIoeEvwAAAOBXqIU/AAAAYBwwjL8AAACABWCLvwAAAKDoCYq/AAAAQPjcoD8AAABgsoKNvwAAAECTfn+/AAAAoHvqgr8AAADg3UWavwAAAKCLzoe/AAAAIBc/j78AAABASTtqPwAAAODdFpK/AAAAYOfBiL8AAACAGFiIvwAAAICoJJk/AAAAwFKIgD8AAAAgzfuZvwAAACDAiY2/AAAAIJiNhr8AAAAgKgiUvwAAAAC7OpC/AAAAAErQnT8AAADgWuuFPwAAAABaVqK/AAAAYFFvlz8AAACgazWWvwAAAICL/X+/AAAAwGQakr8AAAAAJRenPwAAAMBxu2Y/AAAAgKj1oL8AAACAwaJmPwAAAKCzm3a/AAAAYPd2hT8AAABgLyh5vwAAACAbuZI/AAAA4G3jgj8AAAAgcm6UvwAAAMCyNYs/AAAAYG0whb8AAABgMjyBvwAAAECaO0M/AAAAQNIbjz8AAACgl9qIvwAAACBvWpy/AAAAAL59kD8AAACgsFhmvwAAAOA754c/AAAAIK1iiL8AAABg+rmVvwAAAOCVsKE/AAAAAFpWgr8AAACgVmCUPwAAAABwwJe/AAAAAPmgjD8AAADAnTGBPwAAAEBx2aA/AAAAoIclXL8AAABAk36PPwAAAOBUZZU/AAAAoFZgpD8AAADAQtNjPwAAAGD3dpW/AAAA4J8Ohr8AAABAHZaHvwAAAADanJ4/AAAAwEUWhD8AAADgjOeAPwAAAOD/jGi/AAAAoBSvnD8AAAAg+AuZPwAAAOBm95Y/AAAA4IZhoD8AAADgHyZavwAAACCYjZa/AAAA4JJtkT8AAADAlkWFPwAAAOActIE/AAAAwDkKoz8AAABABOmhPwAAAGDhO1g/AAAAQJf4Uj8AAACgIfKgPwAAAMCWRXU/AAAAIBc/fz8AAACgyQWMPwAAAAArnWc/AAAAYCK2nD8AAADAW4CJPwAAAGA4wpG/AAAAQBpTp78AAABgD76PvwAAAADzGpw/AAAAIN+Niz8AAADAjXyEPwAAACA3qag/AAAAgBhYmD8AAACg+L6GPwAAAGCyU5W/AAAAoITimz8AAABAv8WhvwAAAEDPqZa/AAAAgGCPcL8AAABAbsVIvwAAAOBt45K/AAAAwKPmmT8AAACg5ZehvwAAAOBzmJs/AAAA4MFVlD8AAAAAUY2RvwAAAMAT65C/AAAAAHzMiL8AAADAeoSHvwAAAEA2FJW/AAAAQOuZnD8AAAAAiT6FvwAAAECjM4y/AAAAIDq9cD8AAABAa1NgPwAAAAA7UpQ/AAAAoOjakT8AAAAgBa19PwAAAIChCZW/AAAAAChaZ78AAACAkulrvwAAAMBbUZE/AAAAoL3KUj8AAABgOMJRPwAAAGCJIIu/AAAAoBo1jT8AAABAMI6EvwAAACBN5JW/AAAAACvMj78AAADgee9zPwAAAMDxo5K/AAAAwNKfpD8AAADg7fpGPwAAAED+YqE/AAAAQAGmoT8AAAAAwcCgPwAAACDQD4I/AAAAYCy2oL8AAABAUtWivwAAAACl/1I/AAAAQGg/iD8AAAAAHE6WvwAAAADU51U/AAAA4Az/pL8AAADADWWAvwAAAMCWdJ2/AAAAAOaonz8AAAAAdkaYvwAAAKCRVIg/AAAA4FRlhb8AAACAUx1kPwAAAICMNIO/AAAAwNglZT8AAACAUx2UPwAAAEBoEBC/AAAAIPXIaD8AAACAaYeZPwAAAGAih6Q/AAAA4McKjb8AAACAGFhoPwAAAAA4Ppw/AAAA4MGEnD8AAADgYHGWPwAAAEBbnnO/AAAAwO0pf78AAACAm4OUvwAAAKCq0pW/AAAA4Gb3hj8AAADA5DGGvwAAAAClLou/AAAAgCtQlT8AAAAgML1sPwAAAIB/8Z6/AAAAgLQBkj8AAADA8dJaPwAAAACPxHU/AAAAoJRocD8AAABgXuFzPwAAAEDfXmM/AAAAYHPlrb8AAADAmYiFPwAAAKCRJaA/AAAA4HxhXD8AAAAA8KiTvwAAAKBfKYU/AAAAIJTkmr8AAADA9OaivwAAAICYQJS/AAAAAKX/kr8AAADgx9uEPwAAAOBpaY+/AAAAwDxNg78AAACgdWRCvwAAAAD5cfS+AAAAIH8PKT8AAACgl9qYPwAAACBi6J8/AAAAACVGb78AAAAgQEOBvwAAAICPd5M/AAAAIIVmgb8AAAAggiORPwAAAEDrapS/AAAAYBwBhL8AAACAGFiIPwAAAMCKaHw/AAAAwBDXiL8AAAAA1BZePwAAAMCgdIE/AAAAAHZGeD8AAAAgdbGkvwAAAGDRhps/AAAAwF7DmT8AAAAAH5GWPwAAAKCBn4s/AAAAIPJWoL8AAACglJeIPwAAAACVeS4/AAAAAPmgnD8AAACgQCVnPwAAAKDPi4y/AAAA4AwuXT8AAABgL/mgPwAAACBAQ4G/AAAAQK0zkL8AAADgbeOCvwAAAOCcy4W/AAAAoISzk78AAAAAuCaIPwAAAGADg1Y/AAAAAF2Zkr8AAAAAxAOBPwAAAMCm+nG/AAAAoKePdb8AAABAioaGvwAAAIChCWW/AAAAIPXIeL8AAABgeqKhvwAAACARuY4/AAAAwPpsUz8AAADAkwKVvwAAAGDRhpu/AAAAwI18ZL8AAADAy4SQPwAAACCOXmq/AAAAAIyBhb8AAAAAGKV6PwAAACDyVnC/AAAAIM3MkT8AAACgGgaVvwAAAIBztoU/AAAAIDrsaL8AAAAAStCNvwAAAAAMaoG/AAAA4CWsij8AAABgYVN8PwAAAMDhHY6/AAAAwLI1ez8AAABgKXOAvwAAAKAqu5G/AAAA4HkebD8AAAAAD62RPwAAAADg86a/AAAAAIB1lL8AAACgKuqZvwAAACAe/HI/AAAA4EE+kD8AAABAVUebPwAAACDZB5s/AAAAoLkhh78AAACgclCaPwAAACBDtYk/AAAAIE3kdT8AAADAP5BzvwAAAIAkZIm/AAAAYIAogr8AAAAgEYpmvwAAAIBAVH+/AAAAAFT/Wb8AAACgw1CDvwAAAMD0FYu/AAAAAA+tgT8AAABgmdVXPwAAAKA5OYu/AAAAwLI1i78AAABgYVN8PwAAAACb/56/AAAAYDJreb8AAABgNa6ZPwAAAMBFFnS/AAAAIPtOiT8AAAAAwcCgPwAAAGCl4Zi/AAAAIJiNhj8AAACgazWGPwAAACAVM7K/AAAAgFoJgD8AAAAgG7mCvwAAAECtM6A/AAAAYGrtlL8AAACgNvaqvwAAAOCJ03i/AAAAAOAij78AAACgeNaaPwAAAGAQ9ZI/AAAAYGrtdL8AAADA53SWPwAAAKDfEYG/AAAAYHqigb8AAABA/pFpvwAAAGDOFKO/AAAAwELTgz8AAACgAbdPvwAAAICYQJS/AAAAAHmJmL8AAACgfi1jPwAAAOBEsHg/AAAAwC/bdj8AAADA0p9EPwAAAEAmMGA/AAAAQF4QjD8AAADgkm1BvwAAACBmYmM/AAAAQLYreb8AAACg+zB/vwAAAECdfnM/AAAAYGFTnL8AAADAv6dHPwAAAGBwc6U/AAAAgC7Cjb8AAABAJjCgPwAAAIDpno0/AAAAwCzHfr8AAABAB1t6PwAAAOCDHpC/AAAAIIVmoT8AAADg+QZYPwAAAGDqBDk/AAAAAGo6R78AAADg84BXvwAAAGDzzYk/AAAAAPYupD8AAABA/pGJvwAAAMDxo5I/AAAAoPsBZz8AAADg84B3vwAAAIC3RJI/AAAAABViir8AAADAEKhgPwAAAKDWSJC/AAAAgN2SnL8AAAAAqEKTvwAAAIDQ8Yc/AAAAwOQxhj8AAACAG5tYPwAAAED7H2G/AAAAYDsFkj8AAAAAqEJzvwAAAEC8goE/AAAAoHWTer8AAABA0uymvwAAAOCSnHk/AAAAgKj1cD8AAABgH0SEvwAAAGB0HJE/AAAAQFVHm78AAAAgBX6lvwAAAADU55U/AAAAICSCU78AAADgj1k5vwAAAKD4vpY/AAAAgEqDiz8AAAAAbX1nvwAAAKAaNZ0/AAAAQL/0eb8AAABgMjyhPwAAAADtZZO/AAAAYBZ7oz8AAADgxJikvwAAAIDpnn0/AAAAoBE9ZD8AAADAcepePwAAAKDVEZ0/AAAAoG/ekT8AAABAzJVOvwAAAGCWkpe/AAAAoHinkj8AAABArTOQPwAAAADz65O/AAAAgOCmlD8AAABAJjBwvwAAACA9AHG/AAAAAPDXm78AAABgyL2avwAAAGAJOJ+/AAAAQC1LlD8AAADgc2mTPwAAAEC8sWm/AAAAQLB2gL8AAADAEKiQPwAAAKBlr5W/AAAAYAbGhj8AAABAHZaHvwAAAEBulrA/AAAA4NrTkT8AAACgDvqTPwAAAAC7aZg/AAAAAPDXi78AAADgeR58PwAAAMCv8mq/AAAAQPsfcb8AAADgXV1+PwAAAGDOQ5s/AAAA4OOcgj8AAACgIfKAvwAAACAOR5Y/AAAA4HOYWz8AAABAXhB8PwAAAED3pX2/AAAAYJaSl78AAADAENeYPwAAAIDQ8ac/AAAAYJ9biD8AAABgIoeUvwAAAAA1zJM/AAAAIAI7lb8AAAAgjl56PwAAAMCvw4K/AAAAAJnzcb8AAACgz1x0vwAAAMAKIqA/AAAAgI93o78AAAAAD9yZPwAAAEABpnG/AAAAYORPoD8AAACgYmx1PwAAAED3pV0/AAAAwDVhh78AAADAZBqSvwAAAABOSgG/AAAAIKSZh78AAACgvcpCvwAAAECwpYg/AAAA4AaofD8AAADAFl2ZvwAAACC6A50/AAAAYMsAa78AAADAcbtmvwAAAEA2Q32/AAAA4POvn78AAACgfi2jPwAAAADanJ6/AAAAIMqJkb8AAADg1HxJvwAAAMCyNYs/AAAA4POAlz8AAADgSjZ5vwAAAIBsm5G/AAAA4GPjjr8AAABA+NxQvwAAAEAwjoQ/AAAAYKzNdD8AAAAAj8RVvwAAAKAdSZU/AAAAIFNqdr8AAAAg2QeLvwAAAOBpaY+/AAAAwHdwj78AAABAHZZHvwAAAIClslC/AAAAAJIHlr8AAABgcHOlvwAAAADHRpG/AAAA4I8qgb8AAAAgoVaHvwAAAACivJK/AAAAACUXl78AAADgDC59vwAAAIBsypk/AAAAYIkgi78AAAAARBt1PwAAAGB3X5G/AAAAQJcnez8AAAAg1sSavwAAAODzr38/AAAAwIpoTD8AAACARM6ivwAAAGAitpw/AAAAYC/5kL8AAABAoMGTvwAAAID/qqK/AAAAwNuXnb8AAABgTlufPwAAAAAGE4m/AAAAgN2SnD8AAAAgbBdsvwAAAKDfQIk/AAAAoHjWij8AAADAW4B5vwAAAOC+EpS/AAAAgJhvnD8AAAAgPQCBvwAAAGAvKIm/AAAAwEICnD8AAABgOwWSvwAAAIDpb1U/AAAAYJaSh78AAADgrl1nvwAAACALBIY/AAAA4I8qkb8AAADA22iFPwAAAOBNeYm/AAAAgJLpaz8AAADg48uaPwAAAMDbaEU/AAAAoHsZm78AAADgzZB9vwAAAADtlHu/AAAA4NEKYT8AAABALUuEvwAAAIAFYHu/AAAAYIauYr8AAADAh/ZzPwAAAEDurZQ/AAAAQPeljT8AAADAMh6HPwAAACAe/JK/AAAAoBo1jT8AAADAGaAZPwAAAKAO+qO/AAAAgB6vYD8AAACgFK9cvwAAACDNzKE/AAAAwBmgiT8AAACgvJOfvwAAAOBgcYa/AAAAAMHAkL8AAADgtUmTvwAAACBQJ3Y/AAAAwGHXgb8AAAAAiW19PwAAAMB3cH8/AAAAIH8PaT8AAACAeWt+PwAAAOBRIqU/AAAAwOejTr8AAAAARBt1PwAAAECKhpa/AAAAoDOEgj8AAAAAm/+ePwAAACDAiZ0/AAAAoFK3iD8AAAAAuCaYvwAAAEA8yZ2/AAAAYGEklD8AAAAgYx9TvwAAAIBgvog/AAAAoAG3j78AAADAClGoPwAAAAB8zIi/AAAAoGtkjr8AAADgDC5tvwAAAEDMZoa/AAAAINaVkr8AAACgaPJ1PwAAAEDoJ5Q/AAAAAABeoL8AAAAA+aCcvwAAACCCI3E/AAAAIMqJgb8AAABACm+CPwAAAMANZaC/AAAAIHJuZD8AAACgJ3iBvwAAAGAih4Q/AAAAAOM2R78AAACAYI+QvwAAAADOYXU/AAAAAPy0dD8AAABAINmHPwAAAADqUZs/AAAAoGWvdT8AAACApHuNPwAAAIDdkmy/AAAAAKhCkz8AAADATt+UvwAAACB/4IC/AAAAYDjxib8AAACg3xGRvwAAAODt+nY/AAAAIPtOaT8AAACg6AlavwAAAOBKNqm/AAAAYGRnpD8AAABgbV+dvwAAAKAgu20/AAAAwJz6Pb8AAABAySNWvwAAACBmYpO/AAAAwH32nz8AAACApbKAvwAAACALM36/AAAAwJ0xoT8AAABgNX+RvwAAAMBLy3y/AAAAgH/xfr8AAACgM4RyvwAAAACPxFU/AAAA4ESBYL8AAACgKup5PwAAAKCE4iu/AAAAoPi+hr8AAADAuLubvwAAAED+YpG/AAAAwOHupT8AAABgGe2bvwAAAKBfWI2/AAAA4KjXxj8AAACguSF3PwAAAMB3cI+/AAAAoGtkjj8AAABAAdWZvwAAACBvWqw/AAAAoM9chL8AAACAHt6IvwAAAGATOJO/AAAAwBzjiT8AAAAAEvCRvwAAAABHXpU/AAAAIEOGkb8AAADAEKiAPwAAAECgwZM/AAAAQE/Bir8AAACABTGjvwAAACDQPpq/AAAA4Frrlb8AAACA/GdivwAAAMAAIny/AAAAIMbgpb8AAACAD4+XvwAAAICe9Yy/AAAAwNuXnT8AAADgIjqSvwAAAOD8SZi/AAAAQFLVkj8AAABgcHOlPwAAAGB95YE/AAAAwJDunL8AAABgFnuDPwAAAMB3cJ8/AAAAwCYSlr8AAACgGgZ1PwAAAEC5bnm/AAAAQMxmhj8AAACAmECEPwAAAIDvJH4/AAAAAI/zfT8AAAAAwcCAvwAAAEAHLKK/AAAAgAijiz8AAACA9hD6vgAAACACO0U/AAAAAI/zXT8AAACAHt6YvwAAAKBrZH4/AAAA4NrTcb8AAACAeTx2PwAAAKCa7qC/AAAAIBG5Tj8AAABAECSLPwAAAECBvWU/AAAAIKGFjz8AAACAaVhhPwAAAOB574M/AAAA4KJRhj8AAACASlSjPwAAAOAYC6Y/AAAAoPsBh78AAAAgHiubPwAAAKBZo3S/AAAAYIkgez8AAAAAK8x/vwAAAEAg2Yc/AAAAAODzhr8AAADAbniGvwAAAADgIn+/AAAAIP/3hL8AAABArTOAPwAAAIDj6YS/AAAAYORPgL8AAAAAPsScvwAAAKAO+lO/AAAAwCzHXj8AAADAI8+VPwAAAMCWRYU/AAAA4Gb3hj8AAADgdqyjPwAAAMA8TTO/AAAAIDq9kL8AAACAbMp5PwAAACDfjXu/AAAAoJElgL8AAABgYSSkvwAAAABqOnc/AAAA4ImkoL8AAACAOp9GvwAAAGApc5C/AAAAYDV/kb8AAADAvGR3vwAAAIAFYJs/AAAAgFoJkD8AAADA/d57vwAAACBi6G+/AAAAICSCkz8AAAAgsQuUPwAAAECTfl8/AAAAANQWjr8AAAAgyomhvwAAAAA+xKw/AAAAQLO5kD8AAAAgOr2QPwAAAKDWSIC/AAAAACvMjz8AAADgwYR8vwAAAEAdxX8/AAAA4IwWeb8AAADg0QqhvwAAACBN5JU/AAAAgDqflr8AAADAbniGvwAAACDs/3e/AAAAQKMzjL8AAADA8dJ6vwAAAOAxuHs/AAAAwCPPZb8AAABAVUd7PwAAAABg3HK/AAAAANQWjr8AAACANBl2PwAAAGBq7UQ/AAAA4KJRhj8AAABAtvygvwAAAAA4Piy/AAAAQFIEm78AAACgqtKVPwAAAMCQ7ny/AAAAoBSvjL8AAABAQk+ePwAAAMAgjKW/AAAA4CI6Ur8AAAAATkqhvwAAAOCYIno/AAAAwFgOYb8AAADgtUmDvwAAAABOSpG/AAAAYF7hcz8AAACghyVsvwAAACA9L5m/AAAAoHVkkj8AAAAAajqHvwAAAACAdXQ/AAAAQLB2kD8AAACglGhwvwAAAADUFo6/AAAAoA4pbL8AAADgR8SQPwAAAKCwh56/AAAAYPd2lb8AAACAc7aVvwAAAGDnknC/AAAAQKz8nL8AAAAgnhOHvwAAAGAya6m/AAAAQHRLmb8AAACArqqpvwAAAAAfkYa/AAAA4AM2hL8AAACgtt6mvwAAAMAyTU+/AAAA4AZ5ZD8AAACAQYtyPwAAAIA3XJa/AAAAQKDwaz8AAADgEoXFvwAAACBQJ5Y/AAAAQDYUVT8AAADAqT2SvwAAACDZB5s/AAAA4MGEbL8AAAAgKghkPwAAACChVke/AAAAYJNPl78AAAAAvqxovwAAAMDndJY/AAAAQLB2kD8AAACAU0ycvwAAAODdFoI/AAAAoKrSlb8AAABgV/WHPwAAAGAGxoa/AAAAgJhvjL8AAABgCQmnPwAAACB1sZQ/AAAAAAxqoT8AAACgQCWXvwAAAGDEFJ8/AAAA4FEipT8AAACAG2xgPwAAAAC7aZg/AAAAIIipgb8AAABgBsZ2PwAAAADHdXm/AAAAQKDBk78AAAAgglJZPwAAACBybnS/AAAAAAlWmT8AAACgZd6NvwAAAACPxJW/AAAA4Dvnhz8AAAAAV0KqPwAAAOCV35m/AAAAwINNiL8AAACgLS16vwAAAIAoDYU/AAAAQD/dhT8AAAAgJLGLvwAAAGAJCYe/AAAAwMhBkL8AAACAmG+MPwAAACBZ8JY/AAAAAPYulL8AAABgvo6OPwAAAICe9Yy/AAAAYNfdcz8AAADArIBiPwAAAEAEGIo/AAAAYPPNib8AAABAjfiOPwAAAGDUmnO/AAAAoBfDRD8AAABAmmqbPwAAAIDpnp0/AAAAACUXhz8AAAAAD62BPwAAAICo9aC/AAAA4Dikl78AAACArnuRPwAAAOA753c/AAAAwGHXkb8AAACAymuXvwAAAIDBopY/AAAAgHO2db8AAADAUoiAvwAAAMAQqIC/AAAAwEuchD8AAAAgp9x3PwAAAOAYOv6+AAAAIEOGYb8AAADA9ymjPwAAACBTapY/AAAAAOffoj8AAAAA0aSFPwAAAEAHW3q/AAAAQBpTl78AAACggXCjPwAAAGCl4Wg/AAAAAFpWcj8AAACge+pivwAAAOBpaX8/AAAAIBvomr8AAAAAq4WDvwAAACBTaoa/AAAAwO5gcr8AAACASoN7PwAAAAAAXqC/AAAAgGzKib8AAABgSNWOvwAAAGCWkpc/AAAAQD/dlT8AAABgGb5zvwAAAEDVL5e/AAAAQBcQZ78AAAAAKFqnvwAAAIDznqE/AAAAgOmefT8AAAAgCwRmPwAAAKB76nI/AAAAwPpsgz8AAAAgYuiPvwAAAMBFFqS/AAAAYEjVTj8AAACAqPWgPwAAAMDrHXK/AAAAoKRMVT8AAAAAPsScvwAAAKDfEWG/AAAAAHYXkD8AAABgUW93PwAAAEAjHFg/AAAAoM9clD8AAABgrxBlPwAAAGDhDJA/AAAAoNMFcL8AAABAs7mgPwAAACBW3I4/AAAAoDBwij8AAACArnuRPwAAAECwdpC/AAAAICf0i78AAABApke0vwAAAAB5WqC/AAAAoHWTir8AAADgSjZ5PwAAAAAJJ5G/AAAAYG0wpb8AAACAq2eZvwAAAODzgKc/AAAAYIBXqr8AAACgpEyVPwAAAMDIcHg/AAAAAGALe78AAADg45yivwAAAGCDmpq/AAAAIMbgFb8AAAAAuzpwPwAAAMBqz3o/AAAAQHEIeT8AAAAge2advwAAAMC1eHs/AAAAwC/bdj8AAABA1S+HPwAAAIBj0pA/AAAAYGrthD8AAACgC7eDPwAAAMDno44/AAAAwEICnL8AAADgKMByPwAAAMB3cG8/AAAAABVimj8AAADAoHRxvwAAAOAlrGq/AAAAYO0Ycb8AAACAtAGSvwAAAKAEy3e/AAAAwCyYlr8AAACglGhAvwAAAMDLs4i/AAAAoB1JpT8AAADAlkWVvwAAACB14Iw/AAAA4Gqgoj8AAAAgNDeAvwAAACDAiZ2/AAAAwClVlr8AAAAA8Nd7PwAAAIClspC/AAAAQKZ2jD8AAACg9XtmvwAAAOCxoIe/AAAAgBubqL8AAABAh0OWvwAAAOBt46K/AAAAwJZFlb8AAAAAK52XPwAAAMAT65C/AAAAwL+ndz8AAAAgglJpPwAAAAAS8HG/AAAAoOjakb8AAAAgwImNvwAAAEBbzXs/AAAAQEk7ej8AAABATH5qvwAAAMC4u3s/AAAAICE/g78AAAAAXZmCvwAAAADHdYm/AAAAwDxNgz8AAADgV6iVvwAAAIAYKaC/AAAAYDjxmT8AAAAgsQtUvwAAAGCygp0/AAAAYGfZjL8AAAAgbyuUvwAAAKDll1E/AAAAQLyCgT8AAADgrl1HvwAAAODjnHI/AAAAIAI7db8AAACghLOTvwAAAGBRb2c/AAAAgLQBkr8AAABg7UeJPwAAAMBnjHo/AAAAIHtmjT8AAACg8jiGPwAAAED+kZk/AAAAQEIglr8AAAAgNDeQPwAAAKB+LYM/AAAA4EfEoD8AAADAy4SgvwAAAAA1zJM/AAAAABVier8AAABg191TvwAAACBQVk6/AAAAAERKfT8AAABAh0OmPwAAAKD+RJe/AAAAgKR7rb8AAACAPkiyvwAAAGD6uZU/AAAAwMuEcL8AAADARUVcvwAAACBppYM/AAAAQBTNlr8AAABAlLWCPwAAAACb/36/AAAAoNZIcD8AAABg93aVPwAAAEDurZS/AAAAQB3Fnz8AAACA7/WVPwAAAEAXEIc/AAAAAJw2or8AAABAd46ZvwAAAKCRVIi/AAAAwPTmkr8AAADAJkGePwAAACCFZpE/AAAAAAxqgb8AAADAE+uAvwAAAKAIdKM/AAAA4DvnZz8AAAAAgHWUvwAAAABU/2m/AAAAgGC+KD8AAACAc7aVPwAAAKDfQIm/AAAAgP+qkr8AAABgRWOWPwAAAIDHKIe/AAAAQLPoiL8AAACAY9KwPwAAAOCDHpA/AAAAYM4UYz8AAABgYVOcPwAAAGAvKHk/AAAAoBE9pD8AAACAmG+MPwAAACCL7FG/AAAAAMQyqb8AAACAqPWgPwAAAKDZumi/AAAAgF1MoL8AAADg9sOHvwAAAADabYa/AAAAAMQDkT8AAACAISF5vwAAACB/D4k/AAAAQLb8kD8AAADgpZRmPwAAACB1sYS/AAAAACLUlr8AAAAAbX2HPwAAAMC8ZIe/AAAAoJElkL8AAACgT3R4vwAAAKB+LZO/AAAAgH/xbr8AAABgWjioPwAAAMDIcJg/AAAAAB+Rhj8AAACgM4SSPwAAAICoJFk/AAAAIBGKlr8AAABAWFujvwAAACCb0GY/AAAAYC/5cD8AAABAPJp1PwAAAODdRYq/AAAA4IzncD8AAADAas+KvwAAAEDMlY6/AAAAAP8mjT8AAACAj3dTPwAAAAC7aXi/AAAAYNTJOz8AAAAA4CKfvwAAAADHdak/AAAAwJC/hD8AAABAHcV/PwAAACDGD26/AAAAoAh0Yz8AAAAgIT+jPwAAAEB7N3W/AAAAQAcsgr8AAABAW81rvwAAAGCvEIW/AAAAYOeScD8AAAAAeVqgPwAAAABU0KE/AAAAQEkMkr8AAACgydaDPwAAAKCq0pW/AAAA4Frrlb8AAABgHAF0PwAAAGC+X5a/AAAA4M2QnT8AAADA9OaSvwAAACDTUoI/AAAAIHWxhL8AAADAWA5xPwAAAGA+dyo/AAAAoNzOoL8AAADgPipovwAAAMBqz3q/AAAA4F1djr8AAADgGAuGvwAAAEDbtWc/AAAAYFo4mD8AAABAT5KivwAAAEB0S4m/AAAAQApvUr8AAACAtAGCvwAAAKC2DW+/AAAA4Glpfz8AAABgom+QvwAAAIB5PIa/AAAAgFDak78AAAAAK8yPvwAAAOBj424/AAAAIF92pz8AAAAAWoWaPwAAAAClLou/AAAAAFcToj8AAABguxyGvwAAAKBDaIe/AAAAIMCJjT8AAAAgkXJyvwAAAMCc+l2/AAAAgLG+kb8AAAAg8lagvwAAAGAWe5O/AAAAoPswf78AAACArnuhvwAAAKDczlC/AAAAIG9afL8AAADAdP6GvwAAAIDznrE/AAAAoHVkkj8AAABg55KQvwAAAAAYpZo/AAAAwJDujL8AAADA9BWLPwAAACDDnZU/AAAAoBE9lL8AAABA96VtPwAAAOBt44K/AAAAQAdber8AAADAPHx7PwAAAADRpHW/AAAAgG8Nir8AAAAgePSEvwAAAKCwh54/AAAAQGtTkL8AAADgH/dRPwAAAKDll4G/AAAAAAYTeT8AAADA56OOPwAAAOAMLo2/AAAAYMIIQr8AAACgOTlbvwAAAKBMApC/AAAAIDrs6L4AAAAAH8CePwAAAEDSG48/AAAAQDZDfb8AAADgCbyUvwAAAICe9Yw/AAAAIOLQiz8AAADAFl2pvwAAAMBew5m/AAAAgJLpCz8AAAAAYNyCPwAAACA6vZC/AAAAgN2SjL8AAABAvIKRPwAAACBi6I+/AAAAwIo5lL8AAAAgG7mSPwAAAADXKoa/AAAAwJZ0nb8AAACAjDSTvwAAAIAx1hU/AAAA4ESBcL8AAAAgiNiZvwAAAOBX162/"}]}]}, "source_code": "class InnerClass:\n        \"\"\"Inner doc strings\"\"\"\n\n        def inner_method(self):\n            \"\"\"Inner method doc strings\"\"\"\n", "summary": "`OuterClass` is a container class containing a nested class called `InnerClass` with a method named `inner_method`. It serves as a simple example of a nested class structure in Python. To create and access instances of both classes and use the `inner_method`, refer to the code example below:\n\n```python\nfrom automata.tests.unit.sample_modules.sample import OuterClass\n\n# Create an instance of OuterClass\nouter_instance = OuterClass()\n\n# Create an instance of InnerClass\ninner_instance = outer_instance.InnerClass()\n\n# Call the inner_method of InnerClass\ninner_result = inner_instance.inner_method()\n```\n\nThough `OuterClass` has a narrow use case and lacks real-world application, it demonstrates how to work with nested classes in Python.", "context": "\n    Generate the documentation for OuterClass using the context shown below -\n  Building context for primary symbol - automata.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n  \n      class InnerClass:\n              \"\"\"Inner doc strings\"\"\"\n      \n              def inner_method(self):\n                  \"\"\"Inner method doc strings\"\"\"\n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_docstring_nested_class\n    \n        def test_get_docstring_nested_class(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner doc strings\"\n            assert result == expected_match\n        \n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_docstring_nested_class_method\n    \n        def test_get_docstring_nested_class_method(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass.inner_method\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner method doc strings\"\n            assert result == expected_match\n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound\n    \n        PyCodeWriter is a utility class for managing Python modules using AST nodes. It builds on the PyCodeRetriever object and offers methods for creating, updating, and deleting modules. To create an instance of PyCodeWriter, pass a PyCodeRetriever instance as follows:\n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        from automata.core.coding.directory import DirectoryManager\n        \n        python_retriever = PyCodeRetriever(DirectoryManager().module_tree_map)\n        code_writer = PyCodeWriter(python_retriever)\n        ```\n        \n        Note that PyCodeWriter assumes a particular module structure and may be less flexible for working with different module structures.\n        \n      Class Docstring:\n        Raised when a class or function is not found in the module\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.tests.unit.sample_modules.sample`/Person#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "Person", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# Person\n\n`Person` is a sample class that represents a person with a name and provides methods to interact with that person.\n\n## Overview\n\n`Person` has a constructor that accepts a name parameter and initializes the instance with that name. The class also has two methods: `say_hello` and `run`. The `say_hello` method returns a greeting string including the person's name, while the `run` method is not implemented yet.\n\n## Related Symbols\n\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n- `automata.tests.unit.sample_modules.sample_module_2.fhFSO`\n- `automata.core.symbol.symbol_types.Symbol`\n\n## Example\n\nHere is an example demonstrating how to create an instance of `Person` and use its `say_hello` method.\n\n```python\nfrom automata.tests.unit.sample_modules.sample import Person\n\nperson = Person(\"John Doe\")\ngreeting = person.say_hello()\nprint(greeting)  # Output: Hello, I am John Doe.\n```\n\n## Limitations\n\nThe `run` method in the `Person` class is not implemented yet, and thus it cannot provide any functionality related to running.", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class Person:\n    \"\"\"This is a sample class.\"\"\"\n\n    def __init__(self, name):\n        \"\"\"This is the constructor.\"\"\"\n        self.name = name\n\n    def say_hello(self):\n        \"\"\"This is a sample method.\"\"\"\n        return f\"Hello, I am {self.name}.\"\n\n    def run(self) -> str:\n        ...\n\n\n", "summary": "The `Person` class represents a person with a name and offers methods to interact with them. It consists of a constructor that takes a name parameter and initializes the instance, and two methods: `say_hello` and `run`. The `say_hello` method returns a greeting string with the person's name, while the `run` method is not yet implemented. To use the `Person` class, create an instance and utilize the `say_hello` method as follows:\n\n```python\nfrom automata.tests.unit.sample_modules.sample import Person\n\nperson = Person(\"John Doe\")\ngreeting = person.say_hello()\nprint(greeting)  # Output: Hello, I am John Doe.\n```\n\nNote that the `run` method currently provides no functionality related to running.", "context": "\n    Generate the documentation for Person using the context shown below -\n  Building context for primary symbol - automata.tests.unit.sample_modules.sample.Person -\n  \n      class Person:\n          \"\"\"This is a sample class.\"\"\"\n      \n          def __init__(self, name):\n              \"\"\"This is the constructor.\"\"\"\n              self.name = name\n      \n          def say_hello(self):\n              \"\"\"This is a sample method.\"\"\"\n              return f\"Hello, I am {self.name}.\"\n      \n          def run(self) -> str:\n              ...\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.method\n    \n        def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.fhFSO\n    \n        def fhFSO():\n            \"\"\"GEjBUXtHLGzJDCDsnFFp\"\"\"\n        \n            pass\n        \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl.__init__\n    \n        def __init__(self):\n                pass\n        \n            \n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.tests.unit.sample_modules.sample2`/PythonAgentToolBuilder#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.tests.unit.sample_modules.sample2", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "PythonAgentToolBuilder", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# PythonAgentToolBuilder\n\n`PythonAgentToolBuilder` is a class for building tools to interact with `PythonAgent`. It helps create a list of `Tool` objects, which represent different commands that can be executed by the agent.\n\n## Overview\n\nThe `PythonAgentToolBuilder` class initializes with a `PythonAgent` instance and provides a method, `build_tools`, that creates a list of `Tool` objects with commands for interacting with the agent. The `Tool` objects have a name, a function, and a description. By using the `build_tools` method, developers can easily create a set of interactive commands for the given agent.\n\n## Related Symbols\n\n- `automata.tests.unit.test_py_code_retriever.test_get_docstring_multiline`\n- `automata.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata.tests.unit.sample_modules.sample_module_2.ObNMl`\n- `automata.core.symbol.symbol_types.Symbol`\n\n## Example\n\n```python\nfrom automata.core.agent import PythonAgent\nfrom automata.tests.unit.sample_modules.sample2 import PythonAgentToolBuilder\n\n# Create an instance of PythonAgent\npython_agent = PythonAgent()\n\n# Create an instance of PythonAgentToolBuilder\ntool_builder = PythonAgentToolBuilder(python_agent)\n\n# Build the list of Tool objects\ntools = tool_builder.build_tools()\n\n# Execute a specific tool (here, we're executing the 'automata-task' tool)\ntools[0].execute()\n```\n\n## Limitations\n\nOne limitation of the `PythonAgentToolBuilder` class is that it currently supports only a single hardcoded task in the `build_tools` method. The task, `python_agent_python_task`, is just a sample and doesn't perform any action. This example may change as new tasks are added or the class functionality expands.\n\n## Follow-up Questions:\n\n- How can we add more tasks to the `build_tools` method?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class PythonAgentToolBuilder:\n    \"\"\"A class for building tools to interact with PythonAgent.\"\"\"\n\n    def __init__(self, python_agent: PythonAgent):\n        \"\"\"\n        Initializes a PythonAgentToolBuilder with the given PythonAgent.\n\n        Args:\n            python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\n        \"\"\"\n        self.python_agent = python_agent\n\n    def build_tools(self) -> List:\n        \"\"\"\n        Builds a list of Tool objects for interacting with PythonAgent.\n\n        Args:\n            - None\n\n        Returns:\n            - tools (List[Tool]): A list of Tool objects representing PythonAgent commands.\n        \"\"\"\n\n        def python_agent_python_task():\n            \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n            pass\n\n        tools = [\n            Tool(\n                \"automata-task\",\n                python_agent_python_task,\n                \"Execute a Python task using the PythonAgent. Provide the task description in plain English.\",\n            )\n        ]\n        return tools\n", "summary": "The `PythonAgentToolBuilder` class helps build tools to interact with a `PythonAgent`. It initializes with a `PythonAgent` instance and provides a `build_tools` method to create a list of `Tool` objects, representing different commands that can be executed by the agent. Each `Tool` object has a name, a function, and a description. Currently, the class only supports a single hardcoded task in the `build_tools` method, called `python_agent_python_task`, which serves as a sample and doesn't perform any action. This example may change as more tasks are added or the class functionality expands. For usage, see the provided example code.", "context": "\n    Generate the documentation for PythonAgentToolBuilder using the context shown below -\n  Building context for primary symbol - automata.tests.unit.sample_modules.sample2.PythonAgentToolBuilder -\n  \n      class PythonAgentToolBuilder:\n          \"\"\"A class for building tools to interact with PythonAgent.\"\"\"\n      \n          def __init__(self, python_agent: PythonAgent):\n              \"\"\"\n              Initializes a PythonAgentToolBuilder with the given PythonAgent.\n      \n              Args:\n                  python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\n              \"\"\"\n              self.python_agent = python_agent\n      \n          def build_tools(self) -> List:\n              \"\"\"\n              Builds a list of Tool objects for interacting with PythonAgent.\n      \n              Args:\n                  - None\n      \n              Returns:\n                  - tools (List[Tool]): A list of Tool objects representing PythonAgent commands.\n              \"\"\"\n      \n              def python_agent_python_task():\n                  \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n                  pass\n      \n              tools = [\n                  Tool(\n                      \"automata-task\",\n                      python_agent_python_task,\n                      \"Execute a Python task using the PythonAgent. Provide the task description in plain English.\",\n                  )\n              ]\n              return tools\n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.test_py_code_retriever.test_get_docstring_multiline\n    \n        def test_get_docstring_multiline(getter):\n            module_name = \"sample2\"\n            object_path = \"PythonAgentToolBuilder.__init__\"\n            result = getter.get_docstring(module_name, object_path)\n            expected = \"\\n        Initializes a PythonAgentToolBuilder with the given PythonAgent.\\n\\n        Args:\\n            python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\\n        \"\n        \n            assert result == expected\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample_module_2.ObNMl\n    \n        class ObNMl:\n            \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_py_code_retriever.test_build_overview\n    \n        def test_build_overview():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            result = build_repository_overview(sample_dir)\n            first_module_overview = \"sample\\n     - func sample_function\\n     - cls Person\\n       - func __init__\\n       - func say_hello\\n       - func run\\n     - func f\\n     - cls EmptyClass\\n     - cls OuterClass\\n       - cls InnerClass\\n         - func inner_method\\nsample2\\n     - cls PythonAgentToolBuilder\\n       - func __init__\\n       - func build_tools\\n         - func python_agent_python_task\"\n        \n            assert first_module_overview in result\n        \n        \n        \n        \n    automata.core.embedding.code_embedding.SymbolCodeEmbeddingHandler\n    \n        The SymbolCodeEmbeddingHandler class handles embedding symbols and their source code by building, getting, and updating embeddings based on source code changes. It relies on the VectorDatabaseProvider and EmbeddingProvider for storage and generation of embeddings. However, it has limitations such as assuming a specific directory structure, not supporting custom data sources, and potential inaccuracies with the provided convert_to_fst_object function. \n        \n        Example:\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol\n        from automata.core.embedding.embedding_types import OpenAIEmbedding\n        from automata.core.embedding.code_embedding import SymbolCodeEmbeddingHandler\n        \n        # Configure the necessary components\n        embedding_db = JSONVectorDatabase(\"/path/to/embedding_file.json\")\n        embedding_provider = OpenAIEmbedding()\n        \n        # Create the instance of SymbolCodeEmbeddingHandler\n        handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n        \n        # Update the embeddings for a symbol\n        symbol = Symbol.from_string(\"symbol_string_here\")\n        handler.update_embedding(symbol)\n        ```\n        \n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingProvider,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        build_embedding(self, source_code: str, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n        update_existing_embedding(self, source_code: str, symbol: Symbol) -> None\n        \n    automata.tests.unit.conftest.patch_get_embedding\n    \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n        \n    automata.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.tests.unit.sample_modules.sample_module_2`/ObNMl#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.tests.unit.sample_modules.sample_module_2", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "ObNMl", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# ObNMl\n\n`ObNMl` is a sample class with minimal functionality, primarily used for testing purposes. The class contains an `__init__` method and a `method` method.\n\n## Related Symbols\n\n- `automata.tests.unit.sample_modules.sample_module_2.fhFSO`\n- `automata.tests.unit.sample_modules.sample.EmptyClass`\n- `automata.core.embedding.embedding_types.NormType`\n- `automata.tests.unit.sample_modules.sample.OuterClass`\n- `automata.tests.unit.sample_modules.sample.OuterClass.InnerClass`\n- `automata.tests.unit.conftest.get_sem`\n- `automata.core.database.vector.JSONVectorDatabase`\n- `automata.core.symbol.symbol_types.Symbol`\n- `automata.tests.unit.test_database_vector.test_init_vector`\n- `automata.core.symbol.symbol_types.SymbolEmbedding`\n\n## Example\n\nThis class only contains a constructor and a single method, both with no functionality. The following example demonstrates how to create an instance of the `ObNMl` class and call the `method` method:\n\n```python\nfrom automata.tests.unit.sample_modules.sample_module_2 import ObNMl\n\nobnml_instance = ObNMl()\nobnml_instance.method()\n```\n\n## Limitations\n\n`ObNMl` is a barebones class that is limited in functionality. It is mainly used for testing purposes and does not contain any features or provide useful outputs.\n\n## Follow-up Questions:\n\n- What is the purpose of the `ObNMl` class?\n- Should the class be extended with additional functionality?\n- How should the class be documented and tested?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class ObNMl:\n    \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n\n    def __init__(self):\n        pass\n\n    def method(self):\n        \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n\n        pass\n\n\n", "summary": "The `ObNMl` class is a minimal sample class used primarily for testing purposes, containing only an `__init__` method and a `method` method. It has limited functionality and is not meant for actual use. To create an instance of the class and call the `method` method, use the following example:\n\n```python\nfrom automata.tests.unit.sample_modules.sample_module_2 import ObNMl\n\nobnml_instance = ObNMl()\nobnml_instance.method()\n```\n\nThis class does not contain any features or provide useful outputs, and any follow-up questions should address its purpose, documentation, and testing, along with potential additions to its functionality.", "context": "\n    Generate the documentation for ObNMl using the context shown below -\n  Building context for primary symbol - automata.tests.unit.sample_modules.sample_module_2.ObNMl -\n  \n      class ObNMl:\n          \"\"\"zFsdXovhQSBlqDNpXSvl\"\"\"\n      \n          def __init__(self):\n              pass\n      \n          def method(self):\n              \"\"\"zslGjfyaBRiFZlgNkAWR\"\"\"\n      \n              pass\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.sample_modules.sample_module_2.fhFSO\n    \n        def fhFSO():\n            \"\"\"GEjBUXtHLGzJDCDsnFFp\"\"\"\n        \n            pass\n        \n        \n    automata.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata.core.embedding.embedding_types.NormType\n    \n        `NormType` is an enumeration class representing various normalization techniques available for calculating similarity in a `SymbolSimilarity` object, offering three options: L1, L2, and softmax. These can be used by the `SymbolSimilarity` class while computing similarities between symbols in a related codebase. However, using different normalization techniques may lead to potential limitations such as differences in interpretation and efficiency of similarity calculations. For example:\n        \n        ```python\n        from automata.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata.core.embedding.embedding_types import NormType\n        from automata.core.embedding.manager.code_embedding_manager import SymbolCodeEmbeddingHandler\n        \n        symbol_embedding_manager = SymbolCodeEmbeddingHandler()\n        custom_norm_type = NormType.L1\n        \n        symbol_similarity = SymbolSimilarity(symbol_embedding_manager, custom_norm_type)\n        ```\n        Possible follow-up questions include exploring other normalization techniques to add to the `NormType` class and understanding the impact of different normalization techniques on the performance and interpretation of similarity calculations.\n        \n    automata.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata.core.database.vector.JSONVectorDatabase\n    \n        `JSONVectorDatabase` is a class within the Automata documentation processing pipeline designed to manage a vector database saved as a JSON file. It facilitates loading, saving, adding, updating, and discarding SymbolEmbedding objects and offers methods for calculating vector similarities and retrieving symbols in the database. However, its `calculate_similarity` function is not yet implemented, raising questions about which similarity measure to use and if there could be a more efficient storage structure than a JSON file.\n        \n        ```python\n        from automata.core.database.vector import JSONVectorDatabase\n        from automata.core.symbol.symbol_types import Symbol, SymbolEmbedding\n        import numpy as np\n        \n        vector_db = JSONVectorDatabase(\"example_vector_db.json\")\n        \n        symbol_1 = Symbol.from_string(\"scip-python python automata example_symbol_1#\")\n        embedding_1 = SymbolEmbedding(symbol_1, \"embedding_source\", np.array([1, 2, 3]))\n        \n        symbol_2 = Symbol.from_string(\"scip-python python automata example_symbol_2#\")\n        embedding_2 = SymbolEmbedding(symbol_2, \"embedding_source\", np.array([4, 5, 6]))\n        \n        vector_db.add(embedding_1)\n        vector_db.add(embedding_2)\n        \n        retrieved_embedding = vector_db.get(symbol_1)\n        \n        vector_db.save()\n        ```\n        \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[str, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata.core.symbol.symbol_types.Symbol\n    \n        Symbol is a class used for identifying a class, method, or local variable in a package, complete with rich metadata. It has a standardized string representation that can be used interchangeably with Symbol, and comes with utility methods for parsing, creating, and querying symbolic data. Instance creation and comparison are also supported.\n        \n        Here's an example on creating an instance of Symbol using the `parse_symbol` function:\n        ```python\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n            \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        ```\n        However, Symbol has some limitations as it assumes specific syntax when parsing string representations and does not support custom symbol types or variations in syntax.\n        \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata.tests.unit.test_database_vector.test_init_vector\n    \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n        \n    automata.core.symbol.symbol_types.SymbolEmbedding\n    \n        SymbolEmbedding is an abstract base class used to represent various symbol embeddings, such as SymbolCodeEmbedding and SymbolDocEmbedding. It provides a basic structure for initializing and managing these embeddings, taking into account their source and their vector representation in the feature space. SymbolEmbedding is utilized by different embedding handlers like SymbolCodeEmbeddingHandler and SymbolDocEmbeddingHandler. As a base class, its functionality is limited and should be extended by classes with specific embedding types. An example of creating a SymbolCodeEmbedding instance is shown below:\n        \n        ```python\n        from automata.core.symbol.symbol_types import SymbolCodeEmbedding\n        from automata.core.symbol.parser import parse_symbol\n        import numpy as np\n        \n        symbol_str = \"scip-python python automata 75482692a6fe30c72db516201a6f47d9fb4af065 `automata.core.base.tool`/ToolNotFoundError#__init__().\"\n        symbol = parse_symbol(symbol_str)\n        source_code = \"def __init__(self, message): pass\"\n        vector = np.array([0.1, 0.2, 0.3])\n        \n        symbol_code_embedding = SymbolCodeEmbedding(symbol, source_code, vector)\n        ```\n        \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, embedding_source: str, vector: np.array):\n                self.symbol = symbol\n                self.embedding_source = embedding_source\n                self.vector = vector\n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata f79387b50fa622d5da05992c76d99b523d9072ea `automata.tests.unit.test_py_writer`/MockCodeGenerator#", "scheme": "scip-python", "package": {"py/object": "automata.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata", "version": "f79387b50fa622d5da05992c76d99b523d9072ea"}, "descriptors": {"py/tuple": [{"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "automata.tests.unit.test_py_writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata.core.symbol.symbol_types.SymbolDescriptor", "name": "MockCodeGenerator", "suffix": 2, "disambiguator": null}]}}, "embedding_source": "# MockCodeGenerator\n\n`MockCodeGenerator` is a utility class designed to help create and manipulate Python code programmatically. It supports creating classes, methods, functions, imports, and docstrings for each code element.\n\n## Overview\n\n`MockCodeGenerator` allows the user to create Python code with various combinations of code elements. It provides a way to generate code with or without class definitions, functions, methods, import statements, or docstrings. The generated code can be used for testing or programmatically manipulating Python modules.\n\n## Methods\n\n- `generate_code()`: Generates the Python code based on the provided configuration in the constructor.\n\n## Example\n\n```python\nfrom automata.tests.unit.test_py_writer import MockCodeGenerator\n\nmock_generator = MockCodeGenerator(\n    has_class=True,\n    has_method=True,\n    has_function=True,\n    has_import=True,\n    has_module_docstring=True,\n    has_class_docstring=True,\n    has_method_docstring=True,\n    has_function_docstring=True,\n)\n\nsource_code = mock_generator.generate_code()\nprint(source_code)\n```\n\n## Related Symbols\n\n- `automata.core.coding.py_coding.writer.PyCodeWriter`\n- `automata.core.coding.py_coding.retriever.PyCodeRetriever`\n\n## Limitations\n\n`MockCodeGenerator` relies on the RedBaron library for manipulating Python code, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in `MockCodeGenerator` can be improved for a better user experience.\n\n## Follow-up Questions:\n\n- What are the specific limitations and bugs of the RedBaron library?", "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 248}, false, {"py/b64": ""}]}]}, "source_code": "class MockCodeGenerator:\n    def __init__(\n        self,\n        has_class: bool = False,\n        has_method: bool = False,\n        has_function: bool = False,\n        has_import: bool = False,\n        has_module_docstring: bool = False,\n        has_class_docstring: bool = False,\n        has_method_docstring: bool = False,\n        has_function_docstring: bool = False,\n    ):\n        self.has_class = has_class\n        self.has_method = has_method\n        self.has_function = has_function\n        self.has_import = has_import\n        self.has_module_docstring = has_module_docstring\n        self.has_class_docstring = has_class_docstring\n        self.has_method_docstring = has_method_docstring\n        self.has_function_docstring = has_function_docstring\n\n        # self.import_class_name = MockCodeGenerator.random_string(5)\n        self.class_name = MockCodeGenerator.random_string(5)\n        self.method_name = MockCodeGenerator.random_string(5)\n        self.function_name = MockCodeGenerator.random_string(5)\n        self.module_docstring = MockCodeGenerator.random_string(20)\n        self.class_docstring = MockCodeGenerator.random_string(20)\n        self.method_docstring = MockCodeGenerator.random_string(20)\n        self.function_docstring = MockCodeGenerator.random_string(20)\n\n    def generate_code(self):\n        module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n        class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n        method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n        function_docstring = (\n            f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n        )\n        import_statement = f\"import random\\n\" if self.has_import else \"\"\n\n        method_code = textwrap.dedent(\n            f\"\"\"def method(self):\n                    {method_docstring}\n                    pass\n                \"\"\"\n            if self.has_class and self.has_method\n            else \"\"\n        )\n        class_code = textwrap.dedent(\n            f\"\"\"\n            class {self.class_name}:\n                {class_docstring}\n                def __init__(self):\n                    pass\n                {method_code}\n            \"\"\"\n            if self.has_class\n            else \"\"\n        )\n\n        function_code = (\n            textwrap.dedent(\n                f\"\"\"\n            def {self.function_name}():\n                {function_docstring}\n                pass\n            \"\"\"\n            )\n            if self.has_function\n            else \"\"\n        )\n\n        return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n\n    def _check_function_obj(self, function_obj=None):\n        if function_obj is None:\n            source_code = self.generate_code()\n            function_obj = RedBaron(source_code).find(\"def\")\n        assert function_obj.name == self.function_name\n        if self.has_function_docstring:\n            assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n            assert isinstance(function_obj[0], StringNode)\n            assert isinstance(function_obj[1], EndlNode)\n            assert isinstance(function_obj[2], PassNode)\n        else:\n            assert isinstance(function_obj[0], EndlNode)\n            assert isinstance(function_obj[1], PassNode)\n\n    def _check_class_obj(self, class_obj=None):\n        if class_obj is None:\n            source_code = self.generate_code()\n            class_obj = RedBaron(source_code).find(\"class\")\n\n        assert class_obj.name == self.class_name\n        if self.has_class_docstring:\n            assert isinstance(class_obj, ClassNode)\n            assert isinstance(class_obj[0], StringNode)\n            assert isinstance(class_obj[1], EndlNode)\n            assert isinstance(class_obj[2], DefNode)\n        else:\n            assert isinstance(class_obj, ClassNode)\n            assert isinstance(class_obj[0], EndlNode)\n            assert isinstance(class_obj[1], DefNode)\n\n        if self.has_method:\n            method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n            assert method_obj.name == \"method\"\n            if self.has_method_docstring:\n                assert isinstance(method_obj[0], StringNode)  # docstring\n                assert isinstance(method_obj[1], EndlNode)  # pass\n                assert isinstance(method_obj[2], PassNode)  # pass\n            else:\n                assert isinstance(method_obj[0], EndlNode)\n                assert isinstance(method_obj[1], PassNode)\n\n    def _check_module_obj(self, module_obj=None):\n        if module_obj is None:\n            source_code = self.generate_code()\n            module_obj = RedBaron(source_code)\n        if self.has_module_docstring:\n            assert isinstance(module_obj[0], StringNode)\n            assert isinstance(module_obj[1], ClassNode)\n        else:\n            if isinstance(module_obj[0], EndlNode):\n                assert isinstance(module_obj[1], ClassNode)\n            else:\n                assert isinstance(module_obj[0], ClassNode)\n\n    @staticmethod\n    def random_string(length: int):\n        return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n\n\n", "summary": "MockCodeGenerator is a utility class that aids in creating and manipulating Python code elements such as classes, methods, functions, imports, and docstrings. Users can generate code for testing or programmatically manipulating Python modules, with or without certain code elements. However, it relies on the RedBaron library, which has known limitations and bugs, as well as declining support in recent years. Error reporting in MockCodeGenerator could also be improved for a better user experience.", "context": "\n    Generate the documentation for MockCodeGenerator using the context shown below -\n  Building context for primary symbol - automata.tests.unit.test_py_writer.MockCodeGenerator -\n  \n      class MockCodeGenerator:\n          def __init__(\n              self,\n              has_class: bool = False,\n              has_method: bool = False,\n              has_function: bool = False,\n              has_import: bool = False,\n              has_module_docstring: bool = False,\n              has_class_docstring: bool = False,\n              has_method_docstring: bool = False,\n              has_function_docstring: bool = False,\n          ):\n              self.has_class = has_class\n              self.has_method = has_method\n              self.has_function = has_function\n              self.has_import = has_import\n              self.has_module_docstring = has_module_docstring\n              self.has_class_docstring = has_class_docstring\n              self.has_method_docstring = has_method_docstring\n              self.has_function_docstring = has_function_docstring\n      \n              # self.import_class_name = MockCodeGenerator.random_string(5)\n              self.class_name = MockCodeGenerator.random_string(5)\n              self.method_name = MockCodeGenerator.random_string(5)\n              self.function_name = MockCodeGenerator.random_string(5)\n              self.module_docstring = MockCodeGenerator.random_string(20)\n              self.class_docstring = MockCodeGenerator.random_string(20)\n              self.method_docstring = MockCodeGenerator.random_string(20)\n              self.function_docstring = MockCodeGenerator.random_string(20)\n      \n          def generate_code(self):\n              module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n              class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n              method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n              function_docstring = (\n                  f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n              )\n              import_statement = f\"import random\\n\" if self.has_import else \"\"\n      \n              method_code = textwrap.dedent(\n                  f\"\"\"def method(self):\n                          {method_docstring}\n                          pass\n                      \"\"\"\n                  if self.has_class and self.has_method\n                  else \"\"\n              )\n              class_code = textwrap.dedent(\n                  f\"\"\"\n                  class {self.class_name}:\n                      {class_docstring}\n                      def __init__(self):\n                          pass\n                      {method_code}\n                  \"\"\"\n                  if self.has_class\n                  else \"\"\n              )\n      \n              function_code = (\n                  textwrap.dedent(\n                      f\"\"\"\n                  def {self.function_name}():\n                      {function_docstring}\n                      pass\n                  \"\"\"\n                  )\n                  if self.has_function\n                  else \"\"\n              )\n      \n              return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n      \n          def _check_function_obj(self, function_obj=None):\n              if function_obj is None:\n                  source_code = self.generate_code()\n                  function_obj = RedBaron(source_code).find(\"def\")\n              assert function_obj.name == self.function_name\n              if self.has_function_docstring:\n                  assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                  assert isinstance(function_obj[0], StringNode)\n                  assert isinstance(function_obj[1], EndlNode)\n                  assert isinstance(function_obj[2], PassNode)\n              else:\n                  assert isinstance(function_obj[0], EndlNode)\n                  assert isinstance(function_obj[1], PassNode)\n      \n          def _check_class_obj(self, class_obj=None):\n              if class_obj is None:\n                  source_code = self.generate_code()\n                  class_obj = RedBaron(source_code).find(\"class\")\n      \n              assert class_obj.name == self.class_name\n              if self.has_class_docstring:\n                  assert isinstance(class_obj, ClassNode)\n                  assert isinstance(class_obj[0], StringNode)\n                  assert isinstance(class_obj[1], EndlNode)\n                  assert isinstance(class_obj[2], DefNode)\n              else:\n                  assert isinstance(class_obj, ClassNode)\n                  assert isinstance(class_obj[0], EndlNode)\n                  assert isinstance(class_obj[1], DefNode)\n      \n              if self.has_method:\n                  method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                  assert method_obj.name == \"method\"\n                  if self.has_method_docstring:\n                      assert isinstance(method_obj[0], StringNode)  # docstring\n                      assert isinstance(method_obj[1], EndlNode)  # pass\n                      assert isinstance(method_obj[2], PassNode)  # pass\n                  else:\n                      assert isinstance(method_obj[0], EndlNode)\n                      assert isinstance(method_obj[1], PassNode)\n      \n          def _check_module_obj(self, module_obj=None):\n              if module_obj is None:\n                  source_code = self.generate_code()\n                  module_obj = RedBaron(source_code)\n              if self.has_module_docstring:\n                  assert isinstance(module_obj[0], StringNode)\n                  assert isinstance(module_obj[1], ClassNode)\n              else:\n                  if isinstance(module_obj[0], EndlNode):\n                      assert isinstance(module_obj[1], ClassNode)\n                  else:\n                      assert isinstance(module_obj[0], ClassNode)\n      \n          @staticmethod\n          def random_string(length: int):\n              return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata.tests.unit.test_py_writer.test_create_class_source_class\n    \n        def test_create_class_source_class():\n            mock_generator = MockCodeGenerator(has_class=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_class_docstring=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_method=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_class_docstring=True, has_method=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_method=True, has_method_docstring=True\n            )\n            mock_generator._check_class_obj()\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata.tests.unit.test_py_writer.test_create_function_source_function\n    \n        def test_create_function_source_function():\n            mock_generator = MockCodeGenerator(has_function=True)\n            mock_generator._check_function_obj()\n        \n            mock_generator = MockCodeGenerator(has_function=True, has_function_docstring=True)\n            mock_generator._check_function_obj()\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_extend_module\n    \n        def test_extend_module(python_writer):\n            # Arrange\n            # create module\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_2\", source_code)\n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            python_writer.update_existing_module(\"sample_module_2\", source_code_2)\n        \n            # Check module 2 is merged into module 1\n            module_obj = python_writer.code_retriever.module_tree_map.fetch_module(\"sample_module_2\")\n            mock_generator._check_module_obj(module_obj)\n            mock_generator._check_class_obj(module_obj[0])\n            mock_generator._check_function_obj(module_obj[1])\n            mock_generator_2._check_class_obj(module_obj[2])\n            mock_generator_2._check_function_obj(module_obj[3])\n        \n        \n        \n        \n    automata.tests.unit.test_py_code_retriever.test_get_code_module\n    \n        def test_get_code_module(getter):\n            module_name = \"sample\"\n            object_path = None\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = 'import math\\n\\n\\ndef sample_function(name):\\n    return f\"Hello, {name}! Sqrt(2) = \" + str(math.sqrt(2))\\n\\n\\nclass Person:\\n\\n    def __init__(self, name):\\n        self.name = name\\n\\n    def say_hello(self):\\n        return f\"Hello, I am {self.name}.\"\\n\\n    def run(self) -> str:\\n        ...\\n\\n\\ndef f(x) -> int:\\n    return x + 1\\n\\n\\nclass EmptyClass:\\n    pass\\n\\n\\nclass OuterClass:\\n    class InnerClass:\\n\\n        def inner_method(self):\\n'\n        \n            assert result == expected_match\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_reduce_module\n    \n        def test_reduce_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_2\", source_code)\n            module_obj = python_writer.code_retriever.module_tree_map.fetch_module(\"sample_module_2\")\n            class_obj = module_obj.find(\"class\")\n        \n            function_obj = module_obj.find_all(\"def\")[-1]\n            python_writer.delete_from_existing__module(\"sample_module_2\", class_obj.name)\n            assert module_obj[0] == function_obj\n        \n        \n        \n        \n    automata.core.coding.py_coding.writer.PyCodeWriter\n    \n        PyCodeWriter is a utility class designed for writing and updating Python code in the Abstract Syntax Tree (AST) format, enabling programmatic manipulation of Python elements such as classes, functions, and imports. The main functionality includes initializing with a PyCodeRetriever instance, creating a new module object from source code, updating an existing module, and writing the updated module to disk. However, PyCodeWriter's primary limitation is its reliance on RedBaron, which has known limitations and bugs, along with relatively low support in recent years. Additionally, error reporting in PyCodeWriter can be improved for a better user experience. \n        \n        ```python\n        from automata.core.coding.py_coding.retriever import PyCodeRetriever\n        from automata.core.coding.py_coding.writer import PyCodeWriter\n        \n        # Initialize the PyCodeWriter with a PyCodeRetriever instance\n        retriever = PyCodeRetriever()\n        writer = PyCodeWriter(retriever)\n        \n        # Create a new module object from source code\n        module_dotpath = \"my_module\"\n        source_code = \"def hello():\\n    print('Hello, World!')\\n\"\n        writer.create_new_module(module_dotpath, source_code)\n        \n        # Update the existing module by adding a new function\n        new_function_code = \"def goodbye():\\n    print('Goodbye, World!')\\n\"\n        writer.update_existing_module(module_dotpath, new_function_code, do_write=True)\n        ```\n        \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n        create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False) -> None\n        \n        delete_from_existing__module(self, module_dotpath: str, object_dotpath: str, do_write: bool = False) -> None\n        \n        replace(match) -> None\n        \n        replace_newline_chars(input_str: str) -> str\n        \n        update_existing_module(self,\n                module_dotpath: str,\n                source_code: str,\n                disambiguator: Optional[str] = \"\",\n                do_write: bool = False,\n            ) -> None\n        \n    automata.tests.unit.test_py_writer.test_create_class_inheritance\n    \n        def test_create_class_inheritance():\n            mock_generator = MockCodeGenerator(has_class=True)\n            source_code = mock_generator.generate_code()\n            # Add a subclass that inherits from the parent class\n            source_code += textwrap.dedent(\n                f\"\"\"\n                class {mock_generator.class_name}_child({mock_generator.class_name}):\n                    pass\n                \"\"\"\n            )\n            module_obj = RedBaron(source_code)\n            class_obj = find_syntax_tree_node(module_obj, f\"{mock_generator.class_name}_child\")\n            assert class_obj.inherit_from.name.value == mock_generator.class_name\n        \n        \n        \n        \n    automata.tests.unit.test_py_writer.test_create_function_with_arguments\n    \n        def test_create_function_with_arguments():\n            mock_generator = MockCodeGenerator(has_function=True, has_function_docstring=True)\n            source_code = mock_generator.generate_code()\n            # Add a function with different types of arguments\n            source_code += textwrap.dedent(\n                f\"\"\"\n                def {mock_generator.function_name}_with_args(pos_arg, kw_arg=None, *args, **kwargs):\n                    pass\n                \"\"\"\n            )\n            module_obj = RedBaron(source_code)\n            function_obj = find_syntax_tree_node(module_obj, f\"{mock_generator.function_name}_with_args\")\n            assert function_obj.name == f\"{mock_generator.function_name}_with_args\"\n            def_arg_nodes = module_obj.find_all(\"def_argument\")\n            assert len(def_arg_nodes) == 2\n            assert def_arg_nodes[0].name.value == \"pos_arg\"\n            assert def_arg_nodes[1].name.value == \"kw_arg\"\n            assert def_arg_nodes[1].value.value == \"None\"\n            list_arg_nodes = module_obj.find_all(\"list_argument\")\n            assert len(list_arg_nodes) == 1\n            assert list_arg_nodes[0].name.value == \"args\"\n            dict_arg_nodes = module_obj.find_all(\"dict_argument\")\n            assert len(dict_arg_nodes) == 1\n            assert dict_arg_nodes[0].name.value == \"kwargs\"\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}]