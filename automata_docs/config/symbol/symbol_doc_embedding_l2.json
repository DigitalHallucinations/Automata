[{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.directory`/Directory#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "Directory", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/reduce": [{"py/type": "numpy.dtype"}, {"py/tuple": ["f8", false, true]}, {"py/tuple": [3, "<", null, null, null, -1, -1, 0]}]}, false, {"py/b64": ""}]}]}, "source_code": "class Directory(Node):\n    \"\"\"Represents a directory. Has children which can be directories or files\"\"\"\n\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        \"\"\"\n        Args:\n            name (str): Name of the directory\n            parent (Node): Parent node of this directory\n        \"\"\"\n        super().__init__(name, parent)\n        self.children: Dict[str, Node] = {}\n\n    def add_child(self, child: \"Node\"):\n        \"\"\"\n        Adds a child node to this directory\n\n        Args:\n            child (Node): Child node to add\n        \"\"\"\n        self.children[child.name] = child\n\n    def get_file_names(self) -> List[str]:\n        \"\"\"\n        Get a list of file names in the directory\n\n        Args:\n            directory (Directory): Directory to get file names from\n\n        Returns:\n            List[str]: List of file names in the directory\n        \"\"\"\n        return [name for name, child in self.children.items() if isinstance(child, File)]\n\n    def get_subdirectories(self) -> List[str]:\n        \"\"\"\n        Get a list of subdirectory names in the directory\n\n        Args:\n            directory (Directory): Directory to get subdirectory names from\n\n        Returns:\n            List[str]: List of subdirectory names in the directory\n        \"\"\"\n        return [name for name, child in self.children.items() if isinstance(child, Directory)]\n\n    def is_root_dir(self) -> bool:\n        \"\"\"\n        Check if this directory is the root directory\n\n        Returns:\n            bool: True if this directory is the root directory, False otherwise\n        \"\"\"\n        return self.parent is None\n\n    def is_leaf_dir(self) -> bool:\n        \"\"\"\n        Check if this directory is a leaf directory (has no subdirectories)\n\n        Returns:\n            bool: True if this directory is a leaf directory, False otherwise\n        \"\"\"\n        subdirectories = [\n            child for child in self.children.values() if isinstance(child, Directory)\n        ]\n        return len(subdirectories) == 0\n\n\n", "document": "# Directory\n\nThe `Directory` class represents a directory in a file system. It can have children, which can be either directories or files. The class offers several methods to interact with directories, such as adding child nodes, getting file or subdirectory names, or checking if the directory is a leaf or root directory.\n\n## Overview\n\n`Directory` is part of a tree-like structure that represents a file system. It stores the parent node as well as the children of the current directory. You can add child nodes, get file names, get subdirectories, and check if the directory is a leaf or root directory.\n\n## Related Symbols\n\n- automata_docs.core.coding.directory.File\n- automata_docs.core.coding.directory.Node\n- automata_docs.tests.unit.test_directory_manager.test_load_directory_structure\n- automata_docs.tests.unit.test_directory_manager.test_get_files_in_dir\n- automata_docs.tests.unit.test_directory_manager.test_get_subdirectories\n- automata_docs.tests.unit.test_directory_manager.test_get_node_for_path\n- automata_docs.core.database.vector.JSONVectorDatabase\n\n## Example\n\nThe following example demonstrates how to create a `Directory` object, add child nodes, and interact with the contained files and subdirectories.\n\n```python\nfrom automata_docs.core.coding.directory import Directory, File\n\nroot = Directory(\"root\")\ndir1 = Directory(\"dir1\", root)\nfile1 = File(\"file1.txt\", dir1)\n\nroot.add_child(dir1)\ndir1.add_child(file1)\n\nfile_names = dir1.get_file_names()\nsubdirectories = root.get_subdirectories()\n\nprint(f\"Files in dir1: {file_names}\")  # Output: Files in dir1: ['file1.txt']\nprint(f\"Subdirectories in root: {subdirectories}\")  # Output: Subdirectories in root: ['dir1']\n```\n\n## Limitations\n\nThe primary limitation of the `Directory` class is that it only provides a basic tree-like structure representing file systems. It does not directly interact with the actual file system on the host machine. For real interactions with the host machine's file system, consider using Python's built-in `os` and `os.path` modules.\n\n## Follow-up Questions:\n\n- How can we extend the `Directory` class to include more functionality, such as file content manipulations or actual file system interactions?\n\n- How should the `Directory` class handle symbolic links or hard links when working with real file systems?", "summary": "The `Directory` class represents a directory in a file system, providing methods to interact with directories such as adding child nodes and checking if a directory is a leaf or root directory. It is part of a tree-like structure that can store parent and child nodes, including files and subdirectories. However, the class only provides a basic representation of file systems and does not interact with the host machine's file system directly. For actual file system interactions, consider using Python's built-in `os` and `os.path` modules.\n\nExample:\n\n```python\nfrom automata_docs.core.coding.directory import Directory, File\n\nroot = Directory(\"root\")\ndir1 = Directory(\"dir1\",root)\nfile1 = File(\"file1.txt\", dir1)\n\nroot.add_child(dir1)\ndir1.add_child(file1)\n\nfile_names = dir1.get_file_names()\nsubdirectories = root.get_subdirectories()\n\nprint(f\"Files in dir1: {file_names}\")  # Output: Files in dir1: ['file1.txt']\nprint(f\"Subdirectories in root: {subdirectories}\")  # Output: Subdirectories in root: ['dir1']\n```", "context": "\n    Generate the documentation for Directory using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.directory.Directory -\n  \n    Import Statements:\n      import os\n      from typing import Dict, List, Optional\n      \n    Class Docstring:\n      Represents a directory. Has children which can be directories or files\n      \n    Methods:\n      def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n              \"\"\"\n              Args:\n                  name (str): Name of the directory\n                  parent (Node): Parent node of this directory\n              \"\"\"\n              super().__init__(name, parent)\n              self.children: Dict[str, Node] = {}\n      \n          \n      def add_child(self, child: \"Node\"):\n              \"\"\"\n              Adds a child node to this directory\n      \n              Args:\n                  child (Node): Child node to add\n              \"\"\"\n              self.children[child.name] = child\n      \n          \n      def get_file_names(self) -> List[str]:\n              \"\"\"\n              Get a list of file names in the directory\n      \n              Args:\n                  directory (Directory): Directory to get file names from\n      \n              Returns:\n                  List[str]: List of file names in the directory\n              \"\"\"\n              return [name for name, child in self.children.items() if isinstance(child, File)]\n      \n          \n      def get_subdirectories(self) -> List[str]:\n              \"\"\"\n              Get a list of subdirectory names in the directory\n      \n              Args:\n                  directory (Directory): Directory to get subdirectory names from\n      \n              Returns:\n                  List[str]: List of subdirectory names in the directory\n              \"\"\"\n              return [name for name, child in self.children.items() if isinstance(child, Directory)]\n      \n          \n      def is_leaf_dir(self) -> bool:\n              \"\"\"\n              Check if this directory is a leaf directory (has no subdirectories)\n      \n              Returns:\n                  bool: True if this directory is a leaf directory, False otherwise\n              \"\"\"\n              subdirectories = [\n                  child for child in self.children.values() if isinstance(child, Directory)\n              ]\n              return len(subdirectories) == 0\n      \n      \n      \n      def is_root_dir(self) -> bool:\n              \"\"\"\n              Check if this directory is the root directory\n      \n              Returns:\n                  bool: True if this directory is the root directory, False otherwise\n              \"\"\"\n              return self.parent is None\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_directory_manager.test_load_directory_structure\n    \n        def test_load_directory_structure(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            assert dir_manager.root.name == str(test_dir)\n            assert len(dir_manager.root.children) == 2  # 2 directories: dir1, dir2\n        \n        \n        \n        \n    automata_docs.tests.unit.test_directory_manager.test_get_files_in_dir\n    \n        def test_get_files_in_dir(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            files_in_dir1 = dir_manager.get_files_in_dir(\"dir1\")\n            assert len(files_in_dir1) == 2  # 2 files in dir1: file1, file2\n            assert set(files_in_dir1) == {\"file1\", \"file2\"}\n        \n        \n        \n        \n    automata_docs.tests.unit.test_directory_manager.test_get_subdirectories\n    \n        def test_get_subdirectories(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            subdirectories = dir_manager.get_subdirectories(\".\")\n            assert len(subdirectories) == 2  # 2 subdirectories in root: dir1, dir2\n            assert set(subdirectories) == {\"dir1\", \"dir2\"}\n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.context.py_context.retriever.PyContextRetriever\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        __init__(self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ) -> None\n        \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata_docs.tests.unit.test_directory_manager.test_get_node_for_path\n    \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        __init__(self, file_path: str) -> None\n        \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.tests.unit.test_directory_manager.create_test_dir_structure\n    \n        def create_test_dir_structure(tmp_path):\n            \"\"\"\n            Creates a test directory structure under the given path.\n            \"\"\"\n            (tmp_path / \"dir1\").mkdir()\n            (tmp_path / \"dir2\").mkdir()\n            (tmp_path / \"dir1\" / \"file1\").write_text(\"content\")\n            (tmp_path / \"dir1\" / \"file2\").write_text(\"content\")\n            (tmp_path / \"dir2\" / \"file1\").write_text(\"content\")\n            return tmp_path\n        \n        \n        \n        \n    automata_docs.core.coding.directory.File\n    \n      Class Docstring:\n        Represents a file in the tree\n        \n      Methods:\n        __init__(self, name: str, parent: Optional[\"Node\"] = None) -> None\n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.coding.directory.Node\n    \n      Class Docstring:\n        Abstract base class for a node in the file tree\n        \n      Methods:\n        __init__(self, name: str, parent: Optional[\"Node\"] = None) -> None\n        \n    automata_docs.core.coding.directory.Node.__init__\n    \n      Class Docstring:\n        Args:\n        name (str): Name of the node\n        parent (Node): Parent node of this node\n        \n      Methods:\n        __init__(self, name: str, parent: Optional[\"Node\"] = None) -> None\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.config.config_enums`/ConfigCategory#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.config.config_enums", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "ConfigCategory", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/reduce": [{"py/type": "numpy.dtype"}, {"py/tuple": ["f8", false, true]}, {"py/tuple": [3, "<", null, null, null, -1, -1, 0]}]}, false, {"py/b64": ""}]}]}, "source_code": "class ConfigCategory(Enum):\n    \"\"\"\n    An enum which corresponds to the name of a folder holding config\n    \"\"\"\n\n    PROMPT = \"prompt\"\n    SYMBOL = \"symbol\"\n", "document": "# ConfigCategory\n\n`ConfigCategory` is an enumeration class that corresponds to the name of a folder holding config files in a structured configuration setup. It's used within configuration management to facilitate the organization and retrieval of configuration files.\n\n## Overview\n\n`ConfigCategory` consists of two enum elements:\n\n- `PROMPT`: Represents a prompt category.\n- `SYMBOL`: Represents a symbol category.\n\nThese categories can be used within a larger configuration management system to specify the location and structure of different configurations for easy retrieval and organization.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.cli.commands.cli`\n- `automata_docs.core.context.py_context.retriever_slim.PyContext`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following example demonstrates how to use the `ConfigCategory` enum for specifying a configuration category.\n\n```python\nfrom automata_docs.config.config_enums import ConfigCategory\n\nselected_category = ConfigCategory.PROMPT\nprint(selected_category)  # Output: ConfigCategory.PROMPT\n```\n\n## Limitations\n\n`ConfigCategory` is limited to the current enumeration values and requires modifying the class to add new categories if needed. The current enum options `PROMPT` and `SYMBOL` may not suit all configurations needs for different applications.\n\n## Follow-up Questions:\n\n- How can the `ConfigCategory` class be extended to support custom configuration categories easily?\n- Are there plans to implement more predefined categories to the `ConfigCategory` enum to cover more potential use cases?", "summary": "`ConfigCategory` is an enumeration class used in configuration management to organize and retrieve configuration files, containing two enum elements: `PROMPT` and `SYMBOL`. These categories specify the location and structure of different configurations within a larger system. However, `ConfigCategory` is limited to its current values, and adding new categories requires modifying the class. An example of using `ConfigCategory` is:\n\n```python\nfrom automata_docs.config.config_enums import ConfigCategory\n\nselected_category = ConfigCategory.PROMPT\nprint(selected_category)  # Output: ConfigCategory.PROMPT\n```", "context": "\n    Generate the documentation for ConfigCategory using the context shown below -\n  Building context for primary symbol - automata_docs.config.config_enums.ConfigCategory -\n  \n      class ConfigCategory(Enum):\n          \"\"\"\n          An enum which corresponds to the name of a folder holding config\n          \"\"\"\n      \n          PROMPT = \"prompt\"\n          SYMBOL = \"symbol\"\n      \n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.core.context.py_context.retriever_slim.PyContextConfig\n    \n        class PyContextConfig:\n            \"\"\"The configuration for the PyContext\"\"\"\n        \n            def __init__(\n                self,\n                spacer: str = \"  \",\n                max_dependencies_to_process: int = 10,\n                max_related_symbols_to_process: int = 10,\n            ):\n                \"\"\"\n                Args:\n                    spacer (str): The string to use for indentation\n                    max_dependency_print_depth (int): The maximum depth to print dependencies\n                    max_recursion_depth (int): The maximum depth to recurse into dependencies\n                    max_related_symbols_to_process (int): The number of nearest symbols to print\n                \"\"\"\n                self.spacer = spacer\n                self.max_dependencies_to_process = max_dependencies_to_process\n                self.max_related_symbols_to_process = max_related_symbols_to_process\n        \n        \n        \n        \n    automata_docs.cli.commands.cli\n    \n      Methods:\n        cli(ctx) -> None\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata_docs.tests.unit.test_py_code_retriever.test_build_overview\n    \n        def test_build_overview():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            result = build_repository_overview(sample_dir)\n            first_module_overview = \"sample\\n     - func sample_function\\n     - cls Person\\n       - func __init__\\n       - func say_hello\\n       - func run\\n     - func f\\n     - cls EmptyClass\\n     - cls OuterClass\\n       - cls InnerClass\\n         - func inner_method\\nsample2\\n     - cls PythonAgentToolBuilder\\n       - func __init__\\n       - func build_tools\\n         - func python_agent_python_task\"\n        \n            assert first_module_overview in result\n        \n        \n        \n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext\n    \n      Class Docstring:\n        The PyContext is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.directory`/DirectoryManager#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "DirectoryManager", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class DirectoryManager:\n    \"\"\"Handles operations related to directory structure.\"\"\"\n\n    def __init__(self, base_path: str):\n        \"\"\"\n        Args:\n            base_path (str): Base path of the directory structure\n        \"\"\"\n        self.root = self._load_directory_structure(base_path)\n\n    def _load_directory_structure(self, root_dir: str) -> \"Directory\":\n        \"\"\"Load directory structure into Directory and File objects.\"\"\"\n        root = Directory(root_dir)\n        self.root = root  # Set root before walking through directory\n\n        # Map of directory paths to their corresponding nodes\n        dir_path_to_node = {root_dir: root}\n\n        for parent_dir, dirs, files in os.walk(root_dir):\n            # Find the parent directory node\n            parent_node = dir_path_to_node[parent_dir]\n\n            # Add all directories\n            for dir in dirs:\n                dir_node = Directory(dir, parent_node)\n                parent_node.add_child(dir_node)\n                dir_path_to_node[os.path.join(parent_dir, dir)] = dir_node\n\n            # Add all files\n            for file in files:\n                parent_node.add_child(File(file, parent_node))\n\n        return root\n\n    def get_files_in_dir(self, path: str) -> List[str]:\n        \"\"\"\n        Get a list of files in the given directory\n\n        Args:\n            path (str): Path of the directory\n\n        Returns:\n            List[str]: List of files in the directory\n        \"\"\"\n        dir_node = self._get_node_for_path(self.root, path)\n        if dir_node and isinstance(dir_node, Directory):\n            return dir_node.get_file_names()\n        else:\n            return []\n\n    def get_subdirectories(self, path: str) -> List[str]:\n        \"\"\"\n        Get a list of subdirectories in the given directory\n\n        Args:\n            path (str): Path of the directory\n\n        Returns:\n            List[str]: List of subdirectories in the directory\n        \"\"\"\n        dir_node = self._get_node_for_path(self.root, path)\n        if dir_node and isinstance(dir_node, Directory):\n            return dir_node.get_subdirectories()\n        else:\n            return []\n\n    def ensure_directory_exists(self, directory_path: str):\n        \"\"\"\n        Creates the directory if it does not exist already\n\n        Args:\n            directory_path (str): Path of the directory to create\n        \"\"\"\n        if not os.path.exists(directory_path):\n            print(f\"Creating directory_path = {directory_path}\")\n            os.makedirs(directory_path)\n            self.root = self._load_directory_structure(directory_path)\n\n    def _get_node_for_path(self, root: \"Directory\", path: str) -> Optional[\"Node\"]:\n        \"\"\"\n        Find the node for a given path\n\n        Args:\n            root (Directory): Root node of the tree\n            path (str): Path to find the node for\n\n        Returns:\n            Optional[Node]: Node for the given path, None if not found\n        \"\"\"\n\n        if path == \".\":\n            return root\n\n        path_parts = path.split(os.sep)\n        # Initial node is root\n        node: Directory = root\n\n        # Iterate through path parts\n        for part in path_parts:\n            if part in node.children:\n                new_node = node.children[part]\n                if not isinstance(new_node, Directory):\n                    # If part is a file, return None\n                    return None\n                node = new_node\n            else:\n                # If part not found in children, return None\n                return None\n\n        return node\n", "document": "# DirectoryManager\n\n`DirectoryManager` is a class that handles operations related to directory structure. It provides functionalities to work with directories, such as loading directory structure, creating directories, listing files and subdirectories within the given path. The class has methods such as `ensure_directory_exists`, `get_files_in_dir`, and `get_subdirectories`.\n\n## Overview\n\n`DirectoryManager` is initialized with a `base_path` representing the base directory structure. It provides functionalities to ensure that a directory exists by creating it if necessary, get a list of files and subdirectories in the given directory path. The class utilizes related symbols like `Directory`, `Node`, and other helper functions/methods.\n\n## Related Symbols\n\n- `automata_docs.core.coding.directory.Directory`\n- `automata_docs.core.coding.directory.Node`\n- `automata_docs.tests.unit.test_directory_manager.create_test_dir_structure`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `DirectoryManager` and use its methods to interact with the directory structure.\n\n```python\nfrom automata_docs.core.coding.directory import DirectoryManager\n\nbase_path = \"/path/to/base/directory\"\ndir_manager = DirectoryManager(base_path)\n\n# Ensure a directory exists\ndir_manager.ensure_directory_exists(\"/path/to/target/directory\")\n\n# Get files in a directory\nfiles = dir_manager.get_files_in_dir(\"/path/to/directory\")\nprint(files)  # [\"file1.txt\", \"file2.txt\"]\n\n# Get subdirectories in a directory\nsubdirectories = dir_manager.get_subdirectories(\"/path/to/directory\")\nprint(subdirectories)  # [\"subdir1\", \"subdir2\"]\n```\n\n## Limitations\n\n`DirectoryManager` assumes a fixed directory structure and relies on the provided base path for working with the directory. It does not provide extensive error handling or advanced functionalities.\n\n## Follow-up Questions:\n\n- Are there any specific error handling or validations that should be added to the methods in `DirectoryManager`?", "summary": "`DirectoryManager` is a class that manages operations related to directory structures, such as creating directories, listing files, and loading directory structures. Initialized with a `base_path`, it ensures that a specific directory exists, and retrieves lists of files and subdirectories within the specified directory. The class relies on related symbols like `Directory`, `Node`, and other helper functions/methods but assumes a fixed directory structure based on the provided base path, and does not offer extensive error handling or advanced functionalities.\n\nHere's an example of how to use `DirectoryManager`:\n```python\nfrom automata_docs.core.coding.directory import DirectoryManager\n\nbase_path = \"/path/to/base/directory\"\ndir_manager = DirectoryManager(base_path)\ndir_manager.ensure_directory_exists(\"/path/to/target/directory\")\nfiles = dir_manager.get_files_in_dir(\"/path/to/directory\")\nprint(files)  # [\"file1.txt\", \"file2.txt\"]\nsubdirectories = dir_manager.get_subdirectories(\"/path/to/directory\")\nprint(subdirectories)  # [\"subdir1\", \"subdir2\"]\n```", "context": "\n    Generate the documentation for DirectoryManager using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.directory.DirectoryManager -\n  \n    Import Statements:\n      import os\n      from typing import Dict, List, Optional\n      \n    Class Docstring:\n      Handles operations related to directory structure.\n      \n    Methods:\n      def __init__(self, base_path: str):\n              \"\"\"\n              Args:\n                  base_path (str): Base path of the directory structure\n              \"\"\"\n              self.root = self._load_directory_structure(base_path)\n      \n          \n      def ensure_directory_exists(self, directory_path: str):\n              \"\"\"\n              Creates the directory if it does not exist already\n      \n              Args:\n                  directory_path (str): Path of the directory to create\n              \"\"\"\n              if not os.path.exists(directory_path):\n                  print(f\"Creating directory_path = {directory_path}\")\n                  os.makedirs(directory_path)\n                  self.root = self._load_directory_structure(directory_path)\n      \n          \n      def get_files_in_dir(self, path: str) -> List[str]:\n              \"\"\"\n              Get a list of files in the given directory\n      \n              Args:\n                  path (str): Path of the directory\n      \n              Returns:\n                  List[str]: List of files in the directory\n              \"\"\"\n              dir_node = self._get_node_for_path(self.root, path)\n              if dir_node and isinstance(dir_node, Directory):\n                  return dir_node.get_file_names()\n              else:\n                  return []\n      \n          \n      def get_subdirectories(self, path: str) -> List[str]:\n              \"\"\"\n              Get a list of subdirectories in the given directory\n      \n              Args:\n                  path (str): Path of the directory\n      \n              Returns:\n                  List[str]: List of subdirectories in the directory\n              \"\"\"\n              dir_node = self._get_node_for_path(self.root, path)\n              if dir_node and isinstance(dir_node, Directory):\n                  return dir_node.get_subdirectories()\n              else:\n                  return []\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_directory_manager.test_load_directory_structure\n    \n        def test_load_directory_structure(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            assert dir_manager.root.name == str(test_dir)\n            assert len(dir_manager.root.children) == 2  # 2 directories: dir1, dir2\n        \n        \n        \n        \n    automata_docs.tests.unit.test_directory_manager.test_get_files_in_dir\n    \n        def test_get_files_in_dir(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            files_in_dir1 = dir_manager.get_files_in_dir(\"dir1\")\n            assert len(files_in_dir1) == 2  # 2 files in dir1: file1, file2\n            assert set(files_in_dir1) == {\"file1\", \"file2\"}\n        \n        \n        \n        \n    automata_docs.tests.unit.test_directory_manager.test_get_subdirectories\n    \n        def test_get_subdirectories(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            subdirectories = dir_manager.get_subdirectories(\".\")\n            assert len(subdirectories) == 2  # 2 subdirectories in root: dir1, dir2\n            assert set(subdirectories) == {\"dir1\", \"dir2\"}\n        \n        \n    automata_docs.tests.unit.test_directory_manager.test_get_node_for_path\n    \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n        \n    automata_docs.core.coding.directory.Directory\n    \n      Class Docstring:\n        Represents a directory. Has children which can be directories or files\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the directory\n                    parent (Node): Parent node of this directory\n                \"\"\"\n                super().__init__(name, parent)\n                self.children: Dict[str, Node] = {}\n        \n            \n        add_child(self, child: \"Node\") -> None\n        \n        get_file_names(self) -> List[str]\n        \n        get_subdirectories(self) -> List[str]\n        \n        is_leaf_dir(self) -> bool\n        \n        is_root_dir(self) -> bool\n        \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.IndentManager\n    \n      Class Docstring:\n        A context manager to manage the indentation level\n        \n      Methods:\n        IndentManager(self) -> None\n        \n    automata_docs.tests.unit.test_directory_manager.create_test_dir_structure\n    \n        def create_test_dir_structure(tmp_path):\n            \"\"\"\n            Creates a test directory structure under the given path.\n            \"\"\"\n            (tmp_path / \"dir1\").mkdir()\n            (tmp_path / \"dir2\").mkdir()\n            (tmp_path / \"dir1\" / \"file1\").write_text(\"content\")\n            (tmp_path / \"dir1\" / \"file2\").write_text(\"content\")\n            (tmp_path / \"dir2\" / \"file1\").write_text(\"content\")\n            return tmp_path\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext.IndentManager\n    \n      Class Docstring:\n        A context manager to manage the indentation level\n        \n      Methods:\n        IndentManager(self) -> None\n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n  Building context for dependencies -\n  \n    automata_docs.core.coding.directory.Directory.get_subdirectories\n    \n      Class Docstring:\n        Get a list of subdirectory names in the directory\n        \n        Args:\n        directory (Directory): Directory to get subdirectory names from\n        \n        Returns:\n        List[str]: List of subdirectory names in the directory\n        \n      Methods:\n        get_subdirectories(self) -> List[str]\n        \n    automata_docs.core.coding.directory.Node\n    \n      Class Docstring:\n        Abstract base class for a node in the file tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the node\n                    parent (Node): Parent node of this node\n                \"\"\"\n                self.name = name\n                self.parent = parent\n        \n        \n        \n    automata_docs.core.coding.directory.Directory.get_file_names\n    \n      Class Docstring:\n        Get a list of file names in the directory\n        \n        Args:\n        directory (Directory): Directory to get file names from\n        \n        Returns:\n        List[str]: List of file names in the directory\n        \n      Methods:\n        get_file_names(self) -> List[str]\n        \n    automata_docs.core.coding.directory.Directory.add_child\n    \n      Class Docstring:\n        Adds a child node to this directory\n        \n        Args:\n        child (Node): Child node to add\n        \n      Methods:\n        add_child(self, child: \"Node\") -> None\n        \n    automata_docs.core.coding.directory.File\n    \n      Class Docstring:\n        Represents a file in the tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the file\n                    parent (Node): Parent node of this file\n                \"\"\"\n                super().__init__(name, parent)\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.directory`/File#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "File", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class File(Node):\n    \"\"\"Represents a file in the tree\"\"\"\n\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        \"\"\"\n        Args:\n            name (str): Name of the file\n            parent (Node): Parent node of this file\n        \"\"\"\n        super().__init__(name, parent)\n\n\n", "document": "# File\n\n`File` is a class that represents a file in a tree. It inherits from the abstract base class `Node` and provides an initialization method for providing a file name and an optional parent node.\n\n## Overview\n\n`File` is useful for representing tree structures, such as directories and file hierarchies. By providing a name and optional parent `Node`, the `File` instance can be linked to other nodes to form a tree.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.SymbolFile`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.coding.directory.Node`\n\n## Example\n\nThe following example demonstrates how to create instances of the `File` class:\n\n```python\nfrom automata_docs.core.coding.directory import File\n\nfile1 = File(\"file1.txt\")\nfile2 = File(\"file2.txt\", parent=file1)\n```\n\nIn this example, `file1` is created with the name `\"file1.txt\"` and no parent node. `file2` is created with the name `\"file2.txt\"` and `file1` as its parent node.\n\n## Limitations\n\nThe `File` class is minimal and may not cover the full range of file system operations. It currently only supports constructing instances with a name and optional parent node.\n\n## Follow-up Questions:\n\n- Are there any additional methods or functionalities for the `File` class that should be included in the documentation?\n\n*NOTE:* In the examples and descriptions above, the `Mock` objects in test files from the context have been omitted or replaced with actual underlying objects, as appropriate. If there are any remaining references to `Mock` objects not explicitly mentioned, they are used in testing to simplify working with complex objects.", "summary": "`File` is a class representing a file in a tree structure, such as directories and file hierarchies. Inheriting from the abstract base class `Node`, it allows for the creation of instances with a name and an optional parent `Node` to form a tree. However, the `File` class is minimal and primarily supports constructing instances with a name and optional parent node, without covering the full range of file system operations. \n\nFor example:\n```python\nfrom automata_docs.core.coding.directory import File\n\nfile1 = File(\"file1.txt\")\nfile2 = File(\"file2.txt\", parent=file1)\n```\nIn this example, `file1` is created with the name `\"file1.txt\"` and no parent node, while `file2` is created with the name `\"file2.txt\"` and `file1` as its parent node.", "context": "\n    Generate the documentation for File using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.directory.File -\n  \n    Import Statements:\n      import os\n      from typing import Dict, List, Optional\n      \n    Class Docstring:\n      Represents a file in the tree\n      \n    Methods:\n      def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n              \"\"\"\n              Args:\n                  name (str): Name of the file\n                  parent (Node): Parent node of this file\n              \"\"\"\n              super().__init__(name, parent)\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.SymbolFile\n    \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolFile.__eq__\n    \n      Methods:\n        __eq__(self, other) -> None\n        \n    automata_docs.tests.unit.test_symbol_graph.test_get_all_files\n    \n        def test_get_all_files(symbol_graph):\n            files = symbol_graph.get_all_files()\n            assert isinstance(files, list)\n            for f in files:\n                assert isinstance(f, SymbolFile)\n        \n        \n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_load\n    \n        def test_load(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n            vector_db_2 = JSONVectorDatabase(temp_output_filename)\n        \n            embedded_symbol_0 = vector_db_2.get(symbols[0])\n            embedded_symbol_1 = vector_db_2.get(symbols[1])\n        \n        \n    automata_docs.tests.unit.test_database_vector.test_init_vector\n    \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolReference\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n  Building context for dependencies -\n  \n    automata_docs.core.coding.directory.Node.__init__\n    \n      Class Docstring:\n        Args:\n        name (str): Name of the node\n        parent (Node): Parent node of this node\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the node\n                    parent (Node): Parent node of this node\n                \"\"\"\n                self.name = name\n                self.parent = parent\n        \n        \n        \n    automata_docs.core.coding.directory.Node\n    \n      Class Docstring:\n        Abstract base class for a node in the file tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the node\n                    parent (Node): Parent node of this node\n                \"\"\"\n                self.name = name\n                self.parent = parent\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.directory`/Node#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "Node", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class Node:\n    \"\"\"Abstract base class for a node in the file tree\"\"\"\n\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        \"\"\"\n        Args:\n            name (str): Name of the node\n            parent (Node): Parent node of this node\n        \"\"\"\n        self.name = name\n        self.parent = parent\n\n\n", "document": "# Node\n\n`Node` is an abstract base class for a node in the file tree within a directory structure. It provides a base structure for representing files and directories as nodes with name and parent node information.\n\n## Related Symbols\n\n- `automata_docs.core.coding.directory.File`\n- `automata_docs.core.coding.directory.Directory`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of a `Directory` object, which inherits from the `Node` class:\n\n```python\nfrom automata_docs.core.coding.directory import Directory\n\ndirectory = Directory(name=\"example_directory\", parent=None)\n```\n\nSimilarly, you can create an instance of a `File` object:\n\n```python\nfrom automata_docs.core.coding.directory import File\n\nfile_node = File(name=\"example_file.txt\", parent=directory)\n```\n\n## Limitations\n\nThe `Node` class does not provide any methods or functionality for working with the file system. It only serves as a data structure to represent directories and files within a larger tree structure.\n\n## Follow-up Questions:\n\n- How can we modify the `Node` class to work more closely with the file system, including reading and writing files?\n\nNote: In the provided context, there are references to 'Mock' objects used in test files. As these are testing-specific objects, their inclusion in the examples and discussion has been omitted.", "summary": "Node is an abstract base class used to represent files and directories as nodes within a directory structure. It contains basic information such as the name and parent node. To create instances of Directory and File objects, you can use the following example:\n\n```python\nfrom automata_docs.core.coding.directory import Directory, File\n\ndirectory = Directory(name=\"example_directory\", parent=None)\nfile_node = File(name=\"example_file.txt\", parent=directory)\n```\n\nNote that the Node class only serves as a data structure and does not provide any methods for working with the file system.", "context": "\n    Generate the documentation for Node using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.directory.Node -\n  \n    Import Statements:\n      import os\n      from typing import Dict, List, Optional\n      \n    Class Docstring:\n      Abstract base class for a node in the file tree\n      \n    Methods:\n      def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n              \"\"\"\n              Args:\n                  name (str): Name of the node\n                  parent (Node): Parent node of this node\n              \"\"\"\n              self.name = name\n              self.parent = parent\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.coding.directory.File\n    \n      Class Docstring:\n        Represents a file in the tree\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the file\n                    parent (Node): Parent node of this file\n                \"\"\"\n                super().__init__(name, parent)\n        \n        \n        \n    automata_docs.core.coding.directory.Directory\n    \n      Class Docstring:\n        Represents a directory. Has children which can be directories or files\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the directory\n                    parent (Node): Parent node of this directory\n                \"\"\"\n                super().__init__(name, parent)\n                self.children: Dict[str, Node] = {}\n        \n            \n        add_child(self, child: \"Node\") -> None\n        \n        get_file_names(self) -> List[str]\n        \n        get_subdirectories(self) -> List[str]\n        \n        is_leaf_dir(self) -> bool\n        \n        is_root_dir(self) -> bool\n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.tests.unit.test_directory_manager.test_get_node_for_path\n    \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.graph.SymbolGraph.SubGraph\n    \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.py_coding.module_tree`/DotPathMap#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.module_tree", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "DotPathMap", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class DotPathMap:\n    \"\"\"A map from module dotpaths to module filepaths\"\"\"\n\n    def __init__(self, path: str):\n        \"\"\"\n        Args:\n            path: The absolute path to the root of the module tree\n        \"\"\"\n        if not os.path.isabs(path):\n            path = os.path.join(root_fpath(), path)\n        self._abs_path = path\n        self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n        self._module_fpath_to_dotpath_map = {\n            v: k for k, v in self._module_dotpath_to_fpath_map.items()\n        }\n\n    def _build_module_dotpath_to_fpath_map(self) -> Dict[str, str]:\n        \"\"\"\n        Builds a map from module dotpaths to module filepaths\n\n        Returns:\n            The map from module dotpaths to module filepaths\n        \"\"\"\n        module_dotpath_to_fpath_map = {}\n        for root, _, files in os.walk(self._abs_path):\n            for file in files:\n                if file.endswith(\".py\"):\n                    module_fpath = os.path.join(root, file)\n                    module_dotpath = convert_fpath_to_module_dotpath(self._abs_path, module_fpath)\n                    module_dotpath_to_fpath_map[module_dotpath] = module_fpath\n        return module_dotpath_to_fpath_map\n\n    def get_module_fpath_by_dotpath(self, module_dotpath: str) -> str:\n        \"\"\"\n        Gets the filepath of a module given its dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            The filepath of the module\n        \"\"\"\n        return self._module_dotpath_to_fpath_map[module_dotpath]\n\n    def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n        \"\"\"\n        Gets the dotpath of a module given its filepath\n\n        Args:\n            module_fpath: The filepath of the module\n\n        Returns:\n            The dotpath of the module\n        \"\"\"\n        return self._module_fpath_to_dotpath_map[module_fpath]\n\n    def contains_dotpath(self, module_dotpath: str) -> bool:\n        \"\"\"\n        Checks if the map contains a module with the given dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            True if the map contains the module, False otherwise\n        \"\"\"\n        return module_dotpath in self._module_dotpath_to_fpath_map\n\n    def contains_fpath(self, module_fpath: str) -> bool:\n        \"\"\"\n        Checks if the map contains a module with the given filepath\n\n        Args:\n            module_fpath: The filepath of the module\n\n        Returns:\n            True if the map contains the module, False otherwise\n        \"\"\"\n        return module_fpath in self._module_fpath_to_dotpath_map\n\n    def put_module(self, module_dotpath: str):\n        \"\"\"\n        Puts a module with the given dotpath in the map\n\n        Args:\n            module_dotpath: The dotpath of the module\n        \"\"\"\n        if not self.contains_dotpath(module_dotpath):\n            module_os_rel_path = module_dotpath.replace(DOT_SEP, os.path.sep)\n            module_os_abs_path = os.path.join(self._abs_path, module_os_rel_path)\n            os.makedirs(os.path.dirname(module_os_abs_path), exist_ok=True)\n            file_path = f\"{module_os_abs_path}.py\"\n            self._module_dotpath_to_fpath_map[module_dotpath] = file_path\n            self._module_fpath_to_dotpath_map[file_path] = module_dotpath\n\n    def items(self) -> Iterable[Tuple[str, str]]:\n        \"\"\"\n        Returns:\n            A dictionary containing the module dotpath to module filepath mapping\n        \"\"\"\n        return self._module_dotpath_to_fpath_map.items()\n\n\n", "document": "# DotPathMap\n\n`DotPathMap` is a class that provides a mapping between module dotpaths and their filepaths. A dotpath is a string showing the hierarchical structure of a program, separated by periods. The class has methods to add, check if a module exists, and fetch the dotpath or filepath for a specific module.\n\n## Overview\n\n`DotPathMap` is initialized with the root filesystem path of the module tree, where it builds and maintains maps between module dotpaths and their filepaths. It provides methods for checking if the map contains a module by its dotpath or filepath, and methods to retrieve the dotpath or filepath for a module given one or the other.\n\n## Related Symbols\n\n- `automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n\n## Example\n\nThe following example demonstrates how to create an instance of `DotPathMap` and perform various operations on it:\n\n```python\nfrom automata_docs.core.coding.py_coding.module_tree import DotPathMap\n\n# Create a DotPathMap instance with a specific path\npath = \"/path/to/python/module/root\"\nmap_instance = DotPathMap(path)\n\n# Check if the DotPathMap contains a module\nmodule_dotpath = \"automata_docs.core.agent.automata_agent\"\nis_module_exists = map_instance.contains_dotpath(module_dotpath)\n\n# Add a module to the DotPathMap\nnew_module_dotpath = \"automata_docs.core.test.new_module\"\nmap_instance.put_module(new_module_dotpath)\n\n# Get the filepath of a module given its dotpath\nmodule_filepath = map_instance.get_module_fpath_by_dotpath(new_module_dotpath)\n\n# Get the dotpath of a module given its filepath\nfetched_module_dotpath = map_instance.get_module_dotpath_by_fpath(module_filepath)\n```\n\n## Limitations\n\n`DotPathMap` assumes a specific directory structure for the module tree and relies on a one-to-one mapping between module dotpaths and filepaths. If the directory structure is changed or if there are multiple filepaths associated with a dotpath, the mapping might be inconsistent.\n\n## Follow-up Questions:\n\n- What happens if there are multiple filepaths associated with a single dotpath?", "summary": "DotPathMap is a class that maps module dotpaths to their filepaths, where a dotpath is a string representing the hierarchical structure of a program separated by periods. This class is initialized with the root filesystem path of the module tree and provides methods for adding modules, checking if a module exists, and fetching the dotpath or filepath for a specific module. However, it assumes a specific directory structure and relies on a one-to-one mapping between module dotpaths and filepaths, which might be inconsistent if the directory structure changes or if there are multiple filepaths associated with a dotpath.", "context": "\n    Generate the documentation for DotPathMap using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.py_coding.module_tree.DotPathMap -\n  \n    Import Statements:\n      import logging\n      import os.path\n      from functools import lru_cache\n      from typing import Dict, Iterable, Optional, Tuple\n      from redbaron import RedBaron\n      from automata_docs.core.coding.py_coding.py_utils import DOT_SEP, convert_fpath_to_module_dotpath\n      from automata_docs.core.utils import root_fpath\n      \n    Class Docstring:\n      A map from module dotpaths to module filepaths\n      \n    Methods:\n      def __init__(self, path: str):\n              \"\"\"\n              Args:\n                  path: The absolute path to the root of the module tree\n              \"\"\"\n              if not os.path.isabs(path):\n                  path = os.path.join(root_fpath(), path)\n              self._abs_path = path\n              self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n              self._module_fpath_to_dotpath_map = {\n                  v: k for k, v in self._module_dotpath_to_fpath_map.items()\n              }\n      \n          \n      def contains_dotpath(self, module_dotpath: str) -> bool:\n              \"\"\"\n              Checks if the map contains a module with the given dotpath\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n      \n              Returns:\n                  True if the map contains the module, False otherwise\n              \"\"\"\n              return module_dotpath in self._module_dotpath_to_fpath_map\n      \n          \n      def contains_fpath(self, module_fpath: str) -> bool:\n              \"\"\"\n              Checks if the map contains a module with the given filepath\n      \n              Args:\n                  module_fpath: The filepath of the module\n      \n              Returns:\n                  True if the map contains the module, False otherwise\n              \"\"\"\n              return module_fpath in self._module_fpath_to_dotpath_map\n      \n          \n      def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n              \"\"\"\n              Gets the dotpath of a module given its filepath\n      \n              Args:\n                  module_fpath: The filepath of the module\n      \n              Returns:\n                  The dotpath of the module\n              \"\"\"\n              return self._module_fpath_to_dotpath_map[module_fpath]\n      \n          \n      def get_module_fpath_by_dotpath(self, module_dotpath: str) -> str:\n              \"\"\"\n              Gets the filepath of a module given its dotpath\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n      \n              Returns:\n                  The filepath of the module\n              \"\"\"\n              return self._module_dotpath_to_fpath_map[module_dotpath]\n      \n          \n      def items(self) -> Iterable[Tuple[str, str]]:\n              \"\"\"\n              Returns:\n                  A dictionary containing the module dotpath to module filepath mapping\n              \"\"\"\n              return self._module_dotpath_to_fpath_map.items()\n      \n      \n      \n      def put_module(self, module_dotpath: str):\n              \"\"\"\n              Puts a module with the given dotpath in the map\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n              \"\"\"\n              if not self.contains_dotpath(module_dotpath):\n                  module_os_rel_path = module_dotpath.replace(DOT_SEP, os.path.sep)\n                  module_os_abs_path = os.path.join(self._abs_path, module_os_rel_path)\n                  os.makedirs(os.path.dirname(module_os_abs_path), exist_ok=True)\n                  file_path = f\"{module_os_abs_path}.py\"\n                  self._module_dotpath_to_fpath_map[module_dotpath] = file_path\n                  self._module_fpath_to_dotpath_map[file_path] = module_dotpath\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap.__contains__\n    \n      Class Docstring:\n        Checks if the map contains a module with the given dotpath\n        \n        Args:\n        dotpath: The dotpath of the module\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap.put_module\n    \n      Class Docstring:\n        Put a module with the given dotpath in the map\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        module: The module to put in the map\n        \n      Methods:\n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata_docs.tests.unit.test_py_code_retriever.module_map\n    \n        @pytest.fixture\n        def module_map():\n            # get latest path\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            # Set the root directory to the folder containing test modules\n            return LazyModuleTreeMap(sample_dir)\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap.cached_default\n    \n      Class Docstring:\n        Creates a new LazyModuleTreeMap instance with the default root path\n        \n      Methods:\n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n    automata_docs.tests.unit.test_directory_manager.test_get_node_for_path\n    \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolFile\n    \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n  Building context for dependencies -\n  \n    automata_docs.core.utils.root_fpath\n    \n      Class Docstring:\n        Returns the path to the root of the project directory.\n        \n        Returns:\n        str - A fpath object in string form\n        \n      Methods:\n        root_fpath() -> str\n        \n    automata_docs.core.coding.py_coding.py_utils.convert_fpath_to_module_dotpath\n    \n      Class Docstring:\n        Converts a filepath to a module dotpath\n        \n        Args:\n        root_abs_path: The absolute path of the root directory\n        module_path: The path of the module\n        \n        Returns:\n        The dotpath of the module\n        \n      Methods:\n        convert_fpath_to_module_dotpath(root_abs_path: str, module_path: str) -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.py_coding.module_tree`/LazyModuleTreeMap#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.module_tree", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "LazyModuleTreeMap", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class LazyModuleTreeMap:\n    \"\"\"\n    A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n    Loads and caches modules in memory as they are accessed\n    \"\"\"\n\n    def __init__(self, path: str):\n        \"\"\"\n        Args:\n            path: The absolute path to the root of the module tree\n        \"\"\"\n        self._dotpath_map = DotPathMap(path)\n        self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n\n    def __contains__(self, dotpath):\n        \"\"\"\n        Checks if the map contains a module with the given dotpath\n\n        Args:\n            dotpath: The dotpath of the module\n        \"\"\"\n        return self._dotpath_map.contains_dotpath(dotpath)\n\n    def items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]:\n        \"\"\"\n        Returns:\n            A dictionary containing the module dotpath to module RedBaron FST object mapping\n        \"\"\"\n        self._load_all_modules()\n        return self._loaded_modules.items()\n\n    def fetch_module(self, module_dotpath: str) -> Optional[RedBaron]:\n        \"\"\"\n        Gets the module with the given dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            Optional[RedBaron]: The module with the given dotpath if found, None otherwise\n        \"\"\"\n        if not self._dotpath_map.contains_dotpath(module_dotpath):\n            return None\n\n        if module_dotpath not in self._loaded_modules:\n            module_fpath = self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n            self._loaded_modules[module_dotpath] = self._load_module_from_fpath(module_fpath)\n        return self._loaded_modules[module_dotpath]\n\n    def fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]:\n        \"\"\"\n        Gets the module dotpath for the specified module object.\n\n        Args:\n            module_obj (Module): The module object.\n\n        Returns:\n            str: The module dotpath for the specified module object.\n        \"\"\"\n        # there is no way a module that has a redbaron object is not loaded\n        for module_dotpath, module in self._loaded_modules.items():\n            if module == module_obj:\n                return module_dotpath\n        return None\n\n    def fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]:\n        \"\"\"\n        Gets the module fpath for the specified module dotpath.\n\n        Args:\n            module_dotpath (str): The module dotpath.\n\n        Returns:\n            str: The module fpath for the specified module dotpath.\n        \"\"\"\n\n        if module_dotpath in self._loaded_modules:\n            return self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n        return None\n\n    def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n        \"\"\"\n        Gets the module dotpath for the specified module fpath.\n\n        Args:\n            module_fpath (str): The module fpath.\n        \"\"\"\n        return self._dotpath_map.get_module_dotpath_by_fpath(module_fpath)\n\n    def put_module(self, module_dotpath: str, module: RedBaron):\n        \"\"\"\n        Put a module with the given dotpath in the map\n\n        Args:\n            module_dotpath: The dotpath of the module\n            module: The module to put in the map\n        \"\"\"\n        self._loaded_modules[module_dotpath] = module\n        self._dotpath_map.put_module(module_dotpath)\n\n    def _load_all_modules(self):\n        \"\"\"Loads all modules in the map\"\"\"\n        for module_dotpath, fpath in self._dotpath_map.items():\n            if module_dotpath not in self._loaded_modules:\n                self._loaded_modules[module_dotpath] = self._load_module_from_fpath(fpath)\n\n    @classmethod\n    @lru_cache(maxsize=1)\n    def cached_default(cls) -> \"LazyModuleTreeMap\":\n        \"\"\"Creates a new LazyModuleTreeMap instance with the default root path\"\"\"\n        return cls(root_fpath())\n\n    @staticmethod\n    def _load_module_from_fpath(path: str) -> Optional[RedBaron]:\n        \"\"\"\n        Loads and returns an FST object for the given file path.\n\n        Args:\n            path (str): The file path of the Python source code.\n\n        Returns:\n            Module: RedBaron FST object.\n        \"\"\"\n        try:\n            module = RedBaron(open(path).read())\n            return module\n        except Exception as e:\n            logger.error(f\"Failed to load module '{path}' due to: {e}\")\n            return None\n", "document": "# LazyModuleTreeMap\n\n## Overview\n\n`LazyModuleTreeMap` is a lazy dictionary between module dotpaths and their corresponding RedBaron FST objects. It is used for loading and caching modules in memory as they are accessed. The class has methods to check if the map contains a module with a given dotpath, fetch a module by its dotpath, add a module to the map, and return the module dotpath to RedBaron FST object mapping for all loaded modules.\n\n## Related Symbols\n\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata_docs.tests.unit.test_py_code_retriever.module_map`\n- `automata_docs.tests.unit.test_py_code_retriever.getter`\n- `automata_docs.core.coding.py_coding.module_tree.DotPathMap`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `LazyModuleTreeMap` with a custom root path:\n\n```python\nfrom automata_docs.core.coding.py_coding.module_tree import LazyModuleTreeMap\nfrom automata_docs.core.utils import root_fpath\n\n# Set the custom root path for the module tree\ncustom_root_path = \"/path/to/your/custom/root\"\nmodule_tree_map = LazyModuleTreeMap(custom_root_path)\n```\n\n## Limitations\n\n`LazyModuleTreeMap` assumes a specific directory structure for the module files. It relies on the predefined `DotPathMap` for module dotpath to filepath mapping, and cannot load custom mapping files. \n\n## Follow-up Questions:\n\n- How can we include custom mapping files for loading into the `LazyModuleTreeMap` class?", "summary": "LazyModuleTreeMap is a dictionary that maps module dotpaths to their corresponding RedBaron FST objects. It is utilized for loading and caching modules in memory as they are accessed, with various methods to manage the modules. However, it assumes a specific directory structure and relies on a predefined DotPathMap for module-to-filepath mapping, limiting its ability to load custom mapping files. An example of creating an instance with a custom root path is as follows:\n\n```python\nfrom automata_docs.core.coding.py_coding.module_tree import LazyModuleTreeMap\nfrom automata_docs.core.utils import root_fpath\n\n# Set the custom root path for the module tree\ncustom_root_path = \"/path/to/your/custom/root\"\nmodule_tree_map = LazyModuleTreeMap(custom_root_path)\n```\nIn order to incorporate custom mapping files into the class, further development would be required.", "context": "\n    Generate the documentation for LazyModuleTreeMap using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap -\n  \n    Import Statements:\n      import logging\n      import os.path\n      from functools import lru_cache\n      from typing import Dict, Iterable, Optional, Tuple\n      from redbaron import RedBaron\n      from automata_docs.core.coding.py_coding.py_utils import DOT_SEP, convert_fpath_to_module_dotpath\n      from automata_docs.core.utils import root_fpath\n      \n    Class Docstring:\n      A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n      Loads and caches modules in memory as they are accessed\n      \n    Methods:\n      def __contains__(self, dotpath):\n              \"\"\"\n              Checks if the map contains a module with the given dotpath\n      \n              Args:\n                  dotpath: The dotpath of the module\n              \"\"\"\n              return self._dotpath_map.contains_dotpath(dotpath)\n      \n          \n      def __init__(self, path: str):\n              \"\"\"\n              Args:\n                  path: The absolute path to the root of the module tree\n              \"\"\"\n              self._dotpath_map = DotPathMap(path)\n              self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n      \n          \n      @classmethod\n          @lru_cache(maxsize=1)\n          def cached_default(cls) -> \"LazyModuleTreeMap\":\n              \"\"\"Creates a new LazyModuleTreeMap instance with the default root path\"\"\"\n              return cls(root_fpath())\n      \n          \n      def fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]:\n              \"\"\"\n              Gets the module dotpath for the specified module object.\n      \n              Args:\n                  module_obj (Module): The module object.\n      \n              Returns:\n                  str: The module dotpath for the specified module object.\n              \"\"\"\n              # there is no way a module that has a redbaron object is not loaded\n              for module_dotpath, module in self._loaded_modules.items():\n                  if module == module_obj:\n                      return module_dotpath\n              return None\n      \n          \n      def fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]:\n              \"\"\"\n              Gets the module fpath for the specified module dotpath.\n      \n              Args:\n                  module_dotpath (str): The module dotpath.\n      \n              Returns:\n                  str: The module fpath for the specified module dotpath.\n              \"\"\"\n      \n              if module_dotpath in self._loaded_modules:\n                  return self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n              return None\n      \n          \n      def fetch_module(self, module_dotpath: str) -> Optional[RedBaron]:\n              \"\"\"\n              Gets the module with the given dotpath\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n      \n              Returns:\n                  Optional[RedBaron]: The module with the given dotpath if found, None otherwise\n              \"\"\"\n              if not self._dotpath_map.contains_dotpath(module_dotpath):\n                  return None\n      \n              if module_dotpath not in self._loaded_modules:\n                  module_fpath = self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n                  self._loaded_modules[module_dotpath] = self._load_module_from_fpath(module_fpath)\n              return self._loaded_modules[module_dotpath]\n      \n          \n      def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n              \"\"\"\n              Gets the module dotpath for the specified module fpath.\n      \n              Args:\n                  module_fpath (str): The module fpath.\n              \"\"\"\n              return self._dotpath_map.get_module_dotpath_by_fpath(module_fpath)\n      \n          \n      def items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]:\n              \"\"\"\n              Returns:\n                  A dictionary containing the module dotpath to module RedBaron FST object mapping\n              \"\"\"\n              self._load_all_modules()\n              return self._loaded_modules.items()\n      \n          \n      def put_module(self, module_dotpath: str, module: RedBaron):\n              \"\"\"\n              Put a module with the given dotpath in the map\n      \n              Args:\n                  module_dotpath: The dotpath of the module\n                  module: The module to put in the map\n              \"\"\"\n              self._loaded_modules[module_dotpath] = module\n              self._dotpath_map.put_module(module_dotpath)\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever.__init__\n    \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n    automata_docs.tests.unit.test_py_code_retriever.module_map\n    \n        @pytest.fixture\n        def module_map():\n            # get latest path\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            # Set the root directory to the folder containing test modules\n            return LazyModuleTreeMap(sample_dir)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.core.coding.py_coding.module_tree.DotPathMap\n    \n      Class Docstring:\n        A map from module dotpaths to module filepaths\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                if not os.path.isabs(path):\n                    path = os.path.join(root_fpath(), path)\n                self._abs_path = path\n                self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n                self._module_fpath_to_dotpath_map = {\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        \n            \n        contains_dotpath(self, module_dotpath: str) -> bool\n        \n        contains_fpath(self, module_fpath: str) -> bool\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        get_module_fpath_by_dotpath(self, module_dotpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, str]]\n        \n        put_module(self, module_dotpath: str) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.coding.py_coding.module_tree.DotPathMap.put_module\n    \n      Class Docstring:\n        Puts a module with the given dotpath in the map\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        \n      Methods:\n        put_module(self, module_dotpath: str) -> None\n        \n    automata_docs.core.coding.py_coding.module_tree.DotPathMap.items\n    \n      Class Docstring:\n        Returns:\n        A dictionary containing the module dotpath to module filepath mapping\n        \n      Methods:\n        items(self) -> Iterable[Tuple[str, str]]\n        \n    automata_docs.core.coding.py_coding.module_tree.DotPathMap.get_module_dotpath_by_fpath\n    \n      Class Docstring:\n        Gets the dotpath of a module given its filepath\n        \n        Args:\n        module_fpath: The filepath of the module\n        \n        Returns:\n        The dotpath of the module\n        \n      Methods:\n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n    automata_docs.core.coding.py_coding.module_tree.DotPathMap.contains_dotpath\n    \n      Class Docstring:\n        Checks if the map contains a module with the given dotpath\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        \n        Returns:\n        True if the map contains the module, False otherwise\n        \n      Methods:\n        contains_dotpath(self, module_dotpath: str) -> bool\n        \n    automata_docs.core.coding.py_coding.module_tree.DotPathMap.get_module_fpath_by_dotpath\n    \n      Class Docstring:\n        Gets the filepath of a module given its dotpath\n        \n        Args:\n        module_dotpath: The dotpath of the module\n        \n        Returns:\n        The filepath of the module\n        \n      Methods:\n        get_module_fpath_by_dotpath(self, module_dotpath: str) -> str\n        \n    automata_docs.core.utils.root_fpath\n    \n      Class Docstring:\n        Returns the path to the root of the project directory.\n        \n        Returns:\n        str - A fpath object in string form\n        \n      Methods:\n        root_fpath() -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.py_coding.writer`/PyCodeWriter#ClassOrFunctionNotFound#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "ClassOrFunctionNotFound", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class ClassOrFunctionNotFound(Exception):\n        \"\"\"Raised when a class or function is not found in the module\"\"\"\n\n        pass\n\n    ", "document": "# PyCodeWriter\n\nPyCodeWriter is a Python utility class that assists in writing code and documentation for Python modules. It interacts with the PyCodeRetriever to obtain relevant information about the Python module, such as method and class signatures, import statements, and docstrings.\n\n## Overview\n\nPyCodeWriter is implemented by initializing an instance with a PyCodeRetriever object. PyCodeWriter supports various functions, such as creating or updating an existing module, generating module documentation, and writing documentation to files. It can also handle cases where a module is not found, by raising a `ClassOrFunctionNotFound` exception.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.coding.py_coding.writer.PyDocWriter`\n\n## Usage Example\n\n```python\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata_docs.core.coding.directory import DirectoryManager\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\n\n# Initialize the PyCodeRetriever and PyCodeWriter\ndirectory_manager = DirectoryManager('/path/to/your/project')\nretriever = PyCodeRetriever(directory_manager.get_module_tree_map())\nwriter = PyCodeWriter(retriever)\n\n# Generate code and create new or update existing module\nsource_code = \"def sample_function():\\n    return 'Hello, World!'\"\nwriter.create_new_module('my_module', source_code, do_write=True)\nupdated_source_code = \"def new_function():\\n    return 'Another function!'\"\nwriter.update_existing_module(source_code=updated_source_code, module_dotpath='my_module', do_write=True)\n```\n\n## Limitations\n\nDue to the reliance on PyCodeRetriever, any limitations associated with PyCodeRetriever's methods will carry over to PyCodeWriter. This includes the expectation of specific directory structures and module formats.\n\n## Follow-up Questions:\n\n- How can the source code generation, module creation, and update process be made more flexible to handle various module formats and directory structures?\n\nNote: In the context provided, the `MockCodeGenerator` is used for testing purposes. However, in actual use cases, you would replace this with the actual generator or provide the complete source code.", "summary": "PyCodeWriter is a Python utility class that assists in writing code and documentation for Python modules by interacting with PyCodeRetriever to obtain relevant information such as method and class signatures, import statements, and docstrings. It supports various functions like creating or updating a module, generating module documentation, and writing documentation to files, while also handling cases where a module is not found by raising a `ClassOrFunctionNotFound` exception. However, PyCodeWriter's limitations lie in its reliance on PyCodeRetriever, which carries over limitations associated with directory structures and module formats.\n\nUsage example:\n```python\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata_docs.core.coding.directory import DirectoryManager\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\n\n# Initialize the PyCodeRetriever and PyCodeWriter\ndirectory_manager = DirectoryManager('/path/to/your/project')\nretriever = PyCodeRetriever(directory_manager.get_module_tree_map())\nwriter = PyCodeWriter(retriever)\n\n# Generate code and create new or update existing module\nsource_code = \"def sample_function():\\n    return 'Hello, World!'\"\nwriter.create_new_module('my_module', source_code, do_write=True)\nupdated_source_code = \"def new_function():\\n    return 'Another function!'\"\nwriter.update_existing_module(source_code=updated_source_code, module_dotpath='my_module', do_write=True)\n```", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata_docs.core.coding.directory import DirectoryManager\n      from automata_docs.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n    Class Docstring:\n      Raised when a class or function is not found in the module\n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext\n    \n      Class Docstring:\n        The PyContext is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata_docs.core.coding.py_coding.writer.PyDocWriter\n    \n      Class Docstring:\n        A class to write documentation for Python modules\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): The base path of the project\n                \"\"\"\n                self.base_path = base_path\n                self.directory_manager = DirectoryManager(base_path)\n        \n            \n        camel_to_snake(name: str) -> str\n        \n        check_camel_case(text: str) -> bool\n        \n        generate_index_files(self, docs_dir: str) -> None\n        \n        generate_module_summary(self, module_dir: str) -> None\n        \n        generate_rst_files(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n        generate_summary(content: str) -> str\n        \n        get_payload(directory: str) -> str\n        \n        write_documentation(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.__init__\n    \n      Class Docstring:\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n        Args:\n        python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.py_coding.writer`/PyCodeWriter#InvalidArguments#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "InvalidArguments", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class InvalidArguments(Exception):\n        \"\"\"Raised when invalid arguments are passed to a method\"\"\"\n\n        pass\n\n    ", "document": "# PyCodeWriter\n\n`PyCodeWriter` is a class used to write Python code documentation. It provides various methods for creating, updating, and writing Python modules. The class initializes with a `PyCodeRetriever` instance, which is used to retrieve Python code.\n\n## Overview\n\nThe `PyCodeWriter` class is responsible for generating documentation for Python modules using the context built from the provided symbol and related symbols. The class is designed to create, update, and write Python modules given their source code. It uses `PyCodeRetriever` to fetch code and performs operations based on the given code.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.tests.unit.test_py_writer.python_writer`\n- `automata_docs.core.context.py_context.retriever_slim.PyContext`\n- `automata_docs.tests.unit.test_py_writer.test_create_update_write_module`\n- `automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code`\n- `automata_docs.core.coding.py_coding.writer.PyDocWriter`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nHere is an example that shows how to create an instance of `PyCodeWriter`:\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n\nsample_dir = \"/path/to/sample/modules\"\nmodule_map = LazyModuleTreeMap(sample_dir)\nretriever = PyCodeRetriever(module_map)\npython_writer = PyCodeWriter(retriever)\n```\n\n## Limitations\n\nThe primary limitation of `PyCodeWriter` is that it relies on the structure of the code it is given. The class assumes that the provided code is well-structured and will raise errors when given incorrectly structured code. Additionally, when generating the documentation, the class does not consider custom code dependencies that may exist within the project.\n\n## Follow-up Questions:\n\n- How can `PyCodeWriter` handle custom code dependencies?\n- How does `PyCodeWriter` handle malformed code while generating documentation?", "summary": "PyCodeWriter is a class designed for writing Python code documentation by creating, updating, and writing Python modules using their source code. It relies on a PyCodeRetriever instance to fetch the necessary code and generates documentation based on the provided symbol and related symbols. An example of creating a PyCodeWriter instance can be found in the provided code snippet. However, PyCodeWriter has a few limitations, including its reliance on well-structured code and its inability to consider custom code dependencies within projects. Future improvements could address handling custom code dependencies and managing malformed code during documentation generation.", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.py_coding.writer.PyCodeWriter.InvalidArguments -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata_docs.core.coding.directory import DirectoryManager\n      from automata_docs.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n    Class Docstring:\n      Raised when invalid arguments are passed to a method\n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext\n    \n      Class Docstring:\n        The PyContext is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata_docs.core.coding.py_coding.writer.PyDocWriter\n    \n      Class Docstring:\n        A class to write documentation for Python modules\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): The base path of the project\n                \"\"\"\n                self.base_path = base_path\n                self.directory_manager = DirectoryManager(base_path)\n        \n            \n        camel_to_snake(name: str) -> str\n        \n        check_camel_case(text: str) -> bool\n        \n        generate_index_files(self, docs_dir: str) -> None\n        \n        generate_module_summary(self, module_dir: str) -> None\n        \n        generate_rst_files(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n        generate_summary(content: str) -> str\n        \n        get_payload(directory: str) -> str\n        \n        write_documentation(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.__init__\n    \n      Class Docstring:\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n        Args:\n        python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.py_coding.writer`/PyCodeWriter#ModuleNotFound#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "ModuleNotFound", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class ModuleNotFound(Exception):\n        \"\"\"Raised when a module is not found in the module dictionary\"\"\"\n\n        pass\n\n    ", "document": "# PyCodeWriter\n\n`PyCodeWriter` is a class that simplifies the process of retrieving source code from Python module files. It is able to create and update Python files programmatically with a `PyCodeRetriever` instance.\n\n## Overview\n\n`PyCodeWriter` provides functions to create, update and write Python modules with the help of a `PyCodeRetriever` instance. The main purpose of `PyCodeWriter` is to work with code in Python projects, allowing you to create new modules, update existing ones, retrieve source code, retrieve docstrings, and more.\n\n## Related Symbols\n\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.tests.unit.test_py_writer.python_writer`\n- `automata_docs.core.context.py_context.retriever_slim.PyContext`\n- `automata_docs.tests.unit.test_py_writer.test_create_update_write_module`\n- `automata_docs.core.coding.py_coding.writer.PyDocWriter`\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter.__init__`\n\n## Usage Example\n\n```python\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.tests.unit.test_py_writer import MockCodeGenerator\n\ncode_retriever = PyCodeRetriever()\npy_code_writer = PyCodeWriter(python_retriever=code_retriever)\nmock_code_generator = MockCodeGenerator(has_class=True, has_function=True)\n\nsource_code = mock_code_generator.generate_code()\npy_code_writer.create_new_module(\"example_module\", source_code, do_write=True)\n```\n\nIn this example, it creates a new Python module named \"example_module\" using the generated source code from `MockCodeGenerator`.\n\n## Limitations\n\n`PyCodeWriter` relies on the definitions provided by the `PyCodeRetriever` instance, and, in most cases, cannot work without it. It assumes that the project follows certain conventions regarding the package and module structure. Additionally, it does not provide a way to write or modify other file types or work with languages other than Python.\n\n## Follow-up Questions\n\n- How can we handle other languages or file types with `PyCodeWriter` or similar classes?\n- What are the specific conventions that `PyCodeWriter` assumes about the project structure?", "summary": "PyCodeWriter is a class that streamlines the process of obtaining source code from Python module files by creating and updating them programmatically with a PyCodeRetriever instance. Its main functions include creating new modules, updating existing ones, retrieving source code and docstrings, and more. However, PyCodeWriter relies on the definitions provided by PyCodeRetriever and assumes certain conventions regarding package and module structures. It is limited to Python and does not support other languages or file types.\n\nFor example, the following code creates a new Python module named \"example_module\" with the generated source code from `MockCodeGenerator`:\n\n```python\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.tests.unit.test_py_writer import MockCodeGenerator\n\ncode_retriever = PyCodeRetriever()\npy_code_writer = PyCodeWriter(python_retriever=code_retriever)\nmock_code_generator = MockCodeGenerator(has_class=True, has_function=True)\n\nsource_code = mock_code_generator.generate_code()\npy_code_writer.create_new_module(\"example_module\", source_code, do_write=True)\n```", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.py_coding.writer.PyCodeWriter.ModuleNotFound -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata_docs.core.coding.directory import DirectoryManager\n      from automata_docs.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n    Class Docstring:\n      Raised when a module is not found in the module dictionary\n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext\n    \n      Class Docstring:\n        The PyContext is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata_docs.core.coding.py_coding.writer.PyDocWriter\n    \n      Class Docstring:\n        A class to write documentation for Python modules\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): The base path of the project\n                \"\"\"\n                self.base_path = base_path\n                self.directory_manager = DirectoryManager(base_path)\n        \n            \n        camel_to_snake(name: str) -> str\n        \n        check_camel_case(text: str) -> bool\n        \n        generate_index_files(self, docs_dir: str) -> None\n        \n        generate_module_summary(self, module_dir: str) -> None\n        \n        generate_rst_files(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n        generate_summary(content: str) -> str\n        \n        get_payload(directory: str) -> str\n        \n        write_documentation(self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str) -> None\n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.__init__\n    \n      Class Docstring:\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n        Args:\n        python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.coding.py_coding.writer`/PyDocWriter#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyDocWriter", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class PyDocWriter:\n    \"\"\"A class to write documentation for Python modules\"\"\"\n\n    def __init__(self, base_path: str):\n        \"\"\"\n        Args:\n            base_path (str): The base path of the project\n        \"\"\"\n        self.base_path = base_path\n        self.directory_manager = DirectoryManager(base_path)\n\n    def generate_module_summary(self, module_dir: str):\n        \"\"\"\n        Function to generate a module-level summary. Here, we just assume that\n        all the .rst files in a directory correspond to the same module.\n        We read these files, use their content to generate a summary using\n        a language model and write this summary to the module's index.rst file.\n\n        Args:\n            module_dir (str): The directory of the module\n        \"\"\"\n        summary = \"\"\n        for file in self.directory_manager.get_files_in_dir(module_dir):\n            if file.endswith(\".rst\") and file != \"index.rst\":\n                with open(os.path.join(module_dir, file), \"r\") as f:\n                    content = f.read()\n                    summary += content + \"\\n\\n\"\n\n        summary = self.generate_summary(summary)\n\n        with open(os.path.join(module_dir, \"index.rst\"), \"a\") as f:\n            f.write(\"\\n\\n\" + summary)\n\n    def generate_rst_files(\n        self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str\n    ):\n        \"\"\"\n        Generate individual .rst files for each key (a key represents a module)\n            and updates the file structure.\n\n        Args:\n            docs (Dict[Any, Any]): The documentation dictionary\n            symbols (List[Any]): The symbols of the documentation dictionary\n            docs_dir (str): The output directory for the docs\n        \"\"\"\n        for symbol in np.array(symbols):\n            symbol_name = symbol.descriptors[-1].name\n\n            if symbol_name[0] == \"_\" or not PyDocWriter.check_camel_case(symbol_name):\n                continue\n\n            snaked_symbol_name = PyDocWriter.camel_to_snake(symbol_name)\n            module_dir = \"/\".join(symbol.dotpath.split(\".\")[1:-2])\n\n            new_module_dir = os.path.join(docs_dir, module_dir)\n            self.directory_manager.ensure_directory_exists(new_module_dir)\n\n            with open(os.path.join(new_module_dir, f\"{snaked_symbol_name}.rst\"), \"w\") as f:\n                doc_md_string = docs[symbol].document\n                rst_string = pypandoc.convert_text(doc_md_string, \"rst\", format=\"md\")\n                f.write(rst_string)\n\n    def generate_index_files(self, docs_dir: str):\n        \"\"\"\n        Generate index files for each directory that\n            contains .rst files or subdirectories.\n\n        Args:\n            docs_dir (str): The output directory for the docs\n        \"\"\"\n        doc_directory_manager = DirectoryManager(docs_dir)\n        for root, dirs, _ in os.walk(docs_dir, topdown=False):\n            root_relative_to_base = os.path.relpath(root, start=docs_dir)\n            files = doc_directory_manager.get_files_in_dir(root_relative_to_base)\n            dirs = doc_directory_manager.get_subdirectories(root_relative_to_base)\n\n            rst_files = [f for f in files if f.endswith(\".rst\")]\n            root_dir_node = doc_directory_manager._get_node_for_path(\n                doc_directory_manager.root, root_relative_to_base\n            )\n\n            if rst_files or dirs:\n                with open(os.path.join(root, \"index.rst\"), \"w\") as index_file:\n                    index_file.write(PyDocWriter.get_payload(root))\n\n                    index_file.write(\".. toctree::\\n\")\n                    index_file.write(\n                        \"   :maxdepth: 2\\n\\n\"\n                        if not root_dir_node or root_dir_node.is_root_dir()  # type: ignore\n                        else \"   :maxdepth: 1\\n\\n\"\n                    )\n\n                    for sub_dir_ in sorted(dirs):\n                        index_file.write(f\"   {sub_dir_}/index\\n\")\n                    for file in sorted(rst_files):\n                        if file != \"index.rst\":\n                            index_file.write(f\"   {file[:-4]}\\n\")  # Remove .rst extension\n\n                self.generate_module_summary(root)\n\n    def write_documentation(\n        self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str\n    ):\n        \"\"\"\n        Generate the full documentation given the symbols and a directory.\n\n        Args:\n            docs (Dict[Any, Any]): The documentation dictionary\n            symbols (List[Any]): The symbols of the documentation dictionary\n            docs_dir (str): The relative directory\n        \"\"\"\n        self.generate_rst_files(docs, symbols, docs_dir)\n        self.generate_index_files(docs_dir)\n\n    @staticmethod\n    def get_payload(directory: str) -> str:\n        \"\"\"Returns a formatted string for the main body of the index.rst file.\"\"\"\n        payload = f\"\"\"{os.path.basename(directory)}\n{\"=\" * len(os.path.basename(directory))}\n\n**Automata** is a Python library for autonomous agents.\n\nCheck out the :doc:`usage` section for further information, including\nhow to :ref:`installation` the project.\n\n.. note::\n\n\"\"\"\n        return payload\n\n    @staticmethod\n    def generate_summary(content: str) -> str:\n        \"\"\"This method should implement the logic to generate summary from the content.\"\"\"\n        # TODO: Implement summary generation function.\n        return \"Summary of content\"\n\n    @staticmethod\n    def camel_to_snake(name: str) -> str:\n        \"\"\"\n        Converts a camel case string to snake case\n\n        Args:\n            name (str): The string to convert\n\n        Returns:\n            str: The converted string\n        \"\"\"\n\n        name = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", name)\n        name = re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", name)\n        return name.lower()\n\n    @staticmethod\n    def check_camel_case(text: str) -> bool:\n        \"\"\"\n        Checks if a string is camel case\n\n        Args:\n            text (str): The string to check\n\n        Returns:\n            bool: True if the string is camel case, False otherwise\n        \"\"\"\n        return text != text.lower() and text != text.upper() and \"_\" not in text\n", "document": "# PyDocWriter\n\n`PyDocWriter` is a class that generates documentation for Python modules. It provides functionalities to convert camel case strings to snake case, check if a string is camel case, generate index files, module summaries, and individual reStructuredText (rst) files, and write the full documentation with given symbols and directory.\n\n## Overview\n\nThe main functionalities of the `PyDocWriter` class include generating rst files from given symbols and their respective documentations and generating index files and summaries for the documentation. It can also manipulate strings to check for camel case and convert from camel case to snake case. It relies on other classes like `DirectoryManager` and `PyCodeRetriever` for handling directories and getting relevant information from the Python code.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolDocEmbedding`\n- `automata_docs.core.coding.directory.DirectoryManager`\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n\n## Example\n\nHere is an example of using `PyDocWriter` to generate documentation:\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyDocWriter\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n\nbase_path = \"path/to/project\"\ndoc_dir = \"path/to/docs\"\n\npydoc_writer = PyDocWriter(base_path)\n\n# Mocked data\ndocs = {Symbol(): SymbolDocEmbedding()}\nsymbols = [Symbol()]\n\n# Generate documentation\npydoc_writer.write_documentation(docs, symbols, doc_dir)\n```\n\n## Limitations\n\nThe main limitation of `PyDocWriter` is that it assumes a specific directory structure for the documentation files and does not allow customization for the generated output format. It also does not currently support summary generation out-of-the-box, requiring developers to implement their own summary generation function.\n\n## Follow-up Questions:\n\n- Can we include custom formats or templates for generating documentation output?\n- How to best implement the summary generation function for the module-level summaries?", "summary": "PyDocWriter is a class designed to generate documentation for Python modules, offering features such as converting camel case strings to snake case, checking if a string is camel case, generating index files, module summaries, and individual reStructuredText (rst) files. It works alongside other classes such as DirectoryManager and PyCodeRetriever to handle directories and extract necessary information from Python code. An example of PyDocWriter in use is provided in the documentation. The main limitation is that it assumes a specific directory structure and doesn't allow for output format customization, nor does it support summary generation out-of-the-box, requiring developers to implement their own summary generation function.", "context": "\n    Generate the documentation for PyDocWriter using the context shown below -\n  Building context for primary symbol - automata_docs.core.coding.py_coding.writer.PyDocWriter -\n  \n    Import Statements:\n      import logging\n      import os\n      import re\n      import subprocess\n      import numpy as np\n      import pypandoc\n      from typing import Dict, List, Optional, Union, cast\n      from redbaron import ClassNode, DefNode, Node, NodeList, RedBaron\n      from automata_docs.core.coding.directory import DirectoryManager\n      from automata_docs.core.coding.py_coding.navigation import (\n          find_all_function_and_class_syntax_tree_nodes,\n          find_import_syntax_tree_node_by_name,\n          find_import_syntax_tree_nodes,\n          find_syntax_tree_node,\n      )\n      from automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolDocEmbedding\n      \n    Class Docstring:\n      A class to write documentation for Python modules\n      \n    Methods:\n      def __init__(self, base_path: str):\n              \"\"\"\n              Args:\n                  base_path (str): The base path of the project\n              \"\"\"\n              self.base_path = base_path\n              self.directory_manager = DirectoryManager(base_path)\n      \n          \n      @staticmethod\n          def camel_to_snake(name: str) -> str:\n              \"\"\"\n              Converts a camel case string to snake case\n      \n              Args:\n                  name (str): The string to convert\n      \n              Returns:\n                  str: The converted string\n              \"\"\"\n      \n              name = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", name)\n              name = re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", name)\n              return name.lower()\n      \n          \n      @staticmethod\n          def check_camel_case(text: str) -> bool:\n              \"\"\"\n              Checks if a string is camel case\n      \n              Args:\n                  text (str): The string to check\n      \n              Returns:\n                  bool: True if the string is camel case, False otherwise\n              \"\"\"\n              return text != text.lower() and text != text.upper() and \"_\" not in text\n      \n      def generate_index_files(self, docs_dir: str):\n              \"\"\"\n              Generate index files for each directory that\n                  contains .rst files or subdirectories.\n      \n              Args:\n                  docs_dir (str): The output directory for the docs\n              \"\"\"\n              doc_directory_manager = DirectoryManager(docs_dir)\n              for root, dirs, _ in os.walk(docs_dir, topdown=False):\n                  root_relative_to_base = os.path.relpath(root, start=docs_dir)\n                  files = doc_directory_manager.get_files_in_dir(root_relative_to_base)\n                  dirs = doc_directory_manager.get_subdirectories(root_relative_to_base)\n      \n                  rst_files = [f for f in files if f.endswith(\".rst\")]\n                  root_dir_node = doc_directory_manager._get_node_for_path(\n                      doc_directory_manager.root, root_relative_to_base\n                  )\n      \n                  if rst_files or dirs:\n                      with open(os.path.join(root, \"index.rst\"), \"w\") as index_file:\n                          index_file.write(PyDocWriter.get_payload(root))\n      \n                          index_file.write(\".. toctree::\\n\")\n                          index_file.write(\n                              \"   :maxdepth: 2\\n\\n\"\n                              if not root_dir_node or root_dir_node.is_root_dir()  # type: ignore\n                              else \"   :maxdepth: 1\\n\\n\"\n                          )\n      \n                          for sub_dir_ in sorted(dirs):\n                              index_file.write(f\"   {sub_dir_}/index\\n\")\n                          for file in sorted(rst_files):\n                              if file != \"index.rst\":\n                                  index_file.write(f\"   {file[:-4]}\\n\")  # Remove .rst extension\n      \n                      self.generate_module_summary(root)\n      \n          \n      def generate_module_summary(self, module_dir: str):\n              \"\"\"\n              Function to generate a module-level summary. Here, we just assume that\n              all the .rst files in a directory correspond to the same module.\n              We read these files, use their content to generate a summary using\n              a language model and write this summary to the module's index.rst file.\n      \n              Args:\n                  module_dir (str): The directory of the module\n              \"\"\"\n              summary = \"\"\n              for file in self.directory_manager.get_files_in_dir(module_dir):\n                  if file.endswith(\".rst\") and file != \"index.rst\":\n                      with open(os.path.join(module_dir, file), \"r\") as f:\n                          content = f.read()\n                          summary += content + \"\\n\\n\"\n      \n              summary = self.generate_summary(summary)\n      \n              with open(os.path.join(module_dir, \"index.rst\"), \"a\") as f:\n                  f.write(\"\\n\\n\" + summary)\n      \n          \n      def generate_rst_files(\n              self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str\n          ):\n              \"\"\"\n              Generate individual .rst files for each key (a key represents a module)\n                  and updates the file structure.\n      \n              Args:\n                  docs (Dict[Any, Any]): The documentation dictionary\n                  symbols (List[Any]): The symbols of the documentation dictionary\n                  docs_dir (str): The output directory for the docs\n              \"\"\"\n              for symbol in np.array(symbols):\n                  symbol_name = symbol.descriptors[-1].name\n      \n                  if symbol_name[0] == \"_\" or not PyDocWriter.check_camel_case(symbol_name):\n                      continue\n      \n                  snaked_symbol_name = PyDocWriter.camel_to_snake(symbol_name)\n                  module_dir = \"/\".join(symbol.dotpath.split(\".\")[1:-2])\n      \n                  new_module_dir = os.path.join(docs_dir, module_dir)\n                  self.directory_manager.ensure_directory_exists(new_module_dir)\n      \n                  with open(os.path.join(new_module_dir, f\"{snaked_symbol_name}.rst\"), \"w\") as f:\n                      doc_md_string = docs[symbol].document\n                      rst_string = pypandoc.convert_text(doc_md_string, \"rst\", format=\"md\")\n                      f.write(rst_string)\n      \n          \n      @staticmethod\n          def generate_summary(content: str) -> str:\n              \"\"\"This method should implement the logic to generate summary from the content.\"\"\"\n              # TODO: Implement summary generation function.\n              return \"Summary of content\"\n      \n          \n      @staticmethod\n          def get_payload(directory: str) -> str:\n              \"\"\"Returns a formatted string for the main body of the index.rst file.\"\"\"\n              payload = f\"\"\"{os.path.basename(directory)}\n      {\"=\" * len(os.path.basename(directory))}\n      \n      **Automata** is a Python library for autonomous agents.\n      \n      Check out the :doc:`usage` section for further information, including\n      how to :ref:`installation` the project.\n      \n      .. note::\n      \n      \"\"\"\n              return payload\n      \n          \n      def write_documentation(\n              self, docs: Dict[Symbol, SymbolDocEmbedding], symbols: List[Symbol], docs_dir: str\n          ):\n              \"\"\"\n              Generate the full documentation given the symbols and a directory.\n      \n              Args:\n                  docs (Dict[Any, Any]): The documentation dictionary\n                  symbols (List[Any]): The symbols of the documentation dictionary\n                  docs_dir (str): The relative directory\n              \"\"\"\n              self.generate_rst_files(docs, symbols, docs_dir)\n              self.generate_index_files(docs_dir)\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_no_docstring_class\n    \n        def test_get_docstring_no_docstring_class(getter):\n            module_name = \"sample\"\n            object_path = \"Person\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"This is a sample class.\"\n            assert result == expected_match\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass.inner_method\n    \n        def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.test_py_code_retriever.test_get_code_no_docstring_method\n    \n        def test_get_code_no_docstring_method(getter):\n            module_name = \"sample\"\n            object_path = \"Person.say_hello\"\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = 'def say_hello(self):\\n        return f\"Hello, I am {self.name}.\"\\n\\n    '\n            assert result == expected_match\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n  Building context for dependencies -\n  \n    automata_docs.core.coding.directory.DirectoryManager.ensure_directory_exists\n    \n      Class Docstring:\n        Creates the directory if it does not exist already\n        \n        Args:\n        directory_path (str): Path of the directory to create\n        \n      Methods:\n        ensure_directory_exists(self, directory_path: str) -> None\n        \n    automata_docs.core.coding.directory.DirectoryManager.get_files_in_dir\n    \n      Class Docstring:\n        Get a list of files in the given directory\n        \n        Args:\n        path (str): Path of the directory\n        \n        Returns:\n        List[str]: List of files in the directory\n        \n      Methods:\n        get_files_in_dir(self, path: str) -> List[str]\n        \n    automata_docs.core.coding.directory.DirectoryManager\n    \n      Class Docstring:\n        Handles operations related to directory structure.\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): Base path of the directory structure\n                \"\"\"\n                self.root = self._load_directory_structure(base_path)\n        \n            \n        ensure_directory_exists(self, directory_path: str) -> None\n        \n        get_files_in_dir(self, path: str) -> List[str]\n        \n        get_subdirectories(self, path: str) -> List[str]\n        \n    automata_docs.core.coding.directory.DirectoryManager._get_node_for_path\n    \n      Class Docstring:\n        Find the node for a given path\n        \n        Args:\n        root (Directory): Root node of the tree\n        path (str): Path to find the node for\n        \n        Returns:\n        Optional[Node]: Node for the given path, None if not found\n        \n      Methods:\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    automata_docs.core.coding.directory.DirectoryManager.get_subdirectories\n    \n      Class Docstring:\n        Get a list of subdirectories in the given directory\n        \n        Args:\n        path (str): Path of the directory\n        \n        Returns:\n        List[str]: List of subdirectories in the directory\n        \n      Methods:\n        get_subdirectories(self, path: str) -> List[str]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.context.py_context.retriever`/PyContextRetriever#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.context.py_context.retriever", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyContextRetriever", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class PyContextRetriever:\n    \"\"\"The PyContextRetriever is used to retrieve the context of a symbol in a Python project\"\"\"\n\n    def __init__(\n        self,\n        graph: SymbolGraph,\n        config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n    ):\n        \"\"\"\n        Args:\n            graph (SymbolGraph): The symbol graph to use\n            config (PyContextRetrieverConfig): The configuration to use\n        \"\"\"\n        self.graph = graph\n        self.config = config\n        self.indent_level = 0\n        self.reset()\n\n    @contextmanager\n    def IndentManager(self):\n        \"\"\"A context manager to manage the indentation level\"\"\"\n        self.indent_level += 1\n        yield\n        self.indent_level -= 1\n\n    def process_message(self, message: str):\n        \"\"\"\n        Process a message by appending indentation and adding it to the message\n\n        Args:\n            message (str): The message to process\n        \"\"\"\n\n        def indent() -> str:\n            return self.config.spacer * self.indent_level\n\n        self.context += \"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n\n    def get_context_buffer(self) -> str:\n        \"\"\"\n        Get the context buffer\n\n        Returns:\n            str: The context buffer\n        \"\"\"\n        return self.context\n\n    def reset(self):\n        \"\"\"\n        Reset the retriever to its initial state\n        \"\"\"\n        self.context = \"\"\n        self.obs_symbols: Set[Symbol] = set([])\n        self.global_level = 0\n\n    def process_symbol(\n        self,\n        symbol: Symbol,\n        related_symbols: List[Symbol] = [],\n    ):\n        \"\"\"\n        Process the context of a symbol\n        Theh output is stored into the local message buffer\n\n        Args:\n            symbol (Symbol): The symbol to process\n            ranked_symbols (List[Symbol]): The list ranked symbols to use\n                with the nearest symbol processor\n        \"\"\"\n        print(\"Calling process symbol on = \", symbol.dotpath)\n        with self.IndentManager():\n            self.process_headline(symbol)\n            self.process_ast(symbol)\n\n            if self._is_main_symbol():\n                related_symbols_processed = 0\n                self.process_message(f\"Building context for related symbols -\\n\")\n\n                print(\"Processing related symbols...\")\n                for related_symbol in related_symbols:\n                    if related_symbols_processed >= self.config.max_related_symbols_to_process:\n                        break\n                    # Check that the related symbol passes filter requirements\n                    if not PyContextRetriever._pass_symbol_filter(symbol, related_symbol):\n                        continue\n\n                    if related_symbol not in self.obs_symbols:\n                        self.process_symbol(related_symbol)\n                        related_symbols_processed += 1\n\n                dependencies_processed = 0\n                self.process_message(f\"Building context for dependencies -\\n\")\n                all_dependencies = list(self.graph.get_symbol_dependencies(symbol))\n                filtered_dependencies = get_rankable_symbols(all_dependencies)\n\n                print(\"Processing dependencies...\")\n                for dependency in filtered_dependencies:\n                    if dependencies_processed >= self.config.max_dependencies_to_process:\n                        break\n                    # Check that the dependency passes filter requirements\n                    if not PyContextRetriever._pass_symbol_filter(symbol, dependency):\n                        continue\n\n                    if dependency not in self.obs_symbols:\n                        try:\n                            self.process_symbol(dependency)\n                        except:\n                            print(\"Failure processing symbol = \", dependency)\n                            continue\n                        dependencies_processed += 1\n\n        self.obs_symbols.add(symbol)\n\n    def process_headline(self, symbol: Symbol):\n        \"\"\"\n        Process the headline of a symbol\n\n        Args:\n            symbol (Symbol): The symbol to process\n        \"\"\"\n        # Print the headline\n        if self._is_main_symbol():\n            self.process_message(f\"Building context for primary symbol - {symbol.dotpath} -\\n\")\n        else:\n            self.process_message(f\"{symbol.dotpath}\\n\")\n\n    def process_ast(self, symbol: Symbol):\n        \"\"\"\n        Process the variables of a symbol\n\n        Args:\n            ast_object (RedBaron): The ast representation of the symbol\n        \"\"\"\n        ast_object = convert_to_fst_object(symbol)\n        is_main_symbol = self._is_main_symbol()\n        methods = sorted(ast_object.find_all(\"DefNode\"), key=lambda x: x.name)\n\n        with self.IndentManager():\n            if \"test\" in symbol.dotpath or \"Config\" in symbol.dotpath:\n                with self.IndentManager():\n                    self.process_message(f\"{ast_object.dumps()}\\n\")\n            else:\n                if is_main_symbol:\n                    self.process_imports(symbol)\n                self.process_docstring(ast_object)\n\n                if len(methods) > 0:\n                    self.process_message(f\"Methods:\")\n                for method in methods:\n                    self.process_method(method, is_main_symbol)\n\n    def process_imports(self, symbol: Symbol):\n        \"\"\"\n        Process the imports of a symbol\n\n        Args:\n            symbol (Symbol): The symbol to process\n        \"\"\"\n        # Compute the file path from the symbol's path\n        file_path = os.path.join(\n            root_py_fpath(), \"..\", str(symbol.dotpath).replace(\".\", os.path.sep)\n        )\n        while not os.path.isdir(os.path.dirname(file_path)):\n            file_path = os.path.dirname(file_path)\n\n        # Load the source code with RedBaron\n        with open(file_path + \".py\", \"r\") as f:\n            red = RedBaron(f.read())\n\n        # Find and print import statements\n        imports = red.find_all(\"ImportNode\")\n        from_imports = red.find_all(\"FromImportNode\")\n        if len(imports) + len(from_imports) > 0:\n            self.process_message(\"Import Statements:\")\n            with self.IndentManager():\n                for import_node in imports + from_imports:\n                    self.process_message(str(import_node.dumps()))\n                self.process_message(\"\")  # Add an empty line for separation\n\n    def process_docstring(self, ast_object: RedBaron):\n        \"\"\"\n        Process the docstring of a symbol\n\n        Args:\n            ast_object (RedBaron): The ast representation of the symbol\n        \"\"\"\n        docstring = PyContextRetriever._get_docstring(ast_object)\n        # Print the docstring if it exists\n        if docstring:\n            self.process_message(\"Class Docstring:\")\n            with self.IndentManager():\n                self.process_message(docstring)\n                self.process_message(\"\")  # Add an empty line for separation\n\n    def process_method(self, method: RedBaron, is_main_symbol: bool):\n        \"\"\"\n        Processes a specified method\n\n        Args:\n            method (RedBaron): The ast representation of the method\n        \"\"\"\n        if PyContextRetriever._is_private_method(method):\n            return\n        with self.IndentManager():\n            print(\"method.name = \", method.name)\n            if is_main_symbol:\n                for code_line in method.dumps().split(\"\\n\"):\n                    self.process_message(code_line)\n            else:\n                if method.name == \"__init__\":\n                    for code_line in method.dumps().split(\"\\n\"):\n                        self.process_message(code_line)\n                else:\n                    method_definition = f\"{method.name}({method.arguments.dumps()})\"\n                    return_annotation = (\n                        method.return_annotation.dumps() if method.return_annotation else \"None\"\n                    )\n                    self.process_message(f\"{method_definition} -> {return_annotation}\\n\")\n\n    def _is_main_symbol(self) -> bool:\n        \"\"\"\n        Check if this is the main symbol call\n\n        Returns:\n            bool: True if this is the main symbol call, False otherwise\n\n        \"\"\"\n        return self.indent_level == 1\n\n    @staticmethod\n    def _is_private_method(ast_object: RedBaron) -> bool:\n        \"\"\"\n        Check if the ast object is private\n\n        Args:\n            ast_object (RedBaron): The RedBaron object to check\n\n        Returns:\n            bool: True if the method is private, False otherwise\n        \"\"\"\n        return ast_object.name[0] == \"_\" and ast_object.name[1] != \"_\"\n\n    @staticmethod\n    def _get_docstring(ast_object) -> str:\n        \"\"\"\n        Get the docstring an ast object\n\n        Args:\n            ast_object (RedBaron): The RedBaron object to get the docstring from\n\n        Returns:\n            str: Newline separated docstring\n        \"\"\"\n\n        raw_doctring = PyCodeRetriever.get_docstring_from_node(ast_object).split(\"\\n\")\n        return \"\\n\".join([ele.strip() for ele in raw_doctring]).strip()\n\n    @staticmethod\n    def _pass_symbol_filter(primary_symbol: Symbol, secondary_symbol: Symbol) -> bool:\n        \"\"\"\n        Check if the symbol passes the filter on package and dotpath\n\n        Args:\n            primary_symbol (Symbol): The primary symbol\n            secondary_symbol (Symbol): The secondary symbol\n\n        Returns:\n            bool: True if the symbol passes the filter, False otherwise\n        \"\"\"\n\n        primary_symbol_dotpath = primary_symbol.dotpath\n        primary_package = primary_symbol_dotpath.split(\".\")[0]\n\n        secondary_symbol_dotpath = secondary_symbol.dotpath\n        secondary_package = secondary_symbol_dotpath.split(\".\")[0]\n        return not (\n            primary_symbol_dotpath in secondary_symbol_dotpath\n            or primary_package != secondary_package\n        )\n\n\n# import os\n# from contextlib import contextmanager\n# from typing import List, Optional, Set\n\n# from redbaron import RedBaron\n\n# from automata_docs.core.coding.py_coding.navigation import find_method_call_by_location\n# from automata_docs.core.coding.py_coding.py_utils import build_repository_overview\n# from automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n# from automata_docs.core.symbol.graph import SymbolGraph\n# from automata_docs.core.symbol.symbol_types import Symbol, SymbolDescriptor, SymbolReference\n# from automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n# from automata_docs.core.utils import root_py_fpath\n\n\n# class PyContextRetrieverRetrieverConfig:\n#     \"\"\"The configuration for the PyContextRetrieverRetriever\"\"\"\n\n#     def __init__(\n#         self,\n#         spacer: str = \"  \",\n#         max_dependency_print_depth: int = 2,\n#         max_recursion_depth: int = 1,\n#         nearest_symbols_count: int = 10,\n#         print_imports=False,\n#         process_directory_structure=False,\n#         process_docstrings=True,\n#         process_variables=True,\n#         process_methods=True,\n#         process_methods_constructor=True,\n#         process_methods_summary=False,\n#         process_nearest_symbols=True,\n#         process_dependencies=False,\n#         process_references=False,\n#         process_callers=False,\n#     ):\n#         \"\"\"\n#         Args:\n#             spacer (str): The string to use for indentation\n#             max_dependency_print_depth (int): The maximum depth to print dependencies\n#             max_recursion_depth (int): The maximum depth to recurse into dependencies\n#             nearest_symbols_count (int): The number of nearest symbols to print\n#             print_imports (bool): Whether to print imports\n#             process_directory_structure (bool): Whether to process the directory structure\n#             process_docstrings (bool): Whether to process docstrings\n#             process_variables (bool): Whether to process variables\n#             process_methods (bool): Whether to process methods\n#             process_methods_constructor (bool): Whether to process the constructor method\n#             process_methods_summary (bool): Whether to process the summary method\n#             process_nearest_symbols (bool): Whether to process the nearest symbols\n#             process_dependencies (bool): Whether to process the dependencies\n#             process_references (bool): Whether to process the references\n#             process_callers (bool): Whether to process the callers\n#         \"\"\"\n#         self.spacer = spacer\n#         self.nearest_symbols_count = nearest_symbols_count\n#         self.max_dependency_print_depth = max_dependency_print_depth\n#         self.max_recursion_depth = max_recursion_depth\n#         self.print_imports = print_imports\n#         self.process_directory_structure = process_directory_structure\n#         self.process_docstrings = process_docstrings\n#         self.process_variables = process_variables\n#         self.process_methods = process_methods\n#         self.process_methods_constructor = process_methods_constructor\n#         self.process_methods_summary = process_methods_summary\n#         self.process_nearest_symbols = process_nearest_symbols\n#         self.process_dependencies = process_dependencies\n#         self.process_references = process_references\n#         self.process_callers = process_callers\n\n\n# class PyContextRetrieverRetriever:\n#     \"\"\"The PyContextRetrieverRetriever is used to retrieve the context of a symbol in a Python project\"\"\"\n\n#     def __init__(\n#         self,\n#         graph: SymbolGraph,\n#         config: PyContextRetrieverRetrieverConfig = PyContextRetrieverRetrieverConfig(),\n#     ):\n#         \"\"\"\n#         Args:\n#             graph (SymbolGraph): The symbol graph to use\n#             config (PyContextRetrieverRetrieverConfig): The configuration to use\n#         \"\"\"\n#         self.graph = graph\n#         self.config = config\n#         self.indent_level = 0\n#         self.reset()\n\n#     @contextmanager\n#     def IndentManager(self):\n#         \"\"\"A context manager to manage the indentation level\"\"\"\n#         self.indent_level += 1\n#         yield\n#         self.indent_level -= 1\n\n#     def process_message(self, message: str):\n#         \"\"\"\n#         Process a message by appending indentation and adding it to the message\n\n#         Args:\n#             message (str): The message to process\n#         \"\"\"\n\n#         def indent() -> str:\n#             return self.config.spacer * self.indent_level\n\n#         self.context += \"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n\n#     def get_context_buffer(self) -> str:\n#         \"\"\"\n#         Get the context buffer\n\n#         Returns:\n#             str: The context buffer\n#         \"\"\"\n#         return self.context\n\n#     def reset(self):\n#         \"\"\"\n#         Reset the retriever to its initial state\n#         \"\"\"\n#         self.context = \"\"\n#         self.obs_symbols: Set[Symbol] = set([])\n#         self.global_level = 0\n\n#     def process_symbol(\n#         self,\n#         symbol: Symbol,\n#         ranked_symbols: List[Symbol] = [],\n#     ):\n#         \"\"\"\n#         Process the context of a symbol\n#         Theh output is stored into the local message buffer\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n#             ranked_symbols (List[Symbol]): The list ranked symbols to use\n#                 with the nearest symbol processor\n#         \"\"\"\n#         # Check if the symbol has already been processed\n#         if symbol in self.obs_symbols:\n#             return\n#         self.obs_symbols.add(symbol)\n\n#         if self._is_first_symbol_call() and self.config.process_directory_structure:\n#             self.process_directory_structure(symbol)\n\n#         self.process_headline(symbol)\n#         if self.indent_level <= self.config.max_dependency_print_depth:\n#             with self.IndentManager():\n#                 self.process_class(symbol)\n#                 if self.indent_level <= self.config.max_recursion_depth:\n#                     if self.config.process_nearest_symbols:\n#                         self.process_nearest_symbols(ranked_symbols)\n#                     if self.config.process_dependencies:\n#                         self.process_dependency(symbol)\n#                     if self.config.process_references:\n#                         self.process_references(symbol)\n#                     if self.config.process_callers:\n#                         self.process_callers(symbol)\n\n#     def process_directory_structure(self, symbol: Symbol):\n#         \"\"\"\n#         Process the directory structure around a symbol\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n#         \"\"\"\n#         # Print the directory structure\n#         self.process_message(f\"Local Directory Structure:\")\n#         with self.IndentManager():\n#             symbol_path = str(symbol.dotpath).replace(\".\", os.path.sep)\n#             dir_path = os.path.join(root_py_fpath(), \"..\", symbol_path)\n#             while not os.path.isdir(dir_path):\n#                 dir_path = os.path.dirname(dir_path)\n#             overview = build_repository_overview(dir_path, skip_func=True)\n#             self.process_message(f\"{overview}\\n\")\n\n#     def process_headline(self, symbol: Symbol):\n#         \"\"\"\n#         Process the headline of a symbol\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n#         \"\"\"\n#         # Print the headline\n#         if self._is_first_symbol_call():\n#             self.process_message(f\"Context for -\\n{symbol.dotpath} -\\n\")\n#         else:\n#             self.process_message(f\"{symbol.dotpath}\\n\")\n\n#     def process_class(self, symbol: Symbol):\n#         \"\"\"\n#         Process the class of a symbol\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n#         \"\"\"\n\n#         def process_imports(symbol: Symbol):\n#             \"\"\"\n#             Process the imports of a symbol\n\n#             Args:\n#                 symbol (Symbol): The symbol to process\n#             \"\"\"\n#             # Compute the file path from the symbol's path\n#             file_path = os.path.join(\n#                 root_py_fpath(), \"..\", str(symbol.dotpath).replace(\".\", os.path.sep)\n#             )\n#             while not os.path.isdir(os.path.dirname(file_path)):\n#                 file_path = os.path.dirname(file_path)\n\n#             # Load the source code with RedBaron\n#             with open(file_path + \".py\", \"r\") as f:\n#                 red = RedBaron(f.read())\n\n#             # Find and print import statements\n#             self.process_message(\"Import Statements:\")\n#             with self.IndentManager():\n#                 imports = red.find_all(\"ImportNode\")\n#                 from_imports = red.find_all(\"FromImportNode\")\n#                 for import_node in imports + from_imports:\n#                     self.process_message(str(import_node.dumps()))\n#                 self.process_message(\"\")  # Add an empty line for separation\n\n#         def process_docstring(ast_object: RedBaron):\n#             \"\"\"\n#             Process the docstring of a symbol\n\n#             Args:\n#                 ast_object (RedBaron): The ast representation of the symbol\n#             \"\"\"\n#             docstring = PyContextRetrieverRetriever._get_docstring(ast_object)\n#             # Print the docstring if it exists\n#             if docstring:\n#                 self.process_message(\"Class Docstring:\")\n#                 with self.IndentManager():\n#                     self.process_message(docstring)\n#                     self.process_message(\"\")  # Add an empty line for separation\n\n#         def process_variables(ast_object: RedBaron):\n#             \"\"\"\n#             Process the variables of a symbol\n\n#             Args:\n#                 ast_object (RedBaron): The ast representation of the symbol\n#             \"\"\"\n\n#             assignments = ast_object.find_all(\"assignment\")\n#             num_good_assignments = len(\n#                 [\n#                     assignment.parent == ast_object or \"self.\" in str(assignment.target.dumps())\n#                     for assignment in assignments\n#                 ]\n#             )\n#             if num_good_assignments > 0:\n#                 self.process_message(f\"Variables:\")\n\n#             with self.IndentManager():\n#                 for assignment in assignments:\n#                     if assignment.parent == ast_object or \"self.\" in str(\n#                         assignment.target.dumps()\n#                     ):\n#                         self.process_message(\n#                             f\"{str(assignment.target.dumps())}={str(assignment.value.dumps())}\"\n#                         )\n#                 self.process_message(\"\")\n\n#         def process_methods(ast_object: RedBaron):\n#             \"\"\"\n#             Process the variables of a symbol\n\n#             Args:\n#                 ast_object (RedBaron): The ast representation of the symbol\n#             \"\"\"\n\n#             methods = sorted(ast_object.find_all(\"DefNode\"), key=lambda x: x.name)\n#             if len(methods) > 0:\n#                 self.process_message(f\"Methods:\")\n#             with self.IndentManager():\n#                 for method in methods:\n#                     self.process_method(method)\n\n#         # Convert the symbol to an AST object, return if it fails\n#         try:\n#             ast_object = convert_to_fst_object(symbol)\n#         except Exception as e:\n#             print(f\"Error {e} while converting symbol {symbol.descriptors[-1].name}.\")\n#             return None\n\n#         # If this is the first symbol call, we optionally print import statements\n#         if self._is_first_symbol_call():\n#             if self.config.print_imports:\n#                 process_imports(symbol)\n\n#         # Check config for which parts of the class to print\n#         if self.config.process_docstrings:\n#             process_docstring(ast_object)\n#         if self.config.process_variables:\n#             process_variables(ast_object)\n#         if self.config.process_methods:\n#             process_methods(ast_object)\n\n#     def process_method(self, method: RedBaron, detailed: bool = False):\n#         \"\"\"\n#         Processes a specified method\n\n#         Args:\n#             method (RedBaron): The ast representation of the method\n#         \"\"\"\n\n#         if PyContextRetrieverRetriever._is_private_method(method):\n#             return\n#         if self._is_first_symbol_call():  # e.g. top level\n#             for code_line in method.dumps().split(\"\\n\"):\n#                 self.process_message(code_line)\n#         else:\n#             valid_method_filters = [\"init\"]\n#             if self.config.process_methods_constructor:\n#                 # Process the method constructor\n#                 if self.config.process_methods_constructor:\n#                     if self._is_within_second_call():  # e.g. a dependency or related symbol\n#                         is_valid_method = False\n#                         for filter_ in valid_method_filters:\n#                             if filter_ in method.name:\n#                                 is_valid_method = True\n#                         if is_valid_method:\n#                             for code_line in method.dumps().split(\"\\n\"):\n#                                 self.process_message(code_line)\n#             # Process the method signature and return annotation\n#             if self.config.process_methods_summary:\n#                 method_definition = f\"{method.name}({method.arguments.dumps()})\"\n#                 return_annotation = (\n#                     method.return_annotation.dumps() if method.return_annotation else \"None\"\n#                 )\n#                 self.process_message(f\"{method_definition} -> {return_annotation}\\n\")\n\n#     def process_dependency(self, symbol: Symbol):\n#         \"\"\"\n#         Process a dependency symbol\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n#         \"\"\"\n\n#         if self._is_first_symbol_call():\n#             self.process_message(\"Dependencies:\")\n#             with self.IndentManager():\n#                 all_dependencies = list(self.graph.get_symbol_dependencies(symbol))\n#                 filtered_dependencies = get_rankable_symbols(all_dependencies)\n#                 for dependency in filtered_dependencies:\n#                     if not PyContextRetrieverRetriever._is_class(dependency):\n#                         continue\n#                     if dependency == symbol:\n#                         continue\n#                     if (\n#                         \"automata\" not in dependency.uri\n#                     ):  # TODO - Make this cleaner in case \"automata\" is not the key URI\n#                         continue\n#                     self.process_symbol(dependency)\n\n#     def process_references(self, symbol: Symbol):\n#         \"\"\"\n#         Process the references of a symbol\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n#         \"\"\"\n\n#         references = self.graph.get_references_to_symbol(symbol)\n#         if len(references) > 0:\n#             self.process_message(\"References:\")\n#             with self.IndentManager():\n#                 for file_path, symbol_references in references.items():\n#                     self.process_message(f\"File: {file_path}\")\n#                     with self.IndentManager():\n#                         for ref in symbol_references:\n#                             self.process_message(\n#                                 f\"Line: {ref.line_number}, Column: {ref.column_number}\"\n#                             )\n\n#     def process_callers(self, symbol: Symbol):\n#         \"\"\"\n#         Process the callers of a symbol\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n#         \"\"\"\n\n#         if self.indent_level < 2:\n#             self.process_message(f\"Callers:\")\n#         else:\n#             self.process_message(f\"Caller Callers:\")\n\n#         with self.IndentManager():\n#             all_potential_callers = list(self.graph.get_potential_symbol_callers(symbol))\n\n#             def find_call(caller: SymbolReference) -> Optional[RedBaron]:\n#                 module = convert_to_fst_object(caller.symbol)\n#                 line_number = caller.line_number\n#                 column_number = caller.column_number + len(symbol.descriptors[-1].name)\n#                 return find_method_call_by_location(module, line_number, column_number)\n\n#             for caller in all_potential_callers:\n#                 if \"test\" in str(caller.symbol.dotpath):\n#                     continue\n\n#                 call = find_call(caller)\n#                 if call is None:\n#                     continue\n\n#                 self.process_message(str(caller.symbol.dotpath))\n\n#                 # Call a level deeper when we encounter a factory or builder\n#                 if \"Factory\" in str(caller.symbol.dotpath) or \"Builder\" in str(\n#                     caller.symbol.dotpath\n#                 ):\n#                     self.process_callers(caller.symbol)\n\n#                 with self.IndentManager():\n#                     call_parent = call.parent if call is None else None  # type: ignore\n#                     if call_parent is None:\n#                         continue\n#                     self.process_message(str(call_parent.dumps()))\n\n#     def process_nearest_symbols(\n#         self,\n#         search_list: List[Symbol],\n#     ):\n#         \"\"\"\n#         Process the nearest symbols (most related symbols) of a symbol\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n#             search_list (List[Symbol]): The list of nearest symbols\n#         \"\"\"\n\n#         self.process_message(\"Closely Related Symbols:\")\n\n#         def bespoke_test_handler(test_symbol) -> bool:\n#             try:\n#                 ast_object = convert_to_fst_object(test_symbol)\n#             except Exception as e:\n#                 print(f\"Error {e} while converting symbol {test_symbol.descriptors[-1].name}.\")\n#                 return False\n#             with self.IndentManager():\n#                 self.process_headline(test_symbol)\n#                 with self.IndentManager():\n#                     self.process_message(ast_object.dumps())\n#             return True\n\n#         with self.IndentManager():\n#             if len(search_list) > 0:\n#                 printed_nearby_symbols = 0\n#                 for ranked_symbol in search_list:\n#                     if printed_nearby_symbols >= self.config.nearest_symbols_count:\n#                         break\n#                     # Bespoke handling for test class\n#                     if \"test\" in str(ranked_symbol.dotpath):\n#                         result = bespoke_test_handler(ranked_symbol)\n#                         if result:\n#                             printed_nearby_symbols += 1\n#                         else:\n#                             continue\n\n#                     if ranked_symbol.symbol_kind_by_suffix() != SymbolDescriptor.PyKind.Class:\n#                         continue\n#                     elif ranked_symbol in self.obs_symbols:\n#                         continue\n#                     else:\n#                         printed_nearby_symbols += 1\n#                         self.process_symbol(ranked_symbol)\n\n#     def _is_first_symbol_call(self) -> bool:\n#         \"\"\"\n#         Check if this is the first symbol call\n\n#         Returns:\n#             bool: True if this is the first symbol call, False otherwise\n\n#         \"\"\"\n#         return self.indent_level <= 2\n\n#     def _is_within_second_call(self) -> bool:\n#         \"\"\"\n#         Check if this is the first symbol call\n\n#         Returns:\n#             bool: True if this is within the second symbol call,\n#                 False otherwise\n\n#         \"\"\"\n#         return self.indent_level <= 4\n\n#     @staticmethod\n#     def _is_private_method(ast_object: RedBaron) -> bool:\n#         \"\"\"\n#         Check if the ast object is private\n\n#         Args:\n#             ast_object (RedBaron): The RedBaron object to check\n\n#         Returns:\n#             bool: True if the method is private, False otherwise\n#         \"\"\"\n#         return ast_object.name[0] == \"_\" and ast_object.name[1] != \"_\"\n\n#     @staticmethod\n#     def _is_class(symbol: Symbol) -> bool:\n#         \"\"\"\n#         Check if the symbol is a class\n\n#         Args:\n#             symbol (Symbol): The symbol to process\n\n#         Returns:\n#             bool: True if the method is private, False otherwise\n#         \"\"\"\n\n#         return symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Class\n\n#     @staticmethod\n#     def _get_docstring(ast_object) -> str:\n#         \"\"\"\n#         Get the docstring an ast object\n\n#         Args:\n#             ast_object (RedBaron): The RedBaron object to get the docstring from\n\n#         Returns:\n#             str: Newline separated docstring\n#         \"\"\"\n\n#         raw_doctring = PyCodeRetriever.get_docstring_from_node(ast_object).split(\"\\n\")\n#         return \"\\n\".join([ele.strip() for ele in raw_doctring]).strip()\n", "document": "# PyContextRetriever\n\n`PyContextRetriever` is a class used to retrieve the context of a symbol in a Python project. It parses the Python source code and extracts relevant information such as imports, class and method docstrings, and method signatures. It helps in understanding and documenting the behavior of specific symbols within a Python codebase.\n\n## Overview\n\nThe main functionality of `PyContextRetriever` is provided through the `process_symbol` method, which processes the context of a symbol and stores the output into a local message buffer. The retriever supports handling primary symbols, related symbols, and their dependencies to build a comprehensive context. It also allows configuration through the `PyContextRetrieverConfig` class to set indentation and limit the number of related symbols and dependencies to process.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata_docs.core.context.py_context.retriever_slim.PyContextConfig`\n\n## Example\n\nHere is an example of how to use `PyContextRetriever` to retrieve the context of a symbol:\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.context.py_context.retriever import PyContextRetriever, PyContextRetrieverConfig\n\n# ... Load or build the SymbolGraph ...\nsymbol_graph = SymbolGraph()\n\n# Create an instance of PyContextRetriever\nconfig = PyContextRetrieverConfig()\nretriever = PyContextRetriever(graph=symbol_graph, config=config)\n\n# Retrieve the context of a specific symbol\nsymbol = ...  # Load or find the symbol\nrelated_symbols = ...  # Load or find the related symbols\nretriever.process_symbol(symbol, related_symbols)\n\n# Get the context buffer\ncontext_buffer = retriever.get_context_buffer()\nprint(context_buffer)\n```\n\n## Limitations\n\n`PyContextRetriever` assumes that the provided `SymbolGraph` is valid and contains all necessary information about the Python codebase. It may not perform well with incomplete or invalid graphs. Also, it relies on the `redbaron` library to parse the source code, which may have limitations in handling some specific language constructs.\n\n## Follow-up Questions:\n\n- Is there any specific need or customization for symbol context retrieval?\n- Are there any performance concerns while using `PyContextRetriever` for larger projects?", "summary": "PyContextRetriever is a class that retrieves the context of a symbol in a Python project by parsing the source code and extracting information such as imports, docstrings, and method signatures. It assists in understanding and documenting a Python codebase. The main functionality is provided through the `process_symbol` method, which processes a symbol's context and stores it into a message buffer. Configuration can be done using the `PyContextRetrieverConfig` class to set indentation and limit the number of related symbols and dependencies to process.\n\nExample usage involves loading or building a `SymbolGraph`, creating an instance of `PyContextRetriever`, retrieving the context of a specific symbol, and getting the context buffer. The retriever assumes that the `SymbolGraph` is valid and complete, and may not perform well with incomplete or invalid graphs. Additionally, it relies on the `redbaron` library, which might have limitations in handling certain language constructs.", "context": "\n    Generate the documentation for PyContextRetriever using the context shown below -\n  Building context for primary symbol - automata_docs.core.context.py_context.retriever.PyContextRetriever -\n  \n    Import Statements:\n      import os\n      from contextlib import contextmanager\n      from typing import List, Optional, Set\n      from redbaron import RedBaron\n      from automata_docs.core.coding.py_coding.navigation import find_method_call_by_location\n      from automata_docs.core.coding.py_coding.py_utils import build_repository_overview\n      from automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata_docs.core.symbol.graph import SymbolGraph\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolDescriptor, SymbolReference\n      from automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata_docs.core.utils import root_py_fpath\n      \n    Class Docstring:\n      The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n      \n    Methods:\n      @contextmanager\n          def IndentManager(self):\n              \"\"\"A context manager to manage the indentation level\"\"\"\n              self.indent_level += 1\n              yield\n              self.indent_level -= 1\n      \n          \n      def __init__(\n              self,\n              graph: SymbolGraph,\n              config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n          ):\n              \"\"\"\n              Args:\n                  graph (SymbolGraph): The symbol graph to use\n                  config (PyContextRetrieverConfig): The configuration to use\n              \"\"\"\n              self.graph = graph\n              self.config = config\n              self.indent_level = 0\n              self.reset()\n      \n          \n      def get_context_buffer(self) -> str:\n              \"\"\"\n              Get the context buffer\n      \n              Returns:\n                  str: The context buffer\n              \"\"\"\n              return self.context\n      \n          \n      def indent() -> str:\n                  return self.config.spacer * self.indent_level\n      \n              \n      def process_ast(self, symbol: Symbol):\n              \"\"\"\n              Process the variables of a symbol\n      \n              Args:\n                  ast_object (RedBaron): The ast representation of the symbol\n              \"\"\"\n              ast_object = convert_to_fst_object(symbol)\n              is_main_symbol = self._is_main_symbol()\n              methods = sorted(ast_object.find_all(\"DefNode\"), key=lambda x: x.name)\n      \n              with self.IndentManager():\n                  if \"test\" in symbol.dotpath or \"Config\" in symbol.dotpath:\n                      with self.IndentManager():\n                          self.process_message(f\"{ast_object.dumps()}\\n\")\n                  else:\n                      if is_main_symbol:\n                          self.process_imports(symbol)\n                      self.process_docstring(ast_object)\n      \n                      if len(methods) > 0:\n                          self.process_message(f\"Methods:\")\n                      for method in methods:\n                          self.process_method(method, is_main_symbol)\n      \n          \n      def process_docstring(self, ast_object: RedBaron):\n              \"\"\"\n              Process the docstring of a symbol\n      \n              Args:\n                  ast_object (RedBaron): The ast representation of the symbol\n              \"\"\"\n              docstring = PyContextRetriever._get_docstring(ast_object)\n              # Print the docstring if it exists\n              if docstring:\n                  self.process_message(\"Class Docstring:\")\n                  with self.IndentManager():\n                      self.process_message(docstring)\n                      self.process_message(\"\")  # Add an empty line for separation\n      \n          \n      def process_headline(self, symbol: Symbol):\n              \"\"\"\n              Process the headline of a symbol\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n              \"\"\"\n              # Print the headline\n              if self._is_main_symbol():\n                  self.process_message(f\"Building context for primary symbol - {symbol.dotpath} -\\n\")\n              else:\n                  self.process_message(f\"{symbol.dotpath}\\n\")\n      \n          \n      def process_imports(self, symbol: Symbol):\n              \"\"\"\n              Process the imports of a symbol\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n              \"\"\"\n              # Compute the file path from the symbol's path\n              file_path = os.path.join(\n                  root_py_fpath(), \"..\", str(symbol.dotpath).replace(\".\", os.path.sep)\n              )\n              while not os.path.isdir(os.path.dirname(file_path)):\n                  file_path = os.path.dirname(file_path)\n      \n              # Load the source code with RedBaron\n              with open(file_path + \".py\", \"r\") as f:\n                  red = RedBaron(f.read())\n      \n              # Find and print import statements\n              imports = red.find_all(\"ImportNode\")\n              from_imports = red.find_all(\"FromImportNode\")\n              if len(imports) + len(from_imports) > 0:\n                  self.process_message(\"Import Statements:\")\n                  with self.IndentManager():\n                      for import_node in imports + from_imports:\n                          self.process_message(str(import_node.dumps()))\n                      self.process_message(\"\")  # Add an empty line for separation\n      \n          \n      def process_message(self, message: str):\n              \"\"\"\n              Process a message by appending indentation and adding it to the message\n      \n              Args:\n                  message (str): The message to process\n              \"\"\"\n      \n              def indent() -> str:\n                  return self.config.spacer * self.indent_level\n      \n              self.context += \"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n      \n          \n      def process_method(self, method: RedBaron, is_main_symbol: bool):\n              \"\"\"\n              Processes a specified method\n      \n              Args:\n                  method (RedBaron): The ast representation of the method\n              \"\"\"\n              if PyContextRetriever._is_private_method(method):\n                  return\n              with self.IndentManager():\n                  print(\"method.name = \", method.name)\n                  if is_main_symbol:\n                      for code_line in method.dumps().split(\"\\n\"):\n                          self.process_message(code_line)\n                  else:\n                      if method.name == \"__init__\":\n                          for code_line in method.dumps().split(\"\\n\"):\n                              self.process_message(code_line)\n                      else:\n                          method_definition = f\"{method.name}({method.arguments.dumps()})\"\n                          return_annotation = (\n                              method.return_annotation.dumps() if method.return_annotation else \"None\"\n                          )\n                          self.process_message(f\"{method_definition} -> {return_annotation}\\n\")\n      \n          \n      def process_symbol(\n              self,\n              symbol: Symbol,\n              related_symbols: List[Symbol] = [],\n          ):\n              \"\"\"\n              Process the context of a symbol\n              Theh output is stored into the local message buffer\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n                  ranked_symbols (List[Symbol]): The list ranked symbols to use\n                      with the nearest symbol processor\n              \"\"\"\n              print(\"Calling process symbol on = \", symbol.dotpath)\n              with self.IndentManager():\n                  self.process_headline(symbol)\n                  self.process_ast(symbol)\n      \n                  if self._is_main_symbol():\n                      related_symbols_processed = 0\n                      self.process_message(f\"Building context for related symbols -\\n\")\n      \n                      print(\"Processing related symbols...\")\n                      for related_symbol in related_symbols:\n                          if related_symbols_processed >= self.config.max_related_symbols_to_process:\n                              break\n                          # Check that the related symbol passes filter requirements\n                          if not PyContextRetriever._pass_symbol_filter(symbol, related_symbol):\n                              continue\n      \n                          if related_symbol not in self.obs_symbols:\n                              self.process_symbol(related_symbol)\n                              related_symbols_processed += 1\n      \n                      dependencies_processed = 0\n                      self.process_message(f\"Building context for dependencies -\\n\")\n                      all_dependencies = list(self.graph.get_symbol_dependencies(symbol))\n                      filtered_dependencies = get_rankable_symbols(all_dependencies)\n      \n                      print(\"Processing dependencies...\")\n                      for dependency in filtered_dependencies:\n                          if dependencies_processed >= self.config.max_dependencies_to_process:\n                              break\n                          # Check that the dependency passes filter requirements\n                          if not PyContextRetriever._pass_symbol_filter(symbol, dependency):\n                              continue\n      \n                          if dependency not in self.obs_symbols:\n                              try:\n                                  self.process_symbol(dependency)\n                              except:\n                                  print(\"Failure processing symbol = \", dependency)\n                                  continue\n                              dependencies_processed += 1\n      \n              self.obs_symbols.add(symbol)\n      \n          \n      def reset(self):\n              \"\"\"\n              Reset the retriever to its initial state\n              \"\"\"\n              self.context = \"\"\n              self.obs_symbols: Set[Symbol] = set([])\n              self.global_level = 0\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext\n    \n      Class Docstring:\n        The PyContext is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.__init__\n    \n      Class Docstring:\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n        Args:\n        python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    automata_docs.core.context.py_context.retriever_slim.PyContextConfig\n    \n        class PyContextConfig:\n            \"\"\"The configuration for the PyContext\"\"\"\n        \n            def __init__(\n                self,\n                spacer: str = \"  \",\n                max_dependencies_to_process: int = 10,\n                max_related_symbols_to_process: int = 10,\n            ):\n                \"\"\"\n                Args:\n                    spacer (str): The string to use for indentation\n                    max_dependency_print_depth (int): The maximum depth to print dependencies\n                    max_recursion_depth (int): The maximum depth to recurse into dependencies\n                    max_related_symbols_to_process (int): The number of nearest symbols to print\n                \"\"\"\n                self.spacer = spacer\n                self.max_dependencies_to_process = max_dependencies_to_process\n                self.max_related_symbols_to_process = max_related_symbols_to_process\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever.get_docstring_from_node\n    \n      Class Docstring:\n        Gets the docstring from the specified node\n        \n        Args:\n        node: The FST node to get the docstring from\n        \n      Methods:\n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n    automata_docs.core.utils.root_py_fpath\n    \n      Class Docstring:\n        Get the path to the root of the project python code\n        \n        Returns:\n        str - A fpath object in string form\n        \n      Methods:\n        root_py_fpath() -> str\n        \n    automata_docs.core.symbol.graph.SymbolGraph.get_symbol_dependencies\n    \n      Class Docstring:\n        Gets all symbols which contain a specified partial path\n        \n        Args:\n        partial_py_path (PyPath): The partial path to explain\n        Returns:\n        Set[Symbol]: Set of symbols that follow the partial path\n        \n      Methods:\n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_utils.get_rankable_symbols\n    \n      Class Docstring:\n        Filter out symbols that are not relevant for the embedding map.\n        \n        Args:\n        symbols: List of symbols to filter\n        \n        Returns:\n        List of filtered symbols\n        \n      Methods:\n        get_rankable_symbols(symbols: List[Symbol],\n            filter_strings=(\n                \"setup\",\n                \"stdlib\",\n            ),  # TODO - Revisit what strings we should filter on.\n            accepted_kinds=(SymbolDescriptor.PyKind.Method, SymbolDescriptor.PyKind.Class),\n        ) -> List[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.context.py_context.retriever`/PyContextRetrieverConfig#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.context.py_context.retriever", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyContextRetrieverConfig", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PyContextRetrieverConfig:\n    \"\"\"The configuration for the PyContextRetriever\"\"\"\n\n    def __init__(\n        self,\n        spacer: str = \"  \",\n        max_dependencies_to_process: int = 10,\n        max_related_symbols_to_process: int = 10,\n    ):\n        \"\"\"\n        Args:\n            spacer (str): The string to use for indentation\n            max_dependency_print_depth (int): The maximum depth to print dependencies\n            max_recursion_depth (int): The maximum depth to recurse into dependencies\n            max_related_symbols_to_process (int): The number of nearest symbols to print\n        \"\"\"\n        self.spacer = spacer\n        self.max_dependencies_to_process = max_dependencies_to_process\n        self.max_related_symbols_to_process = max_related_symbols_to_process\n\n\n", "document": "# PyContextRetrieverConfig\n\n`PyContextRetrieverConfig` is a configuration class for the `PyContextRetriever`. It provides options for retrieving Python code context, such as indentation settings, maximum depth for processing dependencies, and the number of nearest related symbols to print.\n\n## Overview\n\n`PyContextRetrieverConfig` allows users to customize the behavior of the `PyContextRetriever` by setting different options like the string used for indentation (`spacer`), the maximum number of dependencies to process (`max_dependencies_to_process`), and the maximum number of related symbols to process (`max_related_symbols_to_process`). These options can be set while initializing the `PyContextRetrieverConfig` object.\n\n## Related Symbols\n\n- `automata_docs.core.context.py_context.retriever_slim.PyContextConfig`\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata_docs.core.context.py_context.retriever_slim.PyContext`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter.__init__`\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n\n## Example\n\nThe following example demonstrates how to create an instance of `PyContextRetrieverConfig` with custom settings.\n\n```python\nfrom automata_docs.core.context.py_context.retriever import PyContextRetrieverConfig\n\nconfig = PyContextRetrieverConfig(spacer=\"    \", max_dependencies_to_process=5, max_related_symbols_to_process=5)\n```\n\n## Limitations\n\n`PyContextRetrieverConfig` provides a limited set of options to configure the behavior of the `PyContextRetriever`. It may not cover all possible use cases or configurations required for a specific project or purpose.\n\n## Follow-up Questions:\n\n- Are the customization options provided by `PyContextRetrieverConfig` comprehensive for all possible scenarios?", "summary": "PyContextRetrieverConfig is a configuration class for PyContextRetriever, enabling users to customize options like indentation (spacer), maximum dependency processing depth (max_dependencies_to_process), and the number of nearest related symbols to print (max_related_symbols_to_process). These options can be set upon initializing the PyContextRetrieverConfig object; however, the configuration options may not cover all possible use cases or project requirements. For example usage:\n\n```python\nfrom automata_docs.core.context.py_context.retriever import PyContextRetrieverConfig\n\nconfig = PyContextRetrieverConfig(spacer=\"    \", max_dependencies_to_process=5, max_related_symbols_to_process=5)\n```", "context": "\n    Generate the documentation for PyContextRetrieverConfig using the context shown below -\n  Building context for primary symbol - automata_docs.core.context.py_context.retriever.PyContextRetrieverConfig -\n  \n      class PyContextRetrieverConfig:\n          \"\"\"The configuration for the PyContextRetriever\"\"\"\n      \n          def __init__(\n              self,\n              spacer: str = \"  \",\n              max_dependencies_to_process: int = 10,\n              max_related_symbols_to_process: int = 10,\n          ):\n              \"\"\"\n              Args:\n                  spacer (str): The string to use for indentation\n                  max_dependency_print_depth (int): The maximum depth to print dependencies\n                  max_recursion_depth (int): The maximum depth to recurse into dependencies\n                  max_related_symbols_to_process (int): The number of nearest symbols to print\n              \"\"\"\n              self.spacer = spacer\n              self.max_dependencies_to_process = max_dependencies_to_process\n              self.max_related_symbols_to_process = max_related_symbols_to_process\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.context.py_context.retriever_slim.PyContextConfig\n    \n        class PyContextConfig:\n            \"\"\"The configuration for the PyContext\"\"\"\n        \n            def __init__(\n                self,\n                spacer: str = \"  \",\n                max_dependencies_to_process: int = 10,\n                max_related_symbols_to_process: int = 10,\n            ):\n                \"\"\"\n                Args:\n                    spacer (str): The string to use for indentation\n                    max_dependency_print_depth (int): The maximum depth to print dependencies\n                    max_recursion_depth (int): The maximum depth to recurse into dependencies\n                    max_related_symbols_to_process (int): The number of nearest symbols to print\n                \"\"\"\n                self.spacer = spacer\n                self.max_dependencies_to_process = max_dependencies_to_process\n                self.max_related_symbols_to_process = max_related_symbols_to_process\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext\n    \n      Class Docstring:\n        The PyContext is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.__init__\n    \n      Class Docstring:\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n        Args:\n        python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.__init__\n    \n      Class Docstring:\n        Args:\n        graph (SymbolGraph): The symbol graph to use\n        config (PyContextRetrieverConfig): The configuration to use\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.reset\n    \n      Class Docstring:\n        Reset the retriever to its initial state\n        \n      Methods:\n        reset(self) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.context.py_context.retriever_slim`/PyContext#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.context.py_context.retriever_slim", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyContext", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PyContext:\n    \"\"\"The PyContext is used to retrieve the context of a symbol in a Python project\"\"\"\n\n    def __init__(\n        self,\n        graph: SymbolGraph,\n        config: PyContextConfig = PyContextConfig(),\n    ):\n        \"\"\"\n        Args:\n            graph (SymbolGraph): The symbol graph to use\n            config (PyContextConfig): The configuration to use\n        \"\"\"\n        self.graph = graph\n        self.config = config\n        self.indent_level = 0\n        self.reset()\n\n    @contextmanager\n    def IndentManager(self):\n        \"\"\"A context manager to manage the indentation level\"\"\"\n        self.indent_level += 1\n        yield\n        self.indent_level -= 1\n\n    def process_message(self, message: str):\n        \"\"\"\n        Process a message by appending indentation and adding it to the message\n\n        Args:\n            message (str): The message to process\n        \"\"\"\n\n        def indent() -> str:\n            return self.config.spacer * self.indent_level\n\n        self.context += \"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n\n    def get_context_buffer(self) -> str:\n        \"\"\"\n        Get the context buffer\n\n        Returns:\n            str: The context buffer\n        \"\"\"\n        return self.context\n\n    def reset(self):\n        \"\"\"\n        Reset the retriever to its initial state\n        \"\"\"\n        self.context = \"\"\n        self.obs_symbols: Set[Symbol] = set([])\n        self.global_level = 0\n\n    def process_symbol(\n        self,\n        symbol: Symbol,\n        related_symbols: List[Symbol] = [],\n    ):\n        \"\"\"\n        Process the context of a symbol\n        Theh output is stored into the local message buffer\n\n        Args:\n            symbol (Symbol): The symbol to process\n            ranked_symbols (List[Symbol]): The list ranked symbols to use\n                with the nearest symbol processor\n        \"\"\"\n        print(\"Calling process symbol on = \", symbol.dotpath)\n        with self.IndentManager():\n            self.process_headline(symbol)\n            self.process_ast(symbol)\n\n            if self._is_main_symbol():\n                related_symbols_processed = 0\n                self.process_message(f\"Building context for related symbols -\\n\")\n\n                print(\"Processing related symbols...\")\n                for related_symbol in related_symbols:\n                    if related_symbols_processed >= self.config.max_related_symbols_to_process:\n                        break\n                    # Check that the related symbol passes filter requirements\n                    if not PyContext._pass_symbol_filter(symbol, related_symbol):\n                        continue\n\n                    if related_symbol not in self.obs_symbols:\n                        self.process_symbol(related_symbol)\n                        related_symbols_processed += 1\n\n                dependencies_processed = 0\n                self.process_message(f\"Building context for dependencies -\\n\")\n                all_dependencies = list(self.graph.get_symbol_dependencies(symbol))\n                filtered_dependencies = get_rankable_symbols(all_dependencies)\n\n                print(\"Processing dependencies...\")\n                for dependency in filtered_dependencies:\n                    if dependencies_processed >= self.config.max_dependencies_to_process:\n                        break\n                    # Check that the dependency passes filter requirements\n                    if not PyContext._pass_symbol_filter(symbol, dependency):\n                        continue\n\n                    if dependency not in self.obs_symbols:\n                        try:\n                            self.process_symbol(dependency)\n                        except:\n                            print(\"Failure processing symbol = \", dependency)\n                            continue\n                        dependencies_processed += 1\n\n        self.obs_symbols.add(symbol)\n\n    def process_headline(self, symbol: Symbol):\n        \"\"\"\n        Process the headline of a symbol\n\n        Args:\n            symbol (Symbol): The symbol to process\n        \"\"\"\n        # Print the headline\n        if self._is_main_symbol():\n            self.process_message(f\"Building context for primary symbol - {symbol.dotpath} -\\n\")\n        else:\n            self.process_message(f\"{symbol.dotpath}\\n\")\n\n    def process_ast(self, symbol: Symbol):\n        \"\"\"\n        Process the variables of a symbol\n\n        Args:\n            ast_object (RedBaron): The ast representation of the symbol\n        \"\"\"\n        ast_object = convert_to_fst_object(symbol)\n        is_main_symbol = self._is_main_symbol()\n        methods = sorted(ast_object.find_all(\"DefNode\"), key=lambda x: x.name)\n\n        with self.IndentManager():\n            if \"test\" in symbol.dotpath or \"Config\" in symbol.dotpath:\n                with self.IndentManager():\n                    self.process_message(f\"{ast_object.dumps()}\\n\")\n            else:\n                if is_main_symbol:\n                    self.process_imports(symbol)\n                self.process_docstring(ast_object)\n\n                if len(methods) > 0:\n                    self.process_message(f\"Methods:\")\n                for method in methods:\n                    self.process_method(method, is_main_symbol)\n\n    def process_imports(self, symbol: Symbol):\n        \"\"\"\n        Process the imports of a symbol\n\n        Args:\n            symbol (Symbol): The symbol to process\n        \"\"\"\n        # Compute the file path from the symbol's path\n        file_path = os.path.join(\n            root_py_fpath(), \"..\", str(symbol.dotpath).replace(\".\", os.path.sep)\n        )\n        while not os.path.isdir(os.path.dirname(file_path)):\n            file_path = os.path.dirname(file_path)\n\n        # Load the source code with RedBaron\n        with open(file_path + \".py\", \"r\") as f:\n            red = RedBaron(f.read())\n\n        # Find and print import statements\n        imports = red.find_all(\"ImportNode\")\n        from_imports = red.find_all(\"FromImportNode\")\n        if len(imports) + len(from_imports) > 0:\n            self.process_message(\"Import Statements:\")\n            with self.IndentManager():\n                for import_node in imports + from_imports:\n                    self.process_message(str(import_node.dumps()))\n                self.process_message(\"\")  # Add an empty line for separation\n\n    def process_docstring(self, ast_object: RedBaron):\n        \"\"\"\n        Process the docstring of a symbol\n\n        Args:\n            ast_object (RedBaron): The ast representation of the symbol\n        \"\"\"\n        docstring = PyContext._get_docstring(ast_object)\n        # Print the docstring if it exists\n        if docstring:\n            self.process_message(\"Class Docstring:\")\n            with self.IndentManager():\n                self.process_message(docstring)\n                self.process_message(\"\")  # Add an empty line for separation\n\n    def process_method(self, method: RedBaron, is_main_symbol: bool):\n        \"\"\"\n        Processes a specified method\n\n        Args:\n            method (RedBaron): The ast representation of the method\n        \"\"\"\n        if PyContext._is_private_method(method):\n            return\n        with self.IndentManager():\n            if is_main_symbol:\n                for code_line in method.dumps().split(\"\\n\"):\n                    self.process_message(code_line)\n            else:\n                method_definition = f\"{method.name}({method.arguments.dumps()})\"\n                return_annotation = (\n                    method.return_annotation.dumps() if method.return_annotation else \"None\"\n                )\n                self.process_message(f\"{method_definition} -> {return_annotation}\\n\")\n\n    def _is_main_symbol(self) -> bool:\n        \"\"\"\n        Check if this is the main symbol call\n\n        Returns:\n            bool: True if this is the main symbol call, False otherwise\n\n        \"\"\"\n        return self.indent_level == 1\n\n    @staticmethod\n    def _is_private_method(ast_object: RedBaron) -> bool:\n        \"\"\"\n        Check if the ast object is private\n\n        Args:\n            ast_object (RedBaron): The RedBaron object to check\n\n        Returns:\n            bool: True if the method is private, False otherwise\n        \"\"\"\n        return ast_object.name[0] == \"_\" and ast_object.name[1] != \"_\"\n\n    @staticmethod\n    def _get_docstring(ast_object) -> str:\n        \"\"\"\n        Get the docstring an ast object\n\n        Args:\n            ast_object (RedBaron): The RedBaron object to get the docstring from\n\n        Returns:\n            str: Newline separated docstring\n        \"\"\"\n\n        raw_doctring = PyCodeRetriever.get_docstring_from_node(ast_object).split(\"\\n\")\n        return \"\\n\".join([ele.strip() for ele in raw_doctring]).strip()\n\n    @staticmethod\n    def _pass_symbol_filter(primary_symbol: Symbol, secondary_symbol: Symbol) -> bool:\n        \"\"\"\n        Get the docstring an ast object\n\n        Args:\n            ast_object (RedBaron): The RedBaron object to get the docstring from\n\n        Returns:\n            str: Newline separated docstring\n        \"\"\"\n\n        primary_symbol_dotpath = primary_symbol.dotpath\n        primary_package = primary_symbol_dotpath.split(\".\")[0]\n        secondary_symbol_dotpath = secondary_symbol.dotpath\n        secondary_package = secondary_symbol_dotpath.split(\".\")[0]\n\n        return not (\n            primary_symbol_dotpath in secondary_symbol_dotpath\n            or primary_package != secondary_package\n        )\n", "document": "# PyContext\n\n`PyContext` is used to retrieve the context of a symbol in a Python project.\n\n## Overview\n\n`PyContext` provides functionality to work with Python project symbols and tools to easily navigate the project structure. Its main tasks include retrieving context, related symbols, and dependencies for a given Python project.\n\n## Import Statements\n\n```python\nimport os\nfrom contextlib import contextmanager\nfrom typing import List, Optional, Set\nfrom redbaron import RedBaron\nfrom automata_docs.core.coding.py_coding.navigation import find_method_call_by_location\nfrom automata_docs.core.coding.py_coding.py_utils import build_repository_overview\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolDescriptor, SymbolReference\nfrom automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\nfrom automata_docs.core.utils import root_py_fpath\n```\n\n## Initialization\n\nTo instantiate a `PyContext` object, you need to provide a `SymbolGraph` and an optional `PyContextConfig` object.\n\n```python\ngraph = SymbolGraph()\nconfig = PyContextConfig()\npycontext = PyContext(graph, config)\n```\n\n## Main Methods\n\n`PyContext` provides several methods to work with symbols:\n\n- `get_context_buffer()`: Returns the context buffer as a string.\n- `process_ast()`: Processes the variables of a symbol.\n- `process_docstring()`: Processes the docstring of a symbol.\n- `process_headline()`: Processes the headline of a symbol.\n- `process_imports()`: Processes the imports of a symbol.\n- `process_message()`: Processes a message by appending indentation and adding it to the message.\n- `process_method()`: Processes a specified method.\n- `process_symbol()`: Process the context of a symbol. The output is stored in the local message buffer.\n- `reset()`: Resets the retriever to its initial state.\n\n## Usage Example\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.context.py_context import PyContext\nfrom automata_docs.core.context.py_context_config import PyContextConfig\n\ngraph = SymbolGraph()\nconfig = PyContextConfig()\npycontext = PyContext(graph, config)\n\n# Get context of a symbol\nsymbol = <some_symbol_instance>\npycontext.process_symbol(symbol)\n\n# Retrieve context buffer\ncontext = pycontext.get_context_buffer()\nprint(context)\n```\n\n## Limitations and Follow-up Questions\n\n- What are some potential edge cases or limitations when working with symbols in `PyContext`?", "summary": "PyContext is a Python library that retrieves the context of a symbol in a Python project, providing functionality to work with symbols and navigate project structure. To instantiate a `PyContext` object, users need a `SymbolGraph` and an optional `PyContextConfig` object. PyContext offers various methods to process symbols, including analyzing variables, docstrings, headlines, imports, messages, and methods. An example usage involves creating a SymbolGraph and PyContextConfig, initializing a PyContext instance, processing a symbol, and retrieving the context buffer. Potential limitations when working with symbols in PyContext may include edge cases or certain restrictions, which are not clearly defined in the given documentation.", "context": "\n    Generate the documentation for PyContext using the context shown below -\n  Building context for primary symbol - automata_docs.core.context.py_context.retriever_slim.PyContext -\n  \n    Import Statements:\n      import os\n      from contextlib import contextmanager\n      from typing import List, Optional, Set\n      from redbaron import RedBaron\n      from automata_docs.core.coding.py_coding.navigation import find_method_call_by_location\n      from automata_docs.core.coding.py_coding.py_utils import build_repository_overview\n      from automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n      from automata_docs.core.symbol.graph import SymbolGraph\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolDescriptor, SymbolReference\n      from automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata_docs.core.utils import root_py_fpath\n      \n    Class Docstring:\n      The PyContext is used to retrieve the context of a symbol in a Python project\n      \n    Methods:\n      @contextmanager\n          def IndentManager(self):\n              \"\"\"A context manager to manage the indentation level\"\"\"\n              self.indent_level += 1\n              yield\n              self.indent_level -= 1\n      \n          \n      def __init__(\n              self,\n              graph: SymbolGraph,\n              config: PyContextConfig = PyContextConfig(),\n          ):\n              \"\"\"\n              Args:\n                  graph (SymbolGraph): The symbol graph to use\n                  config (PyContextConfig): The configuration to use\n              \"\"\"\n              self.graph = graph\n              self.config = config\n              self.indent_level = 0\n              self.reset()\n      \n          \n      def get_context_buffer(self) -> str:\n              \"\"\"\n              Get the context buffer\n      \n              Returns:\n                  str: The context buffer\n              \"\"\"\n              return self.context\n      \n          \n      def indent() -> str:\n                  return self.config.spacer * self.indent_level\n      \n              \n      def process_ast(self, symbol: Symbol):\n              \"\"\"\n              Process the variables of a symbol\n      \n              Args:\n                  ast_object (RedBaron): The ast representation of the symbol\n              \"\"\"\n              ast_object = convert_to_fst_object(symbol)\n              is_main_symbol = self._is_main_symbol()\n              methods = sorted(ast_object.find_all(\"DefNode\"), key=lambda x: x.name)\n      \n              with self.IndentManager():\n                  if \"test\" in symbol.dotpath or \"Config\" in symbol.dotpath:\n                      with self.IndentManager():\n                          self.process_message(f\"{ast_object.dumps()}\\n\")\n                  else:\n                      if is_main_symbol:\n                          self.process_imports(symbol)\n                      self.process_docstring(ast_object)\n      \n                      if len(methods) > 0:\n                          self.process_message(f\"Methods:\")\n                      for method in methods:\n                          self.process_method(method, is_main_symbol)\n      \n          \n      def process_docstring(self, ast_object: RedBaron):\n              \"\"\"\n              Process the docstring of a symbol\n      \n              Args:\n                  ast_object (RedBaron): The ast representation of the symbol\n              \"\"\"\n              docstring = PyContext._get_docstring(ast_object)\n              # Print the docstring if it exists\n              if docstring:\n                  self.process_message(\"Class Docstring:\")\n                  with self.IndentManager():\n                      self.process_message(docstring)\n                      self.process_message(\"\")  # Add an empty line for separation\n      \n          \n      def process_headline(self, symbol: Symbol):\n              \"\"\"\n              Process the headline of a symbol\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n              \"\"\"\n              # Print the headline\n              if self._is_main_symbol():\n                  self.process_message(f\"Building context for primary symbol - {symbol.dotpath} -\\n\")\n              else:\n                  self.process_message(f\"{symbol.dotpath}\\n\")\n      \n          \n      def process_imports(self, symbol: Symbol):\n              \"\"\"\n              Process the imports of a symbol\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n              \"\"\"\n              # Compute the file path from the symbol's path\n              file_path = os.path.join(\n                  root_py_fpath(), \"..\", str(symbol.dotpath).replace(\".\", os.path.sep)\n              )\n              while not os.path.isdir(os.path.dirname(file_path)):\n                  file_path = os.path.dirname(file_path)\n      \n              # Load the source code with RedBaron\n              with open(file_path + \".py\", \"r\") as f:\n                  red = RedBaron(f.read())\n      \n              # Find and print import statements\n              imports = red.find_all(\"ImportNode\")\n              from_imports = red.find_all(\"FromImportNode\")\n              if len(imports) + len(from_imports) > 0:\n                  self.process_message(\"Import Statements:\")\n                  with self.IndentManager():\n                      for import_node in imports + from_imports:\n                          self.process_message(str(import_node.dumps()))\n                      self.process_message(\"\")  # Add an empty line for separation\n      \n          \n      def process_message(self, message: str):\n              \"\"\"\n              Process a message by appending indentation and adding it to the message\n      \n              Args:\n                  message (str): The message to process\n              \"\"\"\n      \n              def indent() -> str:\n                  return self.config.spacer * self.indent_level\n      \n              self.context += \"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n      \n          \n      def process_method(self, method: RedBaron, is_main_symbol: bool):\n              \"\"\"\n              Processes a specified method\n      \n              Args:\n                  method (RedBaron): The ast representation of the method\n              \"\"\"\n              if PyContext._is_private_method(method):\n                  return\n              with self.IndentManager():\n                  if is_main_symbol:\n                      for code_line in method.dumps().split(\"\\n\"):\n                          self.process_message(code_line)\n                  else:\n                      method_definition = f\"{method.name}({method.arguments.dumps()})\"\n                      return_annotation = (\n                          method.return_annotation.dumps() if method.return_annotation else \"None\"\n                      )\n                      self.process_message(f\"{method_definition} -> {return_annotation}\\n\")\n      \n          \n      def process_symbol(\n              self,\n              symbol: Symbol,\n              related_symbols: List[Symbol] = [],\n          ):\n              \"\"\"\n              Process the context of a symbol\n              Theh output is stored into the local message buffer\n      \n              Args:\n                  symbol (Symbol): The symbol to process\n                  ranked_symbols (List[Symbol]): The list ranked symbols to use\n                      with the nearest symbol processor\n              \"\"\"\n              print(\"Calling process symbol on = \", symbol.dotpath)\n              with self.IndentManager():\n                  self.process_headline(symbol)\n                  self.process_ast(symbol)\n      \n                  if self._is_main_symbol():\n                      related_symbols_processed = 0\n                      self.process_message(f\"Building context for related symbols -\\n\")\n      \n                      print(\"Processing related symbols...\")\n                      for related_symbol in related_symbols:\n                          if related_symbols_processed >= self.config.max_related_symbols_to_process:\n                              break\n                          # Check that the related symbol passes filter requirements\n                          if not PyContext._pass_symbol_filter(symbol, related_symbol):\n                              continue\n      \n                          if related_symbol not in self.obs_symbols:\n                              self.process_symbol(related_symbol)\n                              related_symbols_processed += 1\n      \n                      dependencies_processed = 0\n                      self.process_message(f\"Building context for dependencies -\\n\")\n                      all_dependencies = list(self.graph.get_symbol_dependencies(symbol))\n                      filtered_dependencies = get_rankable_symbols(all_dependencies)\n      \n                      print(\"Processing dependencies...\")\n                      for dependency in filtered_dependencies:\n                          if dependencies_processed >= self.config.max_dependencies_to_process:\n                              break\n                          # Check that the dependency passes filter requirements\n                          if not PyContext._pass_symbol_filter(symbol, dependency):\n                              continue\n      \n                          if dependency not in self.obs_symbols:\n                              try:\n                                  self.process_symbol(dependency)\n                              except:\n                                  print(\"Failure processing symbol = \", dependency)\n                                  continue\n                              dependencies_processed += 1\n      \n              self.obs_symbols.add(symbol)\n      \n          \n      def reset(self):\n              \"\"\"\n              Reset the retriever to its initial state\n              \"\"\"\n              self.context = \"\"\n              self.obs_symbols: Set[Symbol] = set([])\n              self.global_level = 0\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.tests.unit.test_py_code_retriever.getter\n    \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind\n    \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n    \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever.get_docstring_from_node\n    \n      Class Docstring:\n        Gets the docstring from the specified node\n        \n        Args:\n        node: The FST node to get the docstring from\n        \n      Methods:\n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n    automata_docs.core.utils.root_py_fpath\n    \n      Class Docstring:\n        Get the path to the root of the project python code\n        \n        Returns:\n        str - A fpath object in string form\n        \n      Methods:\n        root_py_fpath() -> str\n        \n    automata_docs.core.symbol.graph.SymbolGraph.get_symbol_dependencies\n    \n      Class Docstring:\n        Gets all symbols which contain a specified partial path\n        \n        Args:\n        partial_py_path (PyPath): The partial path to explain\n        Returns:\n        Set[Symbol]: Set of symbols that follow the partial path\n        \n      Methods:\n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_utils.get_rankable_symbols\n    \n      Class Docstring:\n        Filter out symbols that are not relevant for the embedding map.\n        \n        Args:\n        symbols: List of symbols to filter\n        \n        Returns:\n        List of filtered symbols\n        \n      Methods:\n        get_rankable_symbols(symbols: List[Symbol],\n            filter_strings=(\n                \"setup\",\n                \"stdlib\",\n            ),  # TODO - Revisit what strings we should filter on.\n            accepted_kinds=(SymbolDescriptor.PyKind.Method, SymbolDescriptor.PyKind.Class),\n        ) -> List[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.context.py_context.retriever_slim`/PyContextConfig#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.context.py_context.retriever_slim", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyContextConfig", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PyContextConfig:\n    \"\"\"The configuration for the PyContext\"\"\"\n\n    def __init__(\n        self,\n        spacer: str = \"  \",\n        max_dependencies_to_process: int = 10,\n        max_related_symbols_to_process: int = 10,\n    ):\n        \"\"\"\n        Args:\n            spacer (str): The string to use for indentation\n            max_dependency_print_depth (int): The maximum depth to print dependencies\n            max_recursion_depth (int): The maximum depth to recurse into dependencies\n            max_related_symbols_to_process (int): The number of nearest symbols to print\n        \"\"\"\n        self.spacer = spacer\n        self.max_dependencies_to_process = max_dependencies_to_process\n        self.max_related_symbols_to_process = max_related_symbols_to_process\n\n\n", "document": "# PyContextConfig\n\n`PyContextConfig` is a configuration class for the `PyContext` which is used to retrieve the context of a symbol in a Python project. The class provides options to set the string for indentation, maximum depth of dependencies to process, and maximum number of nearest related symbols to print.\n\n## Overview\n\n`PyContextConfig` offers a convenient way to configure the behavior of `PyContext`. The class allows instantiation with custom configurations for the spacer, maximum dependencies to process, and maximum related symbols to process. It is used as a parameter while creating a `PyContext` instance.\n\n## Related Symbols\n\n- `automata_docs.core.context.py_context.retriever_slim.PyContext`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `PyContextConfig` and use it to instantiate a `PyContext`:\n\n```python\nfrom automata_docs.core.context.py_context.retriever_slim import PyContextConfig, PyContext\nfrom automata_docs.core.symbol.graph import SymbolGraph\n\n# Custom configuration\nconfig = PyContextConfig(spacer=\"    \", max_dependencies_to_process=5, max_related_symbols_to_process=5)\n\n# Load symbol graph (replace with actual symbol graph instance)\ngraph = SymbolGraph()\n\n# Create PyContext using the custom configuration\ncontext = PyContext(graph=graph, config=config)\n```\n\n## Follow-up Questions:\n\n- Are there any performance issues when using a large value for `max_dependencies_to_process` and `max_related_symbols_to_process`?", "summary": "`PyContextConfig` is a configuration class for the `PyContext` used to retrieve the context of a symbol in a Python project. It provides options to set indentation strings, maximum depth of dependencies to process, and maximum number of nearest related symbols to print. This class can be instantiated with custom configurations and used as a parameter when creating a `PyContext` instance. Here's an example of how to create an instance of `PyContextConfig` and use it to instantiate a `PyContext`:\n\n```python\nfrom automata_docs.core.context.py_context.retriever_slim import PyContextConfig, PyContext\nfrom automata_docs.core.symbol.graph import SymbolGraph\n\n# Custom configuration\nconfig = PyContextConfig(spacer=\"    \", max_dependencies_to_process=5, max_related_symbols_to_process=5)\n\n# Load symbol graph (replace with actual symbol graph instance)\ngraph = SymbolGraph()\n\n# Create PyContext using the custom configuration\ncontext = PyContext(graph=graph, config=config)\n```", "context": "\n    Generate the documentation for PyContextConfig using the context shown below -\n  Building context for primary symbol - automata_docs.core.context.py_context.retriever_slim.PyContextConfig -\n  \n      class PyContextConfig:\n          \"\"\"The configuration for the PyContext\"\"\"\n      \n          def __init__(\n              self,\n              spacer: str = \"  \",\n              max_dependencies_to_process: int = 10,\n              max_related_symbols_to_process: int = 10,\n          ):\n              \"\"\"\n              Args:\n                  spacer (str): The string to use for indentation\n                  max_dependency_print_depth (int): The maximum depth to print dependencies\n                  max_recursion_depth (int): The maximum depth to recurse into dependencies\n                  max_related_symbols_to_process (int): The number of nearest symbols to print\n              \"\"\"\n              self.spacer = spacer\n              self.max_dependencies_to_process = max_dependencies_to_process\n              self.max_related_symbols_to_process = max_related_symbols_to_process\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.context.py_context.retriever_slim.PyContext\n    \n      Class Docstring:\n        The PyContext is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext.__init__\n    \n      Class Docstring:\n        Args:\n        graph (SymbolGraph): The symbol graph to use\n        config (PyContextConfig): The configuration to use\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.__init__\n    \n      Class Docstring:\n        Args:\n        graph (SymbolGraph): The symbol graph to use\n        config (PyContextRetrieverConfig): The configuration to use\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.core.utils.LoggingConfig\n    \n        class LoggingConfig(TypedDict, total=False):\n            \"\"\"A dictionary representing the logging configuration\"\"\"\n        \n            version: int\n            disable_existing_loggers: bool\n            formatters: dict\n            handlers: dict[str, Union[HandlerDict, dict]]\n            root: RootDict\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.python_writer\n    \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind\n    \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.database.provider`/SymbolDatabaseProvider#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.database.provider", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDatabaseProvider", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDatabaseProvider(abc.ABC):\n    \"\"\"\n    Abstract base class for different types of database providers.\n    \"\"\"\n\n    @abc.abstractmethod\n    def save(self):\n        \"\"\"\n        Abstract method to save data.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def load(self) -> Any:\n        \"\"\"\n        Abstract method to load data.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def add(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Abstract method to add an embedding to the database.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Abstract method to update an existing embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def discard(self, symbol: Symbol):\n        \"\"\"\n        Abstract method to discard a specific embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get(self, symbol: Symbol) -> Any:\n        \"\"\"\n        Abstract method to get a specific embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def clear(self):\n        \"\"\"\n        Abstract method to clear all embeddings.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def contains(self, symbol: Symbol) -> bool:\n        \"\"\"\n        Abstract method to check if a specific embedding is present.\n        \"\"\"\n        pass\n", "document": "# SymbolDatabaseProvider\n\n`SymbolDatabaseProvider` is an abstract base class that provides a standard interface for different types of database providers used for storing and managing symbol embeddings.\n\n## Overview\n\nA `SymbolDatabaseProvider` defines methods for adding, updating, getting, discarding, and checking the existence of symbol embeddings. Subclasses should implement these methods according to their specific database provider's requirements.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler`\n- `automata_docs.core.database.vector.VectorDatabaseProvider`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.symbol.symbol_types.SymbolDescriptor`\n\n## Methods\n### add(embedding: SymbolEmbedding)\n\nThe abstract method to add an embedding to the database.\n\n### update(embedding: SymbolEmbedding)\n\nThe abstract method to update an existing embedding in the database.\n\n### get(symbol: Symbol) -> Any\n\nThe abstract method to get a specific embedding from the database.\n\n### discard(symbol: Symbol)\n\nThe abstract method to discard a specific embedding from the database.\n\n### contains(symbol: Symbol) -> bool\n\nThe abstract method to check if a specific embedding is present in the database.\n\n### clear()\n\nThe abstract method to clear all embeddings from the database.\n\n### load() -> Any\n\nThe abstract method to load data into the database provider.\n\n### save()\n\nThe abstract method to save data from the database provider.\n\n## Example\n\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\nfrom automata_docs.core.database.provider import SymbolDatabaseProvider\nfrom automata_docs.core.database.vector import JSONVectorDatabase\n\nclass CustomDatabaseProvider(SymbolDatabaseProvider):\n    def __init__(self):\n        self.embedding_db = JSONVectorDatabase(\"embeddings.json\")\n\n    def add(self, embedding: SymbolEmbedding):\n        self.embedding_db.add(embedding)\n\n    # Implement other abstract methods according to specific requirements\n\n```\n\n## Limitations\n\nAs an abstract base class, `SymbolDatabaseProvider` cannot be directly instantiated. Subclasses must provide their own implementations of the abstract methods.\n\nAdditionally, `SymbolDatabaseProvider` does not provide any specific functionality related to database management, such as transactions, caching, or query optimization. It only provides a standard interface to work with different types of symbol databases.\n\n## Follow-up Questions:\n\n- Are there any default concrete implementations for the abstract methods in `SymbolDatabaseProvider`, or does each subclass have to provide its own implementations?", "summary": "The `SymbolDatabaseProvider` is an abstract base class designed for managing symbol embeddings in various types of databases. This class provides a standard interface with methods for adding, updating, getting, discarding, and checking the existence of symbol embeddings. Subclasses should implement these methods according to the specific requirements of their database provider.\n\nAs an abstract base class, `SymbolDatabaseProvider` cannot be directly instantiated and does not provide any specific functionality related to database management. Subclasses must provide their own implementations of the abstract methods. For example:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\nfrom automata_docs.core.database.provider import SymbolDatabaseProvider\nfrom automata_docs.core.database.vector import JSONVectorDatabase\n\nclass CustomDatabaseProvider(SymbolDatabaseProvider):\n    def __init__(self):\n        self.embedding_db = JSONVectorDatabase(\"embeddings.json\")\n\n    def add(self, embedding: SymbolEmbedding):\n        self.embedding_db.add(embedding)\n\n    # Implement other abstract methods according to specific requirements\n```\n", "context": "\n    Generate the documentation for SymbolDatabaseProvider using the context shown below -\n  Building context for primary symbol - automata_docs.core.database.provider.SymbolDatabaseProvider -\n  \n    Import Statements:\n      import abc\n      from typing import Any\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      \n    Class Docstring:\n      Abstract base class for different types of database providers.\n      \n    Methods:\n      @abc.abstractmethod\n          def add(self, embedding: SymbolEmbedding):\n              \"\"\"\n              Abstract method to add an embedding to the database.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def clear(self):\n              \"\"\"\n              Abstract method to clear all embeddings.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def contains(self, symbol: Symbol) -> bool:\n              \"\"\"\n              Abstract method to check if a specific embedding is present.\n              \"\"\"\n              pass\n      \n      @abc.abstractmethod\n          def discard(self, symbol: Symbol):\n              \"\"\"\n              Abstract method to discard a specific embedding.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def get(self, symbol: Symbol) -> Any:\n              \"\"\"\n              Abstract method to get a specific embedding.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def load(self) -> Any:\n              \"\"\"\n              Abstract method to load data.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def save(self):\n              \"\"\"\n              Abstract method to save data.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def update(self, embedding: SymbolEmbedding):\n              \"\"\"\n              Abstract method to update an existing embedding.\n              \"\"\"\n              pass\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.database.vector.VectorDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.database.vector`/JSONVectorDatabase#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.database.vector", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "JSONVectorDatabase", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class JSONVectorDatabase(VectorDatabaseProvider):\n    \"\"\"\n    Concrete class to provide a vector database that saves into a JSON file.\n    \"\"\"\n\n    def __init__(self, file_path: str):\n        \"\"\"\n        Args:\n            file_path: The path to the JSON file to save the vector database to\n        \"\"\"\n        self.file_path = file_path\n        self.data: List[SymbolEmbedding] = []\n        self.index: Dict[Symbol, int] = {}\n        self.load()\n\n    def save(self):\n        \"\"\"Saves the vector database to the JSON file\"\"\"\n        with open(self.file_path, \"w\") as file:\n            encoded_data = jsonpickle.encode(self.data)\n            file.write(encoded_data)\n\n    def load(self):\n        \"\"\"Loads the vector database from the JSON file\"\"\"\n        try:\n            with open(self.file_path, \"r\") as file:\n                self.data = jsonpickle.decode(file.read())\n                self.index = {embedding.symbol: i for i, embedding in enumerate(self.data)}\n        except FileNotFoundError:\n            logger.info(\"Creating new vector embedding db at %s\" % self.file_path)\n\n    def add(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Adds a new vector to the database\n\n        Args:\n            embedding: The vector to add\n        \"\"\"\n        self.data.append(embedding)\n        self.index[embedding.symbol] = len(self.data) - 1\n\n    def update(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Updates an embedding in the database\n\n        Args:\n            embedding: The vector to update\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if embedding.symbol not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % embedding.symbol)\n        self.data[self.index[embedding.symbol]] = embedding\n\n    def discard(self, symbol: Symbol):\n        \"\"\"\n        Discards a vector from the database\n\n        Args:\n            symbol: The symbol to discard\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if symbol not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % symbol)\n        index = self.index[symbol]\n        del self.data[index]\n        del self.index[symbol]\n\n    def contains(self, symbol: Symbol) -> bool:\n        \"\"\"\n        Checks if the database contains a vector for the given symbol\n\n        Args:\n            symbol: The symbol to check\n\n        Returns:\n            True if the database contains a vector for the given symbol, False otherwise\n        \"\"\"\n        return symbol in self.index\n\n    def get(self, symbol: Symbol) -> SymbolEmbedding:\n        \"\"\"\n        Gets the vector for the given symbol\n\n        Args:\n            symbol: The symbol to get the vector for\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if symbol not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % symbol)\n        return self.data[self.index[symbol]]\n\n    def clear(self):\n        \"\"\"Removes all vectors from the database\"\"\"\n        self.data = []\n        self.index = {}\n\n    def calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]:\n        # Implement the logic to calculate similarity between the given vector and vectors in the data.\n        # This will depend on how the data is structured and the specific similarity measure to be used (e.g., cosine similarity).\n        # Here, just returning the data as a placeholder.\n        # return self.data\n        raise NotImplementedError\n\n    def get_all_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Gets all symbols in the database\n\n        Returns:\n            A list of all symbols in the database\n        \"\"\"\n        symbol_list = list(self.index.keys())\n        return sorted(symbol_list, key=lambda x: str(x.dotpath))\n", "document": "# JSONVectorDatabase\n\n`JSONVectorDatabase` is a concrete class that provides a vector database that saves into a JSON file. It is a subclass of the `VectorDatabaseProvider` and allows adding, updating, and removing vector embeddings related to different symbols. The class offers methods to load and save the vector database from and into a JSON file, respectively.\n\n## Related Symbols\n\n- `automata_docs.core.database.provider.SymbolDatabaseProvider`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n\n## Example\n\nThe following example demonstrates how to create an instance of `JSONVectorDatabase` with a given file path, add symbols, save the database, and retrieve the saved embeddings.\n\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n\nfile_path = \"path/to/json/file.json\"\nvector_db = JSONVectorDatabase(file_path)\n\nsymbol_0 = Symbol.from_string(\"sample_symbol_0\")\nsymbol_1 = Symbol.from_string(\"sample_symbol_1\")\n\nembedding_0 = SymbolEmbedding(symbol_0, [1, 2, 3])\nembedding_1 = SymbolEmbedding(symbol_1, [1, 2, 3, 4])\n\nvector_db.add(embedding_0)\nvector_db.add(embedding_1)\n\nvector_db.save()\n\nloaded_embedding_0 = vector_db.get(symbol_0)\nloaded_embedding_1 = vector_db.get(symbol_1)\n\nprint(loaded_embedding_0.vector)\nprint(loaded_embedding_1.vector)\n```\n\n## Limitations\n\nThe primary limitation of `JSONVectorDatabase` is that it currently does not implement the `calculate_similarity` method, which is meant to calculate the similarity between a given vector and the vectors in the database. Additionally, the storage format is limited to JSON only, and there is no support for other formats, such as binary file formats which can provide better performance and space-efficiency for large vector databases.\n\n## Follow-up Questions:\n\n- What is the directory structure expected of the JSON files used by this vector database?\n- What is the specific similarity measure intended to be used when implementing the `calculate_similarity` method?", "summary": "`JSONVectorDatabase` is a concrete class deriving from `VectorDatabaseProvider` that enables adding, updating, and removing vector embeddings related to symbols and manages them in a JSON file. It provides methods for loading and saving the vector database from and into a JSON file. However, it currently does not implement the `calculate_similarity` method and is limited to the JSON storage format.\n\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n\nfile_path = \"path/to/json/file.json\"\nvector_db = JSONVectorDatabase(file_path)\nsymbol_0, symbol_1 = Symbol.from_string(\"sample_symbol_0\"), Symbol.from_string(\"sample_symbol_1\")\nembedding_0, embedding_1 = SymbolEmbedding(symbol_0, [1, 2, 3]), SymbolEmbedding(symbol_1, [1, 2, 3, 4])\nvector_db.add(embedding_0), vector_db.add(embedding_1), vector_db.save()\nprint(vector_db.get(symbol_0).vector), print(vector_db.get(symbol_1).vector)\n```", "context": "\n    Generate the documentation for JSONVectorDatabase using the context shown below -\n  Building context for primary symbol - automata_docs.core.database.vector.JSONVectorDatabase -\n  \n    Import Statements:\n      import abc\n      import logging\n      import logging.config\n      import jsonpickle\n      import numpy as np\n      from typing import Dict, List\n      from automata_docs.core.database.provider import SymbolDatabaseProvider\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      \n    Class Docstring:\n      Concrete class to provide a vector database that saves into a JSON file.\n      \n    Methods:\n      def __init__(self, file_path: str):\n              \"\"\"\n              Args:\n                  file_path: The path to the JSON file to save the vector database to\n              \"\"\"\n              self.file_path = file_path\n              self.data: List[SymbolEmbedding] = []\n              self.index: Dict[Symbol, int] = {}\n              self.load()\n      \n          \n      def add(self, embedding: SymbolEmbedding):\n              \"\"\"\n              Adds a new vector to the database\n      \n              Args:\n                  embedding: The vector to add\n              \"\"\"\n              self.data.append(embedding)\n              self.index[embedding.symbol] = len(self.data) - 1\n      \n          \n      def calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]:\n              # Implement the logic to calculate similarity between the given vector and vectors in the data.\n              # This will depend on how the data is structured and the specific similarity measure to be used (e.g., cosine similarity).\n              # Here, just returning the data as a placeholder.\n              # return self.data\n              raise NotImplementedError\n      \n          \n      def clear(self):\n              \"\"\"Removes all vectors from the database\"\"\"\n              self.data = []\n              self.index = {}\n      \n          \n      def contains(self, symbol: Symbol) -> bool:\n              \"\"\"\n              Checks if the database contains a vector for the given symbol\n      \n              Args:\n                  symbol: The symbol to check\n      \n              Returns:\n                  True if the database contains a vector for the given symbol, False otherwise\n              \"\"\"\n              return symbol in self.index\n      \n          \n      def discard(self, symbol: Symbol):\n              \"\"\"\n              Discards a vector from the database\n      \n              Args:\n                  symbol: The symbol to discard\n      \n              Raises:\n                  KeyError: If the symbol is not in the database\n              \"\"\"\n              if symbol not in self.index:\n                  raise KeyError(\"Symbol %s not in database\" % symbol)\n              index = self.index[symbol]\n              del self.data[index]\n              del self.index[symbol]\n      \n          \n      def get(self, symbol: Symbol) -> SymbolEmbedding:\n              \"\"\"\n              Gets the vector for the given symbol\n      \n              Args:\n                  symbol: The symbol to get the vector for\n      \n              Raises:\n                  KeyError: If the symbol is not in the database\n              \"\"\"\n              if symbol not in self.index:\n                  raise KeyError(\"Symbol %s not in database\" % symbol)\n              return self.data[self.index[symbol]]\n      \n          \n      def get_all_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Gets all symbols in the database\n      \n              Returns:\n                  A list of all symbols in the database\n              \"\"\"\n              symbol_list = list(self.index.keys())\n              return sorted(symbol_list, key=lambda x: str(x.dotpath))\n      \n      def load(self):\n              \"\"\"Loads the vector database from the JSON file\"\"\"\n              try:\n                  with open(self.file_path, \"r\") as file:\n                      self.data = jsonpickle.decode(file.read())\n                      self.index = {embedding.symbol: i for i, embedding in enumerate(self.data)}\n              except FileNotFoundError:\n                  logger.info(\"Creating new vector embedding db at %s\" % self.file_path)\n      \n          \n      def save(self):\n              \"\"\"Saves the vector database to the JSON file\"\"\"\n              with open(self.file_path, \"w\") as file:\n                  encoded_data = jsonpickle.encode(self.data)\n                  file.write(encoded_data)\n      \n          \n      def update(self, embedding: SymbolEmbedding):\n              \"\"\"\n              Updates an embedding in the database\n      \n              Args:\n                  embedding: The vector to update\n      \n              Raises:\n                  KeyError: If the symbol is not in the database\n              \"\"\"\n              if embedding.symbol not in self.index:\n                  raise KeyError(\"Symbol %s not in database\" % embedding.symbol)\n              self.data[self.index[embedding.symbol]] = embedding\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_database_vector.test_init_vector\n    \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_load\n    \n        def test_load(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n            vector_db_2 = JSONVectorDatabase(temp_output_filename)\n        \n            embedded_symbol_0 = vector_db_2.get(symbols[0])\n            embedded_symbol_1 = vector_db_2.get(symbols[1])\n        \n        \n    automata_docs.tests.unit.test_database_vector.test_save\n    \n        def test_save(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_add_symbols\n    \n        def test_add_symbols(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_delete_symbol\n    \n        def test_delete_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, [1, 2, 3])\n            vector_db.add(embedded_symbol)\n            vector_db.discard(symbol)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_add_symbol\n    \n        def test_add_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, [1, 2, 3])\n            vector_db.add(embedded_symbol)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_lookup_symbol\n    \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.database.vector.VectorDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.database.vector`/VectorDatabaseProvider#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.database.vector", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "VectorDatabaseProvider", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class VectorDatabaseProvider(SymbolDatabaseProvider):\n    \"\"\"\n    Abstract base class for different types of vector database providers.\n    \"\"\"\n\n    @abc.abstractmethod\n    def calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]:\n        \"\"\"\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_all_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \"\"\"\n        pass\n\n\n", "document": "# VectorDatabaseProvider\n\n`VectorDatabaseProvider` is an abstract base class for different types of vector database providers which allows you to efficiently calculate similarity between a given symbol embedding and all other embeddings stored in the database, as well as retrieve all available symbols stored in the database.\n\n## Overview\n\nThe main purpose of `VectorDatabaseProvider` is to define the interface for interacting with different types of vector databases. It provides two main abstract methods, `calculate_similarity`, which calculates the similarity between the given vector and vectors in the database, and `get_all_symbols`, which returns all the symbols stored in the database.\n\n`VectorDatabaseProvider` is usually subclassed to create concrete implementations for specific vector database types, such as JSONVectorDatabase, which is a concrete implementation that uses a JSON file to store and load the vector database.\n\nRelated symbols and classes include Symbol, SymbolEmbedding, and JSONVectorDatabase.\n\n## Related Symbols\n\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n\n## Example\n\nThe following example demonstrates how to create an instance of `JSONVectorDatabase` (a specific subclass of `VectorDatabaseProvider`) and use its methods to manage a vector database.\n\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.symbol.symbol_types import Symbol\nimport numpy as np\n\n# Initialize a JSONVectorDatabase with a path to a JSON file\nfile_path = \"vector_database.json\"\nvector_db = JSONVectorDatabase(file_path)\n\n# Add a new symbol embedding to the database\nsymbol = Symbol.from_string(\"example.symbol\")\nvector = np.random.randn(300)\nembedding = SymbolEmbedding(symbol, vector)\nvector_db.add(embedding)\n\n# Calculate the similarity between a new vector and the database vectors\nquery_vector = np.random.randn(300)\nsimilarity_results = vector_db.calculate_similarity(query_vector)\n\n# Retrieve all symbols in the database\nall_symbols = vector_db.get_all_symbols()\n```\n\n## Limitations\n\nThe primary limitation of `VectorDatabaseProvider` is that it is an abstract base class and must be subclassed for specific vector database implementations. Additionally, while it provides the method signatures for calculating similarity and retrieving all symbols, the actual implementation details and performance depend upon the underlying vector database implementation.\n\n## Follow-up Questions:\n\n- How can we implement the `VectorDatabaseProvider` with different storage backends like databases and cloud storages?\n- What is the performance comparison between different vector database implementations, and how can it be improved?", "summary": "`VectorDatabaseProvider` is an abstract base class designed for various vector database providers to efficiently compute similarity between a given symbol embedding and all other embeddings stored in the database, as well as retrieve all available symbols from the database. It mainly defines the interface to interact with different types of vector databases through two abstract methods, `calculate_similarity` and `get_all_symbols`. Typically, `VectorDatabaseProvider` is subclassed to create concrete implementations, such as JSONVectorDatabase, a specific subclass that uses a JSON file for storing and loading the vector database. While the primary limitation of `VectorDatabaseProvider` is that it must be subclassed for specific implementations, its practical effectiveness heavily relies on the underlying vector database implementation.", "context": "\n    Generate the documentation for VectorDatabaseProvider using the context shown below -\n  Building context for primary symbol - automata_docs.core.database.vector.VectorDatabaseProvider -\n  \n    Import Statements:\n      import abc\n      import logging\n      import logging.config\n      import jsonpickle\n      import numpy as np\n      from typing import Dict, List\n      from automata_docs.core.database.provider import SymbolDatabaseProvider\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      \n    Class Docstring:\n      Abstract base class for different types of vector database providers.\n      \n    Methods:\n      @abc.abstractmethod\n          def calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]:\n              \"\"\"\n              Abstract method to calculate the similarity between the given vector and vectors in the database.\n              \"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def get_all_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Abstract method to calculate the similarity between the given vector and vectors in the database.\n              \"\"\"\n              pass\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.database.provider.SymbolDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of database providers.\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> Any\n        \n        load(self) -> Any\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.tests.unit.test_database_vector.test_init_vector\n    \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.database.vector.JSONVectorDatabase.add\n    \n      Class Docstring:\n        Adds a new vector to the database\n        \n        Args:\n        embedding: The vector to add\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler.__init__\n    \n      Class Docstring:\n        An abstract constructor for EmbeddingHandler\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.embedding.embedding_types`/EmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "EmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class EmbeddingHandler(abc.ABC):\n    \"\"\"An abstract class to handle the embedding of symbols\"\"\"\n\n    @abc.abstractmethod\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: Optional[EmbeddingsProvider],\n    ):\n        \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n        \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_all_supported_symbols(self) -> List[Symbol]:\n        \"\"\"An abstract method to get all supported symbols\"\"\"\n        pass\n\n\n", "document": "# EmbeddingHandler\n\n`EmbeddingHandler` is an abstract class that defines the interface for handling the embeddings of symbols. It provides methods to get and update embeddings for a given symbol and is intended to be overridden by the specific implementation of embedding handlers in your application. The key methods include `get_all_supported_symbols`, `get_embedding`, and `update_embedding`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler`\n- `automata_docs.core.database.vector.VectorDatabaseProvider`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n\n## Example\n\nThe following example demonstrates how to create a custom implementation of `EmbeddingHandler` in your application.\n\n```python\nimport numpy as np\nfrom automata_docs.core.database.vector import VectorDatabaseProvider\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\nfrom automata_docs.core.embedding.embedding_types import EmbeddingHandler\n\nclass MyEmbeddingHandler(EmbeddingHandler):\n    def __init__(self, embedding_db: VectorDatabaseProvider):\n        super().__init__(embedding_db)\n    \n    def get_all_supported_symbols(self) -> List[Symbol]:\n        # Implement method to return a list of all supported symbols\n        pass\n\n    def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n        # Implement method to get the embedding for a symbol\n        pass\n\n    def update_embedding(self, symbol: Symbol):\n        # Implement method to update the embedding for a symbol\n        pass\n```\n\nTo use this custom implementation in your application:\n\n```python\nmy_embedding_database = VectorDatabaseProvider()\nmy_embedding_handler = MyEmbeddingHandler(my_embedding_database)\n```\n\n## Limitations\n\nThe primary limitations of `EmbeddingHandler` include its reliance on a specific database provider (`VectorDatabaseProvider`) and the need for customization to fit your specific application requirements. The ability to customize this class provides flexibility, but may require additional work for users who need more general implementations.\n\n## Follow-up Questions:\n\n- What is the purpose of the `embedding_provider` attribute and the `EmbeddingsProvider` class?\n- How does the `EmbeddingHandler` connect to other components within the system, such as symbol representations and embedding retrieval?\n", "summary": "`EmbeddingHandler` is an abstract class that serves as an interface for handling symbol embeddings in an application. It includes key methods such as `get_all_supported_symbols`, `get_embedding`, and `update_embedding`, which need to be implemented by a custom embedding handler. An example of custom implementation is demonstrated in the code block, where the class `MyEmbeddingHandler` inherits from `EmbeddingHandler`. The main limitations of this class are its reliance on a specific database provider, `VectorDatabaseProvider`, and the need for customization to suit specific application requirements.", "context": "\n    Generate the documentation for EmbeddingHandler using the context shown below -\n  Building context for primary symbol - automata_docs.core.embedding.embedding_types.EmbeddingHandler -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict, List, Optional\n      from automata_docs.core.database.vector import VectorDatabaseProvider\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n    Class Docstring:\n      An abstract class to handle the embedding of symbols\n      \n    Methods:\n      @abc.abstractmethod\n          def __init__(\n              self,\n              embedding_db: VectorDatabaseProvider,\n              embedding_provider: Optional[EmbeddingsProvider],\n          ):\n              \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def get_all_supported_symbols(self) -> List[Symbol]:\n              \"\"\"An abstract method to get all supported symbols\"\"\"\n              pass\n      \n      \n      \n      @abc.abstractmethod\n          def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n              \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def update_embedding(self, symbol: Symbol):\n              \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n              pass\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.tests.unit.conftest.patch_get_embedding\n    \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler.__init__\n    \n      Class Docstring:\n        A constructor for SymbolEmbeddingHandler\n        \n        Args:\n        embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n        embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n    automata_docs.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.embedding.embedding_types.EmbeddingSimilarity.__init__\n    \n      Class Docstring:\n        An abstract constructor for EmbeddingSimilarity\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                symbol_embedding_manager: EmbeddingHandler,\n                norm_type: Optional[NormType],\n            ):\n                \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n                pass\n        \n            \n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n  Building context for dependencies -\n  \n    automata_docs.core.database.vector.VectorDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.embedding.embedding_types`/EmbeddingSimilarity#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "EmbeddingSimilarity", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class EmbeddingSimilarity(abc.ABC):\n    @abc.abstractmethod\n    def __init__(\n        self,\n        symbol_embedding_manager: EmbeddingHandler,\n        norm_type: Optional[NormType],\n    ):\n        \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_query_similarity_dict(self, query_text: str) -> Dict[Any, float]:\n        \"\"\"An abstract method to get the similarity between a query and all symbols\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Any, float]:\n        \"\"\"An abstract method to get the k nearest symbols to a query\"\"\"\n        pass\n", "document": "# EmbeddingSimilarity\n\n`EmbeddingSimilarity` is an abstract base class for calculating the similarity between a given query and embeddings of symbols. It is meant to be subclassed to implement the methods for calculating similarity and retrieving nearest symbols to a query based on their embeddings.\n\n## Overview\n\n`EmbeddingSimilarity` requires three main abstract methods to be implemented in a subclass:\n\n1. `__init__`: Initialize the `EmbeddingSimilarity` subclass with the required parameters, such as an `EmbeddingHandler`, and optionally a `NormType`.\n2. `get_nearest_entries_for_query`: Given a query and an integer `k_nearest`, return the `k_nearest` symbols that are most similar to the query, based on their embeddings.\n3. `get_query_similarity_dict`: Given a query, return a dictionary containing the similarity scores between the query and all available symbols.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.database.vector.VectorDatabaseProvider.calculate_similarity`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n\n## Example\n\nThe following is an example demonstrating how to create and use a custom `EmbeddingSimilarity` subclass to calculate similarities between a given query and available symbols.\n\n```python\nfrom automata_docs.core.embedding.embedding_types import EmbeddingSimilarity\nfrom automata_docs.core.symbol.symbol_types import Symbol\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n\nclass CustomEmbeddingSimilarity(EmbeddingSimilarity):\n    def __init__(self, symbol_embedding_manager, norm_type):\n        super().__init__(symbol_embedding_manager, norm_type)\n\n    def get_nearest_entries_for_query(self, query_text, k_nearest):\n        # Implement method to retrieve k_nearest symbols based on their embeddings\n        pass\n\n    def get_query_similarity_dict(self, query_text):\n        # Implement method to return a dictionary with similarity scores between the query and all available symbols\n        pass\n\n# Instantiate and use the custom subclass\nsymbol_similarity_instance = CustomEmbeddingSimilarity(symbol_embedding_manager, norm_type)\nnearest_entries = symbol_similarity_instance.get_nearest_entries_for_query(\"example query\", k_nearest=5)\nquery_similarity = symbol_similarity_instance.get_query_similarity_dict(\"example query\")\n```\n\n## Limitations\n\n`EmbeddingSimilarity` is an abstract base class and cannot be used directly. It must be subclassed, and the abstract methods must be implemented in the subclass to suit the requirements of the specific use case.\n\n## Follow-up Questions:\n\n- How can we handle different types of embeddings when calculating similarity in the subclass implementations?\n- Can we provide different similarity measures apart from cosine similarity when calculating the similarity between a query and embeddings of symbols?", "summary": "`EmbeddingSimilarity` is an abstract base class designed for calculating the similarity between a given query and embeddings of symbols. It requires three main abstract methods to be implemented in a subclass: `__init__` for initializing the subclass with required parameters, `get_nearest_entries_for_query` to return the `k_nearest` symbols most similar to a given query based on their embeddings, and `get_query_similarity_dict` to return a dictionary with similarity scores between the query and all available symbols. `EmbeddingSimilarity` must be subclassed, and its abstract methods must be implemented to suit the specific use case.\n\nExample:\n```python\nfrom automata_docs.core.embedding.embedding_types import EmbeddingSimilarity\nfrom automata_docs.core.symbol.symbol_types import Symbol\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n\nclass CustomEmbeddingSimilarity(EmbeddingSimilarity):\n    def __init__(self, symbol_embedding_manager, norm_type):\n        super().__init__(symbol_embedding_manager, norm_type)\n\n    def get_nearest_entries_for_query(self, query_text, k_nearest):\n        pass\n\n    def get_query_similarity_dict(self, query_text):\n        pass\n\nsymbol_similarity_instance = CustomEmbeddingSimilarity(symbol_embedding_manager, norm_type)\nnearest_entries = symbol_similarity_instance.get_nearest_entries_for_query(\"example query\", k_nearest=5)\nquery_similarity = symbol_similarity_instance.get_query_similarity_dict(\"example query\")\n```\n", "context": "\n    Generate the documentation for EmbeddingSimilarity using the context shown below -\n  Building context for primary symbol - automata_docs.core.embedding.embedding_types.EmbeddingSimilarity -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict, List, Optional\n      from automata_docs.core.database.vector import VectorDatabaseProvider\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n    Methods:\n      @abc.abstractmethod\n          def __init__(\n              self,\n              symbol_embedding_manager: EmbeddingHandler,\n              norm_type: Optional[NormType],\n          ):\n              \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Any, float]:\n              \"\"\"An abstract method to get the k nearest symbols to a query\"\"\"\n              pass\n      \n      @abc.abstractmethod\n          def get_query_similarity_dict(self, query_text: str) -> Dict[Any, float]:\n              \"\"\"An abstract method to get the similarity between a query and all symbols\"\"\"\n              pass\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity\n    \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.database.vector.VectorDatabaseProvider.calculate_similarity\n    \n      Class Docstring:\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.tests.unit.conftest.patch_get_embedding\n    \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n        \n    automata_docs.core.database.vector.VectorDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata_docs.tests.unit.test_symbol_similarity.test_get_nearest_symbols_for_query\n    \n        def test_get_nearest_symbols_for_query(\n            monkeypatch, mock_embedding, mock_simple_method_symbols, temp_output_filename\n        ):\n            # Mocking symbols and their embeddings\n            symbol1 = mock_simple_method_symbols[0]\n            symbol2 = mock_simple_method_symbols[1]\n            symbol3 = mock_simple_method_symbols[2]\n        \n            embedding1 = SymbolCodeEmbedding(\n                symbol=symbol1, vector=np.array([1, 0, 0, 0]), source_code=\"symbol1\"\n            )\n            embedding2 = SymbolCodeEmbedding(\n                symbol=symbol2, vector=np.array([0, 1, 0, 0]), source_code=\"symbol2\"\n            )\n            embedding3 = SymbolCodeEmbedding(\n                symbol=symbol3, vector=np.array([0, 0, 1, 0]), source_code=\"symbol3\"\n            )\n        \n            # Mock JSONVectorDatabase methods\n            embedding_db = JSONVectorDatabase(temp_output_filename)\n            embedding_db.add(embedding1)\n            embedding_db.add(embedding2)\n            embedding_db.add(embedding3)\n        \n            # Create an instance of the class\n            mock_provider = MagicMock(EmbeddingsProvider)\n            cem = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=mock_provider)\n        \n            symbol_similarity = SymbolSimilarity(cem)\n        \n            # Test with query_text that is most similar to symbol1\n            cem.embedding_provider.build_embedding.return_value = np.array([1, 0, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol1\", k=1)\n            assert list(result.keys()) == [symbol1]\n        \n            # Test with query_text that is most similar to symbol2\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 1, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol2\", k=1)\n            assert list(result.keys()) == [symbol2]\n        \n            # Test with query_text that is most similar to symbol3\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 0, 1, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol3\", k=1)\n            assert list(result.keys()) == [symbol3]\n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.NormType\n    \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.embedding.embedding_types`/EmbeddingsProvider#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "EmbeddingsProvider", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class EmbeddingsProvider:\n    \"\"\"A class to provide embeddings for symbols\"\"\"\n\n    def __init__(self):\n        if not openai.api_key:\n            from config import OPENAI_API_KEY\n\n            openai.api_key = OPENAI_API_KEY\n\n    def build_embedding(self, symbol_source: str) -> np.ndarray:\n        \"\"\"\n        Get the embedding for a symbol.\n        Args:\n            symbol_source (str): The source code of the symbol\n        Returns:\n            A numpy array representing the embedding\n        \"\"\"\n        # wait to import build_embedding to allow easy mocking of the function in tests.\n        from openai.embeddings_utils import get_embedding\n\n        return np.array(get_embedding(symbol_source, engine=\"text-embedding-ada-002\"))\n\n\n", "document": "# EmbeddingsProvider\n\n`EmbeddingsProvider` is a class to provide embeddings for symbols in an Automata Docs project. It offers a method to build a numpy array representing the embedding for a given source code of the symbol.\n\n## Overview\n\nThe `EmbeddingsProvider` class utilizes the OpenAI embeddings_utils to obtain embeddings for the given source code of symbols. It is designed to work alongside related classes like `SymbolCodeEmbeddingHandler` and `SymbolEmbedding`, allowing easy integration with the larger system to manage and process these embeddings.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following example demonstrates how to use the `EmbeddingsProvider` class to obtain the embedding for a given source code.\n\n```python\nimport numpy as np\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\n\nsource_code = \"def example_function():\\n    pass\"\nembeddings_provider = EmbeddingsProvider()\nembedding = embeddings_provider.build_embedding(source_code)\n\nassert isinstance(embedding, np.ndarray)\n```\n\n## Limitations\n\n`EmbeddingsProvider` relies on OpenAI's `embeddings_utils` to obtain embeddings, which requires an internet connection and API key. As a result, performance may be affected by network latency, and users need to have a valid OpenAI API key.\n\n## Follow-up Questions:\n\n- Can the `EmbeddingsProvider` class use other methods for obtaining embeddings besides OpenAI's `embeddings_utils`?", "summary": "The `EmbeddingsProvider` class is designed to provide embeddings for symbols in an Automata Docs project, utilizing OpenAI's `embeddings_utils`. It works with related classes, such as `SymbolCodeEmbeddingHandler` and `SymbolEmbedding`, ensuring seamless integration with the larger system. To use the `EmbeddingsProvider`, create an instance of the class and call the `build_embedding()` method with the source code as an argument, as shown in the following example:\n\n```python\nimport numpy as np\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\n\nsource_code = \"def example_function():\\n    pass\"\nembeddings_provider = EmbeddingsProvider()\nembedding = embeddings_provider.build_embedding(source_code)\n\nassert isinstance(embedding, np.ndarray)\n```\n\nNote that this class requires an internet connection and a valid OpenAI API key as it relies on OpenAI's `embeddings_utils`, which may impact performance due to network latency.", "context": "\n    Generate the documentation for EmbeddingsProvider using the context shown below -\n  Building context for primary symbol - automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict, List, Optional\n      from automata_docs.core.database.vector import VectorDatabaseProvider\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n    Class Docstring:\n      A class to provide embeddings for symbols\n      \n    Methods:\n      def __init__(self):\n              if not openai.api_key:\n                  from config import OPENAI_API_KEY\n      \n                  openai.api_key = OPENAI_API_KEY\n      \n          \n      def build_embedding(self, symbol_source: str) -> np.ndarray:\n              \"\"\"\n              Get the embedding for a symbol.\n              Args:\n                  symbol_source (str): The source code of the symbol\n              Returns:\n                  A numpy array representing the embedding\n              \"\"\"\n              # wait to import build_embedding to allow easy mocking of the function in tests.\n              from openai.embeddings_utils import get_embedding\n      \n              return np.array(get_embedding(symbol_source, engine=\"text-embedding-ada-002\"))\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler.__init__\n    \n      Class Docstring:\n        An abstract constructor for EmbeddingHandler\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    automata_docs.tests.unit.test_symbol_embedding.test_get_embedding\n    \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingsProvider methods\n            mock_provider = Mock(EmbeddingsProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], mock_embedding, \"symbol_source\"\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.database.provider.SymbolDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of database providers.\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> Any\n        \n        load(self) -> Any\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.database.vector.VectorDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.embedding.embedding_types`/NormType#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "NormType", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class NormType(Enum):\n    L1 = \"l1\"\n    L2 = \"l2\"\n    SOFTMAX = \"softmax\"\n\n\n", "document": "# NormType\n\n`NormType` is an enumeration in the `automata_docs.core.embedding.embedding_types` module. It represents different norm types that can be used for normalizing embeddings and calculating similarity between embeddings. `NormType` values are used as parameters for methods in related classes like `SymbolSimilarity` to specify which norm to use.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.database.vector.VectorDatabaseProvider`\n\n## Overview\n\n`NormType` enumeration includes the following members:\n\n- `NormType.L1`: Use L1 norm (also known as Manhattan distance) for normalization.\n- `NormType.L2`: Use L2 norm (also known as Euclidean distance) for normalization.\n- `NormType.SOFTMAX`: Use softmax normalization.\n\nThese norm types determine how to normalize embeddings and calculate the similarity between them for subsequent processing and comparisons.\n\n## Example\n\nThe following example demonstrates how to use `NormType` to initialize a `SymbolSimilarity` instance.\n\n```python\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.embedding.embedding_types import NormType\nfrom automata_docs.core.embedding.symbol_code_embedding_handler import SymbolCodeEmbeddingHandler\n\nsymbol_embedding_manager = SymbolCodeEmbeddingHandler()\nnorm_type = NormType.L2\nsymbol_similarity = SymbolSimilarity(symbol_embedding_manager, norm_type=norm_type)\n```\n\n## Limitations\n\n`NormType` is specific to the `automata_docs` package and may not be applicable or recognized in other contexts. Additionally, it only supports three norm types (L1, L2, and softmax). Any other norm types or custom normalization techniques would need to be implemented separately.\n\n## Follow-up Questions:\n\n- Are there plans to expand `NormType` with additional normalization options?", "summary": "`NormType` is an enumeration in the `automata_docs.core.embedding.embedding_types` module representing different norm types for normalizing embeddings and calculating similarity between them. It is used as a parameter in related classes like `SymbolSimilarity`. `NormType` includes L1, L2, and softmax normalization techniques. Here's an example of how to use `NormType` to initialize a `SymbolSimilarity` instance:\n\n```python\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.embedding.embedding_types import NormType\nfrom automata_docs.core.embedding.symbol_code_embedding_handler import SymbolCodeEmbeddingHandler\n\nsymbol_embedding_manager = SymbolCodeEmbeddingHandler()\nnorm_type = NormType.L2\nsymbol_similarity = SymbolSimilarity(symbol_embedding_manager, norm_type=norm_type)\n```\n\nNote that `NormType` is specific to the `automata_docs` package and might not be applicable in other contexts. It supports three norm types, and custom normalization techniques would need separate implementation.", "context": "\n    Generate the documentation for NormType using the context shown below -\n  Building context for primary symbol - automata_docs.core.embedding.embedding_types.NormType -\n  \n    Import Statements:\n      import abc\n      import logging\n      import numpy as np\n      import openai\n      from enum import Enum\n      from typing import Any, Dict, List, Optional\n      from automata_docs.core.database.vector import VectorDatabaseProvider\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\n      from config import OPENAI_API_KEY\n      from openai.embeddings_utils import get_embedding\n      \n  Building context for related symbols -\n  \n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity\n    \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity._normalize_embeddings\n    \n      Class Docstring:\n        Normalize the embeddings.\n        Args:\n        embeddings (np.ndarray): The embeddings\n        norm_type (NormType): The type of normalization (L1, L2, or softmax)\n        Returns:\n        The normalized embeddings\n        \n      Methods:\n    automata_docs.core.embedding.embedding_types.EmbeddingSimilarity.__init__\n    \n      Class Docstring:\n        An abstract constructor for EmbeddingSimilarity\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                symbol_embedding_manager: EmbeddingHandler,\n                norm_type: Optional[NormType],\n            ):\n                \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n                pass\n        \n            \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind\n    \n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity.__init__\n    \n      Class Docstring:\n        Initialize SymbolSimilarity\n        \n        Args:\n        symbol_embedding_manager: A CodeEmbeddingManager\n        norm_type (NormType): The norm type to use for calculating similarity\n        \n        Returns:\n        An instance of SymbolSimilarity\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY.__init__\n    \n        def __init__(self):\n                pass\n        \n            \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.embedding.symbol_embedding`/SymbolCodeEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.symbol_embedding", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolCodeEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolCodeEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n    ):\n        \"\"\"\n        A constructor for SymbolCodeEmbeddingHandler\n\n        Args:\n            embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n            embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                get the embeddings from\n        \"\"\"\n        super().__init__(embedding_db, embedding_provider)\n\n    def get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding:\n        \"\"\"\n        Get the embedding of a symbol.\n\n        Args:\n            symbol (Symbol): Symbol to get the embedding for\n\n        Returns:\n            Embedding: The embedding of the symbol\n        \"\"\"\n        return self.embedding_db.get(symbol)\n\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"\n        Update the embedding map with new symbols.\n\n        Args:\n            symbols_to_update (List[Symbol]): List of symbols to update\n        \"\"\"\n        from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n            convert_to_fst_object,\n        )\n\n        desc_path_to_symbol = {\n            \".\".join([desc.name for desc in symbol.descriptors]): symbol\n            for symbol in self.embedding_db.get_all_symbols()\n        }\n        try:\n            symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n            symbol_source = str(convert_to_fst_object(symbol))\n            if symbol_desc_identifier in desc_path_to_symbol:\n                logger.info(\n                    f\"Embedding already exists for symbol {symbol_desc_identifier}, updating ...\"\n                )\n                existing_embedding = self.embedding_db.get(\n                    desc_path_to_symbol[symbol_desc_identifier]\n                )\n\n                if isinstance(existing_embedding, SymbolCodeEmbedding):\n                    # If the symbol is already in the embedding map, check if the source code is the same\n                    # If not, we can update the embedding\n                    if existing_embedding.source_code != symbol_source:\n                        logger.debug(\"Regenerating the embedding\")\n                        new_embedding = self.embedding_provider.build_embedding(symbol_source)\n                        existing_embedding.vector = new_embedding\n                        existing_embedding.source_code = symbol_source\n                        # Update the embedding in the database\n                        self.embedding_db.update(existing_embedding)\n                    elif existing_embedding.symbol != symbol:\n                        existing_embedding.symbol = symbol\n                        self.embedding_db.discard(existing_embedding.symbol)\n                        self.embedding_db.add(existing_embedding)\n                    # Otherwise, we don't need to do anything\n                    else:\n                        pass\n            else:\n                # If the symbol does not exist in the embedding map, we add a new embedding\n                logger.info(\n                    f\"Embedding does not exist for symbol {symbol_desc_identifier}, updating ...\"\n                )\n                symbol_embedding = self.embedding_provider.build_embedding(symbol_source)\n\n                new_embedding = SymbolCodeEmbedding(\n                    symbol=symbol,\n                    vector=symbol_embedding,\n                    source_code=symbol_source,\n                )\n\n                # Add the new embedding to the database\n                self.embedding_db.add(new_embedding)\n        except Exception as e:\n            if \"local\" not in symbol.uri:\n                logger.error(\"Updating embedding for symbol: %s failed with %s\" % (symbol, e))\n\n\n", "document": "# SymbolCodeEmbeddingHandler\n\n`SymbolCodeEmbeddingHandler` is a class that handles the embedding of code symbols. It extends `EmbeddingHandler` abstract base class and has methods to get, update, and calculate similarity of symbol embeddings.\n\n## Overview\n\n`SymbolCodeEmbeddingHandler` provides a way to interact with a symbol's code embedding. It uses an `embedding_db` (VectorDatabaseProvider) to store the embeddings, and an optional `embedding_provider` (EmbeddingsProvider) to get the embeddings from. The class offers methods to get an existing embedding, update the embedding with new symbols, and calculate similarity between symbols based on their embeddings.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.embedding_types.EmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `SymbolCodeEmbeddingHandler` using a `VectorDatabaseProvider` and update the embedding for a given symbol.\n\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\nfrom automata_docs.core.database.vector import JSONVectorDatabase\n\n# Initialize a JSONVectorDatabase to store the embeddings\nembedding_db = JSONVectorDatabase(<JSON_FILE_PATH>)\n\n# Initialize the SymbolCodeEmbeddingHandler\nembedding_handler = SymbolCodeEmbeddingHandler(embedding_db)\n\n# Update the embedding for a given symbol\nsymbol = SymbolGraph().get_main_class_symbol('automata_docs.core.agent.automata_agent.snippets_classes')\nembedding_handler.update_embedding(symbol)\n```\n\n## Limitations\n\n`SymbolCodeEmbeddingHandler` relies on `VectorDatabaseProvider` to store the embeddings and retrieve them when required. The performance of the handler is tightly coupled with the performance of the `VectorDatabaseProvider`. Moreover, the handler uses pre-trained models to generate embeddings, and the quality of retrieved embeddings depends on the underlying machine learning models.\n\n## Follow-up Questions:\n\n- Can custom embeddings be provided for symbols instead of relying on pre-trained models in the `SymbolCodeEmbeddingHandler` class?\n\nPlease consult the source code or unit tests for explanations on the other methods of the class, such as `get_embedding`.", "summary": "The `SymbolCodeEmbeddingHandler` class provides a way to handle the embedding of code symbols by extending the `EmbeddingHandler` abstract base class. It interacts with a symbol's code embedding using an `embedding_db` (VectorDatabaseProvider) to store the embeddings, and an optional `embedding_provider` (EmbeddingsProvider) to retrieve them. The handler offers methods to get existing embeddings, update them with new symbols, and calculate similarity between symbols based on their embeddings. It is important to note that the handler's performance relies on the `VectorDatabaseProvider`, and the quality of retrieved embeddings depends on the underlying machine learning models.\n\nFor example, to create an instance of `SymbolCodeEmbeddingHandler` using a `VectorDatabaseProvider` and update the embedding for a given symbol:\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\nfrom automata_docs.core.database.vector import JSONVectorDatabase\n\n# Initialize a JSONVectorDatabase to store the embeddings\nembedding_db = JSONVectorDatabase(<JSON_FILE_PATH>)\n\n# Initialize the SymbolCodeEmbeddingHandler\nembedding_handler = SymbolCodeEmbeddingHandler(embedding_db)\n\n# Update the embedding for a given symbol\nsymbol = SymbolGraph().get_main_class_symbol('automata_docs.core.agent.automata_agent.snippets_classes')\nembedding_handler.update_embedding(symbol)\n```", "context": "\n    Generate the documentation for SymbolCodeEmbeddingHandler using the context shown below -\n  Building context for primary symbol - automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n  \n    Import Statements:\n      import abc\n      import logging\n      import os\n      import openai\n      from typing import List, Optional\n      from jinja2 import Template\n      from automata_docs.config.config_enums import ConfigCategory\n      from automata_docs.config.prompt.docs import DEFAULT_DOC_GENERATION_PROMPT\n      from automata_docs.core.context.py_context.retriever import PyContextRetriever\n      from automata_docs.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n      from automata_docs.core.symbol.graph import SymbolGraph\n      from automata_docs.core.symbol.symbol_types import (\n          Symbol,\n          SymbolCodeEmbedding,\n          SymbolDocEmbedding,\n          SymbolEmbedding,\n      )\n      from automata_docs.core.utils import config_fpath\n      from .embedding_types import EmbeddingHandler, EmbeddingsProvider\n      from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n      from automata_docs.core.symbol.search.rank import SymbolRankConfig\n      from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n      from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n    Methods:\n      def __init__(\n              self,\n              embedding_db: VectorDatabaseProvider,\n              embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n          ):\n              \"\"\"\n              A constructor for SymbolCodeEmbeddingHandler\n      \n              Args:\n                  embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                  embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                      get the embeddings from\n              \"\"\"\n              super().__init__(embedding_db, embedding_provider)\n      \n          \n      def get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding:\n              \"\"\"\n              Get the embedding of a symbol.\n      \n              Args:\n                  symbol (Symbol): Symbol to get the embedding for\n      \n              Returns:\n                  Embedding: The embedding of the symbol\n              \"\"\"\n              return self.embedding_db.get(symbol)\n      \n          \n      def update_embedding(self, symbol: Symbol):\n              \"\"\"\n              Update the embedding map with new symbols.\n      \n              Args:\n                  symbols_to_update (List[Symbol]): List of symbols to update\n              \"\"\"\n              from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n              desc_path_to_symbol = {\n                  \".\".join([desc.name for desc in symbol.descriptors]): symbol\n                  for symbol in self.embedding_db.get_all_symbols()\n              }\n              try:\n                  symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n                  symbol_source = str(convert_to_fst_object(symbol))\n                  if symbol_desc_identifier in desc_path_to_symbol:\n                      logger.info(\n                          f\"Embedding already exists for symbol {symbol_desc_identifier}, updating ...\"\n                      )\n                      existing_embedding = self.embedding_db.get(\n                          desc_path_to_symbol[symbol_desc_identifier]\n                      )\n      \n                      if isinstance(existing_embedding, SymbolCodeEmbedding):\n                          # If the symbol is already in the embedding map, check if the source code is the same\n                          # If not, we can update the embedding\n                          if existing_embedding.source_code != symbol_source:\n                              logger.debug(\"Regenerating the embedding\")\n                              new_embedding = self.embedding_provider.build_embedding(symbol_source)\n                              existing_embedding.vector = new_embedding\n                              existing_embedding.source_code = symbol_source\n                              # Update the embedding in the database\n                              self.embedding_db.update(existing_embedding)\n                          elif existing_embedding.symbol != symbol:\n                              existing_embedding.symbol = symbol\n                              self.embedding_db.discard(existing_embedding.symbol)\n                              self.embedding_db.add(existing_embedding)\n                          # Otherwise, we don't need to do anything\n                          else:\n                              pass\n                  else:\n                      # If the symbol does not exist in the embedding map, we add a new embedding\n                      logger.info(\n                          f\"Embedding does not exist for symbol {symbol_desc_identifier}, updating ...\"\n                      )\n                      symbol_embedding = self.embedding_provider.build_embedding(symbol_source)\n      \n                      new_embedding = SymbolCodeEmbedding(\n                          symbol=symbol,\n                          vector=symbol_embedding,\n                          source_code=symbol_source,\n                      )\n      \n                      # Add the new embedding to the database\n                      self.embedding_db.add(new_embedding)\n              except Exception as e:\n                  if \"local\" not in symbol.uri:\n                      logger.error(\"Updating embedding for symbol: %s failed with %s\" % (symbol, e))\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    automata_docs.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.build_symbol_doc_embedding\n    \n      Methods:\n        build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_summary(input_doc: str) -> str\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.__init__\n    \n      Class Docstring:\n        A constructor for SymbolCodeEmbeddingHandler\n        \n        Args:\n        embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n        embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n        code_embedding_fpath (Optional[str]): The path to the code embedding file\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n  Building context for dependencies -\n  \n    automata_docs.core.database.vector.VectorDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata_docs.core.database.provider.SymbolDatabaseProvider.discard\n    \n      Class Docstring:\n        Abstract method to discard a specific embedding.\n        \n      Methods:\n        discard(self, symbol: Symbol) -> None\n        \n    automata_docs.core.database.provider.SymbolDatabaseProvider.update\n    \n      Class Docstring:\n        Abstract method to update an existing embedding.\n        \n      Methods:\n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider.build_embedding\n    \n      Class Docstring:\n        Get the embedding for a symbol.\n        Args:\n        symbol_source (str): The source code of the symbol\n        Returns:\n        A numpy array representing the embedding\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.database.vector.VectorDatabaseProvider.get_all_symbols\n    \n      Class Docstring:\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \n      Methods:\n        get_all_symbols(self) -> List[Symbol]\n        \n    automata_docs.core.database.provider.SymbolDatabaseProvider.get\n    \n      Class Docstring:\n        Abstract method to get a specific embedding.\n        \n      Methods:\n        get(self, symbol: Symbol) -> Any\n        \n    automata_docs.core.database.provider.SymbolDatabaseProvider.add\n    \n      Class Docstring:\n        Abstract method to add an embedding to the database.\n        \n      Methods:\n        add(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler.__init__\n    \n      Class Docstring:\n        A constructor for SymbolEmbeddingHandler\n        \n        Args:\n        embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n        embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.embedding.symbol_embedding`/SymbolDocEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.symbol_embedding", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDocEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDocEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n        code_embedding_fpath: Optional[str] = None,\n    ):\n        \"\"\"\n        A constructor for SymbolCodeEmbeddingHandler\n\n        Args:\n            embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n            embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n            code_embedding_fpath (Optional[str]): The path to the code embedding file\n        \"\"\"\n        from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata_docs.core.symbol.search.rank import SymbolRankConfig\n        from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n\n        super().__init__(embedding_db, embedding_provider)\n        if not code_embedding_fpath:\n            code_embedding_fpath = os.path.join(\n                config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n            )\n\n        graph = SymbolGraph()\n        subgraph = graph.get_rankable_symbol_subgraph()\n\n        code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n        code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n        symbol_similarity = SymbolSimilarity(code_embedding_handler)\n        self.graph = graph\n        self.symbol_search = SymbolSearch(\n            graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n        )\n\n    def get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding:\n        \"\"\"\n        Get the embedding of a symbol.\n        Args:\n            symbol (Symbol): Symbol to get the embedding for\n        Returns:\n            SymbolDocEmbedding: The embedding of the symbol documentation\n        \"\"\"\n        return self.embedding_db.get(symbol)\n\n    def build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding:\n        abbreviated_selected_symbol = symbol.uri.split(\"/\")[1].split(\"#\")[0]\n\n        def get_doc(prompt: str) -> str:\n            completion = openai.ChatCompletion.create(\n                model=\"gpt-4\",\n                messages=[\n                    {\n                        \"role\": \"user\",\n                        \"content\": prompt,\n                    }\n                ],\n            )\n            if not completion.choices:\n                return \"Error: No completion found\"\n\n            return completion.choices[0][\"message\"][\"content\"]\n\n        def get_summary(input_doc: str) -> str:\n            completion = openai.ChatCompletion.create(\n                model=\"gpt-4\",\n                messages=[\n                    {\n                        \"role\": \"user\",\n                        \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                    }\n                ],\n            )\n            if not completion.choices:\n                return \"Error: No completion found\"\n\n            return completion.choices[0][\"message\"][\"content\"]\n\n        # Splice the search results on the symbol\n        # with the search results biased on tests\n        # this is to get bias towards specific examples for the documentation\n        search_results_0 = self.symbol_search.symbol_rank_search(f\"{abbreviated_selected_symbol}\")\n        search_results_1 = self.symbol_search.symbol_rank_search(\n            f\"{abbreviated_selected_symbol} tests or conftest\"\n        )\n\n        search_list: List[Symbol] = []\n        for i in range(len(search_results_0)):\n            set_list = set(search_list)\n            if search_results_0[i] not in set_list:\n                search_list.append(search_results_0[i][0])\n            elif search_results_1[i] not in set_list:\n                search_list.append(search_results_1[i][0])\n\n        retriever = PyContextRetriever(self.graph)\n        retriever.process_symbol(symbol, search_list)\n        print(\"retriever.get_context_buffer(): \", retriever.get_context_buffer())\n\n        prompt = Template(DEFAULT_DOC_GENERATION_PROMPT).render(\n            symbol_dotpath=abbreviated_selected_symbol,\n            symbol_context=retriever.get_context_buffer(),\n        )\n\n        document = get_doc(prompt)\n        summary = get_summary(document)\n        embedding = self.embedding_provider.build_embedding(document)\n\n        return SymbolDocEmbedding(\n            symbol,\n            vector=embedding,\n            source_code=source_code,\n            document=document,\n            summary=summary,\n            context=prompt,\n        )\n\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"\n        Update the embedding map with new symbols.\n\n        Args:\n            symbols_to_update (List[Symbol]): List of symbols to update\n        Returns:\n            None\n        \"\"\"\n        from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n            convert_to_fst_object,\n        )\n\n        desc_path_to_symbol = {\n            \".\".join([desc.name for desc in symbol.descriptors]): symbol\n            for symbol in self.embedding_db.get_all_symbols()\n        }\n        try:\n            symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n            symbol_source_obj = convert_to_fst_object(symbol)\n            print(\"calling update embedding..\")\n            if symbol_desc_identifier in desc_path_to_symbol:\n                print(\"passing ...\")\n                pass\n            else:\n                new_embedding = self.build_symbol_doc_embedding(symbol, str(symbol_source_obj))\n                self.embedding_db.add(new_embedding)\n        except Exception as e:\n            logger.error(\"Failed to get source code for symbol %s\" % symbol)\n", "document": "# SymbolDocEmbeddingHandler\n\n`SymbolDocEmbeddingHandler` is a class responsible for handling the generation, retrieval, and updating of symbol documentation embeddings using GPT-4-based language models. It works with a `VectorDatabaseProvider` to store embeddings, an `EmbeddingsProvider` to obtain embeddings from GPT-4, and integrates with `SymbolGraph` and `SymbolSearch` for context building and symbol searching.\n\n## Overview\n\nThe primary functionality of `SymbolDocEmbeddingHandler` includes the generation of a symbol's documentation using a GPT-4 language model, the retrieval and updating of symbol embeddings, and the creation of a summarized version of the documentation. It works with a `VectorDatabaseProvider` to store the embeddings and an `EmbeddingsProvider` to obtain the embeddings from GPT-4. Additionally, it leverages `SymbolGraph` and `SymbolSearch` functionalities to create a context for generating more relevant and specific documentation.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolDocEmbedding`\n- `automata_docs.core.embedding.embedding_types.EmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `SymbolDocEmbeddingHandler`, retrieve a symbol's documentation embedding, and update a symbol.\n\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.embedding.symbol_embedding import SymbolDocEmbeddingHandler\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\nvector_database = JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\")\nembedding_handler = SymbolDocEmbeddingHandler(vector_database)\n\nsymbol = Symbol.from_string(\"some-symbol-string\")\nsymbol_embedding = embedding_handler.get_embedding(symbol)\n\n# Update the symbol if needed\nembedding_handler.update_embedding(symbol)\n```\n\n## Limitations\n\nThe primary limitations of `SymbolDocEmbeddingHandler` include:\n\n1. The reliance on GPT-4 for generating the symbol documentation, which may not always provide the most accurate or optimal results.\n2. The existing search and context building functionalities may not always include the most relevant context for generating documentation.\n\n## Follow-up Questions:\n\n- Can we improve the integration between context building and symbol search to provide more accurate and relevant documentation context?\n- Are there any strategies to improve the performance of GPT-4 in generating symbol documentation and summary?", "summary": "The `SymbolDocEmbeddingHandler` class is responsible for managing symbol documentation embeddings using GPT-4-based language models. Its primary functionalities include generating, retrieving, and updating symbol documentation embeddings, as well as creating summarized versions of the documentation. It works in conjunction with `VectorDatabaseProvider` to store the embeddings and `EmbeddingsProvider` to obtain them from GPT-4. Additionally, it utilizes `SymbolGraph` and `SymbolSearch` for context building and symbol searching. The main limitations of `SymbolDocEmbeddingHandler` are its reliance on GPT-4, which may not always yield accurate results, and the possible irrelevance of search and context building functionalities.\n\nExample Usage:\n\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.embedding.symbol_embedding import SymbolDocEmbeddingHandler\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\nvector_database = JSONVectorDatabase(\"path/to/symbol_doc_embedding.json\")\nembedding_handler = SymbolDocEmbeddingHandler(vector_database)\n\nsymbol = Symbol.from_string(\"some-symbol-string\")\nsymbol_embedding = embedding_handler.get_embedding(symbol)\n\n# Update the symbol if needed\nembedding_handler.update_embedding(symbol)\n```", "context": "\n    Generate the documentation for SymbolDocEmbeddingHandler using the context shown below -\n  Building context for primary symbol - automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n  \n    Import Statements:\n      import abc\n      import logging\n      import os\n      import openai\n      from typing import List, Optional\n      from jinja2 import Template\n      from automata_docs.config.config_enums import ConfigCategory\n      from automata_docs.config.prompt.docs import DEFAULT_DOC_GENERATION_PROMPT\n      from automata_docs.core.context.py_context.retriever import PyContextRetriever\n      from automata_docs.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n      from automata_docs.core.symbol.graph import SymbolGraph\n      from automata_docs.core.symbol.symbol_types import (\n          Symbol,\n          SymbolCodeEmbedding,\n          SymbolDocEmbedding,\n          SymbolEmbedding,\n      )\n      from automata_docs.core.utils import config_fpath\n      from .embedding_types import EmbeddingHandler, EmbeddingsProvider\n      from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n      from automata_docs.core.symbol.search.rank import SymbolRankConfig\n      from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n      from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n    Methods:\n      def __init__(\n              self,\n              embedding_db: VectorDatabaseProvider,\n              embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n              code_embedding_fpath: Optional[str] = None,\n          ):\n              \"\"\"\n              A constructor for SymbolCodeEmbeddingHandler\n      \n              Args:\n                  embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                  embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                  code_embedding_fpath (Optional[str]): The path to the code embedding file\n              \"\"\"\n              from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n              from automata_docs.core.symbol.search.rank import SymbolRankConfig\n              from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n      \n              super().__init__(embedding_db, embedding_provider)\n              if not code_embedding_fpath:\n                  code_embedding_fpath = os.path.join(\n                      config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                  )\n      \n              graph = SymbolGraph()\n              subgraph = graph.get_rankable_symbol_subgraph()\n      \n              code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n              code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n              symbol_similarity = SymbolSimilarity(code_embedding_handler)\n              self.graph = graph\n              self.symbol_search = SymbolSearch(\n                  graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n              )\n      \n          \n      def build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding:\n              abbreviated_selected_symbol = symbol.uri.split(\"/\")[1].split(\"#\")[0]\n      \n              def get_doc(prompt: str) -> str:\n                  completion = openai.ChatCompletion.create(\n                      model=\"gpt-4\",\n                      messages=[\n                          {\n                              \"role\": \"user\",\n                              \"content\": prompt,\n                          }\n                      ],\n                  )\n                  if not completion.choices:\n                      return \"Error: No completion found\"\n      \n                  return completion.choices[0][\"message\"][\"content\"]\n      \n              def get_summary(input_doc: str) -> str:\n                  completion = openai.ChatCompletion.create(\n                      model=\"gpt-4\",\n                      messages=[\n                          {\n                              \"role\": \"user\",\n                              \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                          }\n                      ],\n                  )\n                  if not completion.choices:\n                      return \"Error: No completion found\"\n      \n                  return completion.choices[0][\"message\"][\"content\"]\n      \n              # Splice the search results on the symbol\n              # with the search results biased on tests\n              # this is to get bias towards specific examples for the documentation\n              search_results_0 = self.symbol_search.symbol_rank_search(f\"{abbreviated_selected_symbol}\")\n              search_results_1 = self.symbol_search.symbol_rank_search(\n                  f\"{abbreviated_selected_symbol} tests or conftest\"\n              )\n      \n              search_list: List[Symbol] = []\n              for i in range(len(search_results_0)):\n                  set_list = set(search_list)\n                  if search_results_0[i] not in set_list:\n                      search_list.append(search_results_0[i][0])\n                  elif search_results_1[i] not in set_list:\n                      search_list.append(search_results_1[i][0])\n      \n              retriever = PyContextRetriever(self.graph)\n              retriever.process_symbol(symbol, search_list)\n              print(\"retriever.get_context_buffer(): \", retriever.get_context_buffer())\n      \n              prompt = Template(DEFAULT_DOC_GENERATION_PROMPT).render(\n                  symbol_dotpath=abbreviated_selected_symbol,\n                  symbol_context=retriever.get_context_buffer(),\n              )\n      \n              document = get_doc(prompt)\n              summary = get_summary(document)\n              embedding = self.embedding_provider.build_embedding(document)\n      \n              return SymbolDocEmbedding(\n                  symbol,\n                  vector=embedding,\n                  source_code=source_code,\n                  document=document,\n                  summary=summary,\n                  context=prompt,\n              )\n      \n          \n      def get_doc(prompt: str) -> str:\n                  completion = openai.ChatCompletion.create(\n                      model=\"gpt-4\",\n                      messages=[\n                          {\n                              \"role\": \"user\",\n                              \"content\": prompt,\n                          }\n                      ],\n                  )\n                  if not completion.choices:\n                      return \"Error: No completion found\"\n      \n                  return completion.choices[0][\"message\"][\"content\"]\n      \n              \n      def get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding:\n              \"\"\"\n              Get the embedding of a symbol.\n              Args:\n                  symbol (Symbol): Symbol to get the embedding for\n              Returns:\n                  SymbolDocEmbedding: The embedding of the symbol documentation\n              \"\"\"\n              return self.embedding_db.get(symbol)\n      \n          \n      def get_summary(input_doc: str) -> str:\n                  completion = openai.ChatCompletion.create(\n                      model=\"gpt-4\",\n                      messages=[\n                          {\n                              \"role\": \"user\",\n                              \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                          }\n                      ],\n                  )\n                  if not completion.choices:\n                      return \"Error: No completion found\"\n      \n                  return completion.choices[0][\"message\"][\"content\"]\n      \n              # Splice the search results on the symbol\n              # with the search results biased on tests\n              # this is to get bias towards specific examples for the documentation\n              \n      def update_embedding(self, symbol: Symbol):\n              \"\"\"\n              Update the embedding map with new symbols.\n      \n              Args:\n                  symbols_to_update (List[Symbol]): List of symbols to update\n              Returns:\n                  None\n              \"\"\"\n              from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n              desc_path_to_symbol = {\n                  \".\".join([desc.name for desc in symbol.descriptors]): symbol\n                  for symbol in self.embedding_db.get_all_symbols()\n              }\n              try:\n                  symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n                  symbol_source_obj = convert_to_fst_object(symbol)\n                  print(\"calling update embedding..\")\n                  if symbol_desc_identifier in desc_path_to_symbol:\n                      print(\"passing ...\")\n                      pass\n                  else:\n                      new_embedding = self.build_symbol_doc_embedding(symbol, str(symbol_source_obj))\n                      self.embedding_db.add(new_embedding)\n              except Exception as e:\n                  logger.error(\"Failed to get source code for symbol %s\" % symbol)\n      \n  Building context for related symbols -\n  \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler.__init__\n    \n      Class Docstring:\n        An abstract constructor for EmbeddingHandler\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider.build_embedding\n    \n      Class Docstring:\n        Get the embedding for a symbol.\n        Args:\n        symbol_source (str): The source code of the symbol\n        Returns:\n        A numpy array representing the embedding\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.database.vector.VectorDatabaseProvider.get_all_symbols\n    \n      Class Docstring:\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \n      Methods:\n        get_all_symbols(self) -> List[Symbol]\n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.get_context_buffer\n    \n      Class Docstring:\n        Get the context buffer\n        \n        Returns:\n        str: The context buffer\n        \n      Methods:\n        get_context_buffer(self) -> str\n        \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.process_symbol\n    \n      Class Docstring:\n        Process the context of a symbol\n        Theh output is stored into the local message buffer\n        \n        Args:\n        symbol (Symbol): The symbol to process\n        ranked_symbols (List[Symbol]): The list ranked symbols to use\n        with the nearest symbol processor\n        \n      Methods:\n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n    automata_docs.core.symbol.search.rank.SymbolRankConfig\n    \n        class SymbolRankConfig(BaseModel):\n            \"\"\"A configuration class for SymbolRank\"\"\"\n        \n            alpha: float = 0.25\n            max_iterations: int = 100\n            tolerance: float = 1.0e-6\n            weight_key: str = \"weight\"\n        \n            @classmethod\n            def validate(cls, config):\n                \"\"\"\n                Validate configuration parameters.\n        \n                Args:\n                    config (SymbolRankConfig): Configuration parameters.\n        \n                Raises:\n                    ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n                \"\"\"\n                if not 0 < config.alpha < 1:\n                    raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n        \n                if not 1.0e-8 < config.tolerance < 1.0e-4:\n                    raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n        \n        \n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph.get_rankable_symbol_subgraph\n    \n      Class Docstring:\n        Gets a detailed subgraph of rankable symbols.\n        \n        Args:\n        symbol (str): The symbol in the form 'module`/ClassOrMethod#'\n        \n        Returns:\n        List[str]: The list of dependencies for the symbol.\n        TODO: Consider ways to make this more efficient.\n        TODO: Find ways to better handle edge cases\n        \n      Methods:\n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n    automata_docs.core.symbol.search.symbol_search.SymbolSearch.symbol_rank_search\n    \n      Class Docstring:\n        Fetches the list of the SymbolRank similar symbols ordered by rank\n        \n        Args:\n        query (str): The query to search for\n        \n        Returns:\n        A list of tuples of the form (symbol_uri, rank)\n        \n      Methods:\n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.embedding.symbol_embedding`/SymbolEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.symbol_embedding", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolEmbeddingHandler(EmbeddingHandler):\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: Optional[EmbeddingsProvider],\n    ):\n        \"\"\"\n        A constructor for SymbolEmbeddingHandler\n\n        Args:\n            embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n            embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n        \"\"\"\n        self.embedding_db = embedding_db\n        self.embedding_provider = embedding_provider or EmbeddingsProvider()\n\n    def get_all_supported_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Get all the symbols that are supported by the embedding provider.\n\n        Returns:\n            List[Symbol]: A list of all the symbols that are supported by the embedding provider\n        \"\"\"\n        return self.embedding_db.get_all_symbols()\n\n    @abc.abstractmethod\n    def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n        \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n        pass\n\n\n", "document": "# SymbolEmbeddingHandler\n\n`SymbolEmbeddingHandler` is an abstract class that manages and handles the embeddings of symbols in the `automata_docs` project. It provides functionalities to retrieve, update, and work with embeddings of different symbols while interacting with external `embedding_db` databases and `embedding_provider` providers for acquiring the embeddings. This class is part of the larger embeddings management system that covers `SymbolCodeEmbeddingHandler`, `SymbolDocEmbeddingHandler`, and all the related `SymbolEmbedding` objects.\n\n## Overview\n\nThe primary purpose of `SymbolEmbeddingHandler` is to facilitate the management of symbol embeddings within `automata_docs`. It offers an extensible and customizable interface for other embedding handlers to inherit from and implement. The class features abstract methods like `get_embedding` and `update_embedding` that should be implemented by derived classes. The `SymbolEmbeddingHandler` also maintains a list of all the supported symbols managed by the embedding provider.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.embedding_types.EmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.database.vector.VectorDatabaseProvider`\n\n## Example\n\nThe following is an example demonstrating how to use a derived class `SymbolCodeEmbeddingHandler` from `SymbolEmbeddingHandler`.\n\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\nembedding_db = JSONVectorDatabase(\"path/to/database.json\")\nembedding_provider = EmbeddingsProvider()\n\nhandler = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\n\nsymbol = Symbol.from_string(\"your-symbol-string-representation\")\n\nembedded_symbol = handler.get_embedding(symbol)\n```\n\n## Limitations\n\nThe main limitation of `SymbolEmbeddingHandler` is that it is an abstract class that relies on derived classes for specific implementations. In its current form, it cannot be used directly and requires an understanding of the embedding handling mechanism.\n\n## Follow-up Questions:\n\n- What are the actual implementations for retrieving and updating embeddings in `SymbolEmbeddingHandler`-derived classes?", "summary": "`SymbolEmbeddingHandler` is an abstract class within the `automata_docs` project that manages and handles symbol embeddings. It provides functionalities for retrieving, updating, and working with different symbol embeddings while interacting with external databases and providers. Inheriting from and implementing `SymbolEmbeddingHandler` as its base, offers an extensible and customizable interface for other embedding handlers such as `SymbolCodeEmbeddingHandler`. The class features abstract methods like `get_embedding` and `update_embedding` requiring implementation by derived classes. One limitation is that `SymbolEmbeddingHandler` cannot be used directly and understanding the embedding handling mechanism is necessary.", "context": "\n    Generate the documentation for SymbolEmbeddingHandler using the context shown below -\n  Building context for primary symbol - automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n  \n    Import Statements:\n      import abc\n      import logging\n      import os\n      import openai\n      from typing import List, Optional\n      from jinja2 import Template\n      from automata_docs.config.config_enums import ConfigCategory\n      from automata_docs.config.prompt.docs import DEFAULT_DOC_GENERATION_PROMPT\n      from automata_docs.core.context.py_context.retriever import PyContextRetriever\n      from automata_docs.core.database.vector import JSONVectorDatabase, VectorDatabaseProvider\n      from automata_docs.core.symbol.graph import SymbolGraph\n      from automata_docs.core.symbol.symbol_types import (\n          Symbol,\n          SymbolCodeEmbedding,\n          SymbolDocEmbedding,\n          SymbolEmbedding,\n      )\n      from automata_docs.core.utils import config_fpath\n      from .embedding_types import EmbeddingHandler, EmbeddingsProvider\n      from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n      from automata_docs.core.symbol.search.rank import SymbolRankConfig\n      from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n      from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                  convert_to_fst_object,\n              )\n      \n    Methods:\n      def __init__(\n              self,\n              embedding_db: VectorDatabaseProvider,\n              embedding_provider: Optional[EmbeddingsProvider],\n          ):\n              \"\"\"\n              A constructor for SymbolEmbeddingHandler\n      \n              Args:\n                  embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                  embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n              \"\"\"\n              self.embedding_db = embedding_db\n              self.embedding_provider = embedding_provider or EmbeddingsProvider()\n      \n          \n      def get_all_supported_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Get all the symbols that are supported by the embedding provider.\n      \n              Returns:\n                  List[Symbol]: A list of all the symbols that are supported by the embedding provider\n              \"\"\"\n              return self.embedding_db.get_all_symbols()\n      \n          \n      @abc.abstractmethod\n          def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n              \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n              pass\n      \n          \n      @abc.abstractmethod\n          def update_embedding(self, symbol: Symbol):\n              \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n              pass\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler.__init__\n    \n      Class Docstring:\n        An abstract constructor for EmbeddingHandler\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    automata_docs.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n        \n        \n        \n    automata_docs.tests.unit.test_symbol_embedding.test_get_embedding\n    \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingsProvider methods\n            mock_provider = Mock(EmbeddingsProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], mock_embedding, \"symbol_source\"\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.database.vector.VectorDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata_docs.core.database.vector.VectorDatabaseProvider.get_all_symbols\n    \n      Class Docstring:\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \n      Methods:\n        get_all_symbols(self) -> List[Symbol]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.embedding.symbol_similarity`/SymbolSimilarity#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.symbol_similarity", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolSimilarity", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolSimilarity(EmbeddingSimilarity):\n    def __init__(\n        self,\n        symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n        norm_type: NormType = NormType.L2,\n    ):\n        \"\"\"\n        Initialize SymbolSimilarity\n\n        Args:\n            symbol_embedding_manager: A CodeEmbeddingManager\n            norm_type (NormType): The norm type to use for calculating similarity\n\n        Returns:\n            An instance of SymbolSimilarity\n        \"\"\"\n        self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n        self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n        self.norm_type = norm_type\n        supported_symbols = self.embedding_handler.get_all_supported_symbols()\n        self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n        self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n        self.available_symbols: Optional[Set[Symbol]] = None\n\n    def set_available_symbols(self, available_symbols: Set[Symbol]):\n        \"\"\"\n        Set the available symbols to use for similarity calculation\n\n        Args:\n            available_symbols (Set[Symbol]): The available symbols to\n                use for similarity calculation\n        \"\"\"\n        self.available_symbols = available_symbols\n\n    def get_available_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Set the available symbols to use for similarity calculation\n\n        Args:\n            available_symbols (Set[Symbol]): The available symbols to\n                use for similarity calculation\n        \"\"\"\n        return [\n            symbol\n            for symbol in self.symbol_to_index\n            if not self.available_symbols or symbol in self.available_symbols\n        ]\n\n    def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n        \"\"\"\n        Get the similarity scores of all symbols for the query_text\n\n        Args:\n            query_text (str): The query text\n\n        Returns:\n            A dictionary mapping each symbol's uri to its similarity score with the query\n        \"\"\"\n        query_embedding = self.embedding_provider.build_embedding(query_text)\n\n        # Compute the similarity of the query to all symbols\n        similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n\n        similarity_dict = {\n            self.index_to_symbol[i]: similarity_scores[i]\n            for i in range(len(self.index_to_symbol))\n            if (not self.available_symbols) or self.index_to_symbol[i] in self.available_symbols\n        }\n        return similarity_dict\n\n    def get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]:\n        \"\"\"\n        Get the k most similar symbols to the query_text\n        Args:\n            query_text (str): The query text\n            k (int): The number of similar symbols to return\n        Returns:\n            A dictionary mapping the k most similar symbols to their similarity score\n        \"\"\"\n        query_embedding = self.embedding_provider.build_embedding(query_text)\n        # Compute the similarity of the query to all symbols\n        similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n\n        if self.available_symbols is not None:\n            # Filter the indices by available symbols\n            available_indices = [\n                i\n                for i in range(len(self.index_to_symbol))\n                if self.index_to_symbol[i] in self.available_symbols\n            ]\n            # Get the similarity scores for the available symbols\n            available_similarity_scores = similarity_scores[available_indices]\n            # Get the indices of the k symbols with the highest similarity scores among the available symbols\n            top_k_indices_in_available = np.argsort(available_similarity_scores)[-k:]\n            # Convert these indices back to the indices in the original list of symbols\n            top_k_indices = [available_indices[i] for i in top_k_indices_in_available]\n        else:\n            # Get the indices of the k symbols with the highest similarity scores\n            top_k_indices = np.argsort(similarity_scores)[-k:]\n\n        # Return the corresponding symbols\n        return {\n            self.index_to_symbol[index]: similarity_scores[index]\n            for index in reversed(top_k_indices)\n        }\n\n    def _get_ordered_embeddings(self) -> np.ndarray:\n        \"\"\"\n        Get the embeddings in the correct order\n\n        Returns:\n            A numpy array containing the ordered embeddings\n        \"\"\"\n        return np.array(\n            [\n                self.embedding_handler.get_embedding(symbol).vector\n                for symbol in self.index_to_symbol.values()\n            ]\n        )\n\n    def _calculate_query_similarity_vec(self, query_embedding: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Calculate the similarity scores of the query embedding with all symbol embeddings\n        Args:\n            query_embedding (np.ndarray): The query embedding\n            norm_type (str): The type of normalization ('l2' for L2 norm, 'softmax' for softmax)\n        Returns:\n            A numpy array containing the similarity scores\n        \"\"\"\n        embeddings = self._get_ordered_embeddings()\n\n        # Normalize the embeddings and the query embedding\n        embeddings_norm = self._normalize_embeddings(embeddings, self.norm_type)\n        query_embedding_norm = self._normalize_embeddings(\n            query_embedding[np.newaxis, :], self.norm_type\n        )[0]\n\n        # Compute the dot product between normalized embeddings and query\n        similarity_scores = np.dot(embeddings_norm, query_embedding_norm)\n\n        return similarity_scores\n\n    @staticmethod\n    def _normalize_embeddings(embeddings: np.ndarray, norm_type: NormType) -> np.ndarray:\n        \"\"\"\n        Normalize the embeddings.\n        Args:\n            embeddings (np.ndarray): The embeddings\n            norm_type (NormType): The type of normalization (L1, L2, or softmax)\n        Returns:\n            The normalized embeddings\n        \"\"\"\n        if norm_type == NormType.L1:\n            norm = np.sum(np.abs(embeddings), axis=1, keepdims=True)\n            return embeddings / norm\n        elif norm_type == NormType.L2:\n            return embeddings / np.linalg.norm(embeddings, axis=1, keepdims=True)\n        elif norm_type == NormType.SOFTMAX:\n            e_x = np.exp(embeddings - np.max(embeddings, axis=1, keepdims=True))\n            return e_x / np.sum(e_x, axis=1, keepdims=True)\n        else:\n            raise ValueError(f\"Invalid normalization type {norm_type}\")\n", "document": "# SymbolSimilarity\n\n## Overview\n\n`SymbolSimilarity` is a class used to calculate and retrieve the similarity scores between a given query text and all the supported symbols. This class can be used to find the most similar symbols for a given query text as well as filter the available symbols based on certain conditions. The class provides methods like `get_available_symbols`, `get_nearest_entries_for_query`, and `get_query_similarity_dict`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingSimilarity`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `SymbolSimilarity` and find the most similar symbols to a given query text.\n\n```python\nimport numpy as np\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider, NormType\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n\n# Create instances of necessary classes\nembedding_db = JSONVectorDatabase(\"path/to/database\")\nembedding_provider = EmbeddingsProvider()\ncem = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=embedding_provider)\nsymbol_similarity = SymbolSimilarity(cem)\n\n# Set sample query_text and find the most similar symbols\nquery_text = \"This is a sample query text\"\nsimilar_symbols = symbol_similarity.get_nearest_entries_for_query(query_text, k=5)\n```\n\n## Limitations\n\nThe `SymbolSimilarity` class assumes a specific format for the embeddings and the symbols. It also depends on the `EmbeddingsProvider` class to create the embeddings for the query texts. Changing the way embeddings are created or modifying the symbols would require substantial changes to the class.\n\n## Follow-up Questions:\n\n- How can the implementation of `SymbolSimilarity` be modified to support custom embeddings and symbol formats?", "summary": "The `SymbolSimilarity` class calculates the similarity scores between a given query text and all supported symbols, helping users find the most similar symbols and filter available ones based on certain conditions. It provides methods such as `get_available_symbols`, `get_nearest_entries_for_query`, and `get_query_similarity_dict`. However, it assumes a specific format for embeddings and symbols and depends on the `EmbeddingsProvider` class for creating embeddings for query texts. Modifying the way embeddings are created or symbols would require substantial changes to the class. In the provided example, instances of necessary classes are created, sample query text is set, and the most similar symbols are found using `get_nearest_entries_for_query`.", "context": "\n    Generate the documentation for SymbolSimilarity using the context shown below -\n  Building context for primary symbol - automata_docs.core.embedding.symbol_similarity.SymbolSimilarity -\n  \n    Import Statements:\n      import logging\n      import numpy as np\n      from typing import Dict, List, Optional, Set\n      from automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\n      from automata_docs.core.symbol.symbol_types import Symbol\n      from .embedding_types import EmbeddingSimilarity, EmbeddingsProvider, NormType\n      \n    Methods:\n      def __init__(\n              self,\n              symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n              norm_type: NormType = NormType.L2,\n          ):\n              \"\"\"\n              Initialize SymbolSimilarity\n      \n              Args:\n                  symbol_embedding_manager: A CodeEmbeddingManager\n                  norm_type (NormType): The norm type to use for calculating similarity\n      \n              Returns:\n                  An instance of SymbolSimilarity\n              \"\"\"\n              self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n              self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n              self.norm_type = norm_type\n              supported_symbols = self.embedding_handler.get_all_supported_symbols()\n              self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n              self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n              self.available_symbols: Optional[Set[Symbol]] = None\n      \n          \n      def get_available_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Set the available symbols to use for similarity calculation\n      \n              Args:\n                  available_symbols (Set[Symbol]): The available symbols to\n                      use for similarity calculation\n              \"\"\"\n              return [\n                  symbol\n                  for symbol in self.symbol_to_index\n                  if not self.available_symbols or symbol in self.available_symbols\n              ]\n      \n          \n      def get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]:\n              \"\"\"\n              Get the k most similar symbols to the query_text\n              Args:\n                  query_text (str): The query text\n                  k (int): The number of similar symbols to return\n              Returns:\n                  A dictionary mapping the k most similar symbols to their similarity score\n              \"\"\"\n              query_embedding = self.embedding_provider.build_embedding(query_text)\n              # Compute the similarity of the query to all symbols\n              similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n      \n              if self.available_symbols is not None:\n                  # Filter the indices by available symbols\n                  available_indices = [\n                      i\n                      for i in range(len(self.index_to_symbol))\n                      if self.index_to_symbol[i] in self.available_symbols\n                  ]\n                  # Get the similarity scores for the available symbols\n                  available_similarity_scores = similarity_scores[available_indices]\n                  # Get the indices of the k symbols with the highest similarity scores among the available symbols\n                  top_k_indices_in_available = np.argsort(available_similarity_scores)[-k:]\n                  # Convert these indices back to the indices in the original list of symbols\n                  top_k_indices = [available_indices[i] for i in top_k_indices_in_available]\n              else:\n                  # Get the indices of the k symbols with the highest similarity scores\n                  top_k_indices = np.argsort(similarity_scores)[-k:]\n      \n              # Return the corresponding symbols\n              return {\n                  self.index_to_symbol[index]: similarity_scores[index]\n                  for index in reversed(top_k_indices)\n              }\n      \n          \n      def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n              \"\"\"\n              Get the similarity scores of all symbols for the query_text\n      \n              Args:\n                  query_text (str): The query text\n      \n              Returns:\n                  A dictionary mapping each symbol's uri to its similarity score with the query\n              \"\"\"\n              query_embedding = self.embedding_provider.build_embedding(query_text)\n      \n              # Compute the similarity of the query to all symbols\n              similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n      \n              similarity_dict = {\n                  self.index_to_symbol[i]: similarity_scores[i]\n                  for i in range(len(self.index_to_symbol))\n                  if (not self.available_symbols) or self.index_to_symbol[i] in self.available_symbols\n              }\n              return similarity_dict\n      \n          \n      def set_available_symbols(self, available_symbols: Set[Symbol]):\n              \"\"\"\n              Set the available symbols to use for similarity calculation\n      \n              Args:\n                  available_symbols (Set[Symbol]): The available symbols to\n                      use for similarity calculation\n              \"\"\"\n              self.available_symbols = available_symbols\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingSimilarity\n    \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                symbol_embedding_manager: EmbeddingHandler,\n                norm_type: Optional[NormType],\n            ):\n                \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n                pass\n        \n            \n        get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Any, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Any, float]\n        \n    automata_docs.tests.unit.conftest.symbol_searcher\n    \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n        \n    automata_docs.core.symbol.search.symbol_search.SymbolSearch\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata_docs.tests.unit.test_symbol_similarity.test_get_nearest_symbols_for_query\n    \n        def test_get_nearest_symbols_for_query(\n            monkeypatch, mock_embedding, mock_simple_method_symbols, temp_output_filename\n        ):\n            # Mocking symbols and their embeddings\n            symbol1 = mock_simple_method_symbols[0]\n            symbol2 = mock_simple_method_symbols[1]\n            symbol3 = mock_simple_method_symbols[2]\n        \n            embedding1 = SymbolCodeEmbedding(\n                symbol=symbol1, vector=np.array([1, 0, 0, 0]), source_code=\"symbol1\"\n            )\n            embedding2 = SymbolCodeEmbedding(\n                symbol=symbol2, vector=np.array([0, 1, 0, 0]), source_code=\"symbol2\"\n            )\n            embedding3 = SymbolCodeEmbedding(\n                symbol=symbol3, vector=np.array([0, 0, 1, 0]), source_code=\"symbol3\"\n            )\n        \n            # Mock JSONVectorDatabase methods\n            embedding_db = JSONVectorDatabase(temp_output_filename)\n            embedding_db.add(embedding1)\n            embedding_db.add(embedding2)\n            embedding_db.add(embedding3)\n        \n            # Create an instance of the class\n            mock_provider = MagicMock(EmbeddingsProvider)\n            cem = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=mock_provider)\n        \n            symbol_similarity = SymbolSimilarity(cem)\n        \n            # Test with query_text that is most similar to symbol1\n            cem.embedding_provider.build_embedding.return_value = np.array([1, 0, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol1\", k=1)\n            assert list(result.keys()) == [symbol1]\n        \n            # Test with query_text that is most similar to symbol2\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 1, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol2\", k=1)\n            assert list(result.keys()) == [symbol2]\n        \n            # Test with query_text that is most similar to symbol3\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 0, 1, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol3\", k=1)\n            assert list(result.keys()) == [symbol3]\n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolReference.__eq__\n    \n      Methods:\n        __eq__(self, other) -> None\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingSimilarity.__init__\n    \n      Class Docstring:\n        An abstract constructor for EmbeddingSimilarity\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                symbol_embedding_manager: EmbeddingHandler,\n                norm_type: Optional[NormType],\n            ):\n                \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n                pass\n        \n            \n    automata_docs.core.database.vector.VectorDatabaseProvider\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n      Methods:\n        calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider.build_embedding\n    \n      Class Docstring:\n        Get the embedding for a symbol.\n        Args:\n        symbol_source (str): The source code of the symbol\n        Returns:\n        A numpy array representing the embedding\n        \n      Methods:\n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.embedding.embedding_types.NormType\n    \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler.get_all_supported_symbols\n    \n      Class Docstring:\n        Get all the symbols that are supported by the embedding provider.\n        \n        Returns:\n        List[Symbol]: A list of all the symbols that are supported by the embedding provider\n        \n      Methods:\n        get_all_supported_symbols(self) -> List[Symbol]\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler.get_embedding\n    \n      Class Docstring:\n        Get the embedding of a symbol.\n        \n        Args:\n        symbol (Symbol): Symbol to get the embedding for\n        \n        Returns:\n        Embedding: The embedding of the symbol\n        \n      Methods:\n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.graph`/SymbolGraph#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolGraph", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolGraph:\n    @dataclass\n    class SubGraph:\n        parent: \"SymbolGraph\"\n        graph: nx.DiGraph\n\n    DEFAULT_SCIP_PATH = os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n\n    def __init__(\n        self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n    ):\n        \"\"\"\n        Initializes SymbolGraph with the path of an index protobuf file.\n\n        Args:\n            index_path (str): Path to index protobuf file\n        Returns:\n            SymbolGraph instance\n        \"\"\"\n        index = self._load_index_protobuf(index_path)\n        builder = GraphBuilder(index, build_caller_relationships)\n        self._graph = builder.build_graph()\n        self.navigator = _SymbolGraphNavigator(self._graph)\n\n    def get_all_files(self) -> List[SymbolFile]:\n        \"\"\"\n        Gets all file nodes in the graph.\n\n        Args:\n            None\n        Returns:\n            List of all defined symbols.\n        \"\"\"\n        return self.navigator.get_all_files()\n\n    def get_all_available_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Gets all symbols defined in the graph.\n\n        Args:\n            None\n        Returns:\n            List[Symbol]: List of all defined symbols.\n        \"\"\"\n        return list(set(self.navigator.get_all_available_symbols()))\n\n    def get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]:\n        \"\"\"\n        Gets all symbols which contain a specified partial path\n\n        Args:\n            partial_py_path (PyPath): The partial path to explain\n        Returns:\n            Set[Symbol]: Set of symbols that follow the partial path\n        \"\"\"\n        return self.navigator.get_symbol_dependencies(symbol)\n\n    def get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]:\n        \"\"\"\n        Gets the set of symbols with relationships to the given symbol.\n\n        Args:\n            symbol (Symbol): The symbol to get relationships for.\n        Returns:\n            Set[Symbol]: The list of relationships for the symbol.\n\n        # TODO: Consider implications of using list instead of set\n        \"\"\"\n        return self.navigator.get_symbol_relationships(symbol)\n\n    def get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]:\n        \"\"\"\n        Gets the (potential) callers of the given symbol.\n        Requires downstream filtering to remove non-call statements.\n\n        Args:\n            symbol (Symbol): The symbol to get callers for.\n        Returns:\n            Dict[Symbol]: The map of callers to callees for the symbol.\n        \"\"\"\n\n        return self.navigator.get_potential_symbol_callers(symbol)\n\n    def get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]:\n        \"\"\"\n        Gets the callers of the given symbol.\n        Requires downstream filtering to remove non-call statements.\n\n        Args:\n            symbol (Symbol): The symbol to get callees for.\n        Returns:\n            Dict[Symbol]: The map of callees to callers for the symbol.\n        \"\"\"\n        return self.navigator.get_potential_symbol_callees(symbol)\n\n    def get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]:\n        \"\"\"\n        Gets all references to a given module in the symbol graph.\n\n        Args:\n            module (Symbol): The module to locate references for\n        Returns:\n            List[SymbolReference]: List of symbol references\n        \"\"\"\n        return self.navigator.get_references_to_symbol(symbol)\n\n    def get_rankable_symbol_subgraph(\n        self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None\n    ) -> SubGraph:\n        \"\"\"\n        Gets a detailed subgraph of rankable symbols.\n\n        Args:\n            symbol (str): The symbol in the form 'module`/ClassOrMethod#'\n\n        Returns:\n            List[str]: The list of dependencies for the symbol.\n        TODO: Consider ways to make this more efficient.\n        TODO: Find ways to better handle edge cases\n        \"\"\"\n        G = nx.DiGraph()\n\n        # Filter the symbols based on the provided path filter\n\n        filtered_symbols = get_rankable_symbols(self.get_all_available_symbols())\n\n        if path_filter is not None:\n            filtered_symbols = [\n                sym for sym in filtered_symbols if sym.dotpath.startswith(path_filter)  # type: ignore\n            ]\n\n        logger.info(\"Building the rankable symbol subgraph...\")\n        for symbol in tqdm(filtered_symbols):\n            try:\n                dependencies = self.get_symbol_dependencies(symbol)\n                relationships = self.get_symbol_relationships(symbol)\n                filtered_related_symbols = get_rankable_symbols(\n                    list(dependencies.union(relationships))\n                )\n                for dependency in filtered_related_symbols:\n                    if flow_rank == \"to_dependents\":\n                        G.add_edge(symbol, dependency)\n                    elif flow_rank == \"from_dependents\":\n                        G.add_edge(dependency, symbol)\n                    elif flow_rank == \"bidirectional\":\n                        G.add_edge(symbol, dependency)\n                        G.add_edge(dependency, symbol)\n                    else:\n                        raise ValueError(\n                            \"flow_rank must be one of 'to_dependents', 'from_dependents', or 'bidirectional'\"\n                        )\n\n            except Exception as e:\n                logger.error(f\"Error processing {symbol.uri}: {e}\")\n\n        logger.info(\"Built the rankable symbol subgraph\")\n\n        return SymbolGraph.SubGraph(graph=G, parent=self)\n\n    @staticmethod\n    def _load_index_protobuf(path: str) -> Index:\n        \"\"\"\n        Loads an index protobuf file from disk\n\n        Args:\n            path (str): The path to the index protobuf file\n\n        Returns:\n            Index: The loaded index protobuf\n        \"\"\"\n        index = Index()\n        with open(path, \"rb\") as f:\n            index.ParseFromString(f.read())\n        return index\n", "document": "# SymbolGraph\n\n`SymbolGraph` is a class that represents a directed graph of symbols and their relationships. It is designed to provide an efficient way to access and navigate the relationships between symbols in a given codebase. The class provides methods to get information about symbols such as their dependencies, callers, and related symbols. `SymbolGraph` comes with a navigator, which handles graph navigation and symbol lookup.\n\n## Overview\n\n`SymbolGraph` is initialized with the path of an index protobuf file and optionally whether to build caller-callee relationships. Once initialized, the graph can be queried for symbols, files, and relationships between symbols. Furthermore, a rankable subgraph can be generated based on the symbol graph, which can be useful for ranking symbols by importance and relevance.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.tests.unit.test_symbol_graph.test_get_all_symbols`\n- `automata_docs.core.symbol.search.tests.conftest.symbol_graph_mock`\n- `automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph`\n- `automata_docs.core.symbol.graph.GraphBuilder`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n- `config.config_enums.ConfigCategory`\n\n## Example\n\nThe following is an example of how to instantiate a `SymbolGraph` and use its methods to access information about symbols.\n\n```python\nimport os\nfrom automata_docs.core.symbol.graph import SymbolGraph\n\nfile_dir = os.path.dirname(os.path.abspath(__file__))\nindex_path = os.path.join(file_dir, \"index.scip\")\nsymbol_graph = SymbolGraph(index_path)\n\n# Get all available symbols in the graph\nsymbols = symbol_graph.get_all_available_symbols()\n\n# Get all file nodes in the graph\nfiles = symbol_graph.get_all_files()\n\n# Get callers and callees of a specific symbol\nsymbol = symbols[0]\ncallers = symbol_graph.get_potential_symbol_callers(symbol)\ncallees = symbol_graph.get_potential_symbol_callees(symbol)\n```\n\n## Limitations\n\n`SymbolGraph` assumes that the input index protobuf file is properly formatted and contains the necessary information to build the graph. If the protobuf file is improperly formatted or missing data, the resulting graph may not accurately represent the codebase and its relationships.\n\nAdditionally, some methods like `get_potential_symbol_callers()` and `get_potential_symbol_callees()` require downstream filtering to remove non-call statements, which can be a performance concern for large graphs. There might be more efficient ways to achieve this filtering that have not been implemented yet.\n\n## Follow-up Questions:\n\n- Is there any performance optimization planned for methods that require downstream filtering such as `get_potential_symbol_callers()` and `get_potential_symbol_callees()`?\n- Are there any plans to support custom index protobuf file formats, or is it assumed that users are only working with the default format?", "summary": "`SymbolGraph` is a class representing a directed graph of symbols and their relationships, enabling efficient navigation and access to symbol relationships in a codebase. Initialized with the path of an index protobuf file, `SymbolGraph` allows querying for symbols, files, and symbol relationships. Additionally, it can generate a rankable subgraph for ranking symbols by importance and relevance.\n\nHowever, `SymbolGraph` assumes that the input index protobuf file is properly formatted and has the necessary information to build the graph. Improperly formatted or missing data could result in inaccurate representation of the codebase and its relationships. Furthermore, certain methods like `get_potential_symbol_callers()` and `get_potential_symbol_callees()` might require downstream filtering for large graphs and have not been optimized for performance yet.", "context": "\n    Generate the documentation for SymbolGraph using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.graph.SymbolGraph -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata_docs.config.config_enums import ConfigCategory\n      from automata_docs.core.symbol.parser import parse_symbol\n      from automata_docs.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata_docs.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata_docs.core.utils import config_fpath\n      \n    Methods:\n      def __init__(\n              self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n          ):\n              \"\"\"\n              Initializes SymbolGraph with the path of an index protobuf file.\n      \n              Args:\n                  index_path (str): Path to index protobuf file\n              Returns:\n                  SymbolGraph instance\n              \"\"\"\n              index = self._load_index_protobuf(index_path)\n              builder = GraphBuilder(index, build_caller_relationships)\n              self._graph = builder.build_graph()\n              self.navigator = _SymbolGraphNavigator(self._graph)\n      \n          \n      def get_all_available_symbols(self) -> List[Symbol]:\n              \"\"\"\n              Gets all symbols defined in the graph.\n      \n              Args:\n                  None\n              Returns:\n                  List[Symbol]: List of all defined symbols.\n              \"\"\"\n              return list(set(self.navigator.get_all_available_symbols()))\n      \n          \n      def get_all_files(self) -> List[SymbolFile]:\n              \"\"\"\n              Gets all file nodes in the graph.\n      \n              Args:\n                  None\n              Returns:\n                  List of all defined symbols.\n              \"\"\"\n              return self.navigator.get_all_files()\n      \n          \n      def get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]:\n              \"\"\"\n              Gets the callers of the given symbol.\n              Requires downstream filtering to remove non-call statements.\n      \n              Args:\n                  symbol (Symbol): The symbol to get callees for.\n              Returns:\n                  Dict[Symbol]: The map of callees to callers for the symbol.\n              \"\"\"\n              return self.navigator.get_potential_symbol_callees(symbol)\n      \n          \n      def get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]:\n              \"\"\"\n              Gets the (potential) callers of the given symbol.\n              Requires downstream filtering to remove non-call statements.\n      \n              Args:\n                  symbol (Symbol): The symbol to get callers for.\n              Returns:\n                  Dict[Symbol]: The map of callers to callees for the symbol.\n              \"\"\"\n      \n              return self.navigator.get_potential_symbol_callers(symbol)\n      \n          \n      def get_rankable_symbol_subgraph(\n              self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None\n          ) -> SubGraph:\n              \"\"\"\n              Gets a detailed subgraph of rankable symbols.\n      \n              Args:\n                  symbol (str): The symbol in the form 'module`/ClassOrMethod#'\n      \n              Returns:\n                  List[str]: The list of dependencies for the symbol.\n              TODO: Consider ways to make this more efficient.\n              TODO: Find ways to better handle edge cases\n              \"\"\"\n              G = nx.DiGraph()\n      \n              # Filter the symbols based on the provided path filter\n      \n              filtered_symbols = get_rankable_symbols(self.get_all_available_symbols())\n      \n              if path_filter is not None:\n                  filtered_symbols = [\n                      sym for sym in filtered_symbols if sym.dotpath.startswith(path_filter)  # type: ignore\n                  ]\n      \n              logger.info(\"Building the rankable symbol subgraph...\")\n              for symbol in tqdm(filtered_symbols):\n                  try:\n                      dependencies = self.get_symbol_dependencies(symbol)\n                      relationships = self.get_symbol_relationships(symbol)\n                      filtered_related_symbols = get_rankable_symbols(\n                          list(dependencies.union(relationships))\n                      )\n                      for dependency in filtered_related_symbols:\n                          if flow_rank == \"to_dependents\":\n                              G.add_edge(symbol, dependency)\n                          elif flow_rank == \"from_dependents\":\n                              G.add_edge(dependency, symbol)\n                          elif flow_rank == \"bidirectional\":\n                              G.add_edge(symbol, dependency)\n                              G.add_edge(dependency, symbol)\n                          else:\n                              raise ValueError(\n                                  \"flow_rank must be one of 'to_dependents', 'from_dependents', or 'bidirectional'\"\n                              )\n      \n                  except Exception as e:\n                      logger.error(f\"Error processing {symbol.uri}: {e}\")\n      \n              logger.info(\"Built the rankable symbol subgraph\")\n      \n              return SymbolGraph.SubGraph(graph=G, parent=self)\n      \n          \n      def get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]:\n              \"\"\"\n              Gets all references to a given module in the symbol graph.\n      \n              Args:\n                  module (Symbol): The module to locate references for\n              Returns:\n                  List[SymbolReference]: List of symbol references\n              \"\"\"\n              return self.navigator.get_references_to_symbol(symbol)\n      \n          \n      def get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]:\n              \"\"\"\n              Gets all symbols which contain a specified partial path\n      \n              Args:\n                  partial_py_path (PyPath): The partial path to explain\n              Returns:\n                  Set[Symbol]: Set of symbols that follow the partial path\n              \"\"\"\n              return self.navigator.get_symbol_dependencies(symbol)\n      \n          \n      def get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]:\n              \"\"\"\n              Gets the set of symbols with relationships to the given symbol.\n      \n              Args:\n                  symbol (Symbol): The symbol to get relationships for.\n              Returns:\n                  Set[Symbol]: The list of relationships for the symbol.\n      \n              # TODO: Consider implications of using list instead of set\n              \"\"\"\n              return self.navigator.get_symbol_relationships(symbol)\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_symbol_graph.test_get_all_symbols\n    \n        def test_get_all_symbols(symbol_graph):\n            graph_symbols = symbol_graph.get_all_available_symbols()\n            assert isinstance(graph_symbols, list)\n            assert all(isinstance(s, Symbol) for s in graph_symbols)\n        \n        \n    automata_docs.core.symbol.search.tests.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n    automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata_docs.core.symbol.graph.GraphBuilder\n    \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n    automata_docs.core.symbol.search.symbol_search.SymbolSearch\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata_docs.core.symbol.search.tests.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata_docs.tests.unit.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata_docs.tests.unit.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n        \n        \n    automata_docs.tests.unit.test_symbol_graph.test_get_all_files\n    \n        def test_get_all_files(symbol_graph):\n            files = symbol_graph.get_all_files()\n            assert isinstance(files, list)\n            for f in files:\n                assert isinstance(f, SymbolFile)\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.graph._SymbolGraphNavigator.get_references_to_symbol\n    \n      Class Docstring:\n        Gets all references to a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch references for\n        \n        Returns:\n        Dict[str, List[SymbolReference]]: A dictionary of file\n        paths to a list of SymbolReference objects\n        \n      Methods:\n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n    automata_docs.core.symbol.graph.GraphBuilder.build_graph\n    \n      Class Docstring:\n        Builds the graph from the index\n        \n      Methods:\n        build_graph(self) -> None\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator.get_all_files\n    \n      Class Docstring:\n        Gets all files in the graph\n        \n        Returns:\n        List[SymbolFile]: A list of SymbolFile objects\n        \n      Methods:\n        get_all_files(self) -> List[SymbolFile]\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callees\n    \n      Class Docstring:\n        Gets all potential callees of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch callees for\n        \n        Returns:\n        Dict[Symbol, SymbolReference]: A dictionary of Symbol objects to\n        Symbol callees (SymbolReference objects).\n        \n      Methods:\n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n    automata_docs.core.symbol.symbol_types.SymbolFile\n    \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator\n    \n      Class Docstring:\n        Handles navigation of a symbol graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                \"\"\"\n                self._graph = graph\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.SymbolReference\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callers\n    \n      Class Docstring:\n        Gets all potential callers of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch callers for\n        \n        Returns:\n        Dict[Symbol, SymbolReference]: A dictionary of Symbol objects to\n        Symbol calleers (SymbolReference objects).\n        TODO - Remove non-call statements from this return object\n        \n      Methods:\n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator.get_symbol_dependencies\n    \n      Class Docstring:\n        Gets the dependencies of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch dependencies for\n        \n        Returns:\n        Set[Symbol]: A set of Symbol objects\n        \n      Methods:\n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.config.config_enums.ConfigCategory\n    \n        class ConfigCategory(Enum):\n            \"\"\"\n            An enum which corresponds to the name of a folder holding config\n            \"\"\"\n        \n            PROMPT = \"prompt\"\n            SYMBOL = \"symbol\"\n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.graph`/SymbolGraph#SubGraph#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolGraph", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SubGraph", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\n    class SubGraph:\n        parent: \"SymbolGraph\"\n        graph: nx.DiGraph\n\n    ", "document": "# SymbolGraph.SubGraph\n\n`SymbolGraph.SubGraph` is a dataclass representing a subgraph of a larger `SymbolGraph`. It helps in constructing and analyzing sub-graphs and extracting useful information from the relationships between the symbols in the graph. The subgraph can be used to perform various tasks such as retrieving the relationships between symbols, finding potential callees and callers, exploring the source code references, and ranking symbols based on their significance in the graph.\n\n## Overview\n\nThe `SymbolGraph.SubGraph` contains a NetworkX MultiDiGraph and a reference to its parent `SymbolGraph`, from which it was derived. The subgraph can be created by methods such as `symbol_graph.get_rankable_symbol_subgraph()`. The subgraph provides information about its nodes and edges, which represent symbols and their relationships, respectively.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_utils.get_rankable_symbols`\n- `automata_docs.core.symbol.graph.GraphBuilder`\n\n## Example\n\nThe following example demonstrates how to create and work with a `SymbolGraph.SubGraph`:\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\n\n# Initialize a SymbolGraph with a path to an index protobuf file.\nsymbol_graph = SymbolGraph(index_path=\"your_index_path.scip\")\n\n# Get a rankable symbol subgraph for analysis.\nsubgraph = symbol_graph.get_rankable_symbol_subgraph()\n\n# Access nodes and edges in the subgraph.\nnodes = subgraph.graph.nodes()\nedges = subgraph.graph.edges()\n\n# In case you need the parent graph\nparent_graph = subgraph.parent\n```\n\n## Limitations\n\nThe primary limitation of `SymbolGraph.SubGraph` is that it relies on the `SymbolGraph` to provide it with data, thus requiring the index protobuf file. Creating custom subgraphs based on specific filtering criteria or requirements might need additional logic built around the `SymbolGraph` to manipulate and generate the desired `SubGraph`.\n\n## Follow-up Questions:\n\n- Are there any methods to merge related subgraphs into a single subgraph?\n- Can `SymbolGraph.SubGraph` support custom filtering or other manipulations based on user requirements?", "summary": "`SymbolGraph.SubGraph` is a dataclass that represents a subgraph of a larger `SymbolGraph` and enables construction and analysis of sub-graphs, extraction of information from symbol relationships, retrieval of relationships, callers and callees, source code exploration, and symbol ranking. It contains a NetworkX MultiDiGraph and a reference to its parent `SymbolGraph`. Creating a custom subgraph may require additional logic manipulation from the `SymbolGraph` to generate the desired `SubGraph`.\n\nExample usage:\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\n\n# Initialize a SymbolGraph with a path to an index protobuf file.\nsymbol_graph = SymbolGraph(index_path=\"your_index_path.scip\")\n\n# Get a rankable symbol subgraph for analysis.\nsubgraph = symbol_graph.get_rankable_symbol_subgraph()\n\n# Access nodes and edges in the subgraph.\nnodes = subgraph.graph.nodes()\nedges = subgraph.graph.edges()\n\n# In case you need the parent graph\nparent_graph = subgraph.parent\n```\n", "context": "\n    Generate the documentation for SymbolGraph using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.graph.SymbolGraph.SubGraph -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata_docs.config.config_enums import ConfigCategory\n      from automata_docs.core.symbol.parser import parse_symbol\n      from automata_docs.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata_docs.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata_docs.core.utils import config_fpath\n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.tests.unit.test_symbol_graph.test_get_all_symbols\n    \n        def test_get_all_symbols(symbol_graph):\n            graph_symbols = symbol_graph.get_all_available_symbols()\n            assert isinstance(graph_symbols, list)\n            assert all(isinstance(s, Symbol) for s in graph_symbols)\n        \n        \n    automata_docs.core.symbol.search.tests.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n    automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata_docs.core.symbol.graph.GraphBuilder\n    \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n    automata_docs.core.symbol.search.symbol_search.SymbolSearch\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata_docs.core.symbol.search.tests.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata_docs.tests.unit.conftest.symbol_graph\n    \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n        \n    automata_docs.tests.unit.conftest.symbol_graph_mock\n    \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.graph`/_CallerCalleeManager#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "_CallerCalleeManager", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class _CallerCalleeManager:\n    \"\"\"\n    Manages the caller-callee relationships of a symbol in a graph.\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, document: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            document (Any): A Document object\n        \"\"\"\n        self._graph = graph\n        self.navigator = _SymbolGraphNavigator(graph)\n        self.document = document\n\n    def process(self):\n        \"\"\"\n        Processes the caller-callee relationships in the local graph\n\n        Note that this is an expensive operation, and should be used sparingly\n        \"\"\"\n        for symbol in self.document.symbols:\n            try:\n                symbol_object = parse_symbol(symbol.symbol)\n            except Exception as e:\n                logger.error(f\"Parsing symbol {symbol.symbol} failed with error {e}\")\n                continue\n\n            if symbol_object.symbol_kind_by_suffix() != SymbolDescriptor.PyKind.Method:\n                continue\n\n            try:\n                references_in_scope = self.navigator._get_symbol_references_in_scope(symbol_object)\n            except Exception as e:\n                print(f\"Failed to get references in scope for symbol {symbol} with error {e}\")\n                continue\n\n            for ref in references_in_scope:\n                try:\n                    if (\n                        ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Method\n                        or ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Class\n                    ):\n                        if ref.symbol == symbol_object:\n                            continue\n                        # TODO - This approach will include non-call statements, like return statements\n                        # unfortunately, this seems necessary to get the full set of callers\n                        # e.g. omitting classes appears to remove constructor calls for X, like X()\n                        # For, we filtering is done downstream with the ASTNavigator\n                        # with current understanding, it seems handling will require AST awareness\n                        self._graph.add_edge(\n                            symbol_object,\n                            ref.symbol,\n                            line_number=ref.line_number,\n                            column_number=ref.column_number,\n                            roles=ref.roles,\n                            label=\"caller\",\n                        )\n                        self._graph.add_edge(\n                            ref.symbol,\n                            symbol_object,\n                            line_number=ref.line_number,\n                            column_number=ref.column_number,\n                            roles=ref.roles,\n                            label=\"callee\",\n                        )\n                except Exception as e:\n                    print(f\"Failed to add caller-callee edge for {symbol} with error {e} \")\n                    continue\n\n\n", "document": "# _CallerCalleeManager\n\n`_CallerCalleeManager` is a class that manages caller-callee relationships of a symbol in a graph. It can parse symbol objects, filter method symbols, and add caller-callee edges to the graph. It can also process the caller-callee relationships in a local graph, which is an expensive operation and should be used sparingly.\n\n## Overview\n\n`_CallerCalleeManager` is primarily responsible for managing caller-callee relationships for symbols, specially methods, in a given graph. The class accepts a `networkx` graph and a `Document` object as inputs and processes the relationships internally. The navigation within the graph is done using an instance of `_SymbolGraphNavigator`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.parser.parse_symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind`\n\n## Example\n\nThe following example demonstrates the usage of `_CallerCalleeManager`:\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _CallerCalleeManager\n\n# Assuming you already have a networkx graph and a Document object\ngraph = nx.MultiDiGraph()\ndocument = ...\n\n# Instantiate CallerCalleeManager and process caller-callee relationships\ncc_manager = _CallerCalleeManager(graph, document)\ncc_manager.process()\n```\n\n## Limitations\n\nThe primary limitation of `_CallerCalleeManager` lies in its ability to handle only method symbols in the graph. Additionally, its approach might include non-call statements such as return statements, leading to filtering being done downstream with an `ASTNavigator`. Finally, handling more cases may require AST awareness.\n\n## Follow-up Questions:\n\n- How can `_CallerCalleeManager` be extended to handle other types of symbols, besides methods?\n- Are there other ways to handle non-call statements more efficiently within the `_CallerCalleeManager` class?", "summary": "_CallerCalleeManager is a class responsible for managing caller-callee relationships of method symbols in a graph. It accepts a networkx graph and a Document object as inputs and processes the relationships using a _SymbolGraphNavigator instance. However, it has limitations in handling only method symbols and potentially including non-call statements, which requires downstream filtering with an ASTNavigator. To use the _CallerCalleeManager, instantiate it with a networkx graph and a Document object, and call the process() method as shown in the example:\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _CallerCalleeManager\n\n# Assuming you already have a networkx graph and a Document object\ngraph = nx.MultiDiGraph()\ndocument = ...\n\n# Instantiate CallerCalleeManager and process caller-callee relationships\ncc_manager = _CallerCalleeManager(graph, document)\ncc_manager.process()\n```\nFuture improvements may include extending the class to handle other symbol types and efficiently handling non-call statements.", "context": "\n    Generate the documentation for _CallerCalleeManager using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.graph._CallerCalleeManager -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata_docs.config.config_enums import ConfigCategory\n      from automata_docs.core.symbol.parser import parse_symbol\n      from automata_docs.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata_docs.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata_docs.core.utils import config_fpath\n      \n    Class Docstring:\n      Manages the caller-callee relationships of a symbol in a graph.\n      \n    Methods:\n      def __init__(self, graph: nx.MultiDiGraph, document: Any):\n              \"\"\"\n              Args:\n                  graph (nx.MultiDiGraph): A networkx graph\n                  document (Any): A Document object\n              \"\"\"\n              self._graph = graph\n              self.navigator = _SymbolGraphNavigator(graph)\n              self.document = document\n      \n          \n      def process(self):\n              \"\"\"\n              Processes the caller-callee relationships in the local graph\n      \n              Note that this is an expensive operation, and should be used sparingly\n              \"\"\"\n              for symbol in self.document.symbols:\n                  try:\n                      symbol_object = parse_symbol(symbol.symbol)\n                  except Exception as e:\n                      logger.error(f\"Parsing symbol {symbol.symbol} failed with error {e}\")\n                      continue\n      \n                  if symbol_object.symbol_kind_by_suffix() != SymbolDescriptor.PyKind.Method:\n                      continue\n      \n                  try:\n                      references_in_scope = self.navigator._get_symbol_references_in_scope(symbol_object)\n                  except Exception as e:\n                      print(f\"Failed to get references in scope for symbol {symbol} with error {e}\")\n                      continue\n      \n                  for ref in references_in_scope:\n                      try:\n                          if (\n                              ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Method\n                              or ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Class\n                          ):\n                              if ref.symbol == symbol_object:\n                                  continue\n                              # TODO - This approach will include non-call statements, like return statements\n                              # unfortunately, this seems necessary to get the full set of callers\n                              # e.g. omitting classes appears to remove constructor calls for X, like X()\n                              # For, we filtering is done downstream with the ASTNavigator\n                              # with current understanding, it seems handling will require AST awareness\n                              self._graph.add_edge(\n                                  symbol_object,\n                                  ref.symbol,\n                                  line_number=ref.line_number,\n                                  column_number=ref.column_number,\n                                  roles=ref.roles,\n                                  label=\"caller\",\n                              )\n                              self._graph.add_edge(\n                                  ref.symbol,\n                                  symbol_object,\n                                  line_number=ref.line_number,\n                                  column_number=ref.column_number,\n                                  roles=ref.roles,\n                                  label=\"callee\",\n                              )\n                      except Exception as e:\n                          print(f\"Failed to add caller-callee edge for {symbol} with error {e} \")\n                          continue\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.graph.GraphBuilder._process_caller_callee_relationships\n    \n      Class Docstring:\n        Processes the caller-callee relationships in the local graph\n        \n        Args:\n        document (Any): A Document object\n        \n      Methods:\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n        get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str\n        \n        get_docstring_from_node(node: Optional[FSTNode]) -> str\n        \n        get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str\n        \n        get_source_code_without_docstrings(self, module_dotpath: str, object_path: Optional[str]\n            ) -> str\n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callers\n    \n      Class Docstring:\n        Gets all potential callers of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch callers for\n        \n        Returns:\n        Dict[Symbol, SymbolReference]: A dictionary of Symbol objects to\n        Symbol calleers (SymbolReference objects).\n        TODO - Remove non-call statements from this return object\n        \n      Methods:\n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.IndentManager\n    \n      Class Docstring:\n        A context manager to manage the indentation level\n        \n      Methods:\n        IndentManager(self) -> None\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator.get_potential_symbol_callees\n    \n      Class Docstring:\n        Gets all potential callees of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch callees for\n        \n        Returns:\n        Dict[Symbol, SymbolReference]: A dictionary of Symbol objects to\n        Symbol callees (SymbolReference objects).\n        \n      Methods:\n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.symbol_types.Symbol.symbol_kind_by_suffix\n    \n      Class Docstring:\n        Converts the suffix of the URI into a PyKind\n        \n      Methods:\n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator._get_symbol_references_in_scope\n    \n      Class Docstring:\n        Gets all symbol references in the scope of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch references for\n        \n        Returns:\n        List[SymbolReference]: A list of SymbolReference objects in scope\n        \n      Methods:\n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind\n    \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator\n    \n      Class Docstring:\n        Handles navigation of a symbol graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                \"\"\"\n                self._graph = graph\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.graph`/_OccurrenceManager#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "_OccurrenceManager", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class _OccurrenceManager:\n    \"\"\"\n    Manages the occurrences of a symbol in a graph\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, document: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            document (Any): A Document object\n        \"\"\"\n        self._graph = graph\n        self.document = document\n\n    def process(self):\n        \"\"\"\n        Processes the occurrences in the local graph\n        \"\"\"\n        for occurrence in self.document.occurrences:\n            try:\n                occurrence_symbol = parse_symbol(occurrence.symbol)\n            except Exception as e:\n                logger.error(f\"Parsing symbol {occurrence.symbol} failed with error {e}\")\n                continue\n\n            occurrence_range = tuple(occurrence.range)\n            occurrence_roles = _OccurrenceManager._process_symbol_roles(occurrence.symbol_roles)\n            occurrence_reference = SymbolReference(\n                symbol=occurrence_symbol,\n                line_number=occurrence_range[0],\n                column_number=occurrence_range[1],\n                roles=occurrence_roles,\n            )\n            self._graph.add_edge(\n                occurrence_symbol,\n                self.document.relative_path,\n                symbol_reference=occurrence_reference,\n                label=\"reference\",\n            )\n            if occurrence_roles.get(SymbolRole.Name(SymbolRole.Definition)):\n                # TODO this is gross\n                incorrect_contains_edges = [\n                    (source, target)\n                    for source, target, data in self._graph.in_edges(occurrence_symbol, data=True)\n                    if data.get(\"label\") == \"contains\"\n                ]\n                for source, target in incorrect_contains_edges:\n                    self._graph.remove_edge(source, target)\n\n                self._graph.add_edge(\n                    self.document.relative_path,\n                    occurrence_symbol,\n                    label=\"contains\",\n                )\n\n    @staticmethod\n    def _process_symbol_roles(role: int) -> Dict[str, bool]:\n        \"\"\"\n        Processes the symbol roles into a dictionary of role names to booleans\n\n        Args:\n            role (int): The symbol role\n        \"\"\"\n        result = {}\n        for role_name, role_value in SymbolRole.items():\n            if (role & role_value) > 0:\n                result[role_name] = (role & role_value) > 0\n        return result\n\n\n", "document": "# _OccurrenceManager\n\n`_OccurrenceManager` is a class that manages the occurrences of a symbol in a networkx graph. This class allows processing occurrences within a given document and adding or updating edges in the graph based on symbol roles, creating a relationship between symbols and their occurrences in documents.\n\n## Overview\n\nThe `_OccurrenceManager` class provides methods to process occurrences of symbols within a given document and update the graph accordingly. This helps create a symbol graph that connects symbols with their occurrences in documents. It works on a networkx graph and a document object, and handles the parsing of symbols and updating edges based on symbol roles.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.graph.GraphBuilder._process_occurrences`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever.IndentManager`\n- `automata_docs.core.context.py_context.retriever_slim.PyContext.IndentManager`\n- `automata_docs.core.symbol.graph._CallerCalleeManager`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY`\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.core.symbol.graph.GraphBuilder`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n\n## Example\n\nHere is a general example of how `_OccurrenceManager` could be used:\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _OccurrenceManager\n\ngraph = nx.MultiDiGraph()\ndocument = \"Sample document with symbol occurrences\"\noccurrence_manager = _OccurrenceManager(graph, document)\noccurrence_manager.process()\n```\n\nNote that this example may not be readily executable due to dependence on underlying objects and system configurations. Some adjustments and proper imports might be needed.\n\n## Limitations\n\nThe main limitation of `_OccurrenceManager` is its dependence on the structure of the document object, which may contain symbol occurrences in a specific format. If the document object changes, the class might not be able to process symbols correctly. Also, while networkx provides a general-purpose graph library, it might not be optimized for specific use cases, affecting the performance of the class.\n\n## Follow-up Questions:\n\n- What is the format of the document object and the symbol occurrences?\n- Are there alternative ways to process symbol occurrences other than using networkx graphs?\n- How to improve error handling for parsing symbols and updating the graph?", "summary": "_OccurrenceManager is a class that manages the occurrences of symbols in a networkx graph, allowing processing of occurrences within a given document and updating edges in the graph based on symbol roles. This creates a relationship between symbols and their occurrences in documents. The class provides methods to process occurrences of symbols within a document and update the graph accordingly, working on a networkx graph and a document object while handling the parsing of symbols and updating edges based on symbol roles. However, it has limitations such as its dependence on the structure of the document object and the networkx library not being optimized for specific use cases, which can affect performance.\n\nExample:\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _OccurrenceManager\n\ngraph = nx.MultiDiGraph()\ndocument = \"Sample document with symbol occurrences\"\noccurrence_manager = _OccurrenceManager(graph, document)\noccurrence_manager.process()\n```\nThis example may require adjustments and proper imports due to dependencies on underlying objects and system configurations.", "context": "\n    Generate the documentation for _OccurrenceManager using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.graph._OccurrenceManager -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata_docs.config.config_enums import ConfigCategory\n      from automata_docs.core.symbol.parser import parse_symbol\n      from automata_docs.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata_docs.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata_docs.core.utils import config_fpath\n      \n    Class Docstring:\n      Manages the occurrences of a symbol in a graph\n      \n    Methods:\n      def __init__(self, graph: nx.MultiDiGraph, document: Any):\n              \"\"\"\n              Args:\n                  graph (nx.MultiDiGraph): A networkx graph\n                  document (Any): A Document object\n              \"\"\"\n              self._graph = graph\n              self.document = document\n      \n          \n      def process(self):\n              \"\"\"\n              Processes the occurrences in the local graph\n              \"\"\"\n              for occurrence in self.document.occurrences:\n                  try:\n                      occurrence_symbol = parse_symbol(occurrence.symbol)\n                  except Exception as e:\n                      logger.error(f\"Parsing symbol {occurrence.symbol} failed with error {e}\")\n                      continue\n      \n                  occurrence_range = tuple(occurrence.range)\n                  occurrence_roles = _OccurrenceManager._process_symbol_roles(occurrence.symbol_roles)\n                  occurrence_reference = SymbolReference(\n                      symbol=occurrence_symbol,\n                      line_number=occurrence_range[0],\n                      column_number=occurrence_range[1],\n                      roles=occurrence_roles,\n                  )\n                  self._graph.add_edge(\n                      occurrence_symbol,\n                      self.document.relative_path,\n                      symbol_reference=occurrence_reference,\n                      label=\"reference\",\n                  )\n                  if occurrence_roles.get(SymbolRole.Name(SymbolRole.Definition)):\n                      # TODO this is gross\n                      incorrect_contains_edges = [\n                          (source, target)\n                          for source, target, data in self._graph.in_edges(occurrence_symbol, data=True)\n                          if data.get(\"label\") == \"contains\"\n                      ]\n                      for source, target in incorrect_contains_edges:\n                          self._graph.remove_edge(source, target)\n      \n                      self._graph.add_edge(\n                          self.document.relative_path,\n                          occurrence_symbol,\n                          label=\"contains\",\n                      )\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.graph.GraphBuilder._process_occurrences\n    \n      Class Docstring:\n        Processes the occurrences in the local graph\n        \n        Args:\n        document (Any): A Document object\n        \n      Methods:\n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.IndentManager\n    \n      Class Docstring:\n        A context manager to manage the indentation level\n        \n      Methods:\n        IndentManager(self) -> None\n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext.IndentManager\n    \n      Class Docstring:\n        A context manager to manage the indentation level\n        \n      Methods:\n        IndentManager(self) -> None\n        \n    automata_docs.core.symbol.graph._CallerCalleeManager\n    \n      Class Docstring:\n        Manages the caller-callee relationships of a symbol in a graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, document: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    document (Any): A Document object\n                \"\"\"\n                self._graph = graph\n                self.navigator = _SymbolGraphNavigator(graph)\n                self.document = document\n        \n            \n        process(self) -> None\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity\n    \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata_docs.core.symbol.graph.GraphBuilder\n    \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.symbol_types.SymbolReference\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.graph`/_RelationshipManager#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "_RelationshipManager", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class _RelationshipManager:\n    \"\"\"\n    Manages the relationships between symbols in a graph\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, symbol_information: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            symbol_information (Any): A SymbolInformation object\n        \"\"\"\n        self._graph = graph\n        self.symbol_information = symbol_information\n\n    def process(self):\n        \"\"\"\n        Processes the relationships in the local graph\n        \"\"\"\n        for relationship in self.symbol_information.relationships:\n            relationship_labels = MessageToDict(relationship)\n            relationship_labels.pop(\"symbol\")\n            related_symbol = parse_symbol(relationship.symbol)\n            self._graph.add_edge(\n                self.symbol_information.symbol,\n                related_symbol,\n                label=\"relationship\",\n                **relationship_labels,\n            )\n\n\n", "document": "# _RelationshipManager\n\n`_RelationshipManager` is a class that manages the relationships between symbols in a graph. It is designed to work with `networkx.MultiDiGraph` objects and the `SymbolInformation` object to process and manage the relationships in the graph.\n\n## Overview\n\nThe class has an `__init__()` method that takes a graph and a `SymbolInformation` object as arguments. It also has a `process()` method that processes the relationships in the local graph. The class is closely related to other symbols like `_CallerCalleeManager`, `Symbol`, and `GraphBuilder`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.graph._CallerCalleeManager`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.GraphBuilder`\n- `automata_docs.core.symbol.graph._SymbolGraphNavigator.get_symbol_relationships`\n\n## Example\n\nUsing `_RelationshipManager` to process relationships in a graph:\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _RelationshipManager\nfrom automata_docs.core.symbol_symbol_types import Symbol\nfrom automata_docs.core.symbol_symbol_information import SymbolInformation\n\ngraph = nx.MultiDiGraph()\n\n# Note that symbol_information would usually be obtained through other means\n# For demonstration purposes, we will create an instance of SymbolInformation here\nsymbol_information = SymbolInformation()\n\nrelationship_manager = _RelationshipManager(graph, symbol_information)\nrelationship_manager.process()\n```\n\n## Limitations\n\nThe primary limitation of `_RelationshipManager` is that it is designed to work specifically with `networkx.MultiDiGraph` objects, and may not function properly with other graph representations. It also relies on a specific structure of `SymbolInformation` objects, which may not be easily extensible.\n\n## Follow-up Questions:\n\nAre there alternative graph data structures that we may want to support in the future?", "summary": "The `_RelationshipManager` class manages relationships between symbols in a graph and is designed to work with `networkx.MultiDiGraph` objects and the `SymbolInformation` object. The class has two main methods: `__init__()` which takes a graph and a `SymbolInformation` object as arguments, and `process()` which processes the relationships in the local graph. The primary limitation of `_RelationshipManager` is its specific compatibility with `networkx.MultiDiGraph` objects and a particular structure of `SymbolInformation` objects, which might not be easily extendable.\n\nExample:\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _RelationshipManager\nfrom automata_docs.core.symbol_symbol_types import Symbol\nfrom automata_docs.core.symbol_symbol_information import SymbolInformation\n\ngraph = nx.MultiDiGraph()\nsymbol_information = SymbolInformation()\nrelationship_manager = _RelationshipManager(graph, symbol_information)\nrelationship_manager.process()\n```", "context": "\n    Generate the documentation for _RelationshipManager using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.graph._RelationshipManager -\n  \n    Import Statements:\n      import logging\n      import os\n      import networkx as nx\n      from dataclasses import dataclass\n      from typing import Any, Dict, List, Optional, Set\n      from google.protobuf.json_format import MessageToDict\n      from tqdm import tqdm\n      from automata_docs.config.config_enums import ConfigCategory\n      from automata_docs.core.symbol.parser import parse_symbol\n      from automata_docs.core.symbol.scip_pb2 import Index, SymbolRole\n      from automata_docs.core.symbol.symbol_types import (\n          Symbol,\n          SymbolDescriptor,\n          SymbolFile,\n          SymbolReference,\n      )\n      from automata_docs.core.symbol.symbol_utils import convert_to_fst_object, get_rankable_symbols\n      from automata_docs.core.utils import config_fpath\n      \n    Class Docstring:\n      Manages the relationships between symbols in a graph\n      \n    Methods:\n      def __init__(self, graph: nx.MultiDiGraph, symbol_information: Any):\n              \"\"\"\n              Args:\n                  graph (nx.MultiDiGraph): A networkx graph\n                  symbol_information (Any): A SymbolInformation object\n              \"\"\"\n              self._graph = graph\n              self.symbol_information = symbol_information\n      \n          \n      def process(self):\n              \"\"\"\n              Processes the relationships in the local graph\n              \"\"\"\n              for relationship in self.symbol_information.relationships:\n                  relationship_labels = MessageToDict(relationship)\n                  relationship_labels.pop(\"symbol\")\n                  related_symbol = parse_symbol(relationship.symbol)\n                  self._graph.add_edge(\n                      self.symbol_information.symbol,\n                      related_symbol,\n                      label=\"relationship\",\n                      **relationship_labels,\n                  )\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.graph._CallerCalleeManager\n    \n      Class Docstring:\n        Manages the caller-callee relationships of a symbol in a graph.\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, document: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    document (Any): A Document object\n                \"\"\"\n                self._graph = graph\n                self.navigator = _SymbolGraphNavigator(graph)\n                self.document = document\n        \n            \n        process(self) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.graph.GraphBuilder\n    \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n        build_graph(self) -> None\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator.get_symbol_relationships\n    \n      Methods:\n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.graph.GraphBuilder._process_relationships\n    \n      Class Docstring:\n        Processes the relationships in the local graph\n        \n        Args:\n        document (Any): A Document object\n        \n      Methods:\n    automata_docs.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.core.symbol.graph.GraphBuilder._process_caller_callee_relationships\n    \n      Class Docstring:\n        Processes the caller-callee relationships in the local graph\n        \n        Args:\n        document (Any): A Document object\n        \n      Methods:\n    automata_docs.core.symbol.graph._CallerCalleeManager.process\n    \n      Class Docstring:\n        Processes the caller-callee relationships in the local graph\n        \n        Note that this is an expensive operation, and should be used sparingly\n        \n      Methods:\n        process(self) -> None\n        \n    automata_docs.core.context.py_context.retriever.PyContextRetriever.IndentManager\n    \n      Class Docstring:\n        A context manager to manage the indentation level\n        \n      Methods:\n        IndentManager(self) -> None\n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.parser`/SymbolParser#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.parser", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolParser", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolParser:\n    \"\"\"\n    Translation of the logic defined in\n    https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n    to parse URIs into structured objects.\n    It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n    \"\"\"\n\n    def __init__(self, symbol: str):\n        \"\"\"\n        Args:\n            symbol (str): The symbol URI to parse\n        \"\"\"\n        self.symbol = symbol\n        self.index = 0\n        self.symbol_str = symbol\n\n    def error(self, message: str) -> ValueError:\n        \"\"\"\n        Create a ValueError with the symbol and a pointer to the error location\n\n        Args:\n            message (str): The error message\n        \"\"\"\n        return ValueError(f\"{message}\\n{self.symbol_str}\\n{'_' * self.index}^\")\n\n    def current(self) -> str:\n        \"\"\"\n        Get the current character in the symbol\n\n        Returns:\n            str - The current character in the symbol\n        \"\"\"\n        return self.symbol[self.index]\n\n    def peek_next(self) -> Optional[str]:\n        \"\"\"\n        Peek at the next character in the symbol\n\n        Returns:\n            Optional[str] - The next character in the symbol,\n                or None if there is no next character\n        \"\"\"\n        if self.index + 1 < len(self.symbol):\n            return self.symbol[self.index + 1]\n        return None\n\n    def parse_descriptors(self) -> List[SymbolDescriptor]:\n        \"\"\"\n        Parse all descriptors in the symbol\n\n        Returns:\n            List[SymbolDescriptor] - The descriptors in the symbol\n        \"\"\"\n        result = []\n        while self.index < len(self.symbol):\n            descriptor = self.parse_descriptor()\n            result.append(descriptor)\n        return result\n\n    def parse_descriptor(self) -> SymbolDescriptor:\n        \"\"\"\n        Parse a single descriptor in the symbol\n\n        Returns:\n            SymbolDescriptor - The descriptor in the symbol\n        \"\"\"\n        next_char = self.current()\n        if next_char == \"(\":\n            self.index += 1\n            name = self.accept_identifier(\"parameter name\")\n            descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Parameter)\n            self.accept_character(\")\", \"closing parameter name\")\n            return descriptor\n        elif next_char == \"[\":\n            self.index += 1\n            name = self.accept_identifier(\"type parameter name\")\n            descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.TypeParameter)\n            self.accept_character(\"]\", \"closing type parameter name\")\n            return descriptor\n        else:\n            name = self.accept_identifier(\"descriptor name\")\n            suffix = self.current()\n            self.index += 1\n            if suffix == \"(\":\n                disambiguator = \"\"\n                if self.current() != \")\":\n                    disambiguator = self.accept_identifier(\"method disambiguator\")\n                descriptor = SymbolDescriptor(\n                    name, SymbolDescriptor.ScipSuffix.Method, disambiguator\n                )\n                self.accept_character(\")\", \"closing method\")\n                self.accept_character(\".\", \"closing method\")\n                return descriptor\n            elif suffix == \"/\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Namespace)\n            elif suffix == \".\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Term)\n            elif suffix == \"#\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Type)\n            elif suffix == \":\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Meta)\n            elif suffix == \"!\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Macro)\n            else:\n                raise self.error(\"Expected a descriptor suffix\")\n\n    def accept_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        if self.current() == \"`\":\n            self.index += 1\n            return self.accept_backtick_escaped_identifier(what)\n        start = self.index\n        while self.index < len(self.symbol) and self.is_identifier_character(self.current()):\n            self.index += 1\n        if start == self.index:\n            raise self.error(\"empty identifier: \" + what)\n        return self.symbol[start : self.index]\n\n    def accept_space_escaped_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol, where the identifier is escaped by spaces\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        return self.accept_escaped_identifier(what, \" \")\n\n    def accept_backtick_escaped_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol,\n            where the identifier is escaped by backticks\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        return self.accept_escaped_identifier(what, \"`\")\n\n    def accept_escaped_identifier(self, what: str, escape_character: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol,\n            where the identifier is escaped by a given character\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        builder = []\n        while self.index < len(self.symbol):\n            ch = self.current()\n            if ch == escape_character:\n                self.index += 1\n                if self.index >= len(self.symbol):\n                    break\n                if self.current() == escape_character:\n                    builder.append(ch)\n                else:\n                    return \"\".join(builder)\n            else:\n                builder.append(ch)\n            self.index += 1\n        raise self.error(\n            f\"reached end of symbol while parsing <{what}>, expected a '{escape_character}' character\"\n        )\n\n    def accept_character(self, r: str, what: str):\n        \"\"\"\n        Accepts a character from the symbol\n\n        Args:\n            r (str): The character to accept\n            what (str): The name of the character\n        \"\"\"\n        if self.current() == r:\n            self.index += 1\n        else:\n            raise self.error(f\"expected '{r}', obtained '{self.current()}', while parsing {what}\")\n\n    @staticmethod\n    def is_identifier_character(c: str) -> bool:\n        \"\"\"\n        Checks if a character is a valid identifier character\n\n        Args:\n            c (str): The character to check\n\n        \"\"\"\n        return c.isalpha() or c.isdigit() or c in [\"-\", \"+\", \"$\", \"_\"]\n\n\n", "document": "# SymbolParser\n\n`SymbolParser` is a class that parses URIs into structured objects. It provides a way to translate the logic defined in the [Go implementation](https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go) for parsing URIs into Python.\n\n## Overview\n\n`SymbolParser` enables you to parse symbol URIs and extract identifiers, characters, and other parts of the URI into structured objects. The class provides methods for accepting escaped identifiers, space-escaped identifiers, identifier characters, and other components of a symbol URI.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.parser.parse_symbol`\n- `automata_docs.tests.unit.test_symbol_parser.test_parse_symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.context.py_context.retriever_slim.PyContext`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.build_symbol_doc_embedding`\n- `automata_docs.core.symbol.symbol_types.SymbolDescriptor`\n- `automata_docs.tests.unit.conftest.symbols`\n\n## Examples\n\n```python\nfrom automata_docs.core.symbol.parser import SymbolParser\n\nsymbol_uri = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\nparser = SymbolParser(symbol_uri)\ndescriptors = parser.parse_descriptors()\n\nfor descriptor in descriptors:\n    print(descriptor)\n```\n\n## Limitations\n\nThe primary limitation of the `SymbolParser` implementation is that it's not in hard sync with the Go implementation. Therefore, it may not parse URIs the same way as the Go implementation in some cases.\n\n## Follow-up Questions:\n\n- Are there any plans to synchronize the Python implementation with the Go implementation for improved compatibility?", "summary": "`SymbolParser` is a class that translates the logic of the Go implementation for parsing URIs into Python. It enables you to parse symbol URIs and extract various components such as identifiers and characters into structured objects. The class provides methods for managing escaped identifiers, space-escaped identifiers, identifier characters, and other parts of a symbol URI. However, the primary limitation of the `SymbolParser` implementation is that it's not in hard sync with the Go implementation, which may result in inconsistencies in some cases. \n\nExample:\n\n```python\nfrom automata_docs.core.symbol.parser import SymbolParser\n\nsymbol_uri = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\nparser = SymbolParser(symbol_uri)\ndescriptors = parser.parse_descriptors()\n\nfor descriptor in descriptors:\n    print(descriptor)\n```", "context": "\n    Generate the documentation for SymbolParser using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.parser.SymbolParser -\n  \n    Import Statements:\n      import re\n      from typing import List, Optional\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolDescriptor, SymbolPackage\n      \n    Class Docstring:\n      Translation of the logic defined in\n      https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n      to parse URIs into structured objects.\n      It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n      \n    Methods:\n      def __init__(self, symbol: str):\n              \"\"\"\n              Args:\n                  symbol (str): The symbol URI to parse\n              \"\"\"\n              self.symbol = symbol\n              self.index = 0\n              self.symbol_str = symbol\n      \n          \n      def accept_backtick_escaped_identifier(self, what: str) -> str:\n              \"\"\"\n              Accepts an identifier from the symbol,\n                  where the identifier is escaped by backticks\n      \n              Args:\n                  what (str): The name of the identifier\n      \n              Returns:\n                  str - The identifier\n              \"\"\"\n              return self.accept_escaped_identifier(what, \"`\")\n      \n          \n      def accept_character(self, r: str, what: str):\n              \"\"\"\n              Accepts a character from the symbol\n      \n              Args:\n                  r (str): The character to accept\n                  what (str): The name of the character\n              \"\"\"\n              if self.current() == r:\n                  self.index += 1\n              else:\n                  raise self.error(f\"expected '{r}', obtained '{self.current()}', while parsing {what}\")\n      \n          \n      def accept_escaped_identifier(self, what: str, escape_character: str) -> str:\n              \"\"\"\n              Accepts an identifier from the symbol,\n                  where the identifier is escaped by a given character\n      \n              Args:\n                  what (str): The name of the identifier\n      \n              Returns:\n                  str - The identifier\n              \"\"\"\n              builder = []\n              while self.index < len(self.symbol):\n                  ch = self.current()\n                  if ch == escape_character:\n                      self.index += 1\n                      if self.index >= len(self.symbol):\n                          break\n                      if self.current() == escape_character:\n                          builder.append(ch)\n                      else:\n                          return \"\".join(builder)\n                  else:\n                      builder.append(ch)\n                  self.index += 1\n              raise self.error(\n                  f\"reached end of symbol while parsing <{what}>, expected a '{escape_character}' character\"\n              )\n      \n          \n      def accept_identifier(self, what: str) -> str:\n              \"\"\"\n              Accepts an identifier from the symbol\n      \n              Args:\n                  what (str): The name of the identifier\n      \n              Returns:\n                  str - The identifier\n              \"\"\"\n              if self.current() == \"`\":\n                  self.index += 1\n                  return self.accept_backtick_escaped_identifier(what)\n              start = self.index\n              while self.index < len(self.symbol) and self.is_identifier_character(self.current()):\n                  self.index += 1\n              if start == self.index:\n                  raise self.error(\"empty identifier: \" + what)\n              return self.symbol[start : self.index]\n      \n          \n      def accept_space_escaped_identifier(self, what: str) -> str:\n              \"\"\"\n              Accepts an identifier from the symbol, where the identifier is escaped by spaces\n      \n              Args:\n                  what (str): The name of the identifier\n      \n              Returns:\n                  str - The identifier\n              \"\"\"\n              return self.accept_escaped_identifier(what, \" \")\n      \n          \n      def current(self) -> str:\n              \"\"\"\n              Get the current character in the symbol\n      \n              Returns:\n                  str - The current character in the symbol\n              \"\"\"\n              return self.symbol[self.index]\n      \n          \n      def error(self, message: str) -> ValueError:\n              \"\"\"\n              Create a ValueError with the symbol and a pointer to the error location\n      \n              Args:\n                  message (str): The error message\n              \"\"\"\n              return ValueError(f\"{message}\\n{self.symbol_str}\\n{'_' * self.index}^\")\n      \n          \n      @staticmethod\n          def is_identifier_character(c: str) -> bool:\n              \"\"\"\n              Checks if a character is a valid identifier character\n      \n              Args:\n                  c (str): The character to check\n      \n              \"\"\"\n              return c.isalpha() or c.isdigit() or c in [\"-\", \"+\", \"$\", \"_\"]\n      \n      \n      \n      def parse_descriptor(self) -> SymbolDescriptor:\n              \"\"\"\n              Parse a single descriptor in the symbol\n      \n              Returns:\n                  SymbolDescriptor - The descriptor in the symbol\n              \"\"\"\n              next_char = self.current()\n              if next_char == \"(\":\n                  self.index += 1\n                  name = self.accept_identifier(\"parameter name\")\n                  descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Parameter)\n                  self.accept_character(\")\", \"closing parameter name\")\n                  return descriptor\n              elif next_char == \"[\":\n                  self.index += 1\n                  name = self.accept_identifier(\"type parameter name\")\n                  descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.TypeParameter)\n                  self.accept_character(\"]\", \"closing type parameter name\")\n                  return descriptor\n              else:\n                  name = self.accept_identifier(\"descriptor name\")\n                  suffix = self.current()\n                  self.index += 1\n                  if suffix == \"(\":\n                      disambiguator = \"\"\n                      if self.current() != \")\":\n                          disambiguator = self.accept_identifier(\"method disambiguator\")\n                      descriptor = SymbolDescriptor(\n                          name, SymbolDescriptor.ScipSuffix.Method, disambiguator\n                      )\n                      self.accept_character(\")\", \"closing method\")\n                      self.accept_character(\".\", \"closing method\")\n                      return descriptor\n                  elif suffix == \"/\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Namespace)\n                  elif suffix == \".\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Term)\n                  elif suffix == \"#\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Type)\n                  elif suffix == \":\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Meta)\n                  elif suffix == \"!\":\n                      return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Macro)\n                  else:\n                      raise self.error(\"Expected a descriptor suffix\")\n      \n          \n      def parse_descriptors(self) -> List[SymbolDescriptor]:\n              \"\"\"\n              Parse all descriptors in the symbol\n      \n              Returns:\n                  List[SymbolDescriptor] - The descriptors in the symbol\n              \"\"\"\n              result = []\n              while self.index < len(self.symbol):\n                  descriptor = self.parse_descriptor()\n                  result.append(descriptor)\n              return result\n      \n          \n      def peek_next(self) -> Optional[str]:\n              \"\"\"\n              Peek at the next character in the symbol\n      \n              Returns:\n                  Optional[str] - The next character in the symbol,\n                      or None if there is no next character\n              \"\"\"\n              if self.index + 1 < len(self.symbol):\n                  return self.symbol[self.index + 1]\n              return None\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n    \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.context.py_context.retriever_slim.PyContext\n    \n      Class Docstring:\n        The PyContext is used to retrieve the context of a symbol in a Python project\n        \n      Methods:\n        IndentManager(self) -> None\n        \n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextConfig = PyContextConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n        get_context_buffer(self) -> str\n        \n        indent() -> str\n        \n        process_ast(self, symbol: Symbol) -> None\n        \n        process_docstring(self, ast_object: RedBaron) -> None\n        \n        process_headline(self, symbol: Symbol) -> None\n        \n        process_imports(self, symbol: Symbol) -> None\n        \n        process_message(self, message: str) -> None\n        \n        process_method(self, method: RedBaron, is_main_symbol: bool) -> None\n        \n        process_symbol(self,\n                symbol: Symbol,\n                related_symbols: List[Symbol] = [],\n            ) -> None\n        \n        reset(self) -> None\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.build_symbol_doc_embedding\n    \n      Methods:\n        build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_summary(input_doc: str) -> str\n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata_docs.tests.unit.conftest.symbols\n    \n        @pytest.fixture\n        def symbols():\n            symbols = [\n                # Symbol with a simple attribute\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#description.\"\n                ),\n                # Symbol with a method with foreign argument\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#load().(config_name)\"\n                ),\n                # Symbol with a class method, self as argument\n                # parse_symbol(\n                #     \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `tools.python_tools.python_ast_indexer`/PythonASTIndexer#get_module_path().(self)\"\n                # ),\n                # Symbol with a locally defined object\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.tasks.automata_task_executor`/logger.\"\n                ),\n                # Symbol with a class object and class variable\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#verbose.\"\n                ),\n                # Symbol with a function in a module\n                # parse_symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.coordinator.tests.test_automata_coordinator`/test().(coordinator)\"),\n                # Symbol with a class method\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `evals.eval_helpers`/EvalAction#__init__().(action)\"\n                ),\n                # Symbol with an object\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#CODE.\"\n                ),\n                # Class Name\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#\"\n                ),\n                # Init\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.base.tool`/ToolNotFoundError#__init__().\"\n                ),\n            ]\n        \n            return symbols\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.search.rank`/SymbolRank#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.search.rank", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolRank", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolRank:\n    \"\"\"Computes the PageRank algorithm on symbols in a graph\"\"\"\n\n    def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n        \"\"\"\n        Args:\n            graph (nx.DiGraph): A directed graph\n            config (Optional[SymbolRankConfig]): SymbolRank configuration\n        \"\"\"\n        if not config:\n            config = SymbolRankConfig()\n        self.graph = graph\n        self.config = config\n        self.config.validate(self.config)\n\n    def get_ranks(\n        self,\n        query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n        initial_weights: Optional[Dict[Symbol, float]] = None,\n        dangling: Optional[Dict[Symbol, float]] = None,\n    ) -> List[Tuple[Symbol, float]]:\n        \"\"\"\n        Calculate the SymbolRanks of each node in the graph\n\n        Args:\n            query_to_symbol_similarity (Optional[Dict[Symbol, float]]):\n                query_to_symbol_similarity dictionary\n            initial_weights (Optional[Dict[Symbol, float]]): Initial weights dictionary\n            dangling (Optional[Dict[Symbol, float]]): List of dangling nodes\n\n        Returns:\n            (Dict[str, float]): A dictionary mapping each node to its SymbolRank\n        \"\"\"\n        stochastic_graph = self._prepare_graph()\n        node_count = stochastic_graph.number_of_nodes()\n\n        rank_vec = self._prepare_initial_ranks(stochastic_graph, initial_weights)\n        prepared_similarity = self._prepare_query_to_symbol_similarity(\n            node_count, stochastic_graph, query_to_symbol_similarity\n        )\n        dangling_weights = self._prepare_dangling_weights(dangling, prepared_similarity)\n        dangling_nodes = self._get_dangling_nodes(stochastic_graph)\n\n        for _ in range(self.config.max_iterations):\n            last_rank_vec = rank_vec\n            rank_vec = {k: 0.0 for k in last_rank_vec.keys()}\n            danglesum = self.config.alpha * sum(last_rank_vec[node] for node in dangling_nodes)  # type: ignore\n            for node in rank_vec:\n                for nbr in stochastic_graph[node]:\n                    rank_vec[nbr] += (\n                        self.config.alpha\n                        * last_rank_vec[node]\n                        * stochastic_graph[node][nbr][self.config.weight_key]\n                    )\n                rank_vec[node] += (\n                    danglesum * dangling_weights[node]\n                    + (1.0 - self.config.alpha) * prepared_similarity[node]\n                )\n\n            err = sum(abs(rank_vec[node] - last_rank_vec[node]) for node in rank_vec)\n            if err < node_count * self.config.tolerance:\n                sorted_dict = sorted(rank_vec.items(), key=lambda x: x[1], reverse=True)\n                return sorted_dict\n\n        raise NetworkXError(\n            \"SymbolRank: power iteration failed to converge in %d iterations.\"\n            % self.config.max_iterations\n        )\n\n    def _prepare_graph(self) -> nx.DiGraph:\n        \"\"\"\n        Prepare the graph for the SymbolRank algorithm. If the graph is not directed,\n        convert it to a directed graph. Create a stochastic graph from the given graph\n\n        Returns:\n            stochastic_graph (nx.DiGraph): A NetworkX stochastic DiGraph\n        \"\"\"\n        if not self.graph.is_directed():\n            direct_graph = self.graph.to_directed()\n        else:\n            direct_graph = self.graph\n\n        stochastic_graph = nx.stochastic_graph(direct_graph, weight=self.config.weight_key)\n        return stochastic_graph\n\n    def _prepare_initial_ranks(\n        self,\n        stochastic_graph: nx.DiGraph,\n        initial_weights: Optional[Dict[Symbol, float]],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare initial rank values for each node in the graph\n\n        Args:\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph.\n            initial_weights (Optional[Dict[Symbol, float]]): Initial weight for each node\n\n        Returns:\n            (Dict[Symbol, float]): A dictionary mapping each node to its initial rank\n        \"\"\"\n\n        node_count = stochastic_graph.number_of_nodes()\n        if initial_weights is None:\n            return {k: 1.0 / node_count for k in stochastic_graph}\n        else:\n            s = sum(initial_weights.values())\n            return {k: v / s for k, v in initial_weights.items()}\n\n    def _prepare_query_to_symbol_similarity(\n        self,\n        node_count: int,\n        stochastic_graph: nx.DiGraph,\n        query_to_symbol_similarity: Optional[Dict[Symbol, float]],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare the symbol similarity matrix\n\n        Note - The term \"personalization\" is used in the context of the PageRank algorithm\n            to refer to a mechanism that allows the modification of the rank computation\n            based on some user-defined preferences. In this instance, symbol similarity is\n            an implementation of personalization that allows the modification of the rank\n            computation based on symbol source-code similarity\n\n        Args:\n            node_count (int): Number of nodes in the graph\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph\n            query_to_symbol_similarity (Optional[Dict[Symbol, float]]): Similarity between the query\n                and each node\n\n        Returns:\n            (Dict[Symbol, float]): A dictionary mapping each node to its symbol similarity\n        \"\"\"\n        if query_to_symbol_similarity is None:\n            return {k: 1.0 / node_count for k in stochastic_graph}\n        else:\n            missing = set(self.graph) - set(query_to_symbol_similarity)\n            if missing:\n                raise NetworkXError(\n                    \"query_to_symbol_similarity dictionary must have a value for every node. Missing nodes %s\"\n                    % missing\n                )\n            s = sum(query_to_symbol_similarity.values())\n            return {k: v / s for k, v in query_to_symbol_similarity.items()}\n\n    def _prepare_dangling_weights(\n        self,\n        dangling: Optional[Dict[Symbol, float]],\n        query_to_symbol_similarity: Dict[Symbol, float],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare the weights for dangling nodes\n\n        Args:\n            dangling (list): List of dangling nodes.\n            query_to_symbol_similarity (Dict[str, float]): query_to_symbol_similarity dictionary\n\n        Returns:\n            (Dict[str, float]): A dictionary mapping each node to its weight\n        \"\"\"\n        if dangling is None:\n            return query_to_symbol_similarity\n        else:\n            missing = set(self.graph) - set(dangling)\n            if missing:\n                raise NetworkXError(\n                    \"Dangling node dictionary must have a value for every node. Missing nodes %s\"\n                    % missing\n                )\n            s = sum(dangling.values())\n            return {k: v / s for k, v in dangling.items()}\n\n    def _get_dangling_nodes(self, stochastic_graph: nx.DiGraph) -> List[Hashable]:\n        \"\"\"\n        Identify dangling nodes in the graph\n\n        Args:\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph\n\n        Returns:\n            (list): List of dangling nodes\n        \"\"\"\n        return [\n            node\n            for node in stochastic_graph\n            if stochastic_graph.out_degree(node, weight=self.config.weight_key) == 0.0\n        ]\n", "document": "# SymbolRank\n\n`SymbolRank` computes the PageRank algorithm on symbols in a graph. It takes a directed graph and an optional `SymbolRankConfig` as input, and calculates the SymbolRanks of each node in the graph. The class provides methods for processing the graph, preparing initial ranks, and calculating SymbolRanks.\n\n## Overview\n\n`SymbolRank` is useful for ranking symbols in a software system, such as methods, classes, and variables, based on their importance in the system's call graph. It can also be used for search and recommendation tasks, by providing a ranked list of symbols based on their relevancy and importance in the system. Using the PageRank algorithm, it identifies the most important symbols in the graph, taking into account the structure of the graph and the relationships between symbols.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n\n## Example\n\nThe following example demonstrates how to use `SymbolRank` to compute the SymbolRanks for a given directed graph `G` and `SymbolRankConfig` `config`.\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.search.rank import SymbolRank\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\n# Define a directed graph G (nodes and edges should be added in practice)\nG = nx.DiGraph()\n\n# Create a SymbolRankConfig\nconfig = SymbolRankConfig()\n\n# Instantiate a SymbolRank object\npagerank = SymbolRank(G, config=config)\n\n# Calculate SymbolRanks\nranks = pagerank.get_ranks()\n```\n\n## Limitations\n\nThe primary limitation of `SymbolRank` is its reliance on the PageRank algorithm, which has some known shortcomings, such as high computation costs for large graphs and sensitivity to graph structure. Additionally, `SymbolRank` assumes a specific graph representation using the NetworkX library, limiting its applicability to other graph representations.\n\n## Follow-up Questions:\n\n- Are there alternative ranking algorithms that can be used in addition to PageRank for ranking symbols in a graph?\n- Can `SymbolRank` be extended to support other graph representations beyond NetworkX?", "summary": "SymbolRank is a tool for computing the PageRank algorithm on symbols in a directed graph, which is useful for ranking symbols such as methods, classes, and variables in a software system based on their importance in the call graph. It can also be used for search and recommendation tasks by providing a ranked list of symbols based on their relevancy. However, it has some limitations, including high computation costs for large graphs and reliance on NetworkX library for graph representation. Below is an example of how to use SymbolRank to compute SymbolRanks for a given directed graph `G` and `SymbolRankConfig` `config`.\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.search.rank import SymbolRank\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\n# Define a directed graph G (nodes and edges should be added in practice)\nG = nx.DiGraph()\n\n# Create a SymbolRankConfig\nconfig = SymbolRankConfig()\n\n# Instantiate a SymbolRank object\npagerank = SymbolRank(G, config=config)\n\n# Calculate SymbolRanks\nranks = pagerank.get_ranks()\n```", "context": "\n    Generate the documentation for SymbolRank using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.search.rank.SymbolRank -\n  \n    Import Statements:\n      import networkx as nx\n      from typing import Dict, Hashable, List, Optional, Tuple\n      from networkx.exception import NetworkXError\n      from pydantic import BaseModel\n      from automata_docs.core.symbol.symbol_types import Symbol\n      \n    Class Docstring:\n      Computes the PageRank algorithm on symbols in a graph\n      \n    Methods:\n      def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n              \"\"\"\n              Args:\n                  graph (nx.DiGraph): A directed graph\n                  config (Optional[SymbolRankConfig]): SymbolRank configuration\n              \"\"\"\n              if not config:\n                  config = SymbolRankConfig()\n              self.graph = graph\n              self.config = config\n              self.config.validate(self.config)\n      \n          \n      def get_ranks(\n              self,\n              query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n              initial_weights: Optional[Dict[Symbol, float]] = None,\n              dangling: Optional[Dict[Symbol, float]] = None,\n          ) -> List[Tuple[Symbol, float]]:\n              \"\"\"\n              Calculate the SymbolRanks of each node in the graph\n      \n              Args:\n                  query_to_symbol_similarity (Optional[Dict[Symbol, float]]):\n                      query_to_symbol_similarity dictionary\n                  initial_weights (Optional[Dict[Symbol, float]]): Initial weights dictionary\n                  dangling (Optional[Dict[Symbol, float]]): List of dangling nodes\n      \n              Returns:\n                  (Dict[str, float]): A dictionary mapping each node to its SymbolRank\n              \"\"\"\n              stochastic_graph = self._prepare_graph()\n              node_count = stochastic_graph.number_of_nodes()\n      \n              rank_vec = self._prepare_initial_ranks(stochastic_graph, initial_weights)\n              prepared_similarity = self._prepare_query_to_symbol_similarity(\n                  node_count, stochastic_graph, query_to_symbol_similarity\n              )\n              dangling_weights = self._prepare_dangling_weights(dangling, prepared_similarity)\n              dangling_nodes = self._get_dangling_nodes(stochastic_graph)\n      \n              for _ in range(self.config.max_iterations):\n                  last_rank_vec = rank_vec\n                  rank_vec = {k: 0.0 for k in last_rank_vec.keys()}\n                  danglesum = self.config.alpha * sum(last_rank_vec[node] for node in dangling_nodes)  # type: ignore\n                  for node in rank_vec:\n                      for nbr in stochastic_graph[node]:\n                          rank_vec[nbr] += (\n                              self.config.alpha\n                              * last_rank_vec[node]\n                              * stochastic_graph[node][nbr][self.config.weight_key]\n                          )\n                      rank_vec[node] += (\n                          danglesum * dangling_weights[node]\n                          + (1.0 - self.config.alpha) * prepared_similarity[node]\n                      )\n      \n                  err = sum(abs(rank_vec[node] - last_rank_vec[node]) for node in rank_vec)\n                  if err < node_count * self.config.tolerance:\n                      sorted_dict = sorted(rank_vec.items(), key=lambda x: x[1], reverse=True)\n                      return sorted_dict\n      \n              raise NetworkXError(\n                  \"SymbolRank: power iteration failed to converge in %d iterations.\"\n                  % self.config.max_iterations\n              )\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_symbol_rank.test_get_ranks\n    \n        def test_get_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == nodes\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata_docs.tests.unit.test_symbol_rank.test_prepare_initial_ranks\n    \n        def test_prepare_initial_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            initial_ranks = pagerank._prepare_initial_ranks(G, None)\n            assert len(initial_ranks) == nodes\n            assert sum(initial_ranks.values()) == pytest.approx(1.0)\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.symbol.search.symbol_search.SymbolSearch\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.tests.unit.conftest.symbol_searcher\n    \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n        \n    automata_docs.core.embedding.embedding_types.NormType\n    \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.search.rank`/SymbolRankConfig#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.search.rank", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolRankConfig", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolRankConfig(BaseModel):\n    \"\"\"A configuration class for SymbolRank\"\"\"\n\n    alpha: float = 0.25\n    max_iterations: int = 100\n    tolerance: float = 1.0e-6\n    weight_key: str = \"weight\"\n\n    @classmethod\n    def validate(cls, config):\n        \"\"\"\n        Validate configuration parameters.\n\n        Args:\n            config (SymbolRankConfig): Configuration parameters.\n\n        Raises:\n            ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n        \"\"\"\n        if not 0 < config.alpha < 1:\n            raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n\n        if not 1.0e-8 < config.tolerance < 1.0e-4:\n            raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n\n\n", "document": "# SymbolRankConfig\n\n`SymbolRankConfig` is a configuration class for `SymbolRank`. It contains several parameters that can be used to configure the algorithm, including `alpha`, `max_iterations`, `tolerance`, and `weight_key`. This class also provides a `validate` method that checks if the given configuration is valid.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.tests.unit.test_symbol_rank.test_get_ranks`\n- `automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph`\n- `automata_docs.core.symbol.search.rank.SymbolRank`\n- `automata_docs.tests.unit.test_symbol_rank.test_prepare_initial_ranks`\n- `automata_docs.tests.unit.test_symbol_rank.test_pagerank_config_validation`\n- `automata_docs.tests.unit.conftest.symbol_searcher`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.embedding.embedding_types.NormType`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolRankConfig` and validate the configuration:\n\n```python\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\n# Create a SymbolRankConfig instance with custom parameters\nconfig = SymbolRankConfig(alpha=0.5, max_iterations=100, tolerance=1.0e-6, weight_key=\"weight\")\n\n# Validate the configuration\nconfig.validate(config)\n```\n\n## Limitations\n\nThe primary limitation of `SymbolRankConfig` is that it only supports specific value ranges for `alpha` and `tolerance`. For instance, `alpha` must be in the range (0, 1), and `tolerance` must be in the range (1e-4, 1e-8). If a value outside of these ranges is provided, a `ValueError` will be raised.\n\n## Follow-up Questions:\n\n- Are there any other configuration parameters that could be useful to include in the `SymbolRankConfig` class?\n- Are there plans to support additional validation checks for other configuration parameters, such as `max_iterations` and `weight_key`?", "summary": "`SymbolRankConfig` is a configuration class for `SymbolRank`, containing parameters like `alpha`, `max_iterations`, `tolerance`, and `weight_key`. It also has a `validate` method to check the validity of the given configuration. However, it has some limitations, such as supporting specific value ranges for `alpha` and `tolerance`. Providing a value outside these ranges results in a `ValueError`.\n\nExample:\n\n```python\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\n# Create a SymbolRankConfig instance with custom parameters\nconfig = SymbolRankConfig(alpha=0.5, max_iterations=100, tolerance=1.0e-6, weight_key=\"weight\")\n\n# Validate the configuration\nconfig.validate(config)\n```", "context": "\n    Generate the documentation for SymbolRankConfig using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.search.rank.SymbolRankConfig -\n  \n      class SymbolRankConfig(BaseModel):\n          \"\"\"A configuration class for SymbolRank\"\"\"\n      \n          alpha: float = 0.25\n          max_iterations: int = 100\n          tolerance: float = 1.0e-6\n          weight_key: str = \"weight\"\n      \n          @classmethod\n          def validate(cls, config):\n              \"\"\"\n              Validate configuration parameters.\n      \n              Args:\n                  config (SymbolRankConfig): Configuration parameters.\n      \n              Raises:\n                  ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n              \"\"\"\n              if not 0 < config.alpha < 1:\n                  raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n      \n              if not 1.0e-8 < config.tolerance < 1.0e-4:\n                  raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_symbol_rank.test_get_ranks\n    \n        def test_get_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == nodes\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n    \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n    automata_docs.core.symbol.search.rank.SymbolRank\n    \n      Class Docstring:\n        Computes the PageRank algorithm on symbols in a graph\n        \n      Methods:\n        def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n                \"\"\"\n                Args:\n                    graph (nx.DiGraph): A directed graph\n                    config (Optional[SymbolRankConfig]): SymbolRank configuration\n                \"\"\"\n                if not config:\n                    config = SymbolRankConfig()\n                self.graph = graph\n                self.config = config\n                self.config.validate(self.config)\n        \n            \n        get_ranks(self,\n                query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n                initial_weights: Optional[Dict[Symbol, float]] = None,\n                dangling: Optional[Dict[Symbol, float]] = None,\n            ) -> List[Tuple[Symbol, float]]\n        \n    automata_docs.tests.unit.test_symbol_rank.test_prepare_initial_ranks\n    \n        def test_prepare_initial_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            initial_ranks = pagerank._prepare_initial_ranks(G, None)\n            assert len(initial_ranks) == nodes\n            assert sum(initial_ranks.values()) == pytest.approx(1.0)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_symbol_rank.test_pagerank_config_validation\n    \n        def test_pagerank_config_validation():\n            with pytest.raises(ValueError):\n                invalid_config_alpha = SymbolRankConfig(alpha=1.5, max_iterations=100, tolerance=1.0e-5)\n                invalid_config_alpha.validate(invalid_config_alpha)\n            with pytest.raises(ValueError):\n                invalid_config_tolerance = SymbolRankConfig(\n                    alpha=0.5, max_iterations=100, tolerance=1.0e-3\n                )\n                invalid_config_tolerance.validate(invalid_config_tolerance)\n        \n        \n        \n        \n    automata_docs.tests.unit.conftest.symbol_searcher\n    \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.embedding.embedding_types.NormType\n    \n    automata_docs.core.symbol.search.symbol_search.SymbolSearch\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n        exact_search(self, pattern: str) -> ExactSearchResult\n        \n        filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]) -> None\n        \n        find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]\n        \n        process_query(self, query: str) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]\n        \n        retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult\n        \n        shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray\n        \n        symbol_rank_search(self, query: str) -> SymbolRankResult\n        \n        symbol_references(self, symbol_uri: str) -> SymbolReferencesResult\n        \n        transform_dict_values(dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n            ) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.search.symbol_search`/SymbolSearch#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.search.symbol_search", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolSearch", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolSearch:\n    \"\"\"Searches for symbols in a SymbolGraph\"\"\"\n\n    def __init__(\n        self,\n        symbol_graph: SymbolGraph,\n        symbol_similarity: SymbolSimilarity,\n        symbol_rank_config: Optional[SymbolRankConfig],\n        code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n        *args,\n        **kwargs,\n    ):\n        \"\"\"\n        Args:\n            symbol_graph (SymbolGraph): A SymbolGraph\n            symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n            symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n            code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n        \"\"\"\n\n        if not code_subgraph:\n            code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                kwargs.get(\"flow_rank\", \"bidirectional\")\n            )\n        else:\n            if not code_subgraph.parent == symbol_graph:\n                raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n\n        graph_symbols = symbol_graph.get_all_available_symbols()\n        embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n        available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n        SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n\n        # TODO - Do we need to filter the SymbolGraph as well?\n        self.symbol_graph = symbol_graph\n        self.symbol_similarity = symbol_similarity\n        symbol_similarity.set_available_symbols(available_symbols)\n        self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n\n    def symbol_rank_search(self, query: str) -> SymbolRankResult:\n        \"\"\"\n        Fetches the list of the SymbolRank similar symbols ordered by rank\n\n        Args:\n            query (str): The query to search for\n\n        Returns:\n            A list of tuples of the form (symbol_uri, rank)\n        \"\"\"\n        query_vec = self.symbol_similarity.get_query_similarity_dict(query)\n        transformed_query_vec = SymbolSearch.transform_dict_values(\n            query_vec, SymbolSearch.shifted_z_score_sq\n        )\n        ranks = self.symbol_rank.get_ranks(query_to_symbol_similarity=transformed_query_vec)\n        return ranks\n\n    def symbol_references(self, symbol_uri: str) -> SymbolReferencesResult:\n        \"\"\"\n        Gets the list a symbol-based search\n\n        Args:\n            symbol_uri (str): The symbol to search for\n\n        Returns:\n            A dict of paths to files that contain the\n                symbol and corresponding line numbers\n        \"\"\"\n        # TODO - Add parsing upstream or here to parse references\n        return self.symbol_graph.get_references_to_symbol(parse_symbol(symbol_uri))\n\n    def retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult:\n        \"\"\"\n        Finds the raw text of a module, class, method, or standalone function\n\n        Args:\n            symbol_uri (str): The symbol to retrieve\n\n        Returns:\n            The raw text of the symbol or None if not found\n        \"\"\"\n        node = convert_to_fst_object(parse_symbol(symbol_uri))\n        return str(node) if node else None\n\n    def exact_search(self, pattern: str) -> ExactSearchResult:\n        \"\"\"\n        Performs a exact search across the indexed codebase\n\n        Args:\n            pattern (str): The pattern to search for\n\n        Returns:\n            A dict of paths to files that contain the pattern and corresponding line numbers\n        \"\"\"\n        return SymbolSearch.find_pattern_in_modules(pattern)\n\n    def process_query(\n        self, query: str\n    ) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]:\n        \"\"\"\n        Processes an NLP-formatted query and return the results of the appropriate search\n\n        Args:\n            query: The query to process\n\n        Returns:\n            The results of the search\n        \"\"\"\n        parts = query.split()\n        if len(parts) < 2:\n            raise ValueError(\n                \"Invalid NLP query. It must have at least two parts: 'type:...' and 'query...'\"\n            )\n\n        search_type = parts[0][len(\"type:\") :].lower()\n        query_remainder = \" \".join(parts[1:])\n\n        if search_type == \"symbol_references\":\n            return self.symbol_references(query_remainder)\n        elif search_type == \"symbol_rank\":\n            return self.symbol_rank_search(query_remainder)\n        elif search_type == \"exact\":\n            return self.exact_search(query_remainder)\n        elif search_type == \"source\":\n            return self.retrieve_source_code_by_symbol(query_remainder)\n        else:\n            raise ValueError(f\"Unknown search type: {search_type}\")\n\n    @staticmethod\n    def filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]):\n        \"\"\"\n        Filters a graph to only contain nodes that are in the available_symbols set\n\n        Args:\n            graph: The graph to filter\n            available_symbols: The set of symbols to keep\n        \"\"\"\n        graph_nodes = deepcopy(graph.nodes())\n        for symbol in graph_nodes:\n            if symbol not in available_symbols:\n                graph.remove_node(symbol)\n\n    @staticmethod\n    def shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray:\n        \"\"\"\n        Compute z-score of a list of values\n\n        Args:\n            values: List of values to compute z-score for\n\n        Returns:\n            List of z-scores\n        \"\"\"\n        if not isinstance(values, np.ndarray):\n            values = np.array(values)\n\n        mean = np.mean(values)\n        std_dev = np.std(values)\n        zscores = [(value - mean) / std_dev for value in values]\n        return (zscores - np.min(zscores)) ** 2\n\n    @staticmethod\n    def transform_dict_values(\n        dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n    ):\n        \"\"\"\n        Apply a function to each value in a dictionary and return a new dictionary\n\n        Args:\n            dictionary: Dictionary to transform\n            func: Function to apply to each value\n\n        Returns:\n            Dictionary with transformed values\n        \"\"\"\n        # Apply the function to the accumulated values\n        transformed_values = func([dictionary[key] for key in dictionary])\n\n        # Re-distribute the transformed values back into the dictionary\n        transformed_dict = {}\n        for i, key in enumerate(dictionary):\n            transformed_dict[key] = transformed_values[i]\n        return transformed_dict\n\n    @staticmethod\n    def find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]:\n        \"\"\"\n        Finds exact line matches for a given pattern string in all modules\n\n        Args:\n            pattern (str): The pattern string to search for\n\n        Returns:\n            Dict[str, List[int]]: A dictionary with module paths as keys and a list of line numbers as values\n        \"\"\"\n        matches = {}\n        module_map = LazyModuleTreeMap.cached_default()\n        for module_path, module in module_map.items():\n            if module:\n                lines = module.dumps().splitlines()\n                line_numbers = [i + 1 for i, line in enumerate(lines) if pattern in line.strip()]\n                if line_numbers:\n                    matches[module_path] = line_numbers\n        return matches\n", "document": "# SymbolSearch\n\n`SymbolSearch` is a class that provides functionality to search for symbols in a `SymbolGraph`. It supports different types of search queries, such as searching for exact matches, finding references to a symbol, retrieving the source code of a symbol, and ranking symbols based on their similarity to a query.\n\n## Overview\n\n`SymbolSearch` interacts with a `SymbolGraph` to search for symbols and access their metadata. It uses a `SymbolSimilarity` object to measure the similarity between the query and symbols in the graph. The class also provides a method to filter the graph to only include nodes that are part of the given available symbols.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.parser.parse_symbol`\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.core.symbol.search.rank.SymbolRank`\n\n## Example\n\nThis example demonstrates how to create an instance of `SymbolSearch` and perform several types of search queries.\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.symbol.search.symbol_search import SymbolSearch\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\nsymbol_graph = SymbolGraph()\nsymbol_similarity = SymbolSimilarity()\n\nsymbol_searcher = SymbolSearch(\n    symbol_graph=symbol_graph,\n    symbol_similarity=symbol_similarity,\n    symbol_rank_config=SymbolRankConfig(),\n)\n\n# Exact search\nexact_search_result = symbol_searcher.exact_search(\"pattern\")\n\n# Symbol references search\nsymbol_references_result = symbol_searcher.symbol_references(\"example_symbol_uri\")\n\n# Symbol rank search\nsymbol_rank_result = symbol_searcher.symbol_rank_search(\"query\")\n\n# Retrieve source code by symbol\nsource_code_result = symbol_searcher.retrieve_source_code_by_symbol(\"symbol_uri\")\n```\n\n## Limitations\n\n`SymbolSearch` assumes that the input `SymbolGraph` and `SymbolSimilarity` objects are correctly initialized and it does not perform any validation on them. It also depends on the availability of symbols in the graph and the embedding used (e.g. in `SymbolSimilarity`). The performance of the search may be affected by the level of detail provided in the `SymbolGraph` and the quality of the embeddings used for similarity measurements.\n\n## Follow-up Questions:\n\n- How can we improve the performance of the search by optimizing the processing of available symbols and their embeddings?\n- Is there any way to include additional search algorithms or ranking methods in the `SymbolSearch` class?", "summary": "SymbolSearch is a class that allows users to search for symbols in a SymbolGraph, supporting different types of search queries such as exact matches, finding references, retrieving source code, and ranking symbols based on similarity. It interacts with a SymbolGraph to search and access metadata, using a SymbolSimilarity object to measure the similarity between queries and symbols in the graph. The class also provides a method to filter the graph to include only nodes part of available symbols. However, its performance may be affected by the level of detail in the SymbolGraph and the quality of embeddings used for similarity measurements.\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.symbol.search.symbol_search import SymbolSearch\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\nsymbol_graph = SymbolGraph()\nsymbol_similarity = SymbolSimilarity()\n\nsymbol_searcher = SymbolSearch(\n    symbol_graph=symbol_graph,\n    symbol_similarity=symbol_similarity,\n    symbol_rank_config=SymbolRankConfig(),\n)\n\n# Exact search\nexact_search_result = symbol_searcher.exact_search(\"pattern\")\n\n# Symbol references search\nsymbol_references_result = symbol_searcher.symbol_references(\"example_symbol_uri\")\n\n# Symbol rank search\nsymbol_rank_result = symbol_searcher.symbol_rank_search(\"query\")\n\n# Retrieve source code by symbol\nsource_code_result = symbol_searcher.retrieve_source_code_by_symbol(\"symbol_uri\")\n```", "context": "\n    Generate the documentation for SymbolSearch using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.search.symbol_search.SymbolSearch -\n  \n    Import Statements:\n      import networkx as nx\n      import numpy as np\n      from copy import deepcopy\n      from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Union\n      from automata_docs.core.coding.py_coding.module_tree import LazyModuleTreeMap\n      from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n      from automata_docs.core.symbol.graph import SymbolGraph\n      from automata_docs.core.symbol.parser import parse_symbol\n      from automata_docs.core.symbol.search.rank import SymbolRank, SymbolRankConfig\n      from automata_docs.core.symbol.symbol_types import Symbol, SymbolReference\n      from automata_docs.core.symbol.symbol_utils import convert_to_fst_object\n      \n    Class Docstring:\n      Searches for symbols in a SymbolGraph\n      \n    Methods:\n      def __init__(\n              self,\n              symbol_graph: SymbolGraph,\n              symbol_similarity: SymbolSimilarity,\n              symbol_rank_config: Optional[SymbolRankConfig],\n              code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n              *args,\n              **kwargs,\n          ):\n              \"\"\"\n              Args:\n                  symbol_graph (SymbolGraph): A SymbolGraph\n                  symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                  symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                  code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n              \"\"\"\n      \n              if not code_subgraph:\n                  code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                      kwargs.get(\"flow_rank\", \"bidirectional\")\n                  )\n              else:\n                  if not code_subgraph.parent == symbol_graph:\n                      raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n      \n              graph_symbols = symbol_graph.get_all_available_symbols()\n              embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n              available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n              SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n      \n              # TODO - Do we need to filter the SymbolGraph as well?\n              self.symbol_graph = symbol_graph\n              self.symbol_similarity = symbol_similarity\n              symbol_similarity.set_available_symbols(available_symbols)\n              self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n      \n          \n      def exact_search(self, pattern: str) -> ExactSearchResult:\n              \"\"\"\n              Performs a exact search across the indexed codebase\n      \n              Args:\n                  pattern (str): The pattern to search for\n      \n              Returns:\n                  A dict of paths to files that contain the pattern and corresponding line numbers\n              \"\"\"\n              return SymbolSearch.find_pattern_in_modules(pattern)\n      \n          \n      @staticmethod\n          def filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]):\n              \"\"\"\n              Filters a graph to only contain nodes that are in the available_symbols set\n      \n              Args:\n                  graph: The graph to filter\n                  available_symbols: The set of symbols to keep\n              \"\"\"\n              graph_nodes = deepcopy(graph.nodes())\n              for symbol in graph_nodes:\n                  if symbol not in available_symbols:\n                      graph.remove_node(symbol)\n      \n          \n      @staticmethod\n          def find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]:\n              \"\"\"\n              Finds exact line matches for a given pattern string in all modules\n      \n              Args:\n                  pattern (str): The pattern string to search for\n      \n              Returns:\n                  Dict[str, List[int]]: A dictionary with module paths as keys and a list of line numbers as values\n              \"\"\"\n              matches = {}\n              module_map = LazyModuleTreeMap.cached_default()\n              for module_path, module in module_map.items():\n                  if module:\n                      lines = module.dumps().splitlines()\n                      line_numbers = [i + 1 for i, line in enumerate(lines) if pattern in line.strip()]\n                      if line_numbers:\n                          matches[module_path] = line_numbers\n              return matches\n      \n      def process_query(\n              self, query: str\n          ) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]:\n              \"\"\"\n              Processes an NLP-formatted query and return the results of the appropriate search\n      \n              Args:\n                  query: The query to process\n      \n              Returns:\n                  The results of the search\n              \"\"\"\n              parts = query.split()\n              if len(parts) < 2:\n                  raise ValueError(\n                      \"Invalid NLP query. It must have at least two parts: 'type:...' and 'query...'\"\n                  )\n      \n              search_type = parts[0][len(\"type:\") :].lower()\n              query_remainder = \" \".join(parts[1:])\n      \n              if search_type == \"symbol_references\":\n                  return self.symbol_references(query_remainder)\n              elif search_type == \"symbol_rank\":\n                  return self.symbol_rank_search(query_remainder)\n              elif search_type == \"exact\":\n                  return self.exact_search(query_remainder)\n              elif search_type == \"source\":\n                  return self.retrieve_source_code_by_symbol(query_remainder)\n              else:\n                  raise ValueError(f\"Unknown search type: {search_type}\")\n      \n          \n      def retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult:\n              \"\"\"\n              Finds the raw text of a module, class, method, or standalone function\n      \n              Args:\n                  symbol_uri (str): The symbol to retrieve\n      \n              Returns:\n                  The raw text of the symbol or None if not found\n              \"\"\"\n              node = convert_to_fst_object(parse_symbol(symbol_uri))\n              return str(node) if node else None\n      \n          \n      @staticmethod\n          def shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray:\n              \"\"\"\n              Compute z-score of a list of values\n      \n              Args:\n                  values: List of values to compute z-score for\n      \n              Returns:\n                  List of z-scores\n              \"\"\"\n              if not isinstance(values, np.ndarray):\n                  values = np.array(values)\n      \n              mean = np.mean(values)\n              std_dev = np.std(values)\n              zscores = [(value - mean) / std_dev for value in values]\n              return (zscores - np.min(zscores)) ** 2\n      \n          \n      def symbol_rank_search(self, query: str) -> SymbolRankResult:\n              \"\"\"\n              Fetches the list of the SymbolRank similar symbols ordered by rank\n      \n              Args:\n                  query (str): The query to search for\n      \n              Returns:\n                  A list of tuples of the form (symbol_uri, rank)\n              \"\"\"\n              query_vec = self.symbol_similarity.get_query_similarity_dict(query)\n              transformed_query_vec = SymbolSearch.transform_dict_values(\n                  query_vec, SymbolSearch.shifted_z_score_sq\n              )\n              ranks = self.symbol_rank.get_ranks(query_to_symbol_similarity=transformed_query_vec)\n              return ranks\n      \n          \n      def symbol_references(self, symbol_uri: str) -> SymbolReferencesResult:\n              \"\"\"\n              Gets the list a symbol-based search\n      \n              Args:\n                  symbol_uri (str): The symbol to search for\n      \n              Returns:\n                  A dict of paths to files that contain the\n                      symbol and corresponding line numbers\n              \"\"\"\n              # TODO - Add parsing upstream or here to parse references\n              return self.symbol_graph.get_references_to_symbol(parse_symbol(symbol_uri))\n      \n          \n      @staticmethod\n          def transform_dict_values(\n              dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n          ):\n              \"\"\"\n              Apply a function to each value in a dictionary and return a new dictionary\n      \n              Args:\n                  dictionary: Dictionary to transform\n                  func: Function to apply to each value\n      \n              Returns:\n                  Dictionary with transformed values\n              \"\"\"\n              # Apply the function to the accumulated values\n              transformed_values = func([dictionary[key] for key in dictionary])\n      \n              # Re-distribute the transformed values back into the dictionary\n              transformed_dict = {}\n              for i, key in enumerate(dictionary):\n                  transformed_dict[key] = transformed_values[i]\n              return transformed_dict\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_symbol_search.test_exact_search\n    \n        def test_exact_search(symbol_searcher):\n            with patch(\n                \"automata_docs.core.symbol.search.symbol_search.SymbolSearch.find_pattern_in_modules\",\n                return_value=[\"file1\", \"file2\"],\n            ):\n                result = symbol_searcher.exact_search(\"pattern1\")\n                assert result == [\"file1\", \"file2\"]\n        \n        \n        \n        \n    automata_docs.tests.unit.conftest.symbol_searcher\n    \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.tests.unit.test_symbol_search.test_process_queries\n    \n        def test_process_queries(symbols, symbol_searcher, symbol_graph_mock):\n            with patch.object(\n                symbol_searcher, \"symbol_references\", return_value=[\"ref1\", \"ref2\"]\n            ) as mock_method_0:\n                result = symbol_searcher.process_query(\"type:symbol_references %s\" % symbols[0].uri)\n                assert result == [\"ref1\", \"ref2\"]\n            mock_method_0.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(symbol_searcher, \"exact_search\", return_value={\"test\": 0}) as mock_method_1:\n                result = symbol_searcher.process_query(\"type:exact %s\" % symbols[0].uri)\n                assert result == {\"test\": 0}\n            mock_method_1.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"retrieve_source_code_by_symbol\", return_value=\"test\"\n            ) as mock_method_2:\n                result = symbol_searcher.process_query(\"type:source %s\" % symbols[0].uri)\n                assert result == \"test\"\n            mock_method_2.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"symbol_rank_search\", return_value=[(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            ) as mock_method_4:\n                result = symbol_searcher.process_query(\"type:symbol_rank %s\" % symbols[0].uri)\n                assert result == [(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            mock_method_4.assert_called_once_with(symbols[0].uri)\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"invalid_query\")\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"type:unknown query\")\n        \n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.core.symbol.parser.SymbolParser\n    \n      Class Docstring:\n        Translation of the logic defined in\n        https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n        to parse URIs into structured objects.\n        It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n        \n      Methods:\n        def __init__(self, symbol: str):\n                \"\"\"\n                Args:\n                    symbol (str): The symbol URI to parse\n                \"\"\"\n                self.symbol = symbol\n                self.index = 0\n                self.symbol_str = symbol\n        \n            \n        accept_backtick_escaped_identifier(self, what: str) -> str\n        \n        accept_character(self, r: str, what: str) -> None\n        \n        accept_escaped_identifier(self, what: str, escape_character: str) -> str\n        \n        accept_identifier(self, what: str) -> str\n        \n        accept_space_escaped_identifier(self, what: str) -> str\n        \n        current(self) -> str\n        \n        error(self, message: str) -> ValueError\n        \n        is_identifier_character(c: str) -> bool\n        \n        parse_descriptor(self) -> SymbolDescriptor\n        \n        parse_descriptors(self) -> List[SymbolDescriptor]\n        \n        peek_next(self) -> Optional[str]\n        \n    automata_docs.tests.unit.test_symbol_search.test_retrieve_source_code_by_symbol\n    \n        def test_retrieve_source_code_by_symbol(symbols, symbol_searcher):\n            with patch(\n                \"automata_docs.core.symbol.search.symbol_search.convert_to_fst_object\",\n                return_value=\"module1\",\n            ) as mock_method:\n                result = symbol_searcher.retrieve_source_code_by_symbol(symbols[0].uri)\n                assert result == \"module1\"\n            mock_method.assert_called_once_with(symbols[0])\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolReference\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata_docs.tests.unit.test_database_vector.test_lookup_symbol\n    \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.symbol_utils.convert_to_fst_object\n    \n      Class Docstring:\n        Converts a specified symbol into a red baron FST object\n        \n        Args:\n        symbol (str): The symbol which corresponds to a module, class, or method.\n        module_map (Optional[LazyModuleTreeMap]): The module tree mapping to use. If None, the default\n        \n        Returns:\n        Union[ClassNode, DefNode]: The RedBaron FST object for the class or method, or None if not found\n        \n        Raises:\n        ValueError: If the symbol is not found\n        \n        Note:\n        The optional argument is to allow us to run this function in mulitprocessing in the future,\n        because module map is not picklable (because redbaron objects are not picklable)\n        So the indexer would have to be created and destroyed in each process.\n        \n      Methods:\n        convert_to_fst_object(symbol: Symbol, module_map: Optional[LazyModuleTreeMap] = None) -> RedBaron\n        \n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity.get_query_similarity_dict\n    \n      Class Docstring:\n        Get the similarity scores of all symbols for the query_text\n        \n        Args:\n        query_text (str): The query text\n        \n        Returns:\n        A dictionary mapping each symbol's uri to its similarity score with the query\n        \n      Methods:\n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity.set_available_symbols\n    \n      Class Docstring:\n        Set the available symbols to use for similarity calculation\n        \n        Args:\n        available_symbols (Set[Symbol]): The available symbols to\n        use for similarity calculation\n        \n      Methods:\n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata_docs.core.symbol.search.rank.SymbolRank\n    \n      Class Docstring:\n        Computes the PageRank algorithm on symbols in a graph\n        \n      Methods:\n        def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n                \"\"\"\n                Args:\n                    graph (nx.DiGraph): A directed graph\n                    config (Optional[SymbolRankConfig]): SymbolRank configuration\n                \"\"\"\n                if not config:\n                    config = SymbolRankConfig()\n                self.graph = graph\n                self.config = config\n                self.config.validate(self.config)\n        \n            \n        get_ranks(self,\n                query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n                initial_weights: Optional[Dict[Symbol, float]] = None,\n                dangling: Optional[Dict[Symbol, float]] = None,\n            ) -> List[Tuple[Symbol, float]]\n        \n    automata_docs.core.symbol.search.rank.SymbolRankConfig\n    \n        class SymbolRankConfig(BaseModel):\n            \"\"\"A configuration class for SymbolRank\"\"\"\n        \n            alpha: float = 0.25\n            max_iterations: int = 100\n            tolerance: float = 1.0e-6\n            weight_key: str = \"weight\"\n        \n            @classmethod\n            def validate(cls, config):\n                \"\"\"\n                Validate configuration parameters.\n        \n                Args:\n                    config (SymbolRankConfig): Configuration parameters.\n        \n                Raises:\n                    ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n                \"\"\"\n                if not 0 < config.alpha < 1:\n                    raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n        \n                if not 1.0e-8 < config.tolerance < 1.0e-4:\n                    raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n        \n        \n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph.get_rankable_symbol_subgraph\n    \n      Class Docstring:\n        Gets a detailed subgraph of rankable symbols.\n        \n        Args:\n        symbol (str): The symbol in the form 'module`/ClassOrMethod#'\n        \n        Returns:\n        List[str]: The list of dependencies for the symbol.\n        TODO: Consider ways to make this more efficient.\n        TODO: Find ways to better handle edge cases\n        \n      Methods:\n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity\n    \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n        get_available_symbols(self) -> List[Symbol]\n        \n        get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]\n        \n        get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]\n        \n        set_available_symbols(self, available_symbols: Set[Symbol]) -> None\n        \n    automata_docs.core.symbol.graph.SymbolGraph.get_all_available_symbols\n    \n      Class Docstring:\n        Gets all symbols defined in the graph.\n        \n        Args:\n        None\n        Returns:\n        List[Symbol]: List of all defined symbols.\n        \n      Methods:\n        get_all_available_symbols(self) -> List[Symbol]\n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata_docs.core.symbol.graph.SymbolGraph.get_references_to_symbol\n    \n      Class Docstring:\n        Gets all references to a given module in the symbol graph.\n        \n        Args:\n        module (Symbol): The module to locate references for\n        Returns:\n        List[SymbolReference]: List of symbol references\n        \n      Methods:\n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/Symbol#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "Symbol", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass Symbol:\n    \"\"\"\n    Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n\n    Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n\n    # (<x>)+ stands for one or more repetitions of <x>\n    <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n    <package>              ::= <manager> ' ' <package-name> ' ' <version>\n    <scheme>               ::= any UTF-8, escape spaces with double space.\n    <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n    <package-name>         ::= same as above\n    <version>              ::= same as above\n    <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n    <namespace>            ::= <name> '/'\n    <type>                 ::= <name> '#'\n    <term>                 ::= <name> '.'\n    <meta>                 ::= <name> ':'\n    <macro>                ::= <name> '!'\n    <method>               ::= <name> '(' <method-disambiguator> ').'\n    <type-parameter>       ::= '[' <name> ']'\n    <parameter>            ::= '(' <name> ')'\n    <name>                 ::= <identifier>\n    <method-disambiguator> ::= <simple-identifier>\n    <identifier>           ::= <simple-identifier> | <escaped-identifier>\n    <simple-identifier>    ::= (<identifier-character>)+\n    <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n    <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n    <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n\n    Examples -\n    from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n\n    symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n    )\n\n    symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n    )\n    \"\"\"\n\n    uri: str\n    scheme: str\n    package: SymbolPackage\n    descriptors: Tuple[SymbolDescriptor, ...]\n\n    def __repr__(self) -> str:\n        \"\"\"Converts back into URI string\"\"\"\n        return f\"Symbol({self.uri}, {self.scheme}, {self.package}, {self.descriptors})\"\n\n    def __hash__(self) -> int:\n        \"\"\"Hashes the URI string\"\"\"\n        return hash(self.uri)\n\n    def __eq__(self, other):\n        \"\"\"Compares the URI string\"\"\"\n        if isinstance(other, Symbol):\n            return self.uri == other.uri\n        elif isinstance(other, str):\n            return self.uri == other\n        return False\n\n    def symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind:\n        \"\"\"Converts the suffix of the URI into a PyKind\"\"\"\n        return SymbolDescriptor.convert_scip_to_python_suffix(self.symbol_raw_kind_by_suffix())\n\n    def symbol_raw_kind_by_suffix(self) -> DescriptorProto:\n        \"\"\"Converts the suffix of the URI into a DescriptorProto\"\"\"\n        if self.uri.startswith(\"local\"):\n            return SymbolDescriptor.ScipSuffix.Local\n        if self.uri.endswith(\"/\"):\n            return SymbolDescriptor.ScipSuffix.Namespace\n        elif self.uri.endswith(\"#\"):\n            return SymbolDescriptor.ScipSuffix.Type\n        elif self.uri.endswith(\").\"):\n            return SymbolDescriptor.ScipSuffix.Method\n        elif self.uri.endswith(\".\"):\n            return SymbolDescriptor.ScipSuffix.Term\n        elif self.uri.endswith(\":\"):\n            return SymbolDescriptor.ScipSuffix.Meta\n        elif self.uri.endswith(\")\"):\n            return SymbolDescriptor.ScipSuffix.Parameter\n        elif self.uri.endswith(\"]\"):\n            return SymbolDescriptor.ScipSuffix.TypeParameter\n        else:\n            raise ValueError(f\"Invalid descriptor suffix: {self.uri}\")\n\n    def parent(self) -> \"Symbol\":\n        \"\"\"Returns the parent symbol of the current symbol\"\"\"\n        parent_descriptors = list(self.descriptors)[:-1]\n        return Symbol(self.uri, self.scheme, self.package, tuple(parent_descriptors))\n\n    @property\n    def dotpath(self) -> str:\n        \"\"\"Returns the dotpath of the symbol\"\"\"\n        return \".\".join([ele.name for ele in self.descriptors])\n\n    @property\n    def module_name(self) -> str:\n        \"\"\"Returns the module name of the symbol\"\"\"\n        return self.descriptors[0].name\n\n    @staticmethod\n    def is_local(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is local\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Local\n\n    @staticmethod\n    def is_meta(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is meta\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Meta\n\n    @staticmethod\n    def is_parameter(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is parameter\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Parameter\n\n    @staticmethod\n    def is_protobuf(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is a protobuf symbol\"\"\"\n        return symbol.module_name.endswith(\"pb2\")\n\n    @classmethod\n    def from_string(cls, symbol_str: str) -> \"Symbol\":\n        \"\"\"\n        Creates a Symbol instance from a string representation\n\n        :param symbol_str: The string representation of the Symbol\n        :return: A Symbol instance\n        \"\"\"\n        # Assuming symbol_str is in the format: \"Symbol({uri}, {scheme}, Package({manager} {name} {version}), [{Descriptor},...])\"\n        # Parse the symbol_str to extract the uri, scheme, package_str, and descriptors_str\n        match = re.search(r\"Symbol\\((.*?), (.*?), Package\\((.*?)\\), \\((.*?)\\)\\)\", symbol_str)\n        if not match:\n            raise ValueError(f\"Invalid symbol_str: {symbol_str}\")\n        uri, _, __, ___ = match.groups()\n        # In current implementation, only the uri is used in re-construcing the symbol\n        from automata_docs.core.symbol.parser import parse_symbol\n\n        return parse_symbol(uri)\n\n\n", "document": "# Symbol\n\n`Symbol` is similar to a URI and identifies a class, method, or a local variable. It has the ability to interact with rich metadata about symbols such as the docstring. Symbol has a standardized string representation, which is the following: `<symbol> ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>`. The class is part of the `automata_docs.core.symbol.symbol_types` module and the import statement is as follows:\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol\n```\n\n## Overview\n\n`Symbol` allows parsing and transforming of Symbol string representations and provides information about the symbol. It supports comparison, hashing, and string conversion. Moreover, it provides utility methods such as `dotpath`, `module_name`, `parent`, and others to facilitate symbol examination and manipulation.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.tests.unit.test_symbol_parser.test_parse_symbol`\n- `automata_docs.core.symbol.parser.parse_symbol`\n- `automata_docs.tests.unit.test_database_vector.test_delete_symbol`\n- `automata_docs.tests.unit.test_database_vector.test_lookup_symbol`\n- `automata_docs.tests.unit.test_symbol_parser.test_is_local_symbol`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.tests.unit.test_symbol_graph.test_get_all_symbols`\n- `automata_docs.tests.unit.test_database_vector.test_add_symbol`\n\n## Example\n\nThe following examples demonstrate how to create `Symbol` instances using a class and a method.\n\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol\nfrom automata_docs.core.symbol.parser import parse_symbol\n\nsymbol_class = parse_symbol(\n    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n)\n\nsymbol_method = parse_symbol(\n    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n)\n```\n\n## Limitations\n\nThe primary limitation of `Symbol` is that it mostly relies on its string representation for parsing and transformation. As a result, any changes or updates to the string representation may have undesired effects on the behavior of the `Symbol` instances.\n\n## Follow-up Questions:\n\n- How can we handle non-standard string representations when working with Symbol?\n- How can we avoid potential issues caused by updates to the string representation of Symbol?", "summary": "`Symbol` is a class in the `automata_docs.core.symbol.symbol_types` module that identifies a class, method, or local variable, similar to a URI. It allows parsing and transforming symbol string representations, supports comparison, hashing, and string conversion, and provides utility methods for symbol examination and manipulation. The primary limitation of `Symbol` is its reliance on string representation for parsing and transformation, which means changes to the string representation may affect the behavior of `Symbol` instances.\n\nExample of creating `Symbol` instances:\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol\nfrom automata_docs.core.symbol.parser import parse_symbol\n\nsymbol_class = parse_symbol(\n    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n)\n\nsymbol_method = parse_symbol(\n    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n)\n```", "context": "\n    Generate the documentation for Symbol using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.Symbol -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n    Class Docstring:\n      Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n      \n      Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n      \n      # (<x>)+ stands for one or more repetitions of <x>\n      <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n      <package>              ::= <manager> ' ' <package-name> ' ' <version>\n      <scheme>               ::= any UTF-8, escape spaces with double space.\n      <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n      <package-name>         ::= same as above\n      <version>              ::= same as above\n      <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n      <namespace>            ::= <name> '/'\n      <type>                 ::= <name> '#'\n      <term>                 ::= <name> '.'\n      <meta>                 ::= <name> ':'\n      <macro>                ::= <name> '!'\n      <method>               ::= <name> '(' <method-disambiguator> ').'\n      <type-parameter>       ::= '[' <name> ']'\n      <parameter>            ::= '(' <name> ')'\n      <name>                 ::= <identifier>\n      <method-disambiguator> ::= <simple-identifier>\n      <identifier>           ::= <simple-identifier> | <escaped-identifier>\n      <simple-identifier>    ::= (<identifier-character>)+\n      <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n      <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n      <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n      \n      Examples -\n      from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n      \n      symbol_class = parse_symbol(\n      \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n      )\n      \n      symbol_method = parse_symbol(\n      \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n      )\n      \n    Methods:\n      def __eq__(self, other):\n              \"\"\"Compares the URI string\"\"\"\n              if isinstance(other, Symbol):\n                  return self.uri == other.uri\n              elif isinstance(other, str):\n                  return self.uri == other\n              return False\n      \n          \n      def __hash__(self) -> int:\n              \"\"\"Hashes the URI string\"\"\"\n              return hash(self.uri)\n      \n          \n      def __repr__(self) -> str:\n              \"\"\"Converts back into URI string\"\"\"\n              return f\"Symbol({self.uri}, {self.scheme}, {self.package}, {self.descriptors})\"\n      \n          \n      @property\n          def dotpath(self) -> str:\n              \"\"\"Returns the dotpath of the symbol\"\"\"\n              return \".\".join([ele.name for ele in self.descriptors])\n      \n          \n      @classmethod\n          def from_string(cls, symbol_str: str) -> \"Symbol\":\n              \"\"\"\n              Creates a Symbol instance from a string representation\n      \n              :param symbol_str: The string representation of the Symbol\n              :return: A Symbol instance\n              \"\"\"\n              # Assuming symbol_str is in the format: \"Symbol({uri}, {scheme}, Package({manager} {name} {version}), [{Descriptor},...])\"\n              # Parse the symbol_str to extract the uri, scheme, package_str, and descriptors_str\n              match = re.search(r\"Symbol\\((.*?), (.*?), Package\\((.*?)\\), \\((.*?)\\)\\)\", symbol_str)\n              if not match:\n                  raise ValueError(f\"Invalid symbol_str: {symbol_str}\")\n              uri, _, __, ___ = match.groups()\n              # In current implementation, only the uri is used in re-construcing the symbol\n              from automata_docs.core.symbol.parser import parse_symbol\n      \n              return parse_symbol(uri)\n      \n      \n      \n      @staticmethod\n          def is_local(symbol: \"Symbol\") -> bool:\n              \"\"\"Returns True if the symbol is local\"\"\"\n              return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Local\n      \n          \n      @staticmethod\n          def is_meta(symbol: \"Symbol\") -> bool:\n              \"\"\"Returns True if the symbol is meta\"\"\"\n              return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Meta\n      \n          \n      @staticmethod\n          def is_parameter(symbol: \"Symbol\") -> bool:\n              \"\"\"Returns True if the symbol is parameter\"\"\"\n              return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Parameter\n      \n          \n      @staticmethod\n          def is_protobuf(symbol: \"Symbol\") -> bool:\n              \"\"\"Returns True if the symbol is a protobuf symbol\"\"\"\n              return symbol.module_name.endswith(\"pb2\")\n      \n          \n      @property\n          def module_name(self) -> str:\n              \"\"\"Returns the module name of the symbol\"\"\"\n              return self.descriptors[0].name\n      \n          \n      def parent(self) -> \"Symbol\":\n              \"\"\"Returns the parent symbol of the current symbol\"\"\"\n              parent_descriptors = list(self.descriptors)[:-1]\n              return Symbol(self.uri, self.scheme, self.package, tuple(parent_descriptors))\n      \n          \n      def symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind:\n              \"\"\"Converts the suffix of the URI into a PyKind\"\"\"\n              return SymbolDescriptor.convert_scip_to_python_suffix(self.symbol_raw_kind_by_suffix())\n      \n          \n      def symbol_raw_kind_by_suffix(self) -> DescriptorProto:\n              \"\"\"Converts the suffix of the URI into a DescriptorProto\"\"\"\n              if self.uri.startswith(\"local\"):\n                  return SymbolDescriptor.ScipSuffix.Local\n              if self.uri.endswith(\"/\"):\n                  return SymbolDescriptor.ScipSuffix.Namespace\n              elif self.uri.endswith(\"#\"):\n                  return SymbolDescriptor.ScipSuffix.Type\n              elif self.uri.endswith(\").\"):\n                  return SymbolDescriptor.ScipSuffix.Method\n              elif self.uri.endswith(\".\"):\n                  return SymbolDescriptor.ScipSuffix.Term\n              elif self.uri.endswith(\":\"):\n                  return SymbolDescriptor.ScipSuffix.Meta\n              elif self.uri.endswith(\")\"):\n                  return SymbolDescriptor.ScipSuffix.Parameter\n              elif self.uri.endswith(\"]\"):\n                  return SymbolDescriptor.ScipSuffix.TypeParameter\n              else:\n                  raise ValueError(f\"Invalid descriptor suffix: {self.uri}\")\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n    \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.tests.unit.test_database_vector.test_delete_symbol\n    \n        def test_delete_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, [1, 2, 3])\n            vector_db.add(embedded_symbol)\n            vector_db.discard(symbol)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_lookup_symbol\n    \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n        \n    automata_docs.tests.unit.test_symbol_parser.test_is_local_symbol\n    \n        def test_is_local_symbol(symbols):\n            for symbol in symbols:\n                assert is_local_symbol(\"local \" + symbol.uri)\n        \n        \n        \n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.tests.unit.test_symbol_graph.test_get_all_symbols\n    \n        def test_get_all_symbols(symbol_graph):\n            graph_symbols = symbol_graph.get_all_available_symbols()\n            assert isinstance(graph_symbols, list)\n            assert all(isinstance(s, Symbol) for s in graph_symbols)\n        \n        \n    automata_docs.tests.unit.test_database_vector.test_add_symbol\n    \n        def test_add_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, [1, 2, 3])\n            vector_db.add(embedded_symbol)\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/SymbolCodeEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolCodeEmbedding", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolCodeEmbedding(SymbolEmbedding):\n    \"\"\"Embedding for symbol code\"\"\"\n\n    def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n        super().__init__(symbol, vector)\n        self.source_code = source_code\n\n\n", "document": "# SymbolCodeEmbedding\n\n`SymbolCodeEmbedding` is a class for embedding symbol codes into a standardized format. It extends the `SymbolEmbedding` abstract base class and adds a `source_code` attribute to store the source code of the symbol.\n\n## Overview\n\n`SymbolCodeEmbedding` is designed for handling embeddings of symbol codes in a structured and maintainable way. It stores the symbol and its vector representation, along with the source code of the symbol. The class is used in conjunction with the `SymbolCodeEmbeddingHandler`, which provides methods for getting and updating symbol embeddings.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.symbol.symbol_types.SymbolDocEmbedding`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `SymbolCodeEmbedding`:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolCodeEmbedding, Symbol\nfrom automata_docs.core.symbol.parser import parse_symbol\nimport numpy as np\n\nsymbol_str = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_str)\nvector = np.random.random((10,))\n\nsource_code = \"def __init__(self, message: str, tool_name: str):\\n   super().__init__(message)\\n   self.tool_name = tool_name\"\n\nsymbol_code_embedding = SymbolCodeEmbedding(symbol, vector, source_code)\n```\n\n## Limitations\n\n`SymbolCodeEmbedding` relies on having a valid instance of the `Symbol` class as well as a corresponding `np.array` for the vector representation. Additionally, it is limited to using the `source_code` attribute to store the source code of the symbol, which may not be optimal for all use cases.\n\n## Follow-up Questions:\n\n- Are there any potential use cases where the `source_code` attribute might be insufficient or not suitable for storing the source code of a symbol?\n\n- In the current implementation, how might one handle cases where a symbol's source code changes over time? Would it require updating the `SymbolCodeEmbedding` instance, or is there a more optimal way to handle this?", "summary": "`SymbolCodeEmbedding` is a class that extends the `SymbolEmbedding` abstract base class and is used to embed symbol codes into a standardized format. The class stores the symbol, its vector representation, and the source code of the symbol. It works in conjunction with the `SymbolCodeEmbeddingHandler`, which provides methods for getting and updating symbol embeddings. To create an instance of `SymbolCodeEmbedding`, one must have a valid instance of the `Symbol` class and a corresponding `np.array` for the vector representation. The class is limited to using the `source_code` attribute to store the source code of the symbol, which may not be suitable for all use cases.\n\nFor example, to create a `SymbolCodeEmbedding` instance, you can use the following code:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolCodeEmbedding, Symbol\nfrom automata_docs.core.symbol.parser import parse_symbol\nimport numpy as np\n\nsymbol_str = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_str)\nvector = np.random.random((10,))\n\nsource_code = \"def __init__(self, message: str, tool_name: str):\\n   super().__init__(message)\\n   self.tool_name = tool_name\"\n\nsymbol_code_embedding = SymbolCodeEmbedding(symbol, vector, source_code)\n```", "context": "\n    Generate the documentation for SymbolCodeEmbedding using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n    Class Docstring:\n      Embedding for symbol code\n      \n    Methods:\n      def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n              super().__init__(symbol, vector)\n              self.source_code = source_code\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.build_symbol_doc_embedding\n    \n      Methods:\n        build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_summary(input_doc: str) -> str\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding.__init__\n    \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/SymbolDescriptor#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDescriptor", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDescriptor:\n    \"\"\"\n    Wraps the descriptor component of the URI into a python object\n    \"\"\"\n\n    ScipSuffix = DescriptorProto\n\n    class PyKind(Enum):\n        Local = \"local\"\n        Module = \"module\"\n        Class = \"class\"\n        Method = \"method\"\n        Value = \"value\"\n        Meta = \"meta\"\n        Macro = \"macro\"\n        Parameter = \"parameter\"\n        TypeParameter = \"type_parameter\"\n\n    def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n        self.name = name\n        self.suffix = suffix\n        self.disambiguator = disambiguator\n\n    def __repr__(self):\n        return f\"Descriptor({self.name}, {self.suffix}\" + (\n            f\", {self.disambiguator})\" if self.disambiguator else \")\"\n        )\n\n    def unparse(self):\n        \"\"\"Converts back into URI string\"\"\"\n        escaped_name = SymbolDescriptor.get_escaped_name(self.name)\n        if self.suffix == SymbolDescriptor.ScipSuffix.Namespace:\n            return f\"{escaped_name}/\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Type:\n            return f\"{escaped_name}#\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Term:\n            return f\"{escaped_name}.\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Meta:\n            return f\"{escaped_name}:\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Method:\n            return f\"{escaped_name}({self.disambiguator}).\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Parameter:\n            return f\"({escaped_name})\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n            return f\"[{escaped_name}]\"\n        else:\n            raise ValueError(f\"Invalid descriptor suffix: {self.suffix}\")\n\n    @staticmethod\n    def get_escaped_name(name):\n        def is_simple_identifier(name):\n            return re.match(r\"^[\\w$+-]+$\", name) is not None\n\n        if not name:\n            return \"\"\n        if is_simple_identifier(name):\n            return name\n        return \"`\" + re.sub(\"`\", \"``\", name) + \"`\"\n\n    @staticmethod\n    def convert_scip_to_python_suffix(\n        descriptor_suffix: DescriptorProto,\n    ) -> PyKind:\n        if descriptor_suffix == SymbolDescriptor.ScipSuffix.Local:\n            return SymbolDescriptor.PyKind.Local\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Namespace:\n            return SymbolDescriptor.PyKind.Module\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Type:\n            return SymbolDescriptor.PyKind.Class\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Method:\n            return SymbolDescriptor.PyKind.Method\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Term:\n            return SymbolDescriptor.PyKind.Value\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Macro:\n            return SymbolDescriptor.PyKind.Macro\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Parameter:\n            return SymbolDescriptor.PyKind.Parameter\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n            return SymbolDescriptor.PyKind.TypeParameter\n\n        else:\n            return SymbolDescriptor.PyKind.Meta\n\n\n", "document": "# SymbolDescriptor\n\n`SymbolDescriptor` is a class that wraps the descriptor component of the URI into a Python object. It provides methods for converting between the descriptor's SCIP suffix and Python representation as well as unescaping and unescaping symbol names. The `SymbolDescriptor` class can be used in conjunction with other components such as the `Symbol`, `SymbolParser` and the `SymbolGraph` classes for processing and analyzing symbols in Python projects.\n\n## Overview\n\nThe `SymbolDescriptor` class offers the following methods:\n\n- `__init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None)`: Initializes the `SymbolDescriptor` instance with the provided `name`, `suffix`, and optional `disambiguator`.\n- `__repr__(self)`: Provides a string representation of the `SymbolDescriptor` instance.\n- `convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto) -> PyKind`: Converts the given SCIP descriptor suffix to the corresponding Python representation.\n- `get_escaped_name(name)`: Returns the escaped version of the input `name`.\n- `unparse(self)`: Converts the `SymbolDescriptor` instance back into a URI string.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`: Represents a symbol with metadata, similar to a URI.\n- `automata_docs.core.symbol.parser.SymbolParser`: Contains methods for parsing symbols into structured objects.\n- `automata_docs.core.symbol.graph.SymbolGraph`: A graph representation of the symbols and their relationships.\n\n## Example\n\nThe following example demonstrates how to use `SymbolDescriptor` in conjunction with the `parse_symbol` function:\n\n```python\nfrom automata_docs.core.symbol.parser import parse_symbol\nfrom automata_docs.core.symbol.symbol_types import SymbolDescriptor\n\nsymbol_uri = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_uri)\ndescriptor = symbol.descriptors[-1]\n\n# Access the descriptor properties\nprint(descriptor.name) # Output: __init__\nprint(descriptor.suffix) # Output: 4 (integer representation of SCIP Suffix.Method)\n\n# Unparse the descriptor into its URI string representation\nunparsed_descriptor = descriptor.unparse()\nprint(unparsed_descriptor) # Output: __init__(Met).\n```\n\n## Limitations\n\n`SymbolDescriptor` itself does not have any significant limitations. However, when working with related classes like `SymbolParser` and `Symbol`, it is important to ensure that their implementations are synchronized with the source library to keep the parsing and processing consistent.\n\n## Follow-up Questions:\n\n- Are there any additional utility methods you'd like to see implemented in `SymbolDescriptor`?", "summary": "The `SymbolDescriptor` class in Python converts descriptor components of URIs into Python objects, providing methods for conversion, escaping, and unescaping symbol names. It works with other classes such as `Symbol`, `SymbolParser`, and `SymbolGraph` for processing and analyzing symbols in Python projects. The class includes methods for initializing instances, providing string representations, converting SCIP descriptor suffixes, getting escaped names, and converting instances back into URI strings. To maintain consistency, ensure that related classes have synchronized implementations with the source library. Here's an example usage:\n\n```python\nfrom automata_docs.core.symbol.parser import parse_symbol\nfrom automata_docs.core.symbol.symbol_types import SymbolDescriptor\n\nsymbol_uri = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_uri)\ndescriptor = symbol.descriptors[-1]\n\nprint(descriptor.name) # Output: __init__\nprint(descriptor.suffix) # Output: 4 (integer representation of SCIP Suffix.Method)\nunparsed_descriptor = descriptor.unparse()\nprint(unparsed_descriptor) # Output: __init__(Met).\n```", "context": "\n    Generate the documentation for SymbolDescriptor using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.SymbolDescriptor -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n    Class Docstring:\n      Wraps the descriptor component of the URI into a python object\n      \n    Methods:\n      def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n              self.name = name\n              self.suffix = suffix\n              self.disambiguator = disambiguator\n      \n          \n      def __repr__(self):\n              return f\"Descriptor({self.name}, {self.suffix}\" + (\n                  f\", {self.disambiguator})\" if self.disambiguator else \")\"\n              )\n      \n          \n      @staticmethod\n          def convert_scip_to_python_suffix(\n              descriptor_suffix: DescriptorProto,\n          ) -> PyKind:\n              if descriptor_suffix == SymbolDescriptor.ScipSuffix.Local:\n                  return SymbolDescriptor.PyKind.Local\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Namespace:\n                  return SymbolDescriptor.PyKind.Module\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Type:\n                  return SymbolDescriptor.PyKind.Class\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Method:\n                  return SymbolDescriptor.PyKind.Method\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Term:\n                  return SymbolDescriptor.PyKind.Value\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Macro:\n                  return SymbolDescriptor.PyKind.Macro\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Parameter:\n                  return SymbolDescriptor.PyKind.Parameter\n      \n              elif descriptor_suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n                  return SymbolDescriptor.PyKind.TypeParameter\n      \n              else:\n                  return SymbolDescriptor.PyKind.Meta\n      \n      \n      \n      @staticmethod\n          def get_escaped_name(name):\n              def is_simple_identifier(name):\n                  return re.match(r\"^[\\w$+-]+$\", name) is not None\n      \n              if not name:\n                  return \"\"\n              if is_simple_identifier(name):\n                  return name\n              return \"`\" + re.sub(\"`\", \"``\", name) + \"`\"\n      \n          \n      def is_simple_identifier(name):\n                  return re.match(r\"^[\\w$+-]+$\", name) is not None\n      \n              \n      def unparse(self):\n              \"\"\"Converts back into URI string\"\"\"\n              escaped_name = SymbolDescriptor.get_escaped_name(self.name)\n              if self.suffix == SymbolDescriptor.ScipSuffix.Namespace:\n                  return f\"{escaped_name}/\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Type:\n                  return f\"{escaped_name}#\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Term:\n                  return f\"{escaped_name}.\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Meta:\n                  return f\"{escaped_name}:\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Method:\n                  return f\"{escaped_name}({self.disambiguator}).\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.Parameter:\n                  return f\"({escaped_name})\"\n              elif self.suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n                  return f\"[{escaped_name}]\"\n              else:\n                  raise ValueError(f\"Invalid descriptor suffix: {self.suffix}\")\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.parser.SymbolParser.parse_descriptor\n    \n      Class Docstring:\n        Parse a single descriptor in the symbol\n        \n        Returns:\n        SymbolDescriptor - The descriptor in the symbol\n        \n      Methods:\n        parse_descriptor(self) -> SymbolDescriptor\n        \n    automata_docs.core.symbol.parser.SymbolParser.parse_descriptors\n    \n      Class Docstring:\n        Parse all descriptors in the symbol\n        \n        Returns:\n        List[SymbolDescriptor] - The descriptors in the symbol\n        \n      Methods:\n        parse_descriptors(self) -> List[SymbolDescriptor]\n        \n    automata_docs.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.SymbolReference\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata_docs.core.symbol.symbol_types.Symbol.is_local\n    \n      Class Docstring:\n        Returns True if the symbol is local\n        \n      Methods:\n        is_local(symbol: \"Symbol\") -> bool\n        \n    automata_docs.core.symbol.parser.SymbolParser\n    \n      Class Docstring:\n        Translation of the logic defined in\n        https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n        to parse URIs into structured objects.\n        It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n        \n      Methods:\n        def __init__(self, symbol: str):\n                \"\"\"\n                Args:\n                    symbol (str): The symbol URI to parse\n                \"\"\"\n                self.symbol = symbol\n                self.index = 0\n                self.symbol_str = symbol\n        \n            \n        accept_backtick_escaped_identifier(self, what: str) -> str\n        \n        accept_character(self, r: str, what: str) -> None\n        \n        accept_escaped_identifier(self, what: str, escape_character: str) -> str\n        \n        accept_identifier(self, what: str) -> str\n        \n        accept_space_escaped_identifier(self, what: str) -> str\n        \n        current(self) -> str\n        \n        error(self, message: str) -> ValueError\n        \n        is_identifier_character(c: str) -> bool\n        \n        parse_descriptor(self) -> SymbolDescriptor\n        \n        parse_descriptors(self) -> List[SymbolDescriptor]\n        \n        peek_next(self) -> Optional[str]\n        \n    automata_docs.core.symbol.symbol_types.Symbol.is_meta\n    \n      Class Docstring:\n        Returns True if the symbol is meta\n        \n      Methods:\n        is_meta(symbol: \"Symbol\") -> bool\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/SymbolDescriptor#PyKind#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDescriptor", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyKind", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PyKind(Enum):\n        Local = \"local\"\n        Module = \"module\"\n        Class = \"class\"\n        Method = \"method\"\n        Value = \"value\"\n        Meta = \"meta\"\n        Macro = \"macro\"\n        Parameter = \"parameter\"\n        TypeParameter = \"type_parameter\"\n\n    ", "document": "# SymbolDescriptor\n\n`SymbolDescriptor` is a class that wraps the descriptor component of a Symbol's URI into a Python object. It is used in conjunction with the `Symbol` class for working with standardized string representations of classes, methods, or local variables in a Python project. The `SymbolDescriptor` class offers utility methods for working with the descriptor component, including converting `DescriptorProto` to the more Python-friendly `PyKind`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.scip_pb2.Descriptor`\n- `automata_docs.core.symbol.parser.parse_symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind`\n\n## Example\n\nThe following is an example demonstrating how to use a `SymbolDescriptor` object:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolDescriptor\nfrom automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n\ndescriptor_name = \"ToolNotFoundError\"\ndescriptor_suffix = DescriptorProto.TYPE\ndescriptor = SymbolDescriptor(descriptor_name, descriptor_suffix)\n\n# Accessing properties\nprint(descriptor.name)  # Output: ToolNotFoundError\nprint(descriptor.suffix)  # Output: 1 (corresponding to DescriptorProto.TYPE)\n```\n\n## Limitations\n\nThe primary limitation of `SymbolDescriptor` lies in its dependency on specific syntax and formatting for symbol URI. It requires the proper usage of `DescriptorProto` and assumes the specific structure of the symbol URI string.\n\n## Follow-up Questions:\n\n- What are the possible improvements for `SymbolDescriptor` to make it more flexible for different URI formats?\n\n## Method Summary\n\n### __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None)\n\nConstructor for the `SymbolDescriptor` class, which initializes a new instance with the given name, suffix, and optional disambiguator.\n\n### __repr__(self) -> None\n\nReturn the string representation of the `SymbolDescriptor` instance.\n\n### convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto) -> PyKind\n\nConverts a `DescriptorProto` suffix to its corresponding `PyKind` value.\n\n### get_escaped_name(name) -> None\n\nChecks if the provided string `name` is a valid escaped identifier.\n\n### is_simple_identifier(name) -> None\n\nChecks if the provided string `name` is a simple identifier.\n\n### unparse(self) -> None\n\nReturns the unparsed string representation of the `SymbolDescriptor` instance, including the name, suffix, and optional disambiguator.", "summary": "`SymbolDescriptor` is a Python class that wraps the descriptor component of a Symbol's URI into an object. It works with the `Symbol` class to handle standardized string representations of classes, methods, or local variables in a Python project. The class provides utility methods for working with the descriptor component, such as converting `DescriptorProto` to the more Python-friendly `PyKind`. However, `SymbolDescriptor` has limitations due to its reliance on specific syntax and formatting for symbol URI and requires the proper use of `DescriptorProto`.\n\nAn example usage of `SymbolDescriptor` is as follows:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolDescriptor\nfrom automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n\ndescriptor_name = \"ToolNotFoundError\"\ndescriptor_suffix = DescriptorProto.TYPE\ndescriptor = SymbolDescriptor(descriptor_name, descriptor_suffix)\n\n# Accessing properties\nprint(descriptor.name)  # Output: ToolNotFoundError\nprint(descriptor.suffix)  # Output: 1 (corresponding to DescriptorProto.TYPE)\n```", "context": "\n    Generate the documentation for SymbolDescriptor using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor.__repr__\n    \n      Methods:\n        __repr__(self) -> None\n        \n    automata_docs.core.symbol.parser.SymbolParser.parse_descriptor\n    \n      Class Docstring:\n        Parse a single descriptor in the symbol\n        \n        Returns:\n        SymbolDescriptor - The descriptor in the symbol\n        \n      Methods:\n        parse_descriptor(self) -> SymbolDescriptor\n        \n    automata_docs.core.symbol.parser.SymbolParser.parse_descriptors\n    \n      Class Docstring:\n        Parse all descriptors in the symbol\n        \n        Returns:\n        List[SymbolDescriptor] - The descriptors in the symbol\n        \n      Methods:\n        parse_descriptors(self) -> List[SymbolDescriptor]\n        \n    automata_docs.core.symbol.symbol_types.Symbol.dotpath\n    \n      Class Docstring:\n        Returns the dotpath of the symbol\n        \n      Methods:\n        dotpath(self) -> str\n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.SymbolReference\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata_docs.core.symbol.symbol_types.Symbol.is_local\n    \n      Class Docstring:\n        Returns True if the symbol is local\n        \n      Methods:\n        is_local(symbol: \"Symbol\") -> bool\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/SymbolDocEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDocEmbedding", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDocEmbedding(SymbolEmbedding):\n    \"\"\"Embedding for symbol documents\"\"\"\n\n    def __init__(\n        self,\n        symbol: Symbol,\n        vector: np.array,\n        source_code: str,\n        document: str,\n        summary: Optional[str] = None,\n        context: Optional[str] = None,\n    ):\n        super().__init__(symbol, vector)\n        self.source_code = source_code\n        self.document = document\n        self.summary = summary\n        self.context = context\n", "document": "# SymbolDocEmbedding\n\n`SymbolDocEmbedding` is a class that represents the embedding of symbol documentation. It is a subclass of `SymbolEmbedding`. The class provides fields to store the symbol, the vector representing the embedding, the source code of the symbol, the documentation string, an optional summary, and optional context. The class can be used when working with embeddings for symbol documents in projects like `automata_docs`.\n\n## Overview\n\nThe `SymbolDocEmbedding` class is mainly used to store the data associated with symbol document embeddings. It inherits from the abstract base class `SymbolEmbedding`. The main fields include `symbol`, `vector`, `source_code`, `document`, `summary`, and `context`. It can be used to store and manipulate the embeddings of symbol documentation in various modules and components of a project like `automata_docs`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.build_symbol_doc_embedding`\n\n## Example\n\nThe following example demonstrates how the `SymbolDocEmbedding` class can be used to store the symbol documentation embedding.\n\n```python\nimport numpy as np\nfrom automata_docs.core.symbol.symbol_types import Symbol\nfrom automata_docs.core.symbol.parser import parse_symbol\nfrom automata_docs.core.embedding.embedding_types import SymbolDocEmbedding\n\nsymbol_str = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_str)\n\nvector = np.random.rand(512)\nsource_code = \"def __init__(self): ...\"\ndocument = \"Documentation string\"\nsummary = \"Summary of documentation\"\n\nsymbol_doc_embedding = SymbolDocEmbedding(\n    symbol=symbol,\n    vector=vector,\n    source_code=source_code,\n    document=document,\n    summary=summary,\n)\n```\n\n## Limitations\n\nThe `SymbolDocEmbedding` class does not provide methods to manipulate or update the stored embeddings. It only serves as a container for storing the data but does not provide functionality to update or manipulate the embeddings based on specific needs or requirements. The embeddings need to be precomputed or retrieved from another source before storing them as a `SymbolDocEmbedding` instance.\n\n## Follow-up Questions:\n\n- How can we handle updating or manipulating the embeddings within the `SymbolDocEmbedding` class if required?\n- Are there any other fields that can be useful to store as part of the `SymbolDocEmbedding` class?", "summary": "`SymbolDocEmbedding` is a subclass of `SymbolEmbedding` that represents the embedding of symbol documentation. It provides fields to store the symbol, vector, source code, documentation string, an optional summary, and optional context, making it useful for projects like `automata_docs`. However, the class does not include methods for manipulating or updating the stored embeddings.\n\nHere's an example of using the `SymbolDocEmbedding` class:\n```python\nimport numpy as np\nfrom automata_docs.core.symbol.symbol_types import Symbol\nfrom automata_docs.core.symbol.parser import parse_symbol\nfrom automata_docs.core.embedding.embedding_types import SymbolDocEmbedding\n\nsymbol_str = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_str)\n\nvector = np.random.rand(512)\nsource_code = \"def __init__(self): ...\"\ndocument = \"Documentation string\"\nsummary = \"Summary of documentation\"\n\nsymbol_doc_embedding = SymbolDocEmbedding(\n    symbol=symbol,\n    vector=vector,\n    source_code=source_code,\n    document=document,\n    summary=summary,\n)\n```", "context": "\n    Generate the documentation for SymbolDocEmbedding using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n    Class Docstring:\n      Embedding for symbol documents\n      \n    Methods:\n      def __init__(\n              self,\n              symbol: Symbol,\n              vector: np.array,\n              source_code: str,\n              document: str,\n              summary: Optional[str] = None,\n              context: Optional[str] = None,\n          ):\n              super().__init__(symbol, vector)\n              self.source_code = source_code\n              self.document = document\n              self.summary = summary\n              self.context = context\n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.build_symbol_doc_embedding\n    \n      Methods:\n        build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_summary(input_doc: str) -> str\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass.inner_method\n    \n        def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n        \n        \n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.get_embedding\n    \n      Class Docstring:\n        Get the embedding of a symbol.\n        Args:\n        symbol (Symbol): Symbol to get the embedding for\n        Returns:\n        SymbolDocEmbedding: The embedding of the symbol documentation\n        \n      Methods:\n        get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding\n        \n  Building context for dependencies -\n  \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding.__init__\n    \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/SymbolEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolEmbedding", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolEmbedding(abc.ABC):\n    \"\"\"Abstract base class for different types of embeddings\"\"\"\n\n    def __init__(self, symbol: Symbol, vector: np.array):\n        self.symbol = symbol\n        self.vector = vector\n\n\n", "document": "# SymbolEmbedding\n\n`SymbolEmbedding` is an abstract base class for different types of embeddings. It provides functionality to store embeddings for symbols in vector format which can be used for various machine learning and natural language processing tasks. The related symbols for `SymbolEmbedding` include `SymbolCodeEmbedding`, `SymbolDocEmbedding`, `EmbeddingsProvider`, `EmbeddingHandler`, and several methods and classes in `automata_docs.core.symbol` module.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbedding`\n- `automata_docs.core.symbol.symbol_types.SymbolDocEmbedding`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.embedding.embedding_types.EmbeddingHandler`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler`\n\n## Example\n\nIn the following example, we will create a `SymbolEmbedding` instance using a `Symbol` and a NumPy array representing the embedding vector.\n\n```python\nimport numpy as np\nfrom automata_docs.core.symbol.search.symbol_parser import parse_symbol\nfrom automata_docs.core.symbol.symbol_types import SymbolEmbedding\n\nsymbol_str = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_str)\n\nvector = np.random.random(300)\n\nembedding = SymbolEmbedding(symbol, vector)\n```\n\n## Limitations\n\nThe primary limitations of `SymbolEmbedding` are related to its abstract nature. As an abstract base class, it cannot be instantiated directly. Instead, specific implementations like `SymbolCodeEmbedding` or `SymbolDocEmbedding` should be used, which inherit from `SymbolEmbedding`. Moreover, the embeddings in the vector format are assumed to be compatible with the specific usage of the relevant downstream tasks or models.\n\n## Follow-up Questions:\n\n- How can we extend the `SymbolEmbedding` class to support additional embedding types not currently considered?", "summary": "`SymbolEmbedding` is an abstract base class that stores embeddings for symbols in vector format, which can be used for machine learning and natural language processing tasks. Related symbols include `SymbolCodeEmbedding`, `SymbolDocEmbedding`, and various methods/classes in the `automata_docs.core.symbol` module. As an abstract base class, it cannot be instantiated directly; instead, specific implementations like `SymbolCodeEmbedding` or `SymbolDocEmbedding` should be used. The primary limitations of `SymbolEmbedding` are due to its abstract nature and the assumed compatibility of vector embeddings with the relevant downstream tasks or models.\n\nExample:\n```python\nimport numpy as np\nfrom automata_docs.core.symbol.search.symbol_parser import parse_symbol\nfrom automata_docs.core.symbol.symbol_types import SymbolEmbedding\n\nsymbol_str = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nsymbol = parse_symbol(symbol_str)\n\nvector = np.random.random(300)\n\nembedding = SymbolEmbedding(symbol, vector)\n```\n", "context": "\n    Generate the documentation for SymbolEmbedding using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n    Class Docstring:\n      Abstract base class for different types of embeddings\n      \n    Methods:\n      def __init__(self, symbol: Symbol, vector: np.array):\n              self.symbol = symbol\n              self.vector = vector\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding\n    \n      Class Docstring:\n        Embedding for symbol code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n        \n        \n        \n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n        build_embedding(self, symbol_source: str) -> np.ndarray\n        \n    automata_docs.core.embedding.embedding_types.EmbeddingHandler\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n        get_all_supported_symbols(self) -> List[Symbol]\n        \n        get_embedding(self, symbol: Symbol) -> SymbolEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.tests.unit.test_symbol_embedding.test_get_embedding\n    \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingsProvider methods\n            mock_provider = Mock(EmbeddingsProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], mock_embedding, \"symbol_source\"\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n        \n    automata_docs.tests.unit.conftest.patch_get_embedding\n    \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler.build_symbol_doc_embedding\n    \n      Methods:\n        build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding\n        \n        get_doc(prompt: str) -> str\n        \n        get_summary(input_doc: str) -> str\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/SymbolFile#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolFile", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "@dataclass\nclass SymbolFile:\n    \"\"\"Represents a file that contains a symbol\"\"\"\n\n    path: str\n    occurrences: str\n\n    def __hash__(self) -> int:\n        return hash(self.path)\n\n    def __eq__(self, other):\n        if isinstance(other, SymbolFile):\n            return self.path == other.path\n        elif isinstance(other, str):\n            return self.path == other\n        return False\n\n\n", "document": "# SymbolFile\n\n`SymbolFile` represents a file that contains a symbol and is an object utilized in the Symbol Information package to manage file and symbol relationships. It provides the necessary structure for searching, indexing, and managing symbols in a file and includes closely related symbols like `Symbol`, `SymbolGraph`, and others.\n\n## Overview\n\n`SymbolFile` acts as an identifier for a file containing symbols. It is primarily used for determining whether two `SymbolFile` objects reference the same file in the context of symbolic operations. The class has a simple structure, including a class docstring and two main methods, namely `__eq__` and `__hash__`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.SymbolReference`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.symbol.parser.parse_symbol`\n\n## Example\n\nIn this example, we will instantiate a `SymbolFile` object and compare it to another `SymbolFile` object and a string.\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolFile\n\nfile1 = SymbolFile(\"path/to/file1.py\")\nfile2 = SymbolFile(\"path/to/file1.py\")\n\nprint(file1 == file2)  # True\nprint(file1 == \"path/to/file1.py\")  # True\n```\n\n## Limitations\n\nThe primary limitation of `SymbolFile` is that it relies only on the file path to determine equality. If two files have different paths but contain the same symbols, `SymbolFile` cannot handle this case.\n\n## Follow-up Questions:\n\n- How can we handle the case where two files with different paths contain the same symbols?\n- Is there a way to extend the utility of this class by adding more functionality to handle file contents?", "summary": "`SymbolFile` is an object used in the Symbol Information package to manage file and symbol relationships, allowing for searching, indexing, and managing symbols in a file. It acts as an identifier for a file containing symbols and is primarily used for determining whether two `SymbolFile` objects reference the same file in the context of symbolic operations. However, its primary limitation is that it relies only on the file path to determine equality, meaning it cannot handle the case where two files have different paths but contain the same symbols.\n\nExample:\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolFile\n\nfile1 = SymbolFile(\"path/to/file1.py\")\nfile2 = SymbolFile(\"path/to/file1.py\")\n\nprint(file1 == file2)  # True\nprint(file1 == \"path/to/file1.py\")  # True\n```", "context": "\n    Generate the documentation for SymbolFile using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.SymbolFile -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n    Class Docstring:\n      Represents a file that contains a symbol\n      \n    Methods:\n      def __eq__(self, other):\n              if isinstance(other, SymbolFile):\n                  return self.path == other.path\n              elif isinstance(other, str):\n                  return self.path == other\n              return False\n      \n      \n      \n      def __hash__(self) -> int:\n              return hash(self.path)\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.symbol_types.SymbolReference\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n    automata_docs.tests.unit.test_symbol_graph.test_get_all_files\n    \n        def test_get_all_files(symbol_graph):\n            files = symbol_graph.get_all_files()\n            assert isinstance(files, list)\n            for f in files:\n                assert isinstance(f, SymbolFile)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_lookup_symbol\n    \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.tests.unit.test_symbol_search.test_retrieve_source_code_by_symbol\n    \n        def test_retrieve_source_code_by_symbol(symbols, symbol_searcher):\n            with patch(\n                \"automata_docs.core.symbol.search.symbol_search.convert_to_fst_object\",\n                return_value=\"module1\",\n            ) as mock_method:\n                result = symbol_searcher.retrieve_source_code_by_symbol(symbols[0].uri)\n                assert result == \"module1\"\n            mock_method.assert_called_once_with(symbols[0])\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/SymbolPackage#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolPackage", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass SymbolPackage:\n    \"\"\"Wraps the package component of the URI\"\"\"\n\n    manager: str\n    name: str\n    version: str\n\n    def __repr__(self):\n        return f\"Package({self.unparse()})\"\n\n    def unparse(self):\n        \"\"\"Converts back into URI string\"\"\"\n        return f\"{self.manager} {self.name} {self.version}\"\n\n\n", "document": "# SymbolPackage\n\n`SymbolPackage` is a class that wraps the package component of a symbol's URI, providing methods to represent and manipulate this information. A package consists of three components: `manager`, `name`, and `version`. Instances of this class are mainly used in conjunction with the `Symbol` class, which represents a symbol (e.g., a class, method, or local variable) in a standardized format.\n\n## Overview\n\nThe `SymbolPackage` class provides the following methods:\n\n- `__repr__(self)`: Returns a string representation of the package.\n- `unparse(self)`: Converts the `SymbolPackage` back into a URI string.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`: The main class used to represent and manipulate a symbol.\n\n## Example\n\nThe following example shows how to create a `SymbolPackage` and convert it back into a URI string.\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolPackage\n\nmanager = \"python\"\nname = \"automata_docs\"\nversion = \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n\npackage = SymbolPackage(manager=manager, name=name, version=version)\nuri_string = package.unparse()\n\nprint(uri_string)  # Output: \"python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065\"\n```\n\n## Limitations\n\n`SymbolPackage` serves as a simple container for a symbol's package component, and does not provide any functionality for querying or modifying the package itself. Additionally, this class is tied to the specific representation and format of a symbol as defined by the `Symbol` class.\n\n## Follow-up Questions:\n\n- Are there plans to extend the functionality of `SymbolPackage` to better support varying symbol representations or formats?", "summary": "The `SymbolPackage` class is a wrapper for the package component of a symbol's URI, consisting of `manager`, `name`, and `version`. It is mainly used with the `Symbol` class, which represents symbols like classes or methods. `SymbolPackage` provides methods like `__repr__(self)` for a string representation and `unparse(self)` to convert it back into a URI string. However, it does not offer any functionality for querying or modifying the package and is tied to the representation and format defined by the `Symbol` class.\n\nExample:\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolPackage\nmanager = \"python\"\nname = \"automata_docs\"\nversion = \"75482692a6fe30c72db516201a6f47d9fb4af065\"\npackage = SymbolPackage(manager=manager, name=name, version=version)\nuri_string = package.unparse()\nprint(uri_string)  # Output: \"python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065\"\n```", "context": "\n    Generate the documentation for SymbolPackage using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.SymbolPackage -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n    Class Docstring:\n      Wraps the package component of the URI\n      \n    Methods:\n      def __repr__(self):\n              return f\"Package({self.unparse()})\"\n      \n          \n      def unparse(self):\n              \"\"\"Converts back into URI string\"\"\"\n              return f\"{self.manager} {self.name} {self.version}\"\n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n    \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.tests.unit.conftest.get_sem\n    \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.symbol.symbol_types`/SymbolReference#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolReference", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass SymbolReference:\n    \"\"\"Represents a reference to a symbol in a file\"\"\"\n\n    symbol: Symbol\n    line_number: int\n    column_number: int\n    roles: Dict[str, Any]\n\n    def __hash__(self) -> int:\n        # This could cause collisions if the same symbol is referenced in different files at the same location\n        return hash(f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\")\n\n    def __eq__(self, other):\n        if isinstance(other, SymbolReference):\n            return (\n                f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\"\n                == f\"{other.symbol.uri}-{other.line_number}-{other.column_number}\"\n            )\n        return False\n\n\n", "document": "# SymbolReference\n\n`SymbolReference` is a class that represents a reference to a symbol in a file. It provides methods for equality and hashing based on its attributes, which include the symbol, line number, and column number in the file. This class is related to other symbols used in the Automata Docs project, such as `Symbol`, `SymbolEmbedding`, and others.\n\n## Overview\n\n`SymbolReference` stores information about the symbol it references and its location (line and column number) within the file. Comparisons between `SymbolReference` instances are made by comparing their symbol's URI, line number, and column number. These attributes are hashed to produce a unique identifier for each `SymbolReference` instance.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.parser.parse_symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n\n## Example\n\nSuppose we have two instances of `SymbolReference` with the same symbol URI, line number, and column number:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol\nfrom automata_docs.core.symbol.parser import parse_symbol\n\nsymbol_uri = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = parse_symbol(symbol_uri)\n\nref1 = SymbolReference(symbol=symbol, line_number=10, column_number=5)\nref2 = SymbolReference(symbol=symbol, line_number=10, column_number=5)\n```\n\nComparing them for equality and hashing:\n\n```python\nprint(ref1 == ref2)  # True\nprint(hash(ref1) == hash(ref2))  # True\n```\n\n## Limitations\n\nThe current implementation of `SymbolReference` might cause collisions if the same symbol is referenced in different files at the same location. However, this is unlikely due to the uniqueness of the Symbol URI - especially the commit hash associated with each symbol.\n\n## Follow-up Questions:\n\n- Can you provide an example of how to use `SymbolFile` in the context of `SymbolReference`?\n- How can we improve the hash function to avoid collisions even further?", "summary": "The `SymbolReference` class represents a reference to a symbol in a file, containing information about the symbol itself as well as its line and column number. This class is related to other symbols in the Automata Docs project, such as `Symbol`, `SymbolEmbedding`, and others. Instances of `SymbolReference` can be compared for equality and hashed based on their symbol's URI, line number, and column number. Current implementation may cause collisions if the same symbol is referenced in different files at the same location, although this is unlikely due to the uniqueness of the Symbol URI.", "context": "\n    Generate the documentation for SymbolReference using the context shown below -\n  Building context for primary symbol - automata_docs.core.symbol.symbol_types.SymbolReference -\n  \n    Import Statements:\n      import abc\n      import re\n      import numpy as np\n      from dataclasses import dataclass\n      from enum import Enum\n      from typing import Any, Dict, Optional, Tuple\n      from automata_docs.core.symbol.scip_pb2 import Descriptor as DescriptorProto\n      from automata_docs.core.symbol.parser import parse_symbol\n      \n    Class Docstring:\n      Represents a reference to a symbol in a file\n      \n    Methods:\n      def __eq__(self, other):\n              if isinstance(other, SymbolReference):\n                  return (\n                      f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\"\n                      == f\"{other.symbol.uri}-{other.line_number}-{other.column_number}\"\n                  )\n              return False\n      \n      \n      \n      def __hash__(self) -> int:\n              # This could cause collisions if the same symbol is referenced in different files at the same location\n              return hash(f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\")\n      \n          \n  Building context for related symbols -\n  \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_symbol_search.test_symbol_references\n    \n        def test_symbol_references(symbols, symbol_searcher, symbol_graph_mock):\n            symbol_graph_mock.get_references_to_symbol.return_value = [\"ref1\", \"ref2\"]\n            result = symbol_searcher.symbol_references(symbols[0].uri)\n            assert result == [\"ref1\", \"ref2\"]\n            symbol_graph_mock.get_references_to_symbol.assert_called_once_with(\n                parse_symbol(symbols[0].uri)\n            )\n        \n        \n        \n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.core.symbol.parser.parse_symbol\n    \n      Class Docstring:\n        Parses a symbol from a URI\n        \n        Args:\n        symbol_uri (str): The URI of the symbol\n        include_descriptors (bool): Whether to include descriptors in the symbol\n        \n        Returns:\n        Symbol - The parsed symbol\n        \n      Methods:\n        parse_symbol(symbol_uri: str, include_descriptors: bool = True) -> Symbol\n        \n    automata_docs.core.symbol.symbol_types.SymbolEmbedding\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.core.symbol.symbol_types.SymbolDescriptor\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n        __repr__(self) -> None\n        \n        convert_scip_to_python_suffix(descriptor_suffix: DescriptorProto,\n            ) -> PyKind\n        \n        get_escaped_name(name) -> None\n        \n        is_simple_identifier(name) -> None\n        \n        unparse(self) -> None\n        \n    automata_docs.core.symbol.graph._SymbolGraphNavigator._get_symbol_references_in_scope\n    \n      Class Docstring:\n        Gets all symbol references in the scope of a symbol\n        \n        Args:\n        symbol (Symbol): The symbol object to fetch references for\n        \n        Returns:\n        List[SymbolReference]: A list of SymbolReference objects in scope\n        \n      Methods:\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    automata_docs.tests.unit.test_symbol_search.test_process_queries\n    \n        def test_process_queries(symbols, symbol_searcher, symbol_graph_mock):\n            with patch.object(\n                symbol_searcher, \"symbol_references\", return_value=[\"ref1\", \"ref2\"]\n            ) as mock_method_0:\n                result = symbol_searcher.process_query(\"type:symbol_references %s\" % symbols[0].uri)\n                assert result == [\"ref1\", \"ref2\"]\n            mock_method_0.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(symbol_searcher, \"exact_search\", return_value={\"test\": 0}) as mock_method_1:\n                result = symbol_searcher.process_query(\"type:exact %s\" % symbols[0].uri)\n                assert result == {\"test\": 0}\n            mock_method_1.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"retrieve_source_code_by_symbol\", return_value=\"test\"\n            ) as mock_method_2:\n                result = symbol_searcher.process_query(\"type:source %s\" % symbols[0].uri)\n                assert result == \"test\"\n            mock_method_2.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"symbol_rank_search\", return_value=[(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            ) as mock_method_4:\n                result = symbol_searcher.process_query(\"type:symbol_rank %s\" % symbols[0].uri)\n                assert result == [(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            mock_method_4.assert_called_once_with(symbols[0].uri)\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"invalid_query\")\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"type:unknown query\")\n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.utils`/HandlerDict#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "HandlerDict", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class HandlerDict(TypedDict):\n    \"\"\"A dictionary representing a logging handler\"\"\"\n\n    class_: str\n    formatter: str\n    level: int\n    filename: Optional[str]\n\n\n", "document": "# HandlerDict\n\n`HandlerDict` is a dictionary representing a logging handler. This class is mainly used in the `LoggingConfig` configuration dictionary to handle the logging handlers.\n\n## Related Symbols\n\n- `automata_docs.core.utils.RootDict`\n- `automata_docs.core.utils.LoggingConfig`\n- `automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.tests.unit.sample_modules.sample_module_2.KavpK`\n- `automata_docs.tests.unit.sample_modules.sample.EmptyClass`\n- `automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n\n## Example\n\nThe following example demonstrates the use of `HandlerDict` in the context of `LoggingConfig`.\n\n```python\nfrom typing import Union\nfrom automata_docs.core.utils import HandlerDict, LoggingConfig, RootDict\n\nlogging_handler = HandlerDict(level=\"DEBUG\", formatter=\"simple\")\n\nlogging_config: LoggingConfig = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"simple\": {\n            \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        },\n    },\n    \"handlers\": {\"console\": logging_handler},\n    \"root\": RootDict(level=\"INFO\", handlers=[\"console\"]),\n}\n```\n\nThis example shows how to create a `HandlerDict` object and add it to a `LoggingConfig` dictionary specifying the configuration for the logging system.\n\n## Limitations\n\n`HandlerDict` is primarily used in the context of `LoggingConfig`. It is not meant to be used as a standalone dictionary for other purposes.\n\n## Follow-up Questions:\n\n- Are there other use cases for `HandlerDict` outside of `LoggingConfig`?", "summary": "HandlerDict is a dictionary class representing a logging handler, primarily used in the LoggingConfig configuration dictionary to handle logging handlers. In the example below, a HandlerDict object is created with a \"DEBUG\" level and a \"simple\" formatter, then added to a LoggingConfig dictionary specifying the configuration for the logging system:\n\n```python\nfrom typing import Union\nfrom automata_docs.core.utils import HandlerDict, LoggingConfig, RootDict\n\nlogging_handler = HandlerDict(level=\"DEBUG\", formatter=\"simple\")\n\nlogging_config: LoggingConfig = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"simple\": {\n            \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        },\n    },\n    \"handlers\": {\"console\": logging_handler},\n    \"root\": RootDict(level=\"INFO\", handlers=[\"console\"]),\n}\n```\nNote that HandlerDict is not intended for use as a standalone dictionary outside the context of LoggingConfig.", "context": "\n    Generate the documentation for HandlerDict using the context shown below -\n  Building context for primary symbol - automata_docs.core.utils.HandlerDict -\n  \n    Import Statements:\n      import json\n      import logging\n      import os\n      import yaml\n      from typing import Any, List, Optional, TypedDict, Union, cast\n      \n    Class Docstring:\n      A dictionary representing a logging handler\n      \n  Building context for related symbols -\n  \n    automata_docs.core.utils.RootDict\n    \n      Class Docstring:\n        A dictionary representing the root logger\n        \n    automata_docs.core.utils.LoggingConfig\n    \n        class LoggingConfig(TypedDict, total=False):\n            \"\"\"A dictionary representing the logging configuration\"\"\"\n        \n            version: int\n            disable_existing_loggers: bool\n            formatters: dict\n            handlers: dict[str, Union[HandlerDict, dict]]\n            root: RootDict\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY.__init__\n    \n        def __init__(self):\n                pass\n        \n            \n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.ModuleNotFound\n    \n      Class Docstring:\n        Raised when a module is not found in the module dictionary\n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.KavpK\n    \n        def KavpK():\n            \"\"\"xkuWpgMgKAwLhzuEkWkO\"\"\"\n        \n            pass\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY.method\n    \n        def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.utils`/LoggingConfig#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "LoggingConfig", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class LoggingConfig(TypedDict, total=False):\n    \"\"\"A dictionary representing the logging configuration\"\"\"\n\n    version: int\n    disable_existing_loggers: bool\n    formatters: dict\n    handlers: dict[str, Union[HandlerDict, dict]]\n    root: RootDict\n\n\n", "document": "# LoggingConfig\n\n`LoggingConfig` is a dictionary representing the logging configuration settings in the project. Its main purpose is to configure and manage log settings across various components of the application, such as version, formatters, handlers, and the root logger settings.\n\n## Overview\n\nThis class is a TypedDict subclass and provides type hints for the keys allowed in the dictionary. The keys include `version`, `disable_existing_loggers`, `formatters`, `handlers`, and `root`. It works closely with related symbols such as `HandlerDict`, `RootDict`, and `get_logging_config`.\n\n## Related Symbols\n\n- `automata_docs.core.utils.HandlerDict`\n- `automata_docs.core.utils.RootDict`\n- `automata_docs.core.utils.get_logging_config`\n\n## Example\n\nBelow is an example of how to create a `LoggingConfig` dictionary and configure logging settings using the `reconfigure_logging` command:\n\n```python\nfrom automata_docs.cli.commands.reconfigure_logging import reconfigure_logging\nfrom automata_docs.core.utils import get_logging_config\n\nlogging_config = get_logging_config(log_level=logging.DEBUG, log_file='example.log')\nreconfigure_logging(logging_config)\n```\n\n## Limitations\n\n`LoggingConfig` is a dictionary and cannot provide additional functionality beyond storing and accessing keys and values. It relies on external functions and utilities like `get_logging_config` and `reconfigure_logging` for configuring the logging settings.\n\n## Follow-up Questions:\n\n- How can additional keys and values be added to the `LoggingConfig` dictionary, and what are the implications on the logging settings?", "summary": "`LoggingConfig` is a dictionary used to configure and manage logging settings across various components of an application, including version, formatters, handlers, and root logger settings. It is a TypedDict subclass with allowable keys such as `version`, `disable_existing_loggers`, `formatters`, `handlers`, and `root`. It works with related symbols like `HandlerDict`, `RootDict`, and `get_logging_config`. To create and configure a `LoggingConfig` dictionary, one can use the `get_logging_config` and `reconfigure_logging` command:\n\n```python\nfrom automata_docs.cli.commands.reconfigure_logging import reconfigure_logging\nfrom automata_docs.core.utils import get_logging_config\n\nlogging_config = get_logging_config(log_level=logging.DEBUG, log_file='example.log')\nreconfigure_logging(logging_config)\n```\n\nHowever, `LoggingConfig` only provides functionality for storing and accessing keys and values, relying on external utilities for configuring the logging settings.", "context": "\n    Generate the documentation for LoggingConfig using the context shown below -\n  Building context for primary symbol - automata_docs.core.utils.LoggingConfig -\n  \n      class LoggingConfig(TypedDict, total=False):\n          \"\"\"A dictionary representing the logging configuration\"\"\"\n      \n          version: int\n          disable_existing_loggers: bool\n          formatters: dict\n          handlers: dict[str, Union[HandlerDict, dict]]\n          root: RootDict\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.core.utils.HandlerDict\n    \n      Class Docstring:\n        A dictionary representing a logging handler\n        \n    automata_docs.cli.commands.reconfigure_logging\n    \n      Class Docstring:\n        Configure the logging settings.\n        \n        :param verbose: Boolean, if True, set log level to DEBUG, else set to INFO.\n        \n      Methods:\n        reconfigure_logging(log_level_str: str) -> None\n        \n    automata_docs.core.utils.RootDict\n    \n      Class Docstring:\n        A dictionary representing the root logger\n        \n    automata_docs.core.utils.get_logging_config\n    \n      Class Docstring:\n        Returns logging configuration.\n        \n        Args:\n        log_level (int): The log level.\n        log_file (Optional[str]): The log file path.\n        Returns\n        dict[str, Any]: The logging configuration.\n        \n      Methods:\n        get_logging_config(log_level: int = logging.INFO, log_file: Optional[str] = None) -> dict[str, Any]\n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.core.symbol.search.rank.SymbolRankConfig\n    \n        class SymbolRankConfig(BaseModel):\n            \"\"\"A configuration class for SymbolRank\"\"\"\n        \n            alpha: float = 0.25\n            max_iterations: int = 100\n            tolerance: float = 1.0e-6\n            weight_key: str = \"weight\"\n        \n            @classmethod\n            def validate(cls, config):\n                \"\"\"\n                Validate configuration parameters.\n        \n                Args:\n                    config (SymbolRankConfig): Configuration parameters.\n        \n                Raises:\n                    ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n                \"\"\"\n                if not 0 < config.alpha < 1:\n                    raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n        \n                if not 1.0e-8 < config.tolerance < 1.0e-4:\n                    raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.core.context.py_context.retriever_slim.PyContextConfig\n    \n        class PyContextConfig:\n            \"\"\"The configuration for the PyContext\"\"\"\n        \n            def __init__(\n                self,\n                spacer: str = \"  \",\n                max_dependencies_to_process: int = 10,\n                max_related_symbols_to_process: int = 10,\n            ):\n                \"\"\"\n                Args:\n                    spacer (str): The string to use for indentation\n                    max_dependency_print_depth (int): The maximum depth to print dependencies\n                    max_recursion_depth (int): The maximum depth to recurse into dependencies\n                    max_related_symbols_to_process (int): The number of nearest symbols to print\n                \"\"\"\n                self.spacer = spacer\n                self.max_dependencies_to_process = max_dependencies_to_process\n                self.max_related_symbols_to_process = max_related_symbols_to_process\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.core.utils`/RootDict#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "RootDict", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class RootDict(TypedDict):\n    \"\"\"A dictionary representing the root logger\"\"\"\n\n    handlers: List[str]\n    level: int\n\n\n", "document": "# RootDict\n\n`RootDict` is a dictionary class that represents the root logger. It is a part of the `automata_docs.core.utils.LoggingConfig` class which represents the logging configuration for the application.\n\n## Related Symbols\n\n- `automata_docs.core.utils.LoggingConfig`\n- `automata_docs.core.utils.HandlerDict`\n\n## Example\n\nBelow is an example on how to use `RootDict` in conjunction with the `LoggingConfig` class.\n\n```python\nfrom automata_docs.core.utils import RootDict, LoggingConfig\n\nroot_logger: RootDict = {\n    \"level\": \"DEBUG\",\n    \"handlers\": [\"console\"]\n}\n\nlogging_config: LoggingConfig = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {...},\n    \"handlers\": {...},\n    \"root\": root_logger\n}\n```\n\n## Discussion\n\nRootDict is simply a dictionary that represents the root logger configuration. It defines the log level and handlers for the root logger. To make use of this class as part of the complete logging configuration, you should work together with the `LoggingConfig` class, and other related classes such as `HandlerDict`.\n\n## Follow-up Questions:\n\n- What happen if we omit the RootDict or set it as an empty dictionary, how it will affect the logging configuration?", "summary": "RootDict is a dictionary class representing the root logger within the `automata_docs.core.utils.LoggingConfig` class, which handles the logging configuration for an application. To use RootDict, incorporate it with the LoggingConfig class and other related classes like HandlerDict. For example:\n\n```python\nfrom automata_docs.core.utils import RootDict, LoggingConfig\n\nroot_logger: RootDict = {\n    \"level\": \"DEBUG\",\n    \"handlers\": [\"console\"]\n}\n\nlogging_config: LoggingConfig = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {...},\n    \"handlers\": {...},\n    \"root\": root_logger\n}\n```\n\nRootDict outlines the log levels and handlers for the root logger. If omitted or set as an empty dictionary, it could affect the logging configuration.", "context": "\n    Generate the documentation for RootDict using the context shown below -\n  Building context for primary symbol - automata_docs.core.utils.RootDict -\n  \n    Import Statements:\n      import json\n      import logging\n      import os\n      import yaml\n      from typing import Any, List, Optional, TypedDict, Union, cast\n      \n    Class Docstring:\n      A dictionary representing the root logger\n      \n  Building context for related symbols -\n  \n    automata_docs.core.utils.LoggingConfig\n    \n        class LoggingConfig(TypedDict, total=False):\n            \"\"\"A dictionary representing the logging configuration\"\"\"\n        \n            version: int\n            disable_existing_loggers: bool\n            formatters: dict\n            handlers: dict[str, Union[HandlerDict, dict]]\n            root: RootDict\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Methods:\n        __contains__(self, dotpath) -> None\n        \n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n        fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]\n        \n        fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]\n        \n        fetch_module(self, module_dotpath: str) -> Optional[RedBaron]\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]\n        \n        put_module(self, module_dotpath: str, module: RedBaron) -> None\n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap.cached_default\n    \n      Class Docstring:\n        Creates a new LazyModuleTreeMap instance with the default root path\n        \n      Methods:\n        cached_default(cls) -> \"LazyModuleTreeMap\"\n        \n    automata_docs.core.utils.HandlerDict\n    \n      Class Docstring:\n        A dictionary representing a logging handler\n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.module_tree.DotPathMap\n    \n      Class Docstring:\n        A map from module dotpaths to module filepaths\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                if not os.path.isabs(path):\n                    path = os.path.join(root_fpath(), path)\n                self._abs_path = path\n                self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n                self._module_fpath_to_dotpath_map = {\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        \n            \n        contains_dotpath(self, module_dotpath: str) -> bool\n        \n        contains_fpath(self, module_fpath: str) -> bool\n        \n        get_module_dotpath_by_fpath(self, module_fpath: str) -> str\n        \n        get_module_fpath_by_dotpath(self, module_dotpath: str) -> str\n        \n        items(self) -> Iterable[Tuple[str, str]]\n        \n        put_module(self, module_dotpath: str) -> None\n        \n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap.__init__\n    \n      Class Docstring:\n        Args:\n        path: The absolute path to the root of the module tree\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n    automata_docs.tests.unit.test_py_code_retriever.module_map\n    \n        @pytest.fixture\n        def module_map():\n            # get latest path\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            # Set the root directory to the folder containing test modules\n            return LazyModuleTreeMap(sample_dir)\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.module_tree.DotPathMap.__init__\n    \n      Class Docstring:\n        Args:\n        path: The absolute path to the root of the module tree\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                if not os.path.isabs(path):\n                    path = os.path.join(root_fpath(), path)\n                self._abs_path = path\n                self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n                self._module_fpath_to_dotpath_map = {\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        \n            \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.tests.unit.sample_modules.sample`/EmptyClass#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "EmptyClass", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class EmptyClass:\n    pass\n\n\n", "document": "# EmptyClass\n\n## Overview\n\n`EmptyClass` is a minimal Python class with no attributes or methods. This class can be used as a starting point or as a placeholder class where an actual implementation is not needed.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass`\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass`\n- `automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY`\n- `automata_docs.tests.unit.test_py_code_retriever.test_get_code_no_docstring_no_code`\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter.InvalidArguments`\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound`\n- `automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY.method`\n\n## Example\n\nThe following is a simple example demonstrating how to create an instance of `EmptyClass`.\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import EmptyClass\n\ninstance = EmptyClass()\n```\n\n## Limitations\n\nDue to its minimal design, `EmptyClass` has limited utility in real-world applications. It is mostly useful for testing and placeholder purposes. \n\n## Follow-up Questions:\n\n- What is the primary use case for `EmptyClass`?\n- Are there any specific applications that would benefit from an empty class like `EmptyClass`?", "summary": "`EmptyClass` is a minimal Python class with no attributes or methods, primarily used as a starting point or placeholder class when an actual implementation is not needed. It has limited utility in real-world applications but proves useful for testing and placeholder purposes. For example, to create an instance of `EmptyClass`, use the following code:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import EmptyClass\ninstance = EmptyClass()\n```", "context": "\n    Generate the documentation for EmptyClass using the context shown below -\n  Building context for primary symbol - automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n  \n      class EmptyClass:\n          pass\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_code_retriever.test_get_code_no_docstring_no_code\n    \n        def test_get_code_no_docstring_no_code(getter):\n            module_name = \"sample\"\n            object_path = \"EmptyClass\"\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = \"class EmptyClass:\\n    pass\\n\\n\\n\"\n            assert result == expected_match\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY.__init__\n    \n        def __init__(self):\n                pass\n        \n            \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.InvalidArguments\n    \n      Class Docstring:\n        Raised when invalid arguments are passed to a method\n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound\n    \n      Class Docstring:\n        Raised when a class or function is not found in the module\n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY.method\n    \n        def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.tests.unit.sample_modules.sample`/OuterClass#InnerClass#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "OuterClass", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "InnerClass", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class InnerClass:\n        \"\"\"Inner doc strings\"\"\"\n\n        def inner_method(self):\n            \"\"\"Inner method doc strings\"\"\"\n", "document": "# OuterClass\n\n`OuterClass` is a simple class that contains a nested class called `InnerClass`. `InnerClass` is a class with a docstring and a single method called `inner_method`. The main objective of the `OuterClass` is to provide a simple example of a nested class for testing and documentation purposes.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass`\n- `automata_docs.tests.unit.sample_modules.sample.EmptyClass`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following is an example demonstrating how to instantiate `OuterClass` and its nested class `InnerClass`.\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import OuterClass\n\nouter_instance = OuterClass()\ninner_instance = OuterClass.InnerClass()\n```\n\n## InnerClass\n\nThe `InnerClass` is a nested class inside `OuterClass`. It contains a docstring and a single method called `inner_method`. This method also has a docstring.\n\n### Usage Example\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import OuterClass\n\nouter_instance = OuterClass()\ninner_instance = OuterClass.InnerClass()\nresult = inner_instance.inner_method()\n```\n\n## Limitations\n\nThe primary limitation of `OuterClass` is its simplicity, as it serves primarily for testing purposes in the context of the given code sample. It may not provide significant practical value for a user, beyond offering an example of a nested class structure.\n\n## Follow-up Questions:\n\n- Are there any other details or methods to be added to OuterClass or InnerClass?", "summary": "OuterClass is a basic class containing a nested class called InnerClass, primarily used as a test example for nested class structures. InnerClass has a docstring and a single method called inner_method. To instantiate OuterClass and InnerClass, use the following example code:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import OuterClass\n\nouter_instance = OuterClass()\ninner_instance = OuterClass.InnerClass()\n```\n\nThe main limitation of OuterClass is its simplicity, as it mainly serves for testing purposes and may not provide significant practical value.", "context": "\n    Generate the documentation for OuterClass using the context shown below -\n  Building context for primary symbol - automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n  \n      class InnerClass:\n              \"\"\"Inner doc strings\"\"\"\n      \n              def inner_method(self):\n                  \"\"\"Inner method doc strings\"\"\"\n      \n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_nested_class\n    \n        def test_get_docstring_nested_class(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner doc strings\"\n            assert result == expected_match\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_nested_class_method\n    \n        def test_get_docstring_nested_class_method(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass.inner_method\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner method doc strings\"\n            assert result == expected_match\n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound\n    \n      Class Docstring:\n        Raised when a class or function is not found in the module\n        \n    automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_no_docstring_class\n    \n        def test_get_docstring_no_docstring_class(getter):\n            module_name = \"sample\"\n            object_path = \"Person\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"This is a sample class.\"\n            assert result == expected_match\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.tests.unit.sample_modules.sample`/Person#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "Person", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class Person:\n    \"\"\"This is a sample class.\"\"\"\n\n    def __init__(self, name):\n        \"\"\"This is the constructor.\"\"\"\n        self.name = name\n\n    def say_hello(self):\n        \"\"\"This is a sample method.\"\"\"\n        return f\"Hello, I am {self.name}.\"\n\n    def run(self) -> str:\n        ...\n\n\n", "document": "# Person\n\n`Person` is a sample class that demonstrates how to create a basic class in Python, complete with a constructor and sample methods. To make your class more modular, it is possible to add related symbols for use in your code. This can help you build more robust code while keeping your documentation clear and concise.\n\n## Overview\n\nThe `Person` class has a simple constructor that initializes the `name` attribute. It also includes a `say_hello` method that returns a greeting with the person's name and a `run` method which is currently not implemented.\n\n## Example\n\nBelow demonstrates how to create an instance of `Person` and use the `say_hello` method.\n\n```python\nfrom sample_modules.sample import Person\n\njack = Person(\"Jack\")\nprint(jack.say_hello())  # Output: \"Hello, I am Jack.\"\n```\n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.tests.unit.sample_modules.sample.EmptyClass`\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass`\n- `automata_docs.tests.unit.sample_modules.sample_module_2.KavpK`\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n\n## Limitations\n\nAs a sample class, `Person` does not provide much in the way of functionality. It serves as an example of how to create a basic class in Python - constructors and method implementations must be considered for more complex classes.\n\n## Follow-up Questions:\n\n- Are there specific functionalities or methods that should be added to the `Person` class?\n- How should the `run` method be implemented?", "summary": "The `Person` class is a basic Python class example with a constructor that initializes the `name` attribute, a `say_hello` method that returns a greeting with the person's name, and a `run` method that is not yet implemented. By adding related symbols, you can make the class more modular and build robust code while keeping documentation clear and concise. Here is an example of creating a `Person` instance and using the `say_hello` method:\n\n```python\nfrom sample_modules.sample import Person\n\njack = Person(\"Jack\")\nprint(jack.say_hello())  # Output: \"Hello, I am Jack.\"\n```\n\nAs a sample class, `Person` has limited functionality and serves as a starting point for creating more complex classes with additional constructors and methods.", "context": "\n    Generate the documentation for Person using the context shown below -\n  Building context for primary symbol - automata_docs.tests.unit.sample_modules.sample.Person -\n  \n      class Person:\n          \"\"\"This is a sample class.\"\"\"\n      \n          def __init__(self, name):\n              \"\"\"This is the constructor.\"\"\"\n              self.name = name\n      \n          def say_hello(self):\n              \"\"\"This is a sample method.\"\"\"\n              return f\"Hello, I am {self.name}.\"\n      \n          def run(self) -> str:\n              ...\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY.method\n    \n        def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY.__init__\n    \n        def __init__(self):\n                pass\n        \n            \n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.KavpK\n    \n        def KavpK():\n            \"\"\"xkuWpgMgKAwLhzuEkWkO\"\"\"\n        \n            pass\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.tests.unit.sample_modules.sample2`/PythonAgentToolBuilder#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample2", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PythonAgentToolBuilder", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PythonAgentToolBuilder:\n    \"\"\"A class for building tools to interact with PythonAgent.\"\"\"\n\n    def __init__(self, python_agent: PythonAgent):\n        \"\"\"\n        Initializes a PythonAgentToolBuilder with the given PythonAgent.\n\n        Args:\n            python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\n        \"\"\"\n        self.python_agent = python_agent\n\n    def build_tools(self) -> List:\n        \"\"\"\n        Builds a list of Tool objects for interacting with PythonAgent.\n\n        Args:\n            - None\n\n        Returns:\n            - tools (List[Tool]): A list of Tool objects representing PythonAgent commands.\n        \"\"\"\n\n        def python_agent_python_task():\n            \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n            pass\n\n        tools = [\n            Tool(\n                \"automata-task\",\n                python_agent_python_task,\n                \"Execute a Python task using the PythonAgent. Provide the task description in plain English.\",\n            )\n        ]\n        return tools\n", "document": "# PythonAgentToolBuilder\n\n`PythonAgentToolBuilder` is a class for building tools to interact with `PythonAgent`. It provides methods to initialize the tool builder with a given `PythonAgent` instance and to build a list of `Tool` objects representing `PythonAgent` commands.\n\n## Overview\n\nThe main functionality of `PythonAgentToolBuilder` revolves around the `build_tools` method, which returns a list of `Tool` objects for interacting with the `PythonAgent`. It also includes a `__init__` method to initialize the tool builder with a given `PythonAgent` instance. \n\n## Related Symbols\n\n- `python_agent.PythonAgent`\n- `tool.Tool`\n\n## Example\n\nThe following is an example of how to create an instance of `PythonAgentToolBuilder` and build tools using the `build_tools` method:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample2 import PythonAgentToolBuilder\nfrom python_agent import PythonAgent\n\n# Initialize a PythonAgent instance\nagent = PythonAgent()\n\n# Create a PythonAgentToolBuilder instance\ntool_builder = PythonAgentToolBuilder(agent)\n\n# Build the list of tools\ntools_list = tool_builder.build_tools()\n```\n\n## Limitations\n\nThe current implementation of `PythonAgentToolBuilder` only supports one specific task, which is a sample task utilizing `PythonAgent`. It might need to be extended or modified to handle more complex or diverse tasks involving `PythonAgent`.\n\n## Follow-up Questions:\n\n- Are there any additional tasks or functionalities that should be included in the `PythonAgentToolBuilder` class?", "summary": "`PythonAgentToolBuilder` is a class designed to build tools for interacting with `PythonAgent`. It offers methods to initialize the tool builder with a given `PythonAgent` instance and to construct a list of `Tool` objects representing `PythonAgent` commands. The main functionality is the `build_tools` method, which returns a list of `Tool` objects to interact with the `PythonAgent`. Its current implementation is limited to one specific task and may need extensions for more complex tasks.\n\nExample usage:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample2 import PythonAgentToolBuilder\nfrom python_agent import PythonAgent\n\n# Initialize a PythonAgent instance\nagent = PythonAgent()\n\n# Create a PythonAgentToolBuilder instance\ntool_builder = PythonAgentToolBuilder(agent)\n\n# Build the list of tools\ntools_list = tool_builder.build_tools()\n```", "context": "\n    Generate the documentation for PythonAgentToolBuilder using the context shown below -\n  Building context for primary symbol - automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder -\n  \n      class PythonAgentToolBuilder:\n          \"\"\"A class for building tools to interact with PythonAgent.\"\"\"\n      \n          def __init__(self, python_agent: PythonAgent):\n              \"\"\"\n              Initializes a PythonAgentToolBuilder with the given PythonAgent.\n      \n              Args:\n                  python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\n              \"\"\"\n              self.python_agent = python_agent\n      \n          def build_tools(self) -> List:\n              \"\"\"\n              Builds a list of Tool objects for interacting with PythonAgent.\n      \n              Args:\n                  - None\n      \n              Returns:\n                  - tools (List[Tool]): A list of Tool objects representing PythonAgent commands.\n              \"\"\"\n      \n              def python_agent_python_task():\n                  \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n                  pass\n      \n              tools = [\n                  Tool(\n                      \"automata-task\",\n                      python_agent_python_task,\n                      \"Execute a Python task using the PythonAgent. Provide the task description in plain English.\",\n                  )\n              ]\n              return tools\n      \n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_multiline\n    \n        def test_get_docstring_multiline(getter):\n            module_name = \"sample2\"\n            object_path = \"PythonAgentToolBuilder.__init__\"\n            result = getter.get_docstring(module_name, object_path)\n            expected = \"\\n        Initializes a PythonAgentToolBuilder with the given PythonAgent.\\n\\n        Args:\\n            python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\\n        \"\n        \n            assert result == expected\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n    \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY\n    \n        class OKjJY:\n            \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n        \n            def __init__(self):\n                pass\n        \n            def method(self):\n                \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n        \n                pass\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.core.symbol.graph.SymbolGraph\n    \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n        get_all_available_symbols(self) -> List[Symbol]\n        \n        get_all_files(self) -> List[SymbolFile]\n        \n        get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]\n        \n        get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]\n        \n        get_rankable_symbol_subgraph(self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None) -> SubGraph\n        \n        get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]\n        \n        get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]\n        \n        get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]\n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n    automata_docs.tests.unit.test_py_code_retriever.test_build_overview\n    \n        def test_build_overview():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            result = build_repository_overview(sample_dir)\n            first_module_overview = \"sample\\n     - func sample_function\\n     - cls Person\\n       - func __init__\\n       - func say_hello\\n       - func run\\n     - func f\\n     - cls EmptyClass\\n     - cls OuterClass\\n       - cls InnerClass\\n         - func inner_method\\nsample2\\n     - cls PythonAgentToolBuilder\\n       - func __init__\\n       - func build_tools\\n         - func python_agent_python_task\"\n        \n            assert first_module_overview in result\n        \n        \n        \n        \n    automata_docs.tests.unit.conftest.patch_get_embedding\n    \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n        \n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler\n    \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n        get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding\n        \n        update_embedding(self, symbol: Symbol) -> None\n        \n    automata_docs.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.tests.unit.sample_modules.sample_module_2`/OKjJY#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample_module_2", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "OKjJY", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class OKjJY:\n    \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n\n    def __init__(self):\n        pass\n\n    def method(self):\n        \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n\n        pass\n\n\n", "document": "# OKjJY\n\n`OKjJY` is a sample class with an empty constructor and a method called `method`. This class is primarily used as an example and does not provide any specific functionality.\n\n## Overview\n\nThe `OKjJY` class demonstrates the basic structure of a Python class, including a constructor and a method. Its methods and attributes do not serve any functional purpose and are intended for demonstration purposes only.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample_module_2.KavpK`\n- `automata_docs.tests.unit.sample_modules.sample.EmptyClass`\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following example demonstrates how to create an instance of `OKjJY` and call its sole method.\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample_module_2 import OKjJY\n\nobj = OKjJY()\nobj.method()\n```\n\n## Limitations\n\nAs the `OKjJY` class serves only as an example, it does not provide any specific functionality and should not be used outside of demonstrations.\n\n## Follow-up Questions:\n\n- What is the purpose of including `OKjJY` in the provided context?", "summary": "`OKjJY` is a sample Python class primarily used for demonstration purposes, having an empty constructor and a method named `method`. It serves as an example to showcase the basic structure of a class, including creating a constructor and adding methods. However, it does not have any functional purpose or related use cases. An instance of the `OKjJY` class can be created and its method can be called as follows:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample_module_2 import OKjJY\n\nobj = OKjJY()\nobj.method()\n```", "context": "\n    Generate the documentation for OKjJY using the context shown below -\n  Building context for primary symbol - automata_docs.tests.unit.sample_modules.sample_module_2.OKjJY -\n  \n      class OKjJY:\n          \"\"\"AWrThqBHqmIDXTGqOgEI\"\"\"\n      \n          def __init__(self):\n              pass\n      \n          def method(self):\n              \"\"\"NgyJwpqvXfrsFpXjByBi\"\"\"\n      \n              pass\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.sample_modules.sample_module_2.KavpK\n    \n        def KavpK():\n            \"\"\"xkuWpgMgKAwLhzuEkWkO\"\"\"\n        \n            pass\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.EmptyClass\n    \n        class EmptyClass:\n            pass\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass\n    \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n    \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n        \n    automata_docs.tests.unit.sample_modules.sample.Person\n    \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n        \n    automata_docs.tests.unit.sample_modules.sample.Person.run\n    \n        def run(self) -> str:\n                ...\n        \n        \n        \n        \n    automata_docs.tests.unit.test_database_vector.test_init_vector\n    \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n        \n    automata_docs.core.database.vector.JSONVectorDatabase\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n        add(self, embedding: SymbolEmbedding) -> None\n        \n        calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]\n        \n        clear(self) -> None\n        \n        contains(self, symbol: Symbol) -> bool\n        \n        discard(self, symbol: Symbol) -> None\n        \n        get(self, symbol: Symbol) -> SymbolEmbedding\n        \n        get_all_symbols(self) -> List[Symbol]\n        \n        load(self) -> None\n        \n        save(self) -> None\n        \n        update(self, embedding: SymbolEmbedding) -> None\n        \n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n    \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs fffd1c242fb8923ace6e30e55b78723c31da20be `automata_docs.tests.unit.test_py_writer`/MockCodeGenerator#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "fffd1c242fb8923ace6e30e55b78723c31da20be"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.test_py_writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "MockCodeGenerator", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class MockCodeGenerator:\n    def __init__(\n        self,\n        has_class: bool = False,\n        has_method: bool = False,\n        has_function: bool = False,\n        has_import: bool = False,\n        has_module_docstring: bool = False,\n        has_class_docstring: bool = False,\n        has_method_docstring: bool = False,\n        has_function_docstring: bool = False,\n    ):\n        self.has_class = has_class\n        self.has_method = has_method\n        self.has_function = has_function\n        self.has_import = has_import\n        self.has_module_docstring = has_module_docstring\n        self.has_class_docstring = has_class_docstring\n        self.has_method_docstring = has_method_docstring\n        self.has_function_docstring = has_function_docstring\n\n        # self.import_class_name = MockCodeGenerator.random_string(5)\n        self.class_name = MockCodeGenerator.random_string(5)\n        self.method_name = MockCodeGenerator.random_string(5)\n        self.function_name = MockCodeGenerator.random_string(5)\n        self.module_docstring = MockCodeGenerator.random_string(20)\n        self.class_docstring = MockCodeGenerator.random_string(20)\n        self.method_docstring = MockCodeGenerator.random_string(20)\n        self.function_docstring = MockCodeGenerator.random_string(20)\n\n    def generate_code(self):\n        module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n        class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n        method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n        function_docstring = (\n            f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n        )\n        import_statement = f\"import random\\n\" if self.has_import else \"\"\n\n        method_code = textwrap.dedent(\n            f\"\"\"def method(self):\n                    {method_docstring}\n                    pass\n                \"\"\"\n            if self.has_class and self.has_method\n            else \"\"\n        )\n        class_code = textwrap.dedent(\n            f\"\"\"\n            class {self.class_name}:\n                {class_docstring}\n                def __init__(self):\n                    pass\n                {method_code}\n            \"\"\"\n            if self.has_class\n            else \"\"\n        )\n\n        function_code = (\n            textwrap.dedent(\n                f\"\"\"\n            def {self.function_name}():\n                {function_docstring}\n                pass\n            \"\"\"\n            )\n            if self.has_function\n            else \"\"\n        )\n\n        return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n\n    def _check_function_obj(self, function_obj=None):\n        if function_obj is None:\n            source_code = self.generate_code()\n            function_obj = RedBaron(source_code).find(\"def\")\n        assert function_obj.name == self.function_name\n        if self.has_function_docstring:\n            assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n            assert isinstance(function_obj[0], StringNode)\n            assert isinstance(function_obj[1], EndlNode)\n            assert isinstance(function_obj[2], PassNode)\n        else:\n            assert isinstance(function_obj[0], EndlNode)\n            assert isinstance(function_obj[1], PassNode)\n\n    def _check_class_obj(self, class_obj=None):\n        if class_obj is None:\n            source_code = self.generate_code()\n            class_obj = RedBaron(source_code).find(\"class\")\n\n        assert class_obj.name == self.class_name\n        if self.has_class_docstring:\n            assert isinstance(class_obj, ClassNode)\n            assert isinstance(class_obj[0], StringNode)\n            assert isinstance(class_obj[1], EndlNode)\n            assert isinstance(class_obj[2], DefNode)\n        else:\n            assert isinstance(class_obj, ClassNode)\n            assert isinstance(class_obj[0], EndlNode)\n            assert isinstance(class_obj[1], DefNode)\n\n        if self.has_method:\n            method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n            assert method_obj.name == \"method\"\n            if self.has_method_docstring:\n                assert isinstance(method_obj[0], StringNode)  # docstring\n                assert isinstance(method_obj[1], EndlNode)  # pass\n                assert isinstance(method_obj[2], PassNode)  # pass\n            else:\n                assert isinstance(method_obj[0], EndlNode)\n                assert isinstance(method_obj[1], PassNode)\n\n    def _check_module_obj(self, module_obj=None):\n        if module_obj is None:\n            source_code = self.generate_code()\n            module_obj = RedBaron(source_code)\n        if self.has_module_docstring:\n            assert isinstance(module_obj[0], StringNode)\n            assert isinstance(module_obj[1], ClassNode)\n        else:\n            if isinstance(module_obj[0], EndlNode):\n                assert isinstance(module_obj[1], ClassNode)\n            else:\n                assert isinstance(module_obj[0], ClassNode)\n\n    @staticmethod\n    def random_string(length: int):\n        return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n\n\n", "document": "# MockCodeGenerator\n\n`MockCodeGenerator` is a class used specifically for generating test code in the context of test functions for `automata_docs`. It provides an easily configurable way to generate code strings for classes, methods, functions, and docstrings.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.test_py_writer.test_create_class_source_class`\n- `automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code`\n- `automata_docs.tests.unit.test_py_writer.test_create_function_source_function`\n- `automata_docs.tests.unit.test_py_writer.test_create_update_write_module`\n- `automata_docs.tests.unit.test_py_writer.test_extend_module`\n- `automata_docs.tests.unit.test_py_code_retriever.test_get_code_module`\n- `automata_docs.tests.unit.test_py_writer.test_reduce_module`\n- `automata_docs.tests.unit.test_py_writer.test_create_class_inheritance`\n- `automata_docs.tests.unit.test_py_writer.test_create_function_with_arguments`\n\n## Example\n\nThe following example demonstrates how to create an instance of `MockCodeGenerator` and generate code with mock class, docstring, function, and method.\n\n```python\nfrom automata_docs.tests.unit.test_py_writer import MockCodeGenerator\n\nmock_generator = MockCodeGenerator(\n    has_class=True,\n    has_method=True,\n    has_function=True,\n    has_import=True,\n    has_module_docstring=True,\n    has_class_docstring=True,\n    has_method_docstring=True,\n    has_function_docstring=True,\n)\nsource_code = mock_generator.generate_code()  # Returns the generated code in string format.\n```\n\n## Limitations\n\nThe primary limitation of the `MockCodeGenerator` class is that it is specifically designed for use in testing scenarios within the `automata_docs`. While it offers a simple interface for generating mock code for a variety of code structures, it is not intended for use outside of those testing scenarios.\n\n## Follow-up Questions:\n\n- Can the `MockCodeGenerator` class be extended to accommodate generation of other code structures?\n- Is the `MockCodeGenerator` only usable for the `automata_docs` testing context, or can it be potentially adapted for other testing scenarios as well?", "summary": "`MockCodeGenerator` is a class designed for generating test code in the context of test functions for `automata_docs`, allowing for easy configuration of code strings for classes, methods, functions, and docstrings. Its primary limitation is its specific use in testing scenarios within `automata_docs`, not being intended for use outside of those situations.\n\n```python\nfrom automata_docs.tests.unit.test_py_writer import MockCodeGenerator\n\nmock_generator = MockCodeGenerator(\n    has_class=True,\n    has_method=True,\n    has_function=True,\n    has_import=True,\n    has_module_docstring=True,\n    has_class_docstring=True,\n    has_method_docstring=True,\n    has_function_docstring=True,\n)\nsource_code = mock_generator.generate_code()  # Returns the generated code in string format.\n```", "context": "\n    Generate the documentation for MockCodeGenerator using the context shown below -\n  Building context for primary symbol - automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n  \n      class MockCodeGenerator:\n          def __init__(\n              self,\n              has_class: bool = False,\n              has_method: bool = False,\n              has_function: bool = False,\n              has_import: bool = False,\n              has_module_docstring: bool = False,\n              has_class_docstring: bool = False,\n              has_method_docstring: bool = False,\n              has_function_docstring: bool = False,\n          ):\n              self.has_class = has_class\n              self.has_method = has_method\n              self.has_function = has_function\n              self.has_import = has_import\n              self.has_module_docstring = has_module_docstring\n              self.has_class_docstring = has_class_docstring\n              self.has_method_docstring = has_method_docstring\n              self.has_function_docstring = has_function_docstring\n      \n              # self.import_class_name = MockCodeGenerator.random_string(5)\n              self.class_name = MockCodeGenerator.random_string(5)\n              self.method_name = MockCodeGenerator.random_string(5)\n              self.function_name = MockCodeGenerator.random_string(5)\n              self.module_docstring = MockCodeGenerator.random_string(20)\n              self.class_docstring = MockCodeGenerator.random_string(20)\n              self.method_docstring = MockCodeGenerator.random_string(20)\n              self.function_docstring = MockCodeGenerator.random_string(20)\n      \n          def generate_code(self):\n              module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n              class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n              method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n              function_docstring = (\n                  f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n              )\n              import_statement = f\"import random\\n\" if self.has_import else \"\"\n      \n              method_code = textwrap.dedent(\n                  f\"\"\"def method(self):\n                          {method_docstring}\n                          pass\n                      \"\"\"\n                  if self.has_class and self.has_method\n                  else \"\"\n              )\n              class_code = textwrap.dedent(\n                  f\"\"\"\n                  class {self.class_name}:\n                      {class_docstring}\n                      def __init__(self):\n                          pass\n                      {method_code}\n                  \"\"\"\n                  if self.has_class\n                  else \"\"\n              )\n      \n              function_code = (\n                  textwrap.dedent(\n                      f\"\"\"\n                  def {self.function_name}():\n                      {function_docstring}\n                      pass\n                  \"\"\"\n                  )\n                  if self.has_function\n                  else \"\"\n              )\n      \n              return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n      \n          def _check_function_obj(self, function_obj=None):\n              if function_obj is None:\n                  source_code = self.generate_code()\n                  function_obj = RedBaron(source_code).find(\"def\")\n              assert function_obj.name == self.function_name\n              if self.has_function_docstring:\n                  assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                  assert isinstance(function_obj[0], StringNode)\n                  assert isinstance(function_obj[1], EndlNode)\n                  assert isinstance(function_obj[2], PassNode)\n              else:\n                  assert isinstance(function_obj[0], EndlNode)\n                  assert isinstance(function_obj[1], PassNode)\n      \n          def _check_class_obj(self, class_obj=None):\n              if class_obj is None:\n                  source_code = self.generate_code()\n                  class_obj = RedBaron(source_code).find(\"class\")\n      \n              assert class_obj.name == self.class_name\n              if self.has_class_docstring:\n                  assert isinstance(class_obj, ClassNode)\n                  assert isinstance(class_obj[0], StringNode)\n                  assert isinstance(class_obj[1], EndlNode)\n                  assert isinstance(class_obj[2], DefNode)\n              else:\n                  assert isinstance(class_obj, ClassNode)\n                  assert isinstance(class_obj[0], EndlNode)\n                  assert isinstance(class_obj[1], DefNode)\n      \n              if self.has_method:\n                  method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                  assert method_obj.name == \"method\"\n                  if self.has_method_docstring:\n                      assert isinstance(method_obj[0], StringNode)  # docstring\n                      assert isinstance(method_obj[1], EndlNode)  # pass\n                      assert isinstance(method_obj[2], PassNode)  # pass\n                  else:\n                      assert isinstance(method_obj[0], EndlNode)\n                      assert isinstance(method_obj[1], PassNode)\n      \n          def _check_module_obj(self, module_obj=None):\n              if module_obj is None:\n                  source_code = self.generate_code()\n                  module_obj = RedBaron(source_code)\n              if self.has_module_docstring:\n                  assert isinstance(module_obj[0], StringNode)\n                  assert isinstance(module_obj[1], ClassNode)\n              else:\n                  if isinstance(module_obj[0], EndlNode):\n                      assert isinstance(module_obj[1], ClassNode)\n                  else:\n                      assert isinstance(module_obj[0], ClassNode)\n      \n          @staticmethod\n          def random_string(length: int):\n              return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n      \n      \n      \n      \n  Building context for related symbols -\n  \n    automata_docs.tests.unit.test_py_writer.test_create_class_source_class\n    \n        def test_create_class_source_class():\n            mock_generator = MockCodeGenerator(has_class=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_class_docstring=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_method=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_class_docstring=True, has_method=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_method=True, has_method_docstring=True\n            )\n            mock_generator._check_class_obj()\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n    \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n        \n    automata_docs.tests.unit.test_py_writer.test_create_function_source_function\n    \n        def test_create_function_source_function():\n            mock_generator = MockCodeGenerator(has_function=True)\n            mock_generator._check_function_obj()\n        \n            mock_generator = MockCodeGenerator(has_function=True, has_function_docstring=True)\n            mock_generator._check_function_obj()\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n    \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_extend_module\n    \n        def test_extend_module(python_writer):\n            # Arrange\n            # create module\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_2\", source_code)\n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            python_writer.update_existing_module(\"sample_module_2\", source_code_2)\n        \n            # Check module 2 is merged into module 1\n            module_obj = python_writer.code_retriever.module_tree_map.fetch_module(\"sample_module_2\")\n            mock_generator._check_module_obj(module_obj)\n            mock_generator._check_class_obj(module_obj[0])\n            mock_generator._check_function_obj(module_obj[1])\n            mock_generator_2._check_class_obj(module_obj[2])\n            mock_generator_2._check_function_obj(module_obj[3])\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_code_retriever.test_get_code_module\n    \n        def test_get_code_module(getter):\n            module_name = \"sample\"\n            object_path = None\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = 'import math\\n\\n\\ndef sample_function(name):\\n    return f\"Hello, {name}! Sqrt(2) = \" + str(math.sqrt(2))\\n\\n\\nclass Person:\\n\\n    def __init__(self, name):\\n        self.name = name\\n\\n    def say_hello(self):\\n        return f\"Hello, I am {self.name}.\"\\n\\n    def run(self) -> str:\\n        ...\\n\\n\\ndef f(x) -> int:\\n    return x + 1\\n\\n\\nclass EmptyClass:\\n    pass\\n\\n\\nclass OuterClass:\\n    class InnerClass:\\n\\n        def inner_method(self):\\n'\n        \n            assert result == expected_match\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_reduce_module\n    \n        def test_reduce_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_2\", source_code)\n            module_obj = python_writer.code_retriever.module_tree_map.fetch_module(\"sample_module_2\")\n            class_obj = module_obj.find(\"class\")\n        \n            function_obj = module_obj.find_all(\"def\")[-1]\n            python_writer.delete_from_existing__module(\"sample_module_2\", class_obj.name)\n            assert module_obj[0] == function_obj\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_create_class_inheritance\n    \n        def test_create_class_inheritance():\n            mock_generator = MockCodeGenerator(has_class=True)\n            source_code = mock_generator.generate_code()\n            # Add a subclass that inherits from the parent class\n            source_code += textwrap.dedent(\n                f\"\"\"\n                class {mock_generator.class_name}_child({mock_generator.class_name}):\n                    pass\n                \"\"\"\n            )\n            module_obj = RedBaron(source_code)\n            class_obj = find_syntax_tree_node(module_obj, f\"{mock_generator.class_name}_child\")\n            assert class_obj.inherit_from.name.value == mock_generator.class_name\n        \n        \n        \n        \n    automata_docs.tests.unit.test_py_writer.test_create_function_with_arguments\n    \n        def test_create_function_with_arguments():\n            mock_generator = MockCodeGenerator(has_function=True, has_function_docstring=True)\n            source_code = mock_generator.generate_code()\n            # Add a function with different types of arguments\n            source_code += textwrap.dedent(\n                f\"\"\"\n                def {mock_generator.function_name}_with_args(pos_arg, kw_arg=None, *args, **kwargs):\n                    pass\n                \"\"\"\n            )\n            module_obj = RedBaron(source_code)\n            function_obj = find_syntax_tree_node(module_obj, f\"{mock_generator.function_name}_with_args\")\n            assert function_obj.name == f\"{mock_generator.function_name}_with_args\"\n            def_arg_nodes = module_obj.find_all(\"def_argument\")\n            assert len(def_arg_nodes) == 2\n            assert def_arg_nodes[0].name.value == \"pos_arg\"\n            assert def_arg_nodes[1].name.value == \"kw_arg\"\n            assert def_arg_nodes[1].value.value == \"None\"\n            list_arg_nodes = module_obj.find_all(\"list_argument\")\n            assert len(list_arg_nodes) == 1\n            assert list_arg_nodes[0].name.value == \"args\"\n            dict_arg_nodes = module_obj.find_all(\"dict_argument\")\n            assert len(dict_arg_nodes) == 1\n            assert dict_arg_nodes[0].name.value == \"kwargs\"\n        \n        \n        \n        \n    automata_docs.core.symbol.symbol_types.Symbol\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Methods:\n        __eq__(self, other) -> None\n        \n        __hash__(self) -> int\n        \n        __repr__(self) -> str\n        \n        dotpath(self) -> str\n        \n        from_string(cls, symbol_str: str) -> \"Symbol\"\n        \n        is_local(symbol: \"Symbol\") -> bool\n        \n        is_meta(symbol: \"Symbol\") -> bool\n        \n        is_parameter(symbol: \"Symbol\") -> bool\n        \n        is_protobuf(symbol: \"Symbol\") -> bool\n        \n        module_name(self) -> str\n        \n        parent(self) -> \"Symbol\"\n        \n        symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind\n        \n        symbol_raw_kind_by_suffix(self) -> DescriptorProto\n        \n  Building context for dependencies -\n  \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}]