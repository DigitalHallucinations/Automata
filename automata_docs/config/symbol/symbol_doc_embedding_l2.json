[{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.config.config_enums`/ConfigCategory#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.config.config_enums", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "ConfigCategory", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/reduce": [{"py/type": "numpy.dtype"}, {"py/tuple": ["f8", false, true]}, {"py/tuple": [3, "<", null, null, null, -1, -1, 0]}]}, false, {"py/b64": ""}]}]}, "source_code": "class ConfigCategory(Enum):\n    \"\"\"\n    An enum which corresponds to the name of a folder holding config\n    \"\"\"\n\n    PROMPT = \"prompt\"\n    SYMBOL = \"symbol\"\n", "document": "# ConfigCategory\n\n`ConfigCategory` is an enumeration class that corresponds to the name of a folder holding config files in a Python project. It contains two variables: `PROMPT` and `SYMBOL`.\n\n## Overview\n\n`ConfigCategory` is a simple enumeration class that helps define the type of configuration being dealt with in the `config.config_enums` module. The two available options are `PROMPT` and `SYMBOL`, where `PROMPT` represents configurations related to prompts in the project, while `SYMBOL` represents configurations related to symbols.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.tests.unit.sample_modules.sample.EmptyClass`\n\n## Example\n\n```python\nfrom automata_docs.config.config_enums import ConfigCategory\n\nconfig_type = ConfigCategory.PROMPT\n```\n\n## Limitations\n\n`ConfigCategory` is limited to just two configuration types, `PROMPT` and `SYMBOL`. If additional configuration categories are needed in the future, they must be added to the enumeration class.\n\n## Follow-up Questions:\n\n- Are there any other common configuration categories that should be included in this enumeration module?", "summary": "`ConfigCategory` is an enumeration class used in the `config.config_enums` module of a Python project for defining the type of configuration being dealt with. It contains two variables: `PROMPT`, representing configurations related to prompts, and `SYMBOL`, representing configurations related to symbols. The class is limited to these two configuration types, and any additional categories must be added to the enumeration class. An example of its usage is:\n\n```python\nfrom automata_docs.config.config_enums import ConfigCategory\n\nconfig_type = ConfigCategory.PROMPT\n```", "context": "\n    Generate the documentation for ConfigCategory using the context shown below -\nContext for -\nautomata_docs.config.config_enums.ConfigCategory -\n\n  Class Docstring:\n    An enum which corresponds to the name of a folder holding config\n    \n  Variables:\n    PROMPT=\"prompt\"\n    SYMBOL=\"symbol\"\n    \n  Closely Related Symbols:\n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n    Context for -\n    automata_docs.cli.commands.LoggingConfig -\n    \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetrieverConfig -\n    \n      Class Docstring:\n        The configuration for the PyContextRetriever\n        \n      Variables:\n        self.spacer=spacer\n        self.nearest_symbols_count=nearest_symbols_count\n        self.max_dependency_print_depth=max_dependency_print_depth\n        self.max_recursion_depth=max_recursion_depth\n        self.print_imports=print_imports\n        self.process_directory_structure=process_directory_structure\n        self.process_docstrings=process_docstrings\n        self.process_variables=process_variables\n        self.process_methods=process_methods\n        self.process_methods_constructor=process_methods_constructor\n        self.process_methods_summary=process_methods_summary\n        self.process_nearest_symbols=process_nearest_symbols\n        self.process_dependencies=process_dependencies\n        self.process_references=process_references\n        self.process_callers=process_callers\n        \n      Methods:\n        def __init__(\n                self,\n                spacer: str = \"  \",\n                max_dependency_print_depth: int = 2,\n                max_recursion_depth: int = 1,\n                nearest_symbols_count: int = 10,\n                print_imports=False,\n                process_directory_structure=False,\n                process_docstrings=True,\n                process_variables=True,\n                process_methods=True,\n                process_methods_constructor=True,\n                process_methods_summary=False,\n                process_nearest_symbols=True,\n                process_dependencies=False,\n                process_references=False,\n                process_callers=False,\n            ):\n                \"\"\"\n                Args:\n                    spacer (str): The string to use for indentation\n                    max_dependency_print_depth (int): The maximum depth to print dependencies\n                    max_recursion_depth (int): The maximum depth to recurse into dependencies\n                    nearest_symbols_count (int): The number of nearest symbols to print\n                    print_imports (bool): Whether to print imports\n                    process_directory_structure (bool): Whether to process the directory structure\n                    process_docstrings (bool): Whether to process docstrings\n                    process_variables (bool): Whether to process variables\n                    process_methods (bool): Whether to process methods\n                    process_methods_constructor (bool): Whether to process the constructor method\n                    process_methods_summary (bool): Whether to process the summary method\n                    process_nearest_symbols (bool): Whether to process the nearest symbols\n                    process_dependencies (bool): Whether to process the dependencies\n                    process_references (bool): Whether to process the references\n                    process_callers (bool): Whether to process the callers\n                \"\"\"\n                self.spacer = spacer\n                self.nearest_symbols_count = nearest_symbols_count\n                self.max_dependency_print_depth = max_dependency_print_depth\n                self.max_recursion_depth = max_recursion_depth\n                self.print_imports = print_imports\n                self.process_directory_structure = process_directory_structure\n                self.process_docstrings = process_docstrings\n                self.process_variables = process_variables\n                self.process_methods = process_methods\n                self.process_methods_constructor = process_methods_constructor\n                self.process_methods_summary = process_methods_summary\n                self.process_nearest_symbols = process_nearest_symbols\n                self.process_dependencies = process_dependencies\n                self.process_references = process_references\n                self.process_callers = process_callers\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n      \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_code_retriever.test_build_overview\n      \n        def test_build_overview():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            result = build_repository_overview(sample_dir)\n            first_module_overview = \"sample\\n     - func sample_function\\n     - cls Person\\n       - func __init__\\n       - func say_hello\\n       - func run\\n     - func f\\n     - cls EmptyClass\\n     - cls OuterClass\\n       - cls InnerClass\\n         - func inner_method\\nsample2\\n     - cls PythonAgentToolBuilder\\n       - func __init__\\n       - func build_tools\\n         - func python_agent_python_task\"\n        \n            assert first_module_overview in result\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.directory`/DirectoryManager#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "DirectoryManager", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/reduce": [{"py/type": "numpy.dtype"}, {"py/tuple": ["f8", false, true]}, {"py/tuple": [3, "<", null, null, null, -1, -1, 0]}]}, false, {"py/b64": ""}]}]}, "source_code": "class DirectoryManager:\n    \"\"\"Handles operations related to directory structure.\"\"\"\n\n    def __init__(self, base_path: str):\n        \"\"\"\n        Args:\n            base_path (str): Base path of the directory structure\n        \"\"\"\n        self.root = self._load_directory_structure(base_path)\n\n    def _load_directory_structure(self, root_dir: str) -> \"Directory\":\n        \"\"\"Load directory structure into Directory and File objects.\"\"\"\n        root = Directory(root_dir)\n        self.root = root  # Set root before walking through directory\n\n        # Map of directory paths to their corresponding nodes\n        dir_path_to_node = {root_dir: root}\n\n        for parent_dir, dirs, files in os.walk(root_dir):\n            # Find the parent directory node\n            parent_node = dir_path_to_node[parent_dir]\n\n            # Add all directories\n            for dir in dirs:\n                dir_node = Directory(dir, parent_node)\n                parent_node.add_child(dir_node)\n                dir_path_to_node[os.path.join(parent_dir, dir)] = dir_node\n\n            # Add all files\n            for file in files:\n                parent_node.add_child(File(file, parent_node))\n\n        return root\n\n    def get_files_in_dir(self, path: str) -> List[str]:\n        \"\"\"\n        Get a list of files in the given directory\n\n        Args:\n            path (str): Path of the directory\n\n        Returns:\n            List[str]: List of files in the directory\n        \"\"\"\n        dir_node = self._get_node_for_path(self.root, path)\n        if dir_node and isinstance(dir_node, Directory):\n            return dir_node.get_file_names()\n        else:\n            return []\n\n    def get_subdirectories(self, path: str) -> List[str]:\n        \"\"\"\n        Get a list of subdirectories in the given directory\n\n        Args:\n            path (str): Path of the directory\n\n        Returns:\n            List[str]: List of subdirectories in the directory\n        \"\"\"\n        dir_node = self._get_node_for_path(self.root, path)\n        if dir_node and isinstance(dir_node, Directory):\n            return dir_node.get_subdirectories()\n        else:\n            return []\n\n    def ensure_directory_exists(self, directory_path: str):\n        \"\"\"\n        Creates the directory if it does not exist already\n\n        Args:\n            directory_path (str): Path of the directory to create\n        \"\"\"\n        if not os.path.exists(directory_path):\n            print(f\"Creating directory_path = {directory_path}\")\n            os.makedirs(directory_path)\n            self.root = self._load_directory_structure(directory_path)\n\n    def _get_node_for_path(self, root: \"Directory\", path: str) -> Optional[\"Node\"]:\n        \"\"\"\n        Find the node for a given path\n\n        Args:\n            root (Directory): Root node of the tree\n            path (str): Path to find the node for\n\n        Returns:\n            Optional[Node]: Node for the given path, None if not found\n        \"\"\"\n\n        if path == \".\":\n            return root\n\n        path_parts = path.split(os.sep)\n        # Initial node is root\n        node: Directory = root\n\n        # Iterate through path parts\n        for part in path_parts:\n            if part in node.children:\n                new_node = node.children[part]\n                if not isinstance(new_node, Directory):\n                    # If part is a file, return None\n                    return None\n                node = new_node\n            else:\n                # If part not found in children, return None\n                return None\n\n        return node\n", "document": "# DirectoryManager\n\n`DirectoryManager` is a class that handles operations related to directory structures such as ensuring a directory exists, getting files in a directory, and getting subdirectories. It provides functionality to manage and interact with the directory structure, ensuring proper organization and structure.\n\n## Overview\n\n`DirectoryManager` provides methods for interacting with the directory structure, such as creating directories or getting lists of files or subdirectories. The class is initialized with a base path, which will be the starting point for the directory structure. It includes methods like `ensure_directory_exists`, `get_files_in_dir`, and `get_subdirectories`. It also includes related symbols like `Directory` and tests for the methods in the `DirectoryManager`.\n\n## Related Symbols\n\n- `automata_docs.core.coding.directory.Directory`\n- `automata_docs.tests.unit.test_directory_manager.test_load_directory_structure`\n- `automata_docs.tests.unit.test_directory_manager.test_get_files_in_dir`\n- `automata_docs.tests.unit.test_directory_manager.test_get_subdirectories`\n- `automata_docs.tests.unit.test_directory_manager.create_test_dir_structure`\n\n## Example\n\nThe following is an example demonstrating how to create a `DirectoryManager` instance for a given directory path, create a new directory, and retrieve files and subdirectories in a given path.\n\n```python\nfrom automata_docs.core.coding.directory import DirectoryManager\n\nbase_path = \"/path/to/base/directory\"\ndir_manager = DirectoryManager(base_path)\n\nnew_directory_path = \"/path/to/base/directory/new_directory\"\ndir_manager.ensure_directory_exists(new_directory_path)\n\nfiles_in_dir = dir_manager.get_files_in_dir(new_directory_path)\nprint(\"Files in the directory:\", files_in_dir)\n\nsubdirectories = dir_manager.get_subdirectories(new_directory_path)\nprint(\"Subdirectories in the directory:\", subdirectories)\n```\n\n## Limitations\n\n`DirectoryManager` assumes a specific directory structure for the base path and relies on the `Directory` class for many of its operations. It is also limited in functionality, primarily providing methods for creating directories and retrieving files or subdirectories.\n\n## Follow-up Questions:\n\n- Can `DirectoryManager` be expanded to manage complex directory structures and additional filesystem operations?", "summary": "The DirectoryManager is a class that manages directory structures, ensuring their proper organization. It allows for creation and interaction with directories, including creating directories, retrieving files, and accessing subdirectories. Initialized with a base path, it includes methods such as `ensure_directory_exists`, `get_files_in_dir`, and `get_subdirectories`. However, it is limited in functionality and relies on the `Directory` class for many operations.\n\nExample usage:\n```python\nfrom automata_docs.core.coding.directory import DirectoryManager\n\nbase_path = \"/path/to/base/directory\"\ndir_manager = DirectoryManager(base_path)\n\nnew_directory_path = \"/path/to/base/directory/new_directory\"\ndir_manager.ensure_directory_exists(new_directory_path)\n\nfiles_in_dir = dir_manager.get_files_in_dir(new_directory_path)\nprint(\"Files in the directory:\", files_in_dir)\n\nsubdirectories = dir_manager.get_subdirectories(new_directory_path)\nprint(\"Subdirectories in the directory:\", subdirectories)\n```", "context": "\n    Generate the documentation for DirectoryManager using the context shown below -\nContext for -\nautomata_docs.core.coding.directory.DirectoryManager -\n\n  Class Docstring:\n    Handles operations related to directory structure.\n    \n  Variables:\n    self.root=self._load_directory_structure(base_path)\n    self.root=root\n    self.root=self._load_directory_structure(directory_path)\n    \n  Methods:\n    def __init__(self, base_path: str):\n            \"\"\"\n            Args:\n                base_path (str): Base path of the directory structure\n            \"\"\"\n            self.root = self._load_directory_structure(base_path)\n    \n        \n    def ensure_directory_exists(self, directory_path: str):\n            \"\"\"\n            Creates the directory if it does not exist already\n    \n            Args:\n                directory_path (str): Path of the directory to create\n            \"\"\"\n            if not os.path.exists(directory_path):\n                print(f\"Creating directory_path = {directory_path}\")\n                os.makedirs(directory_path)\n                self.root = self._load_directory_structure(directory_path)\n    \n        \n    def get_files_in_dir(self, path: str) -> List[str]:\n            \"\"\"\n            Get a list of files in the given directory\n    \n            Args:\n                path (str): Path of the directory\n    \n            Returns:\n                List[str]: List of files in the directory\n            \"\"\"\n            dir_node = self._get_node_for_path(self.root, path)\n            if dir_node and isinstance(dir_node, Directory):\n                return dir_node.get_file_names()\n            else:\n                return []\n    \n        \n    def get_subdirectories(self, path: str) -> List[str]:\n            \"\"\"\n            Get a list of subdirectories in the given directory\n    \n            Args:\n                path (str): Path of the directory\n    \n            Returns:\n                List[str]: List of subdirectories in the directory\n            \"\"\"\n            dir_node = self._get_node_for_path(self.root, path)\n            if dir_node and isinstance(dir_node, Directory):\n                return dir_node.get_subdirectories()\n            else:\n                return []\n    \n        \n  Closely Related Symbols:\n      automata_docs.tests.unit.test_directory_manager.test_load_directory_structure\n      \n        def test_load_directory_structure(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            assert dir_manager.root.name == str(test_dir)\n            assert len(dir_manager.root.children) == 2  # 2 directories: dir1, dir2\n        \n        \n        \n      automata_docs.tests.unit.test_directory_manager.test_get_files_in_dir\n      \n        def test_get_files_in_dir(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            files_in_dir1 = dir_manager.get_files_in_dir(\"dir1\")\n            assert len(files_in_dir1) == 2  # 2 files in dir1: file1, file2\n            assert set(files_in_dir1) == {\"file1\", \"file2\"}\n        \n        \n        \n      automata_docs.tests.unit.test_directory_manager.test_get_subdirectories\n      \n        def test_get_subdirectories(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            subdirectories = dir_manager.get_subdirectories(\".\")\n            assert len(subdirectories) == 2  # 2 subdirectories in root: dir1, dir2\n            assert set(subdirectories) == {\"dir1\", \"dir2\"}\n        \n      automata_docs.tests.unit.test_directory_manager.test_get_node_for_path\n      \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n    Context for -\n    automata_docs.core.coding.directory.Directory -\n    \n      Class Docstring:\n        Represents a directory. Has children which can be directories or files\n        \n      Variables:\n        self.children={}\n        self.children[child.name]=child\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the directory\n                    parent (Node): Parent node of this directory\n                \"\"\"\n                super().__init__(name, parent)\n                self.children: Dict[str, Node] = {}\n        \n            \n      automata_docs.tests.unit.test_directory_manager.create_test_dir_structure\n      \n        def create_test_dir_structure(tmp_path):\n            \"\"\"\n            Creates a test directory structure under the given path.\n            \"\"\"\n            (tmp_path / \"dir1\").mkdir()\n            (tmp_path / \"dir2\").mkdir()\n            (tmp_path / \"dir1\" / \"file1\").write_text(\"content\")\n            (tmp_path / \"dir1\" / \"file2\").write_text(\"content\")\n            (tmp_path / \"dir2\" / \"file1\").write_text(\"content\")\n            return tmp_path\n        \n        \n        \n    Context for -\n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap -\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Variables:\n        self._dotpath_map=DotPathMap(path)\n        self._loaded_modules={}\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(module_fpath)\n        self._loaded_modules[module_dotpath]=module\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(fpath)\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.directory`/File#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "File", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class File(Node):\n    \"\"\"Represents a file in the tree\"\"\"\n\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        \"\"\"\n        Args:\n            name (str): Name of the file\n            parent (Node): Parent node of this file\n        \"\"\"\n        super().__init__(name, parent)\n\n\n", "document": "# File\n\n`File` is a class that represents a file in a tree structure. It extends the abstract `Node` class and helps in maintaining a hierarchical structure that represents the relationship between files and their parent directories.\n\n## Overview\n\nThe `File` class is primarily used for organizing files in a tree-like structure. It helps handle files in a directory with their parent nodes being directories, allowing for easy traversal and manipulation of the file structure.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.SymbolFile`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.SymbolReference`\n\n## Example\n\nThe following example demonstrates the usage of the `File` class.\n\n```python\nfrom automata_docs.core.coding.directory import Directory, File\n\nroot_directory = Directory(\"root\")\nfile1 = File(\"file1.txt\", parent=root_directory)\nfile2 = File(\"file2.txt\", parent=root_directory)\n\nprint(root_directory.children)  # Output: [file1, file2]\n```\n\n## Limitations\n\n`File` only represents a file and cannot store or manipulate the contents of the underlying file. To perform I/O operations or other manipulations, you need to use the `SymbolFile` class or other I/O libraries in conjunction with `File`.\n\n## Follow-up Questions:\n\n- Are there any methods or examples for how to perform I/O operations using the `File` class?", "summary": "The `File` class, which extends the abstract `Node` class, represents a file in a tree structure and is used for organizing files in a tree-like structure. It helps maintain a hierarchical relationship between files and their parent directories, allowing easy traversal and manipulation of a file structure. However, `File` cannot store or manipulate the contents of the underlying file. To perform I/O operations, you must use the `SymbolFile` class or other I/O libraries in conjunction with `File`. An example of using the `File` class can be seen in the code:\n\n```python\nfrom automata_docs.core.coding.directory import Directory, File\n\nroot_directory = Directory(\"root\")\nfile1 = File(\"file1.txt\", parent=root_directory)\nfile2 = File(\"file2.txt\", parent=root_directory)\n\nprint(root_directory.children)  # Output: [file1, file2]\n```", "context": "\n    Generate the documentation for File using the context shown below -\nContext for -\nautomata_docs.core.coding.directory.File -\n\n  Class Docstring:\n    Represents a file in the tree\n    \n    \n  Methods:\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n            \"\"\"\n            Args:\n                name (str): Name of the file\n                parent (Node): Parent node of this file\n            \"\"\"\n            super().__init__(name, parent)\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolFile -\n    \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_graph.test_get_all_files\n      \n        def test_get_all_files(symbol_graph):\n            files = symbol_graph.get_all_files()\n            assert isinstance(files, list)\n            for f in files:\n                assert isinstance(f, SymbolFile)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n      automata_docs.tests.unit.test_database_vector.test_load\n      \n        def test_load(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n            vector_db_2 = JSONVectorDatabase(temp_output_filename)\n        \n            embedded_symbol_0 = vector_db_2.get(symbols[0])\n            embedded_symbol_1 = vector_db_2.get(symbols[1])\n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolReference -\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n        \n      Methods:\n      automata_docs.tests.unit.test_database_vector.test_init_vector\n      \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.directory`/Node#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.directory", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "Node", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class Node:\n    \"\"\"Abstract base class for a node in the file tree\"\"\"\n\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        \"\"\"\n        Args:\n            name (str): Name of the node\n            parent (Node): Parent node of this node\n        \"\"\"\n        self.name = name\n        self.parent = parent\n\n\n", "document": "# Node\n\n`Node` is an abstract base class for a node in the file tree used in the Automata documentation project. It represents a generic node in a file system hierarchy, allowing you to work with files and directories in a generic and hierarchical manner.\n\n## Overview\n\nThe `Node` class serves as a base class for other types of file tree nodes, such as `File` and `Directory`. It has two main attributes, `name` and `parent`, and provides a constructor for initializing them. By inheriting from the Node class, the `File` and `Directory` classes can easily represent and manipulate their hierarchical relationship in the file tree.\n\n## Related Symbols\n\n- `automata_docs.core.coding.directory.File`\n- `automata_docs.core.coding.directory.Directory`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter`\n\n## Example\n\nThe following example demonstrates how to create a custom class that inherits from the `Node` class and initialize it with a name and parent:\n\n```python\nfrom automata_docs.core.coding.directory import Node\nfrom typing import Optional\n\nclass CustomNode(Node):\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        super().__init__(name, parent)\n\n# Create an instance of CustomNode\ncustom_node = CustomNode(\"example_node\", None)\n```\n\n## Limitations\n\n`Node` is an abstract base class and can't be instantiated directly; you need to subclass it to create your custom node types, such as files or directories. It doesn't provide any specific functionality for file or directory nodes apart from the `name` and `parent` attributes. The logic and functionality specific to files and directories are implemented in their respective subclasses (`File` and `Directory`).\n\n## Follow-up Questions:\n\n- What other features and functionality should be included in the base `Node` class?\n- How does the `Node` class interact with other components of the Automata documentation project?", "summary": "`Node` is an abstract base class representing a generic node in a file system hierarchy in the Automata documentation project. It serves as a base class for other types of file tree nodes, such as `File` and `Directory`, and has two main attributes - `name` and `parent`. By inheriting from the `Node` class, the `File` and `Directory` classes can efficiently represent and manipulate their hierarchical relationships in the file tree. However, `Node` can't be instantiated directly; you need to subclass it to create custom node types, such as files or directories.\n\nExample:\n```python\nfrom automata_docs.core.coding.directory import Node\nfrom typing import Optional\n\nclass CustomNode(Node):\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n        super().__init__(name, parent)\n\n# Create an instance of CustomNode\ncustom_node = CustomNode(\"example_node\", None)\n```", "context": "\n    Generate the documentation for Node using the context shown below -\nContext for -\nautomata_docs.core.coding.directory.Node -\n\n  Class Docstring:\n    Abstract base class for a node in the file tree\n    \n  Variables:\n    self.name=name\n    self.parent=parent\n    \n  Methods:\n    def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n            \"\"\"\n            Args:\n                name (str): Name of the node\n                parent (Node): Parent node of this node\n            \"\"\"\n            self.name = name\n            self.parent = parent\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.coding.directory.File -\n    \n      Class Docstring:\n        Represents a file in the tree\n        \n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the file\n                    parent (Node): Parent node of this file\n                \"\"\"\n                super().__init__(name, parent)\n        \n        \n        \n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    Context for -\n    automata_docs.core.coding.directory.Directory -\n    \n      Class Docstring:\n        Represents a directory. Has children which can be directories or files\n        \n      Variables:\n        self.children={}\n        self.children[child.name]=child\n        \n      Methods:\n        def __init__(self, name: str, parent: Optional[\"Node\"] = None):\n                \"\"\"\n                Args:\n                    name (str): Name of the directory\n                    parent (Node): Parent node of this directory\n                \"\"\"\n                super().__init__(name, parent)\n                self.children: Dict[str, Node] = {}\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.tests.unit.test_directory_manager.test_get_node_for_path\n      \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass\n      \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass -\n    \n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.py_coding.module_tree`/DotPathMap#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.module_tree", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "DotPathMap", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class DotPathMap:\n    \"\"\"A map from module dotpaths to module filepaths\"\"\"\n\n    def __init__(self, path: str):\n        \"\"\"\n        Args:\n            path: The absolute path to the root of the module tree\n        \"\"\"\n        if not os.path.isabs(path):\n            path = os.path.join(root_fpath(), path)\n        self._abs_path = path\n        self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n        self._module_fpath_to_dotpath_map = {\n            v: k for k, v in self._module_dotpath_to_fpath_map.items()\n        }\n\n    def _build_module_dotpath_to_fpath_map(self) -> Dict[str, str]:\n        \"\"\"\n        Builds a map from module dotpaths to module filepaths\n\n        Returns:\n            The map from module dotpaths to module filepaths\n        \"\"\"\n        module_dotpath_to_fpath_map = {}\n        for root, _, files in os.walk(self._abs_path):\n            for file in files:\n                if file.endswith(\".py\"):\n                    module_fpath = os.path.join(root, file)\n                    module_dotpath = convert_fpath_to_module_dotpath(self._abs_path, module_fpath)\n                    module_dotpath_to_fpath_map[module_dotpath] = module_fpath\n        return module_dotpath_to_fpath_map\n\n    def get_module_fpath_by_dotpath(self, module_dotpath: str) -> str:\n        \"\"\"\n        Gets the filepath of a module given its dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            The filepath of the module\n        \"\"\"\n        return self._module_dotpath_to_fpath_map[module_dotpath]\n\n    def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n        \"\"\"\n        Gets the dotpath of a module given its filepath\n\n        Args:\n            module_fpath: The filepath of the module\n\n        Returns:\n            The dotpath of the module\n        \"\"\"\n        return self._module_fpath_to_dotpath_map[module_fpath]\n\n    def contains_dotpath(self, module_dotpath: str) -> bool:\n        \"\"\"\n        Checks if the map contains a module with the given dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            True if the map contains the module, False otherwise\n        \"\"\"\n        return module_dotpath in self._module_dotpath_to_fpath_map\n\n    def contains_fpath(self, module_fpath: str) -> bool:\n        \"\"\"\n        Checks if the map contains a module with the given filepath\n\n        Args:\n            module_fpath: The filepath of the module\n\n        Returns:\n            True if the map contains the module, False otherwise\n        \"\"\"\n        return module_fpath in self._module_fpath_to_dotpath_map\n\n    def put_module(self, module_dotpath: str):\n        \"\"\"\n        Puts a module with the given dotpath in the map\n\n        Args:\n            module_dotpath: The dotpath of the module\n        \"\"\"\n        if not self.contains_dotpath(module_dotpath):\n            module_os_rel_path = module_dotpath.replace(DOT_SEP, os.path.sep)\n            module_os_abs_path = os.path.join(self._abs_path, module_os_rel_path)\n            os.makedirs(os.path.dirname(module_os_abs_path), exist_ok=True)\n            file_path = f\"{module_os_abs_path}.py\"\n            self._module_dotpath_to_fpath_map[module_dotpath] = file_path\n            self._module_fpath_to_dotpath_map[file_path] = module_dotpath\n\n    def items(self) -> Iterable[Tuple[str, str]]:\n        \"\"\"\n        Returns:\n            A dictionary containing the module dotpath to module filepath mapping\n        \"\"\"\n        return self._module_dotpath_to_fpath_map.items()\n\n\n", "document": "# DotPathMap\n\n`DotPathMap` is a class that provides a map from module dotpaths to module filepaths. It offers utility methods for checking if a module exists in the map, retrieving the dotpath or filepath of a module, and adding a new module to the map.\n\n## Overview\n\n`DotPathMap` is initialized with the absolute path to the root of the module tree and internally handles the conversion between module dotpaths and filepaths. It exposes methods for checking the existence of a module by its dotpath or filepath, retrieving the filepath by dotpath and vice versa, and adding a new module to the map.\n\n## Related Symbols\n\n- `automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.SymbolFile`\n- `automata_docs.core.coding.directory.DirectoryManager`\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n\n## Example\n\nThe following example demonstrates how to create and use a `DotPathMap` to manage a small module tree.\n\n```python\nimport os\nfrom automata_docs.core.coding.py_coding.module_tree import DotPathMap\n\nproject_root = os.path.abspath(\"my_project_root\")\ndot_path_map = DotPathMap(project_root)\n\n# Check if a module exists in the map\nmodule_dotpath = \"my_project.module1\"\nassert not dot_path_map.contains_dotpath(module_dotpath)\n\n# Put a new module in the map\ndot_path_map.put_module(module_dotpath)\n\n# Check if the module was added to the map successfully\nassert dot_path_map.contains_dotpath(module_dotpath)\n\nmodule_fpath = dot_path_map.get_module_fpath_by_dotpath(module_dotpath)\nprint(f\"Module filepath: {module_fpath}\")\n```\n\n## Limitations\n\n`DotPathMap` assumes that modules have the `.py` extension and it cannot handle any other types of files or directories that do not have this extension. In addition, the class only supports module-level dotpaths and filepaths, so nested modules or class-level mappings will not be considered.\n\n## Follow-up Questions:\n\n- How can we extend `DotPathMap` to support other file types or more granular mappings?\n- Are there any notable performance issues when dealing with very large module trees?", "summary": "DotPathMap is a class that maps module dotpaths to filepaths and is initialized with the absolute path to the root of the module tree. It offers utility methods for checking if a module exists in the map, retrieving the dotpath or filepath of a module, and adding a new module to the map. It assumes that modules have the \".py\" extension and only supports module-level dotpaths and filepaths. An example of its usage can be found below:\n\n```python\nimport os\nfrom automata_docs.core.coding.py_coding.module_tree import DotPathMap\n\nproject_root = os.path.abspath(\"my_project_root\")\ndot_path_map = DotPathMap(project_root)\n\nmodule_dotpath = \"my_project.module1\"\nassert not dot_path_map.contains_dotpath(module_dotpath)\n\ndot_path_map.put_module(module_dotpath)\n\nassert dot_path_map.contains_dotpath(module_dotpath)\n\nmodule_fpath = dot_path_map.get_module_fpath_by_dotpath(module_dotpath)\nprint(f\"Module filepath: {module_fpath}\")\n```\nConsiderations for extending DotPathMap include support for other file types, more granular mappings, and potential performance issues for large module trees.", "context": "\n    Generate the documentation for DotPathMap using the context shown below -\nContext for -\nautomata_docs.core.coding.py_coding.module_tree.DotPathMap -\n\n  Class Docstring:\n    A map from module dotpaths to module filepaths\n    \n  Variables:\n    self._abs_path=path\n    self._module_dotpath_to_fpath_map=self._build_module_dotpath_to_fpath_map()\n    self._module_fpath_to_dotpath_map={\n                v: k for k, v in self._module_dotpath_to_fpath_map.items()\n            }\n    self._module_dotpath_to_fpath_map[module_dotpath]=file_path\n    self._module_fpath_to_dotpath_map[file_path]=module_dotpath\n    \n  Methods:\n    def __init__(self, path: str):\n            \"\"\"\n            Args:\n                path: The absolute path to the root of the module tree\n            \"\"\"\n            if not os.path.isabs(path):\n                path = os.path.join(root_fpath(), path)\n            self._abs_path = path\n            self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n            self._module_fpath_to_dotpath_map = {\n                v: k for k, v in self._module_dotpath_to_fpath_map.items()\n            }\n    \n        \n    def contains_dotpath(self, module_dotpath: str) -> bool:\n            \"\"\"\n            Checks if the map contains a module with the given dotpath\n    \n            Args:\n                module_dotpath: The dotpath of the module\n    \n            Returns:\n                True if the map contains the module, False otherwise\n            \"\"\"\n            return module_dotpath in self._module_dotpath_to_fpath_map\n    \n        \n    def contains_fpath(self, module_fpath: str) -> bool:\n            \"\"\"\n            Checks if the map contains a module with the given filepath\n    \n            Args:\n                module_fpath: The filepath of the module\n    \n            Returns:\n                True if the map contains the module, False otherwise\n            \"\"\"\n            return module_fpath in self._module_fpath_to_dotpath_map\n    \n        \n    def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n            \"\"\"\n            Gets the dotpath of a module given its filepath\n    \n            Args:\n                module_fpath: The filepath of the module\n    \n            Returns:\n                The dotpath of the module\n            \"\"\"\n            return self._module_fpath_to_dotpath_map[module_fpath]\n    \n        \n    def get_module_fpath_by_dotpath(self, module_dotpath: str) -> str:\n            \"\"\"\n            Gets the filepath of a module given its dotpath\n    \n            Args:\n                module_dotpath: The dotpath of the module\n    \n            Returns:\n                The filepath of the module\n            \"\"\"\n            return self._module_dotpath_to_fpath_map[module_dotpath]\n    \n        \n    def items(self) -> Iterable[Tuple[str, str]]:\n            \"\"\"\n            Returns:\n                A dictionary containing the module dotpath to module filepath mapping\n            \"\"\"\n            return self._module_dotpath_to_fpath_map.items()\n    \n    \n    \n    def put_module(self, module_dotpath: str):\n            \"\"\"\n            Puts a module with the given dotpath in the map\n    \n            Args:\n                module_dotpath: The dotpath of the module\n            \"\"\"\n            if not self.contains_dotpath(module_dotpath):\n                module_os_rel_path = module_dotpath.replace(DOT_SEP, os.path.sep)\n                module_os_abs_path = os.path.join(self._abs_path, module_os_rel_path)\n                os.makedirs(os.path.dirname(module_os_abs_path), exist_ok=True)\n                file_path = f\"{module_os_abs_path}.py\"\n                self._module_dotpath_to_fpath_map[module_dotpath] = file_path\n                self._module_fpath_to_dotpath_map[file_path] = module_dotpath\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap -\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Variables:\n        self._dotpath_map=DotPathMap(path)\n        self._loaded_modules={}\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(module_fpath)\n        self._loaded_modules[module_dotpath]=module\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(fpath)\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n      automata_docs.tests.unit.test_py_code_retriever.module_map\n      \n        @pytest.fixture\n        def module_map():\n            # get latest path\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            # Set the root directory to the folder containing test modules\n            return LazyModuleTreeMap(sample_dir)\n        \n        \n        \n      automata_docs.tests.unit.test_directory_manager.test_get_node_for_path\n      \n        def test_get_node_for_path(tmp_path):\n            test_dir = create_test_dir_structure(tmp_path)\n            dir_manager = DirectoryManager(str(test_dir))\n            dir1_node = dir_manager._get_node_for_path(dir_manager.root, \"dir1\")\n            assert dir1_node is not None\n            assert dir1_node.name == \"dir1\"\n            assert len(dir1_node.children) == 2  # 2 files in dir1: file1, file2\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolFile -\n    \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.coding.directory.DirectoryManager -\n    \n      Class Docstring:\n        Handles operations related to directory structure.\n        \n      Variables:\n        self.root=self._load_directory_structure(base_path)\n        self.root=root\n        self.root=self._load_directory_structure(directory_path)\n        \n      Methods:\n        def __init__(self, base_path: str):\n                \"\"\"\n                Args:\n                    base_path (str): Base path of the directory structure\n                \"\"\"\n                self.root = self._load_directory_structure(base_path)\n        \n            \n      automata_docs.tests.unit.test_py_code_retriever.getter\n      \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n    Context for -\n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Variables:\n        self.module_tree_map=module_tree_map\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.py_coding.module_tree`/LazyModuleTreeMap#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.module_tree", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "LazyModuleTreeMap", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class LazyModuleTreeMap:\n    \"\"\"\n    A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n    Loads and caches modules in memory as they are accessed\n    \"\"\"\n\n    def __init__(self, path: str):\n        \"\"\"\n        Args:\n            path: The absolute path to the root of the module tree\n        \"\"\"\n        self._dotpath_map = DotPathMap(path)\n        self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n\n    def __contains__(self, dotpath):\n        \"\"\"\n        Checks if the map contains a module with the given dotpath\n\n        Args:\n            dotpath: The dotpath of the module\n        \"\"\"\n        return self._dotpath_map.contains_dotpath(dotpath)\n\n    def items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]:\n        \"\"\"\n        Returns:\n            A dictionary containing the module dotpath to module RedBaron FST object mapping\n        \"\"\"\n        self._load_all_modules()\n        return self._loaded_modules.items()\n\n    def fetch_module(self, module_dotpath: str) -> Optional[RedBaron]:\n        \"\"\"\n        Gets the module with the given dotpath\n\n        Args:\n            module_dotpath: The dotpath of the module\n\n        Returns:\n            Optional[RedBaron]: The module with the given dotpath if found, None otherwise\n        \"\"\"\n        if not self._dotpath_map.contains_dotpath(module_dotpath):\n            return None\n\n        if module_dotpath not in self._loaded_modules:\n            module_fpath = self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n            self._loaded_modules[module_dotpath] = self._load_module_from_fpath(module_fpath)\n        return self._loaded_modules[module_dotpath]\n\n    def fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]:\n        \"\"\"\n        Gets the module dotpath for the specified module object.\n\n        Args:\n            module_obj (Module): The module object.\n\n        Returns:\n            str: The module dotpath for the specified module object.\n        \"\"\"\n        # there is no way a module that has a redbaron object is not loaded\n        for module_dotpath, module in self._loaded_modules.items():\n            if module == module_obj:\n                return module_dotpath\n        return None\n\n    def fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]:\n        \"\"\"\n        Gets the module fpath for the specified module dotpath.\n\n        Args:\n            module_dotpath (str): The module dotpath.\n\n        Returns:\n            str: The module fpath for the specified module dotpath.\n        \"\"\"\n\n        if module_dotpath in self._loaded_modules:\n            return self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n        return None\n\n    def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n        \"\"\"\n        Gets the module dotpath for the specified module fpath.\n\n        Args:\n            module_fpath (str): The module fpath.\n        \"\"\"\n        return self._dotpath_map.get_module_dotpath_by_fpath(module_fpath)\n\n    def put_module(self, module_dotpath: str, module: RedBaron):\n        \"\"\"\n        Put a module with the given dotpath in the map\n\n        Args:\n            module_dotpath: The dotpath of the module\n            module: The module to put in the map\n        \"\"\"\n        self._loaded_modules[module_dotpath] = module\n        self._dotpath_map.put_module(module_dotpath)\n\n    def _load_all_modules(self):\n        \"\"\"Loads all modules in the map\"\"\"\n        for module_dotpath, fpath in self._dotpath_map.items():\n            if module_dotpath not in self._loaded_modules:\n                self._loaded_modules[module_dotpath] = self._load_module_from_fpath(fpath)\n\n    @classmethod\n    @lru_cache(maxsize=1)\n    def cached_default(cls) -> \"LazyModuleTreeMap\":\n        \"\"\"Creates a new LazyModuleTreeMap instance with the default root path\"\"\"\n        return cls(root_fpath())\n\n    @staticmethod\n    def _load_module_from_fpath(path: str) -> Optional[RedBaron]:\n        \"\"\"\n        Loads and returns an FST object for the given file path.\n\n        Args:\n            path (str): The file path of the Python source code.\n\n        Returns:\n            Module: RedBaron FST object.\n        \"\"\"\n        try:\n            module = RedBaron(open(path).read())\n            return module\n        except Exception as e:\n            logger.error(f\"Failed to load module '{path}' due to: {e}\")\n            return None\n", "document": "# LazyModuleTreeMap\n\n`LazyModuleTreeMap` is a class that provides a lazy dictionary between Python module dotpaths and their corresponding RedBaron FST objects. It loads and caches modules in memory as they are accessed, allowing for efficient lookups of code objects and their metadata. This class is used in conjunction with other classes such as `DotPathMap`, `PyCodeRetriever`, and `PyCodeWriter` to perform operations such as code retrieval and generation.\n\n## Overview\n\n`LazyModuleTreeMap` retains a dictionary of module dotpaths and their associated RedBaron FST objects. When a module is accessed, the class will fetch and cache the module in memory if not already loaded. The class includes methods to check if a module exists in the map, fetch a module by its dotpath, and add a module to the map. `LazyModuleTreeMap` also integrates with the `DotPathMap` class to enable interactions with module file paths and dotpaths.\n\n## Related Symbols\n\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata_docs.core.coding.py_coding.module_tree.DotPathMap`\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter`\n\n## Example\n\nHere's an example of how to use `LazyModuleTreeMap`:\n\n```python\nfrom automata_docs.core.coding.py_coding.module_tree import LazyModuleTreeMap\n\n# Create a LazyModuleTreeMap instance with a custom root path\npath = \"/path/to/modules\"\ntree_map = LazyModuleTreeMap(path)\n\n# Check if a module exists in the map\nmodule_dotpath = \"my_module.submodule\"\nexists = module_dotpath in tree_map\n\n# Fetch a module by its dotpath\nmodule = tree_map.fetch_module(module_dotpath)\n\n# Add a module to the map\nnew_module_dotpath = \"my_module.new_submodule\"\nnew_module = RedBaron(\"import foo\\n\")\ntree_map.put_module(new_module_dotpath, new_module)\n```\n\n## Limitations\n\n`LazyModuleTreeMap` assumes that the provided module dotpaths follow a specific dotpath format and comply with the directory structure. Additionally, it relies on the `DotPathMap` class for managing module file paths and dotpaths which, in turn, also assumes a specific directory structure for module files.\n\n## Follow-up Questions:\n\n- Is it possible to use `LazyModuleTreeMap` with a custom dotpath format and directory structure?\n- How can we extend the functionality to support other code object types, such as functions or classes?", "summary": "`LazyModuleTreeMap` is a class that creates a lazy dictionary for efficient lookup of Python module dotpaths and their corresponding RedBaron FST objects. It loads and caches modules in memory as they're accessed and works with other classes like `DotPathMap`, `PyCodeRetriever`, and `PyCodeWriter` for code retrieval and generation. Example usage includes creating a `LazyModuleTreeMap` instance with a custom root path, checking if a module exists, fetching a module by its dotpath, and adding a module to the map. However, the class assumes a specific dotpath format and directory structure, relying on the `DotPathMap` class for managing module file paths and dotpaths. Extending functionality to support other code object types and custom dotpath formats may require additional modifications.", "context": "\n    Generate the documentation for LazyModuleTreeMap using the context shown below -\nContext for -\nautomata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap -\n\n  Class Docstring:\n    A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n    Loads and caches modules in memory as they are accessed\n    \n  Variables:\n    self._dotpath_map=DotPathMap(path)\n    self._loaded_modules={}\n    self._loaded_modules[module_dotpath]=self._load_module_from_fpath(module_fpath)\n    self._loaded_modules[module_dotpath]=module\n    self._loaded_modules[module_dotpath]=self._load_module_from_fpath(fpath)\n    \n  Methods:\n    def __contains__(self, dotpath):\n            \"\"\"\n            Checks if the map contains a module with the given dotpath\n    \n            Args:\n                dotpath: The dotpath of the module\n            \"\"\"\n            return self._dotpath_map.contains_dotpath(dotpath)\n    \n        \n    def __init__(self, path: str):\n            \"\"\"\n            Args:\n                path: The absolute path to the root of the module tree\n            \"\"\"\n            self._dotpath_map = DotPathMap(path)\n            self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n    \n        \n    @classmethod\n        @lru_cache(maxsize=1)\n        def cached_default(cls) -> \"LazyModuleTreeMap\":\n            \"\"\"Creates a new LazyModuleTreeMap instance with the default root path\"\"\"\n            return cls(root_fpath())\n    \n        \n    def fetch_existing_module_dotpath(self, module_obj: RedBaron) -> Optional[str]:\n            \"\"\"\n            Gets the module dotpath for the specified module object.\n    \n            Args:\n                module_obj (Module): The module object.\n    \n            Returns:\n                str: The module dotpath for the specified module object.\n            \"\"\"\n            # there is no way a module that has a redbaron object is not loaded\n            for module_dotpath, module in self._loaded_modules.items():\n                if module == module_obj:\n                    return module_dotpath\n            return None\n    \n        \n    def fetch_existing_module_fpath_by_dotpath(self, module_dotpath: str) -> Optional[str]:\n            \"\"\"\n            Gets the module fpath for the specified module dotpath.\n    \n            Args:\n                module_dotpath (str): The module dotpath.\n    \n            Returns:\n                str: The module fpath for the specified module dotpath.\n            \"\"\"\n    \n            if module_dotpath in self._loaded_modules:\n                return self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n            return None\n    \n        \n    def fetch_module(self, module_dotpath: str) -> Optional[RedBaron]:\n            \"\"\"\n            Gets the module with the given dotpath\n    \n            Args:\n                module_dotpath: The dotpath of the module\n    \n            Returns:\n                Optional[RedBaron]: The module with the given dotpath if found, None otherwise\n            \"\"\"\n            if not self._dotpath_map.contains_dotpath(module_dotpath):\n                return None\n    \n            if module_dotpath not in self._loaded_modules:\n                module_fpath = self._dotpath_map.get_module_fpath_by_dotpath(module_dotpath)\n                self._loaded_modules[module_dotpath] = self._load_module_from_fpath(module_fpath)\n            return self._loaded_modules[module_dotpath]\n    \n        \n    def get_module_dotpath_by_fpath(self, module_fpath: str) -> str:\n            \"\"\"\n            Gets the module dotpath for the specified module fpath.\n    \n            Args:\n                module_fpath (str): The module fpath.\n            \"\"\"\n            return self._dotpath_map.get_module_dotpath_by_fpath(module_fpath)\n    \n        \n    def items(self) -> Iterable[Tuple[str, Optional[RedBaron]]]:\n            \"\"\"\n            Returns:\n                A dictionary containing the module dotpath to module RedBaron FST object mapping\n            \"\"\"\n            self._load_all_modules()\n            return self._loaded_modules.items()\n    \n        \n    def put_module(self, module_dotpath: str, module: RedBaron):\n            \"\"\"\n            Put a module with the given dotpath in the map\n    \n            Args:\n                module_dotpath: The dotpath of the module\n                module: The module to put in the map\n            \"\"\"\n            self._loaded_modules[module_dotpath] = module\n            self._dotpath_map.put_module(module_dotpath)\n    \n        \n  Closely Related Symbols:\n      automata_docs.tests.unit.test_py_code_retriever.module_map\n      \n        @pytest.fixture\n        def module_map():\n            # get latest path\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            # Set the root directory to the folder containing test modules\n            return LazyModuleTreeMap(sample_dir)\n        \n        \n        \n      automata_docs.tests.unit.test_py_code_retriever.getter\n      \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n    Context for -\n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Variables:\n        self.module_tree_map=module_tree_map\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.module_tree.DotPathMap -\n    \n      Class Docstring:\n        A map from module dotpaths to module filepaths\n        \n      Variables:\n        self._abs_path=path\n        self._module_dotpath_to_fpath_map=self._build_module_dotpath_to_fpath_map()\n        self._module_fpath_to_dotpath_map={\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        self._module_dotpath_to_fpath_map[module_dotpath]=file_path\n        self._module_fpath_to_dotpath_map[file_path]=module_dotpath\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                if not os.path.isabs(path):\n                    path = os.path.join(root_fpath(), path)\n                self._abs_path = path\n                self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n                self._module_fpath_to_dotpath_map = {\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        \n            \n      automata_docs.tests.unit.test_py_writer.python_writer\n      \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.py_coding.retriever`/PyCodeRetriever#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.retriever", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeRetriever", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PyCodeRetriever:\n    \"\"\"Code retriever for fetching python code\"\"\"\n\n    def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n        self.module_tree_map = module_tree_map\n\n    def get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str:\n        \"\"\"\n        Gets code for a specified module, class, or function/method\n\n        Args:\n            module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n            object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                (e.g. 'ClassName.method_name'). If None, the entire module code will be returned\n\n        Returns:\n            str: The code for the specified module, class, or function/method, or \"No Result Found.\"\n                if not found\n        \"\"\"\n\n        module = self.module_tree_map.fetch_module(module_dotpath)\n        if module:\n            result = find_syntax_tree_node(module, object_path)\n            if result:\n                return result.dumps()\n\n        return NO_RESULT_FOUND_STR\n\n    def get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str:\n        \"\"\"\n        Gets the docstring for a specified module, class, or function/method\n\n        Args:\n            module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n            object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                (e.g. 'ClassName.method_name'). If None, the module-level docstring will be returned\n\n        Returns:\n            str: The docstring for the specified module, class, or function/method, or \"No Result Found.\"\n                if not found\n        \"\"\"\n\n        module = self.module_tree_map.fetch_module(module_dotpath)\n        if module:\n            return PyCodeRetriever.get_docstring_from_node(\n                find_syntax_tree_node(module, object_path)\n            )\n        return NO_RESULT_FOUND_STR\n\n    def get_source_code_without_docstrings(\n        self, module_dotpath: str, object_path: Optional[str]\n    ) -> str:\n        \"\"\"\n        Gets code for a specified module, class, or function/method\n\n        Args:\n            module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n            object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                (e.g. 'ClassName.method_name'). If None, the entire module code will be returned\n\n        Returns:\n            str: The code for the specified module, class, or function/method, or \"No Result Found.\"\n                if not found\n        \"\"\"\n\n        def _remove_docstrings(node: FSTNode):\n            \"\"\"\n            Remove docstrings from the specified node, recursively\n\n            Args:\n                node: The FST node\n                    to remove docstrings from\n            \"\"\"\n\n            if isinstance(node, (DefNode, ClassNode, RedBaron)):\n                filtered_node = node.filtered()\n                if filtered_node and isinstance(filtered_node[0], StringNode):\n                    index = filtered_node[0].index_on_parent\n                    node.pop(index)\n                child_nodes = node.find_all(lambda identifier: identifier in (\"def\", \"class\"))\n                for child_node in child_nodes:\n                    if child_node is not node:\n                        _remove_docstrings(child_node)\n\n        module = self.module_tree_map.fetch_module(module_dotpath)\n\n        if module:\n            module_copy = RedBaron(module.dumps())\n            result = find_syntax_tree_node(module_copy, object_path)\n\n            if result:\n                _remove_docstrings(result)\n                return result.dumps()\n        return NO_RESULT_FOUND_STR\n\n    @staticmethod\n    def get_docstring_from_node(node: Optional[FSTNode]) -> str:\n        \"\"\"\n        Gets the docstring from the specified node\n\n        Args:\n            node: The FST node to get the docstring from\n        \"\"\"\n        if not node:\n            return NO_RESULT_FOUND_STR\n\n        if isinstance(node, (ClassNode, DefNode, RedBaron)):\n            filtered_nodes = node.filtered()  # get rid of extra whitespace\n            if isinstance(filtered_nodes[0], StringNode):\n                return filtered_nodes[0].value.replace('\"\"\"', \"\").replace(\"'''\", \"\")\n        return \"\"\n\n    @staticmethod\n    def _create_line_number_tuples(node: FSTNode, start_line: int, start_col: int):\n        \"\"\"\n        Creates a list of tuples of line numbers and lines from the specified node\n\n        Args:\n            node: The FST node to create the line number tuples from\n            start_line: The starting line number\n            start_col: The starting column number\n        \"\"\"\n        result = []\n        for i, line in enumerate(node.dumps().strip().splitlines()):\n            if i == 0 and not line.startswith(\" \" * (start_col - 1)):\n                line = \" \" * (start_col - 1) + line\n            result.append((start_line + i, line))\n        return result\n", "document": "# PyCodeRetriever\n\n`PyCodeRetriever` is a code retriever class used for fetching Python code. It provides various methods to extract the source code, docstrings, and source code without docstrings, for specified modules, classes, functions, or methods.\n\n## Overview\n\n`PyCodeRetriever` provides a straightforward way to access the source code, docstrings, and source code without docstrings from a module, class, function, or method specified in the dot-separated format (e.g. 'package.module'). It uses a `LazyModuleTreeMap` to store and manage access to the module tree map.\n\n## Related Symbols\n\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter`\n- `automata_docs.tests.unit.test_py_code_retriever.getter`\n\n## Example\n\nThe following example demonstrates the basic usage of `PyCodeRetriever` to fetch a method's source code and docstring.\n\n```python\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever, LazyModuleTreeMap\n\nmodule_tree_map = LazyModuleTreeMap()\nretriever = PyCodeRetriever(module_tree_map)\n\nmodule_dotpath = 'package.module'\nobject_path = 'ClassName.method_name'\n\ndocstring = retriever.get_docstring(module_dotpath, object_path)\nsource_code = retriever.get_source_code(module_dotpath, object_path)\nsource_without_docstring = retriever.get_source_code_without_docstrings(module_dotpath, object_path)\n```\n\n## Limitations\n\n`PyCodeRetriever` assumes that the provided module tree map (using the default `LazyModuleTreeMap`) has a correct and up-to-date representation of the module and its contents. Any changes or discrepancies in the module tree map may lead to incorrect or incomplete results when fetching the source code or docstrings.\n\n## Follow-up Questions:\n\n- How does the `PyCodeRetriever` handle dynamic code generation and execution?\n- Are there any performance optimizations for loading large modules or codebases?", "summary": "`PyCodeRetriever` is a code retriever class in Python that fetches source code, docstrings, and source code without docstrings for specified modules, classes, functions, or methods. It uses a `LazyModuleTreeMap` to store and manage access to the module tree map. The following example demonstrates its basic usage:\n\n```python\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever, LazyModuleTreeMap\n\nmodule_tree_map = LazyModuleTreeMap()\nretriever = PyCodeRetriever(module_tree_map)\n\nmodule_dotpath = 'package.module'\nobject_path = 'ClassName.method_name'\n\ndocstring = retriever.get_docstring(module_dotpath, object_path)\nsource_code = retriever.get_source_code(module_dotpath, object_path)\nsource_without_docstring = retriever.get_source_code_without_docstrings(module_dotpath, object_path)\n```\n\nIt is important to note that `PyCodeRetriever` assumes the provided module tree map has a correct and up-to-date representation of the module and its contents. Changes or discrepancies in the module tree map may lead to incorrect or incomplete results when fetching the source code or docstrings.", "context": "\n    Generate the documentation for PyCodeRetriever using the context shown below -\nContext for -\nautomata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n\n  Class Docstring:\n    Code retriever for fetching python code\n    \n  Variables:\n    self.module_tree_map=module_tree_map\n    \n  Methods:\n    def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n            self.module_tree_map = module_tree_map\n    \n        \n    def get_docstring(self, module_dotpath: str, object_path: Optional[str]) -> str:\n            \"\"\"\n            Gets the docstring for a specified module, class, or function/method\n    \n            Args:\n                module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n                object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                    (e.g. 'ClassName.method_name'). If None, the module-level docstring will be returned\n    \n            Returns:\n                str: The docstring for the specified module, class, or function/method, or \"No Result Found.\"\n                    if not found\n            \"\"\"\n    \n            module = self.module_tree_map.fetch_module(module_dotpath)\n            if module:\n                return PyCodeRetriever.get_docstring_from_node(\n                    find_syntax_tree_node(module, object_path)\n                )\n            return NO_RESULT_FOUND_STR\n    \n        \n    @staticmethod\n        def get_docstring_from_node(node: Optional[FSTNode]) -> str:\n            \"\"\"\n            Gets the docstring from the specified node\n    \n            Args:\n                node: The FST node to get the docstring from\n            \"\"\"\n            if not node:\n                return NO_RESULT_FOUND_STR\n    \n            if isinstance(node, (ClassNode, DefNode, RedBaron)):\n                filtered_nodes = node.filtered()  # get rid of extra whitespace\n                if isinstance(filtered_nodes[0], StringNode):\n                    return filtered_nodes[0].value.replace('\"\"\"', \"\").replace(\"'''\", \"\")\n            return \"\"\n    \n        \n    def get_source_code(self, module_dotpath: str, object_path: Optional[str] = None) -> str:\n            \"\"\"\n            Gets code for a specified module, class, or function/method\n    \n            Args:\n                module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n                object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                    (e.g. 'ClassName.method_name'). If None, the entire module code will be returned\n    \n            Returns:\n                str: The code for the specified module, class, or function/method, or \"No Result Found.\"\n                    if not found\n            \"\"\"\n    \n            module = self.module_tree_map.fetch_module(module_dotpath)\n            if module:\n                result = find_syntax_tree_node(module, object_path)\n                if result:\n                    return result.dumps()\n    \n            return NO_RESULT_FOUND_STR\n    \n        \n    def get_source_code_without_docstrings(\n            self, module_dotpath: str, object_path: Optional[str]\n        ) -> str:\n            \"\"\"\n            Gets code for a specified module, class, or function/method\n    \n            Args:\n                module_dotpath (str): The path of the module in dot-separated format (e.g. 'package.module')\n                object_path (Optional[str]): The path of the class, function, or method in dot-separated format\n                    (e.g. 'ClassName.method_name'). If None, the entire module code will be returned\n    \n            Returns:\n                str: The code for the specified module, class, or function/method, or \"No Result Found.\"\n                    if not found\n            \"\"\"\n    \n            def _remove_docstrings(node: FSTNode):\n                \"\"\"\n                Remove docstrings from the specified node, recursively\n    \n                Args:\n                    node: The FST node\n                        to remove docstrings from\n                \"\"\"\n    \n                if isinstance(node, (DefNode, ClassNode, RedBaron)):\n                    filtered_node = node.filtered()\n                    if filtered_node and isinstance(filtered_node[0], StringNode):\n                        index = filtered_node[0].index_on_parent\n                        node.pop(index)\n                    child_nodes = node.find_all(lambda identifier: identifier in (\"def\", \"class\"))\n                    for child_node in child_nodes:\n                        if child_node is not node:\n                            _remove_docstrings(child_node)\n    \n            module = self.module_tree_map.fetch_module(module_dotpath)\n    \n            if module:\n                module_copy = RedBaron(module.dumps())\n                result = find_syntax_tree_node(module_copy, object_path)\n    \n                if result:\n                    _remove_docstrings(result)\n                    return result.dumps()\n            return NO_RESULT_FOUND_STR\n    \n        \n  Closely Related Symbols:\n      automata_docs.tests.unit.test_py_code_retriever.getter\n      \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.python_writer\n      \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n      \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n      automata_docs.tests.unit.test_py_code_retriever.test_get_code_no_docstring_no_code\n      \n        def test_get_code_no_docstring_no_code(getter):\n            module_name = \"sample\"\n            object_path = \"EmptyClass\"\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = \"class EmptyClass:\\n    pass\\n\\n\\n\"\n            assert result == expected_match\n        \n        \n        \n      automata_docs.tests.unit.test_py_code_retriever.test_get_code_module\n      \n        def test_get_code_module(getter):\n            module_name = \"sample\"\n            object_path = None\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = 'import math\\n\\n\\ndef sample_function(name):\\n    return f\"Hello, {name}! Sqrt(2) = \" + str(math.sqrt(2))\\n\\n\\nclass Person:\\n\\n    def __init__(self, name):\\n        self.name = name\\n\\n    def say_hello(self):\\n        return f\"Hello, I am {self.name}.\"\\n\\n    def run(self) -> str:\\n        ...\\n\\n\\ndef f(x) -> int:\\n    return x + 1\\n\\n\\nclass EmptyClass:\\n    pass\\n\\n\\nclass OuterClass:\\n    class InnerClass:\\n\\n        def inner_method(self):\\n'\n        \n            assert result == expected_match\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.py_coding.writer`/PyCodeWriter#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PyCodeWriter:\n    \"\"\"A utility class for writing Python code along AST nodes\"\"\"\n\n    class ModuleNotFound(Exception):\n        \"\"\"Raised when a module is not found in the module dictionary\"\"\"\n\n        pass\n\n    class ClassOrFunctionNotFound(Exception):\n        \"\"\"Raised when a class or function is not found in the module\"\"\"\n\n        pass\n\n    class InvalidArguments(Exception):\n        \"\"\"Raised when invalid arguments are passed to a method\"\"\"\n\n        pass\n\n    def __init__(self, python_retriever: PyCodeRetriever):\n        \"\"\"\n        Initialize the PyCodeWriter with a PyCodeRetriever instance\n\n        Args:\n            python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n        \"\"\"\n        self.code_retriever = python_retriever\n\n    def create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False):\n        \"\"\"\n        Create a new module object from source code\n\n        Args:\n            source_code (str): The source code of the module\n            module_dotpath (str): The path of the module\n\n        Returns:\n            RedBaron: The created module object\n        \"\"\"\n        self._create_module_from_source_code(module_dotpath, source_code)\n        if do_write:\n            self._write_module_to_disk(module_dotpath)\n\n    def update_existing_module(\n        self,\n        module_dotpath: str,\n        source_code: str,\n        disambiguator: Optional[str] = \"\",\n        do_write: bool = False,\n    ):\n        \"\"\"\n        Update code or insert new code into an existing module\n\n        Args:\n            source_code (str): The source code of the part of the module that needs to be\n            updated or insert module_dotpath (str): The path of the module\n            disambiguator (Optional[str]): The name of the class or function scope where\n                the update should be applied, will default to module\n            do_write (bool): Write the module to disk after updating\n\n        Returns:\n            RedBaron: The updated module object\n\n        Raises:\n            ModuleNotFound: If the module is not found in the module dictionary\n        \"\"\"\n        module_obj = self.code_retriever.module_tree_map.fetch_module(module_dotpath)\n        if not module_obj:\n            raise PyCodeWriter.ModuleNotFound(\n                f\"Module not found in module dictionary: {module_dotpath}\"\n            )\n        PyCodeWriter._update_existing_module(\n            source_code,\n            module_dotpath,\n            module_obj,\n            disambiguator=disambiguator,\n        )\n        if do_write:\n            self._write_module_to_disk(module_dotpath)\n\n    def delete_from_existing__module(\n        self, module_dotpath: str, object_dotpath: str, do_write: bool = False\n    ):\n        \"\"\"\n        Reduce an existing module by removing a class or function\n\n        Args:\n            module_dotpath (str): The path of the module\n            object_dotpath (str): The name of the class or function to remove, including\n                the name of the scope it is in, like ClassName.function_name\n            do_write (bool): Write the module to disk after updating\n\n        Returns:\n            RedBaron: The module object\n\n        Raises:\n            ModuleNotFound: If the module is not found in the module dictionary\n        \"\"\"\n        module_obj = self.code_retriever.module_tree_map.fetch_module(module_dotpath)\n        if not module_obj:\n            raise PyCodeWriter.ModuleNotFound(\n                f\"Module not found in module dictionary: {module_dotpath}\"\n            )\n        node = find_syntax_tree_node(module_obj, object_dotpath)\n        if node:\n            PyCodeWriter._delete_node(node)\n            if do_write:\n                self._write_module_to_disk(module_dotpath)\n\n    def _write_module_to_disk(self, module_dotpath: str):\n        \"\"\"\n        Write the modified module to a file at the specified output path\n\n        Args:\n            module_dotpath (str)\n\n        Raises:\n            ModuleNotFound: If the module is not found in the module dictionary\n        \"\"\"\n        if module_dotpath not in self.code_retriever.module_tree_map:\n            raise PyCodeWriter.ModuleNotFound(\n                f\"Module not found in module dictionary: {module_dotpath}\"\n            )\n        source_code = self.code_retriever.get_source_code(module_dotpath)\n        module_fpath = self.code_retriever.module_tree_map.fetch_existing_module_fpath_by_dotpath(\n            module_dotpath\n        )\n\n        if not module_fpath:\n            raise PyCodeWriter.ModuleNotFound(\n                f\"Module fpath found in module map for dotpath: {module_dotpath}\"\n            )\n        module_fpath = cast(str, module_fpath)\n        with open(module_fpath, \"w\") as output_file:\n            output_file.write(source_code)\n        subprocess.run([\"black\", module_fpath])\n        subprocess.run([\"isort\", module_fpath])\n\n    def _create_module_from_source_code(self, module_dotpath: str, source_code: str) -> RedBaron:\n        \"\"\"\n        Create a Python module from the given source code string\n\n        Args:\n            module_dotpath (str): The path where the new module will be created\n\n        Returns:\n            RedBaron: The created module object\n        \"\"\"\n        parsed = RedBaron(source_code)\n        self.code_retriever.module_tree_map.put_module(module_dotpath, parsed)\n        return parsed\n\n    @staticmethod\n    def _update_existing_module(\n        source_code: str,\n        module_dotpath: str,\n        existing_module_obj: RedBaron,\n        disambiguator: Optional[str],\n    ):\n        \"\"\"\n        Update a module object according to the received code\n\n        Args:\n            source_code (str): The code containing the updates\n            module_dotpath (str): The relative path to the module\n            existing_module_obj Module: The module object to be updated\n            disambiguator (str): The name of the class or function scope to\n                be updated, useful for nested definitions\n\n        Raises:\n            ClassOrFunctionNotFound: If the disambiguator is not found\n        \"\"\"\n\n        new_fst = RedBaron(source_code)\n        new_import_nodes = find_import_syntax_tree_nodes(new_fst)\n        PyCodeWriter._update_imports(existing_module_obj, new_import_nodes)\n\n        new_class_or_function_nodes = find_all_function_and_class_syntax_tree_nodes(new_fst)\n        if disambiguator:  # splice the class\n            disambiguator_node = find_syntax_tree_node(existing_module_obj, disambiguator)\n            if isinstance(disambiguator_node, (ClassNode, DefNode)):\n                PyCodeWriter._update_node_with_children(\n                    new_class_or_function_nodes,\n                    disambiguator_node,\n                )\n            else:\n                raise PyCodeWriter.ClassOrFunctionNotFound(\n                    f\"Node {disambiguator} not found in module {module_dotpath}\"\n                )\n        PyCodeWriter._update_node_with_children(new_class_or_function_nodes, existing_module_obj)\n\n    @staticmethod\n    def _update_node_with_children(\n        class_or_function_nodes: NodeList,\n        node_to_update: Union[ClassNode, RedBaron],\n    ):\n        \"\"\"Update a class object according to the received code\"\"\"\n        for new_node in class_or_function_nodes:\n            child_node_name = new_node.name\n            existing_node = find_syntax_tree_node(node_to_update, child_node_name)\n            if existing_node:\n                existing_node.replace(new_node)\n            else:\n                node_to_update.append(new_node)\n\n    @staticmethod\n    def _delete_node(node: Node):\n        \"\"\"\n        Delete a node from the FST\n\n        Args:\n            node (Node): The node to delete\n        \"\"\"\n        parent = node.parent\n        parent_index = node.index_on_parent\n        parent.pop(parent_index)\n\n    @staticmethod\n    def _clean_input_code(source_code: str) -> str:\n        \"\"\"\n        Take the input source code and remove formatting issues that will cause the FST to fail.\n\n        Args:\n            source_code (str): The source code to clean.\n\n        Returns:\n            str: The cleaned source code.\n        \"\"\"\n\n        def replace_newline_chars(input_str: str) -> str:\n            dummy_replacement_a = \"ZZ_^^_ZZ\"\n            dummy_replacement_b = \"QQ_^^_QQ\"\n\n            def replace(match):\n                text = match.group(0)\n                if text[0] == '\"' and text[-1] == '\"':\n                    return text\n                return text.replace(\"\\\\n\", \"\\n\")\n\n            pattern = \"(?x)\\n                '.*?'\\n                |\\n                \\\".*?\\\"\\n                |\\n                [^'\\\"]+\\n            \"\n            output_str = (\n                \"\".join(\n                    (\n                        replace(match)\n                        for match in re.finditer(\n                            pattern,\n                            input_str.replace('\"\"\"', dummy_replacement_a).replace(\n                                \"'''\", dummy_replacement_b\n                            ),\n                        )\n                    )\n                )\n                .replace(dummy_replacement_a, '\"\"\"')\n                .replace(dummy_replacement_b, \"'''\")\n            )\n            return output_str\n\n        source_code = replace_newline_chars(source_code)\n        source_code = re.sub('\\\\\\\\\\\\\"', '\"', source_code)\n        source_code = source_code.strip()\n        return source_code\n\n    @staticmethod\n    def _update_imports(module_obj: RedBaron, new_import_statements: NodeList):\n        \"\"\"\n        Manage the imports in the module\n\n        Args:\n            module_obj (RedBaron): The module object\n            new_import_statements (NodeList): The new import statements\n\n        \"\"\"\n        first_import = module_obj.find(lambda identifier: identifier in (\"import\", \"from_import\"))\n\n        for new_import_statement in new_import_statements:\n            existing_import_statement = find_import_syntax_tree_node_by_name(\n                module_obj, new_import_statement.name\n            )\n            if not existing_import_statement:\n                if first_import:\n                    first_import.insert_before(new_import_statement)  # we will run isort later\n                else:\n                    module_obj.insert(0, new_import_statement)\n", "document": "# PyCodeWriter\n\nPyCodeWriter is a utility class that helps manage the creation, modification, and deletion of Python code files using Abstract Syntax Tree (AST) nodes. PyCodeWriter interacts with PyCodeRetriever, providing a simplified interface for working with the Python code.\n\n## Overview\n\nThe PyCodeWriter class can create a new module object from source code, update existing module objects with new or modified source code, and delete objects in existing modules. The class is initialized with a PyCodeRetriever instance which manages the underlying storage and retrieval of Python modules.\n\n## Related Symbols\n\n* `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n* `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n* `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n\n## Example\n\nThe following example demonstrates how to use the PyCodeWriter class for creating and updating modules:\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n\nretriever = PyCodeRetriever()\nwriter = PyCodeWriter(retriever)\n\n# Create a new module object from source code.\nmodule_dotpath = \"new_module\"\nsource_code = \"\"\"def example_function():\n    pass\n\"\"\"\n\nwriter.create_new_module(module_dotpath, source_code)\n\n# Update an existing module with new source code.\nmodule_dotpath = \"existing_module\"\nsource_code = \"\"\"def another_example_function():\n    return \"Hello, world!\"\n\"\"\"\n\nwriter.update_existing_module(module_dotpath, source_code)\n```\n\n## Limitations\n`PyCodeWriter` assumes the code modules are on disk, and it reads and writes files directly. It might not work with code stored in non-traditional mediums like databases or cloud storage. It is also tied to the RedBaron Package, which may limit its compatibility with other libraries or future Python code syntax.\n\n## Follow-up Questions\n* Can alternative storage mediums be supported (e.g., cloud storage, databases)?\n* Can we support other code parsing libraries apart from RedBaron?\n* Can the PyCodeWriter be made more efficient by caching and batching file writes?", "summary": "PyCodeWriter is a utility class that assists in managing Python code files by creating, modifying, and deleting them using Abstract Syntax Tree (AST) nodes. It works in conjunction with PyCodeRetriever to offer a simplified interface for handling Python code. With PyCodeWriter, users can create new module objects from source code, update existing modules with new or modified code, and delete objects in existing modules. However, it has certain limitations, such as assuming code modules are on disk and reliance on the RedBaron Package, which may affect compatibility with other libraries or future Python code syntax.\n\nHere's an example of how to use the PyCodeWriter class for creating and updating modules:\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n\nretriever = PyCodeRetriever()\nwriter = PyCodeWriter(retriever)\n\n# Create a new module object from source code.\nmodule_dotpath = \"new_module\"\nsource_code = \"\"\"def example_function():\n    pass\n\"\"\"\n\nwriter.create_new_module(module_dotpath, source_code)\n\n# Update an existing module with new source code.\nmodule_dotpath = \"existing_module\"\nsource_code = \"\"\"def another_example_function():\n    return \"Hello, world!\"\n\"\"\"\n\nwriter.update_existing_module(module_dotpath, source_code)\n```\nThis leaves room for improvements, such as supporting alternative storage mediums and code parsing libraries or enhancing efficiency through caching and batching file writes.", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\nContext for -\nautomata_docs.core.coding.py_coding.writer.PyCodeWriter -\n\n  Class Docstring:\n    A utility class for writing Python code along AST nodes\n    \n  Variables:\n    self.code_retriever=python_retriever\n    \n  Methods:\n    def __init__(self, python_retriever: PyCodeRetriever):\n            \"\"\"\n            Initialize the PyCodeWriter with a PyCodeRetriever instance\n    \n            Args:\n                python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n            \"\"\"\n            self.code_retriever = python_retriever\n    \n        \n    def create_new_module(self, module_dotpath: str, source_code: str, do_write: bool = False):\n            \"\"\"\n            Create a new module object from source code\n    \n            Args:\n                source_code (str): The source code of the module\n                module_dotpath (str): The path of the module\n    \n            Returns:\n                RedBaron: The created module object\n            \"\"\"\n            self._create_module_from_source_code(module_dotpath, source_code)\n            if do_write:\n                self._write_module_to_disk(module_dotpath)\n    \n        \n    def delete_from_existing__module(\n            self, module_dotpath: str, object_dotpath: str, do_write: bool = False\n        ):\n            \"\"\"\n            Reduce an existing module by removing a class or function\n    \n            Args:\n                module_dotpath (str): The path of the module\n                object_dotpath (str): The name of the class or function to remove, including\n                    the name of the scope it is in, like ClassName.function_name\n                do_write (bool): Write the module to disk after updating\n    \n            Returns:\n                RedBaron: The module object\n    \n            Raises:\n                ModuleNotFound: If the module is not found in the module dictionary\n            \"\"\"\n            module_obj = self.code_retriever.module_tree_map.fetch_module(module_dotpath)\n            if not module_obj:\n                raise PyCodeWriter.ModuleNotFound(\n                    f\"Module not found in module dictionary: {module_dotpath}\"\n                )\n            node = find_syntax_tree_node(module_obj, object_dotpath)\n            if node:\n                PyCodeWriter._delete_node(node)\n                if do_write:\n                    self._write_module_to_disk(module_dotpath)\n    \n        \n    def replace(match):\n                    text = match.group(0)\n                    if text[0] == '\"' and text[-1] == '\"':\n                        return text\n                    return text.replace(\"\\\\n\", \"\\n\")\n    \n                \n    def replace_newline_chars(input_str: str) -> str:\n                dummy_replacement_a = \"ZZ_^^_ZZ\"\n                dummy_replacement_b = \"QQ_^^_QQ\"\n    \n                def replace(match):\n                    text = match.group(0)\n                    if text[0] == '\"' and text[-1] == '\"':\n                        return text\n                    return text.replace(\"\\\\n\", \"\\n\")\n    \n                pattern = \"(?x)\\n                '.*?'\\n                |\\n                \\\".*?\\\"\\n                |\\n                [^'\\\"]+\\n            \"\n                output_str = (\n                    \"\".join(\n                        (\n                            replace(match)\n                            for match in re.finditer(\n                                pattern,\n                                input_str.replace('\"\"\"', dummy_replacement_a).replace(\n                                    \"'''\", dummy_replacement_b\n                                ),\n                            )\n                        )\n                    )\n                    .replace(dummy_replacement_a, '\"\"\"')\n                    .replace(dummy_replacement_b, \"'''\")\n                )\n                return output_str\n    \n            \n    def update_existing_module(\n            self,\n            module_dotpath: str,\n            source_code: str,\n            disambiguator: Optional[str] = \"\",\n            do_write: bool = False,\n        ):\n            \"\"\"\n            Update code or insert new code into an existing module\n    \n            Args:\n                source_code (str): The source code of the part of the module that needs to be\n                updated or insert module_dotpath (str): The path of the module\n                disambiguator (Optional[str]): The name of the class or function scope where\n                    the update should be applied, will default to module\n                do_write (bool): Write the module to disk after updating\n    \n            Returns:\n                RedBaron: The updated module object\n    \n            Raises:\n                ModuleNotFound: If the module is not found in the module dictionary\n            \"\"\"\n            module_obj = self.code_retriever.module_tree_map.fetch_module(module_dotpath)\n            if not module_obj:\n                raise PyCodeWriter.ModuleNotFound(\n                    f\"Module not found in module dictionary: {module_dotpath}\"\n                )\n            PyCodeWriter._update_existing_module(\n                source_code,\n                module_dotpath,\n                module_obj,\n                disambiguator=disambiguator,\n            )\n            if do_write:\n                self._write_module_to_disk(module_dotpath)\n    \n        \n  Closely Related Symbols:\n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n      \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Variables:\n        self.module_tree_map=module_tree_map\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n      automata_docs.tests.unit.test_py_writer.python_writer\n      \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n      \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n      \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n      automata_docs.tests.unit.test_py_code_retriever.getter\n      \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.py_coding.writer`/PyCodeWriter#ClassOrFunctionNotFound#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "ClassOrFunctionNotFound", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class ClassOrFunctionNotFound(Exception):\n        \"\"\"Raised when a class or function is not found in the module\"\"\"\n\n        pass\n\n    ", "document": "# PyCodeWriter.ClassOrFunctionNotFound\n\n`PyCodeWriter.ClassOrFunctionNotFound` is an exception that is raised when a class or function is not found in the module. This exception is primarily used in the `PyCodeWriter` class.\n\n## Overview\n\nThe `PyCodeWriter.ClassOrFunctionNotFound` exception is used within the `PyCodeWriter` class to indicate that a requested class or function could not be located in the module. This might happen, for instance, when you try to update or retrieve the code or docstring of a non-existent class or function in the module.\n\n## Related Symbols\n\n- `PyCodeWriter`\n- `PyCodeRetriever`\n- `MockCodeGenerator`\n- `PyContextRetriever`\n- `Symbol`\n\n## Example\n\nThe following is an example demonstrating how the `PyCodeWriter.ClassOrFunctionNotFound` exception might be raised.\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n\n# Create PyCodeWriter instance with a PyCodeRetriever\nretriever = PyCodeRetriever()\nwriter = PyCodeWriter(python_retriever=retriever)\n\n# Assume \"sample_module\" has only one class: \"SampleClass\"\ntry:\n    writer.update_class(\"sample_module\", \"NonExistentClass\", \"def new_method(self): pass\")\nexcept PyCodeWriter.ClassOrFunctionNotFound as e:\n    print(f\"Exception: {e}\")\n```\n\nThis code snippet demonstrates how the `PyCodeWriter.ClassOrFunctionNotFound` exception is raised when trying to update a class that does not exist in the module.\n\n## Limitations\n\nThe `PyCodeWriter.ClassOrFunctionNotFound` exception is specific to the `PyCodeWriter` class and its use-cases, and it cannot be utilized for other code retrieving or writing scenarios. It depends on the implementation and handling of the `PyCodeWriter` and other related symbols.\n\n## Follow-up Questions:\n\n- Are there other scenarios where this exception might be raised, outside the scope of the `PyCodeWriter` class?", "summary": "The `PyCodeWriter.ClassOrFunctionNotFound` exception is raised when a requested class or function cannot be found in the module, primarily used within the `PyCodeWriter` class. This exception may occur when attempting to update or retrieve the code or docstring of a non-existent class or function. For example, the following code snippet demonstrates how the exception is raised when trying to update a non-existent class in the \"sample_module\":\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\n\n# Create PyCodeWriter instance with a PyCodeRetriever\nretriever = PyCodeRetriever()\nwriter = PyCodeWriter(python_retriever=retriever)\n\n# Assume \"sample_module\" has only one class: \"SampleClass\"\ntry:\n    writer.update_class(\"sample_module\", \"NonExistentClass\", \"def new_method(self): pass\")\nexcept PyCodeWriter.ClassOrFunctionNotFound as e:\n    print(f\"Exception: {e}\")\n```\n\nThis exception is specific to the `PyCodeWriter` class and its use cases, and cannot be used for other code retrieval or writing scenarios. It depends on the implementation and handling of the `PyCodeWriter` and related symbols, such as `PyCodeRetriever`, `MockCodeGenerator`, `PyContextRetriever`, and `Symbol`.", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\nContext for -\nautomata_docs.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound -\n\n  Class Docstring:\n    Raised when a class or function is not found in the module\n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n      \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Variables:\n        self.module_tree_map=module_tree_map\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n      automata_docs.tests.unit.test_py_writer.python_writer\n      \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n      \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n      \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.py_coding.writer`/PyCodeWriter#InvalidArguments#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "InvalidArguments", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class InvalidArguments(Exception):\n        \"\"\"Raised when invalid arguments are passed to a method\"\"\"\n\n        pass\n\n    ", "document": "# PyCodeWriter\n\n`PyCodeWriter` is a utility class for writing Python code along with AST nodes. It helps you to manipulate the source code by adding, removing, or modifying certain parts of the code. It provides useful functions to manage the file system, like creating a new module, updating the existing module, and writing the module to disk. This class is especially helpful when working with code generation or refactoring.\n\n## Overview\n\nThe `PyCodeWriter` class can be initialized with a `PyCodeRetriever` instance, which helps manage the code retrieval process for Python projects. Through a series of methods, users will be able to perform operations like creating a new module, update an existing module, and write the module to disk.\n\n## InvalidArguments exception\n\nThe `InvalidArguments` class represents an exception raised when invalid arguments are passed to a method.\n\n## Related Symbols\n\n- `automata_docs.core.coding.py_coding.retriever.PyCodeRetriever`\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following example demonstrates how to create a `PyCodeWriter` instance using a `PyCodeRetriever` instance.\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata_docs.core.context.lazy_module_tree_map import LazyModuleTreeMap\n\nsample_dir = \"path/to/sample/directory\"\nmodule_map = LazyModuleTreeMap(sample_dir)\nretriever = PyCodeRetriever(module_map)\n\npython_writer = PyCodeWriter(retriever)\n```\n\n## Limitations\n\nThe primary limitations of `PyCodeWriter` are that it assumes a specific directory structure for the modules being manipulated and the code targeting may not cover all edge cases. Additionally, it is primarily designed for managing source code, and may not be suitable for working with large-scale projects or non-Python languages.\n\n## Follow-up Questions:\n\n- How can `PyCodeWriter` be extended to support additional language constructs or edge cases?\n- Are there any performance limitations when working with large-scale projects?\n", "summary": "`PyCodeWriter` is a utility class for writing and manipulating Python code and AST nodes, useful for tasks like code generation or refactoring. It facilitates operations such as creating, updating, and writing modules to disk. To use `PyCodeWriter`, initialize it with a `PyCodeRetriever` instance for managing code retrieval in Python projects. However, it has some limitations as it assumes a specific directory structure, may not cover all edge cases, and is primarily designed for managing source code in Python.\n\nExample:\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata_docs.core.context.lazy_module_tree_map import LazyModuleTreeMap\n\nsample_dir = \"path/to/sample/directory\"\nmodule_map = LazyModuleTreeMap(sample_dir)\nretriever = PyCodeRetriever(module_map)\n\npython_writer = PyCodeWriter(retriever)\n```", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\nContext for -\nautomata_docs.core.coding.py_coding.writer.PyCodeWriter.InvalidArguments -\n\n  Class Docstring:\n    Raised when invalid arguments are passed to a method\n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n      \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Variables:\n        self.module_tree_map=module_tree_map\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n      automata_docs.tests.unit.test_py_writer.python_writer\n      \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n      \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n      \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.coding.py_coding.writer`/PyCodeWriter#ModuleNotFound#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.coding.py_coding.writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyCodeWriter", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "ModuleNotFound", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class ModuleNotFound(Exception):\n        \"\"\"Raised when a module is not found in the module dictionary\"\"\"\n\n        pass\n\n    ", "document": "# PyCodeWriter.ModuleNotFound\n\n`PyCodeWriter.ModuleNotFound` is a custom exception class that is raised when a requested module is not found in the module dictionary within the `PyCodeWriter` context. This can be useful in catching cases where a module is requested but does not exist, causing the \\`PyCodeWriter\\` to raise this exception.\n\n## Related Symbols\n\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter`\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n\n## Example\n\nTo illustrate the usage of this exception, consider the following example where a non-existent module is requested:\n\n```python\nfrom automata_docs.core.coding.py_coding.writer import PyCodeWriter\nfrom automata_docs.core.coding.py_coding.retriever import PyCodeRetriever\nfrom automata_docs.utils.map.lazy_module_tree_map import LazyModuleTreeMap\n\ntry:\n    module_map = LazyModuleTreeMap(\"path/to/modules\")\n    retriever = PyCodeRetriever(module_map)\n    writer = PyCodeWriter(retriever)\n    \n    writer.get_module_dotpath(\"non_existent_module\")\nexcept PyCodeWriter.ModuleNotFound as ex:\n    print(f\"Module not found: {ex}\")\n```\n\nIn this example, the `PyCodeWriter` attempts to retrieve the dotpath of a non-existent module. As a result, it will raise a `PyCodeWriter.ModuleNotFound` exception, which can be caught and handled.\n\n## Limitations\n\nThis exception is specific to the `PyCodeWriter` class, and may not be applicable for other classes or scenarios. It serves as a simple way to raise an exception when a module is not found within the context of the `PyCodeWriter`. Alternatively, Python's default `ModuleNotFoundError` could also be used in this case.\n\n## Follow-up Questions:\n\n- Are there any scenarios that might cause this exception to be raised inappropriately or fail to raise when it should?\n- Would it make more sense to use Python's default `ModuleNotFoundError` in this case or continue to use the custom exception class?", "summary": "`PyCodeWriter.ModuleNotFound` is a custom exception class specific to the `PyCodeWriter` context, raised when a requested module is not found in the module dictionary. It helps catch cases where a non-existent module is requested, thus preventing potential errors. In an example usage, when `PyCodeWriter` tries to retrieve the dotpath of a non-existent module, it raises the `PyCodeWriter.ModuleNotFound` exception which can be caught and handled. However, this exception may not be applicable for other classes or scenarios, and Python's default `ModuleNotFoundError` could be an alternative option.", "context": "\n    Generate the documentation for PyCodeWriter using the context shown below -\nContext for -\nautomata_docs.core.coding.py_coding.writer.PyCodeWriter.ModuleNotFound -\n\n  Class Docstring:\n    Raised when a module is not found in the module dictionary\n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n      \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Variables:\n        self.module_tree_map=module_tree_map\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n      automata_docs.tests.unit.test_py_writer.python_writer\n      \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n      \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n      \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.context.py_context.retriever`/PyContextRetrieverConfig#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.context.py_context.retriever", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyContextRetrieverConfig", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PyContextRetrieverConfig:\n    \"\"\"The configuration for the PyContextRetriever\"\"\"\n\n    def __init__(\n        self,\n        spacer: str = \"  \",\n        max_dependency_print_depth: int = 2,\n        max_recursion_depth: int = 1,\n        nearest_symbols_count: int = 10,\n        print_imports=False,\n        process_directory_structure=False,\n        process_docstrings=True,\n        process_variables=True,\n        process_methods=True,\n        process_methods_constructor=True,\n        process_methods_summary=False,\n        process_nearest_symbols=True,\n        process_dependencies=False,\n        process_references=False,\n        process_callers=False,\n    ):\n        \"\"\"\n        Args:\n            spacer (str): The string to use for indentation\n            max_dependency_print_depth (int): The maximum depth to print dependencies\n            max_recursion_depth (int): The maximum depth to recurse into dependencies\n            nearest_symbols_count (int): The number of nearest symbols to print\n            print_imports (bool): Whether to print imports\n            process_directory_structure (bool): Whether to process the directory structure\n            process_docstrings (bool): Whether to process docstrings\n            process_variables (bool): Whether to process variables\n            process_methods (bool): Whether to process methods\n            process_methods_constructor (bool): Whether to process the constructor method\n            process_methods_summary (bool): Whether to process the summary method\n            process_nearest_symbols (bool): Whether to process the nearest symbols\n            process_dependencies (bool): Whether to process the dependencies\n            process_references (bool): Whether to process the references\n            process_callers (bool): Whether to process the callers\n        \"\"\"\n        self.spacer = spacer\n        self.nearest_symbols_count = nearest_symbols_count\n        self.max_dependency_print_depth = max_dependency_print_depth\n        self.max_recursion_depth = max_recursion_depth\n        self.print_imports = print_imports\n        self.process_directory_structure = process_directory_structure\n        self.process_docstrings = process_docstrings\n        self.process_variables = process_variables\n        self.process_methods = process_methods\n        self.process_methods_constructor = process_methods_constructor\n        self.process_methods_summary = process_methods_summary\n        self.process_nearest_symbols = process_nearest_symbols\n        self.process_dependencies = process_dependencies\n        self.process_references = process_references\n        self.process_callers = process_callers\n\n\n", "document": "# PyContextRetrieverConfig\n\n`PyContextRetrieverConfig` is a configuration class for the `PyContextRetriever`. It contains various attributes such as `spacer`, `max_dependency_print_depth`, `max_recursion_depth`, and others to define the settings to be used by the context retriever.\n\n## Overview\n\n`PyContextRetrieverConfig` provides a convenient way to configure the `PyContextRetriever` based on specific requirements. The class can be customized by setting its various attributes during instantiation. It is used in conjunction with `PyContextRetriever`.\n\n## Related Symbols\n\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n\n## Example\n\nThe following example demonstrates the creation of a `PyContextRetrieverConfig` instance with custom settings:\n\n```python\nfrom automata_docs.core.context.py_context.retriever import PyContextRetrieverConfig\n\nconfig = PyContextRetrieverConfig(\n    spacer=\"  \",\n    max_dependency_print_depth=2,\n    max_recursion_depth=1,\n    nearest_symbols_count=10,\n    print_imports=False,\n    process_directory_structure=False,\n    process_docstrings=True,\n    process_variables=True,\n    process_methods=True,\n    process_methods_constructor=True,\n    process_methods_summary=False,\n    process_nearest_symbols=True,\n    process_dependencies=False,\n    process_references=False,\n    process_callers=False,\n)\n```\n\n## Limitations\n\n`PyContextRetrieverConfig` provides a customizable configuration for the `PyContextRetriever`, however, it does not validate the given settings. Incorrect configuration settings may lead to unexpected results or errors during the execution of `PyContextRetriever`.\n\n## Follow-up Questions:\n\n- Is there a way to validate the configuration settings to ensure they are correct and will not cause errors during the execution of `PyContextRetriever`?", "summary": "`PyContextRetrieverConfig` is a configuration class used to customize the settings for the `PyContextRetriever`. The class can be customized by setting its attributes, such as `spacer`, `max_dependency_print_depth`, `max_recursion_depth`, and others, during instantiation. However, it does not validate the given settings, which might lead to unexpected results or errors during the execution of `PyContextRetriever`. An example of creating a `PyContextRetrieverConfig` with custom settings is as follows:\n\n```python\nfrom automata_docs.core.context.py_context.retriever import PyContextRetrieverConfig\n\nconfig = PyContextRetrieverConfig(\n    spacer=\"  \",\n    max_dependency_print_depth=2,\n    max_recursion_depth=1,\n    nearest_symbols_count=10,\n    print_imports=False,\n    process_directory_structure=False,\n    process_docstrings=True,\n    process_variables=True,\n    process_methods=True,\n    process_methods_constructor=True,\n    process_methods_summary=False,\n    process_nearest_symbols=True,\n    process_dependencies=False,\n    process_references=False,\n    process_callers=False,\n)\n```", "context": "\n    Generate the documentation for PyContextRetrieverConfig using the context shown below -\nContext for -\nautomata_docs.core.context.py_context.retriever.PyContextRetrieverConfig -\n\n  Class Docstring:\n    The configuration for the PyContextRetriever\n    \n  Variables:\n    self.spacer=spacer\n    self.nearest_symbols_count=nearest_symbols_count\n    self.max_dependency_print_depth=max_dependency_print_depth\n    self.max_recursion_depth=max_recursion_depth\n    self.print_imports=print_imports\n    self.process_directory_structure=process_directory_structure\n    self.process_docstrings=process_docstrings\n    self.process_variables=process_variables\n    self.process_methods=process_methods\n    self.process_methods_constructor=process_methods_constructor\n    self.process_methods_summary=process_methods_summary\n    self.process_nearest_symbols=process_nearest_symbols\n    self.process_dependencies=process_dependencies\n    self.process_references=process_references\n    self.process_callers=process_callers\n    \n  Methods:\n    def __init__(\n            self,\n            spacer: str = \"  \",\n            max_dependency_print_depth: int = 2,\n            max_recursion_depth: int = 1,\n            nearest_symbols_count: int = 10,\n            print_imports=False,\n            process_directory_structure=False,\n            process_docstrings=True,\n            process_variables=True,\n            process_methods=True,\n            process_methods_constructor=True,\n            process_methods_summary=False,\n            process_nearest_symbols=True,\n            process_dependencies=False,\n            process_references=False,\n            process_callers=False,\n        ):\n            \"\"\"\n            Args:\n                spacer (str): The string to use for indentation\n                max_dependency_print_depth (int): The maximum depth to print dependencies\n                max_recursion_depth (int): The maximum depth to recurse into dependencies\n                nearest_symbols_count (int): The number of nearest symbols to print\n                print_imports (bool): Whether to print imports\n                process_directory_structure (bool): Whether to process the directory structure\n                process_docstrings (bool): Whether to process docstrings\n                process_variables (bool): Whether to process variables\n                process_methods (bool): Whether to process methods\n                process_methods_constructor (bool): Whether to process the constructor method\n                process_methods_summary (bool): Whether to process the summary method\n                process_nearest_symbols (bool): Whether to process the nearest symbols\n                process_dependencies (bool): Whether to process the dependencies\n                process_references (bool): Whether to process the references\n                process_callers (bool): Whether to process the callers\n            \"\"\"\n            self.spacer = spacer\n            self.nearest_symbols_count = nearest_symbols_count\n            self.max_dependency_print_depth = max_dependency_print_depth\n            self.max_recursion_depth = max_recursion_depth\n            self.print_imports = print_imports\n            self.process_directory_structure = process_directory_structure\n            self.process_docstrings = process_docstrings\n            self.process_variables = process_variables\n            self.process_methods = process_methods\n            self.process_methods_constructor = process_methods_constructor\n            self.process_methods_summary = process_methods_summary\n            self.process_nearest_symbols = process_nearest_symbols\n            self.process_dependencies = process_dependencies\n            self.process_references = process_references\n            self.process_callers = process_callers\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n      automata_docs.tests.unit.test_py_code_retriever.getter\n      \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n    Context for -\n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Variables:\n        self.module_tree_map=module_tree_map\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n      automata_docs.tests.unit.test_py_writer.python_writer\n      \n        @pytest.fixture\n        def python_writer():\n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            return PyCodeWriter(retriever)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n      automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n      \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n    Context for -\n    automata_docs.cli.commands.LoggingConfig -\n    \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.database.provider`/SymbolDatabaseProvider#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.database.provider", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDatabaseProvider", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class SymbolDatabaseProvider(abc.ABC):\n    \"\"\"\n    Abstract base class for different types of database providers.\n    \"\"\"\n\n    @abc.abstractmethod\n    def save(self):\n        \"\"\"\n        Abstract method to save data.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def load(self) -> Any:\n        \"\"\"\n        Abstract method to load data.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def add(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Abstract method to add an embedding to the database.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Abstract method to update an existing embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def discard(self, symbol: Symbol):\n        \"\"\"\n        Abstract method to discard a specific embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get(self, symbol: Symbol) -> Any:\n        \"\"\"\n        Abstract method to get a specific embedding.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def clear(self):\n        \"\"\"\n        Abstract method to clear all embeddings.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def contains(self, symbol: Symbol) -> bool:\n        \"\"\"\n        Abstract method to check if a specific embedding is present.\n        \"\"\"\n        pass\n", "document": "# SymbolDatabaseProvider\n\n`SymbolDatabaseProvider` is an abstract base class for different types of database providers which can be used to store symbol embeddings. It lays out the interface that the derived classes must implement for adding, retrieving, updating, clearing, and saving symbol embeddings. The class also contains closely related symbols such as `Symbol`, `SymbolEmbedding`, `SymbolEmbeddingHandler`, and `JSONVectorDatabase`.\n\n## Overview\n\nA `SymbolDatabaseProvider` is used to manage symbol embeddings in various ways, allowing for storage, retrieval, and manipulation of these embeddings in different types of databases. Each provider implementation can be used with different databases or formats, providing a flexible way to work with symbol embeddings.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n\n## Example\n\nTo create a `SymbolDatabaseProvider`, you would need to implement a custom subclass that extends this abstract base class and fills in the necessary abstract methods:\n\n```python\nfrom automata_docs.core.database.provider import SymbolDatabaseProvider\nfrom automata_docs.core.symbol.symbol_types import Symbol\nfrom automata_docs.core.embedding.symbol_embedding import SymbolEmbedding\n\nclass MyDatabaseProvider(SymbolDatabaseProvider):\n    def add(self, embedding: SymbolEmbedding):\n        # Add the specified embedding to the database.\n        pass\n\n    def clear(self):\n        # Clear all embeddings from this database.\n        pass\n\n    def contains(self, symbol: Symbol) -> bool:\n        # Check if a specific embedding is present in the database.\n        pass\n\n    # Implement other abstract methods...\n```\n\nOnce implemented, you can use your custom provider just like any other `SymbolDatabaseProvider`.\n\n```python\nmy_provider = MyDatabaseProvider()\n# Use my_provider to add, update, retrieve, etc., embeddings...\n```\n\n## Limitations\n\nThe `SymbolDatabaseProvider` abstract base class only defines an interface and does not implement any concrete storage mechanism. Implementations need to be created as subclasses to support specific storage types and formats.\n\n## Follow-up Questions:\n\n- Are there any existing concrete implementations of `SymbolDatabaseProvider` that could be reused or adapted?\n- What are the use cases for creating a custom `SymbolDatabaseProvider` implementation?", "summary": "SymbolDatabaseProvider is an abstract base class for various database providers designed for managing symbol embeddings. It provides an interface for derived classes to implement storage, retrieval, updating, clearing, and saving of symbol embeddings. This allows for flexibility when working with different databases or formats. To create a custom SymbolDatabaseProvider, a custom subclass must be implemented extending the abstract base class and filling in the necessary abstract methods. However, the SymbolDatabaseProvider does not implement any concrete storage mechanisms and requires specific storage types and formats to be defined in the subclasses.", "context": "\n    Generate the documentation for SymbolDatabaseProvider using the context shown below -\nContext for -\nautomata_docs.core.database.provider.SymbolDatabaseProvider -\n\n  Class Docstring:\n    Abstract base class for different types of database providers.\n    \n    \n  Methods:\n    @abc.abstractmethod\n        def add(self, embedding: SymbolEmbedding):\n            \"\"\"\n            Abstract method to add an embedding to the database.\n            \"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def clear(self):\n            \"\"\"\n            Abstract method to clear all embeddings.\n            \"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def contains(self, symbol: Symbol) -> bool:\n            \"\"\"\n            Abstract method to check if a specific embedding is present.\n            \"\"\"\n            pass\n    \n    @abc.abstractmethod\n        def discard(self, symbol: Symbol):\n            \"\"\"\n            Abstract method to discard a specific embedding.\n            \"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def get(self, symbol: Symbol) -> Any:\n            \"\"\"\n            Abstract method to get a specific embedding.\n            \"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def load(self) -> Any:\n            \"\"\"\n            Abstract method to load data.\n            \"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def save(self):\n            \"\"\"\n            Abstract method to save data.\n            \"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def update(self, embedding: SymbolEmbedding):\n            \"\"\"\n            Abstract method to update an existing embedding.\n            \"\"\"\n            pass\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n    \n      Variables:\n        self.embedding_db=embedding_db\n        self.embedding_provider=embedding_provider or EmbeddingsProvider()\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n    Context for -\n    automata_docs.core.database.vector.VectorDatabaseProvider -\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.database.vector`/JSONVectorDatabase#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.database.vector", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "JSONVectorDatabase", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class JSONVectorDatabase(VectorDatabaseProvider):\n    \"\"\"\n    Concrete class to provide a vector database that saves into a JSON file.\n    \"\"\"\n\n    def __init__(self, file_path: str):\n        \"\"\"\n        Args:\n            file_path: The path to the JSON file to save the vector database to\n        \"\"\"\n        self.file_path = file_path\n        self.data: List[SymbolEmbedding] = []\n        self.index: Dict[Symbol, int] = {}\n        self.load()\n\n    def save(self):\n        \"\"\"Saves the vector database to the JSON file\"\"\"\n        with open(self.file_path, \"w\") as file:\n            encoded_data = jsonpickle.encode(self.data)\n            file.write(encoded_data)\n\n    def load(self):\n        \"\"\"Loads the vector database from the JSON file\"\"\"\n        try:\n            with open(self.file_path, \"r\") as file:\n                self.data = jsonpickle.decode(file.read())\n                self.index = {embedding.symbol: i for i, embedding in enumerate(self.data)}\n        except FileNotFoundError:\n            logger.info(\"Creating new vector embedding db at %s\" % self.file_path)\n\n    def add(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Adds a new vector to the database\n\n        Args:\n            embedding: The vector to add\n        \"\"\"\n        self.data.append(embedding)\n        self.index[embedding.symbol] = len(self.data) - 1\n\n    def update(self, embedding: SymbolEmbedding):\n        \"\"\"\n        Updates an embedding in the database\n\n        Args:\n            embedding: The vector to update\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if embedding.symbol not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % embedding.symbol)\n        self.data[self.index[embedding.symbol]] = embedding\n\n    def discard(self, symbol: Symbol):\n        \"\"\"\n        Discards a vector from the database\n\n        Args:\n            symbol: The symbol to discard\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if symbol not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % symbol)\n        index = self.index[symbol]\n        del self.data[index]\n        del self.index[symbol]\n\n    def contains(self, symbol: Symbol) -> bool:\n        \"\"\"\n        Checks if the database contains a vector for the given symbol\n\n        Args:\n            symbol: The symbol to check\n\n        Returns:\n            True if the database contains a vector for the given symbol, False otherwise\n        \"\"\"\n        return symbol in self.index\n\n    def get(self, symbol: Symbol) -> SymbolEmbedding:\n        \"\"\"\n        Gets the vector for the given symbol\n\n        Args:\n            symbol: The symbol to get the vector for\n\n        Raises:\n            KeyError: If the symbol is not in the database\n        \"\"\"\n        if symbol not in self.index:\n            raise KeyError(\"Symbol %s not in database\" % symbol)\n        return self.data[self.index[symbol]]\n\n    def clear(self):\n        \"\"\"Removes all vectors from the database\"\"\"\n        self.data = []\n        self.index = {}\n\n    def calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]:\n        # Implement the logic to calculate similarity between the given vector and vectors in the data.\n        # This will depend on how the data is structured and the specific similarity measure to be used (e.g., cosine similarity).\n        # Here, just returning the data as a placeholder.\n        # return self.data\n        raise NotImplementedError\n\n    def get_all_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Gets all symbols in the database\n\n        Returns:\n            A list of all symbols in the database\n        \"\"\"\n        symbol_list = list(self.index.keys())\n        return sorted(symbol_list, key=lambda x: str(x.dotpath))\n", "document": "# JSONVectorDatabase\n\n`JSONVectorDatabase` is a concrete implementation of a vector database that saves data into a JSON file. It provides methods to add, update, get, and discard vector embeddings for a given symbol and can work with `SymbolEmbedding` objects. The database maintains an internal data structure that associates symbols with their respective_embeddings, and the symbols are indexed for fast access.\n\n## Overview\n\n`JSONVectorDatabase` provides a simple and effective way to work with vector embeddings stored as a JSON file. It offers essential functionality for managing a database of vector embeddings, such as adding, removing, updating, and checking for the presence of specific embeddings. The database uses `jsonpickle` to encode and decode data structures to and from JSON format, ensuring compatibility with other tools and libraries.\n\n## Related Symbols\n\n- `automata_docs.core.database.vector.VectorDatabaseProvider`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nThe following is an example that demonstrates how to create and use a `JSONVectorDatabase`.\n\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.symbol.symbol_types import SymbolEmbedding, Symbol\nimport numpy as np\n\nfile_path = \"vector_db.json\"\nvector_db = JSONVectorDatabase(file_path)\n\nsymbol = Symbol.parse(\"scip-python python automata_docs some_version some_symbol#\")\nembedding_vector = np.array([1.0, 2.0, 3.0])\n\nembedding = SymbolEmbedding(symbol, embedding_vector)\nvector_db.add(embedding)\n\nembedding_from_db = vector_db.get(symbol)\nvector_db.update(embedding)\nvector_db.discard(symbol)\n```\n\n## Limitations\n\n- The `calculate_similarity` method is not implemented in `JSONVectorDatabase` and needs to be provided in the derived class or an external utility function used to compute similarity.\n- The JSON storage format may not be practical for very large vector databases, as it requires loading the entire database into memory.\n\n## Follow-up Questions:\n\n- How can we extend this implementation to support calculating similarity between vectors within the database?\n- How can we improve the storage format to handle large databases more efficiently?", "summary": "`JSONVectorDatabase` is a vector database implementation that stores data in a JSON file and allows adding, updating, getting, and discarding vector embeddings for given symbols by working with `SymbolEmbedding` objects. It uses `jsonpickle` to ensure compatibility with other tools and libraries and manages an internal data structure that associates symbols with their respective embeddings for fast access. However, this implementation has some limitations, such as not having the `calculate_similarity` method and not being practical for large vector databases due to needing to load the entire database into memory. To utilize `JSONVectorDatabase`, create an instance with a file path, parse symbols, add the embedding object to the database, and perform other operations like updating and discarding as needed.", "context": "\n    Generate the documentation for JSONVectorDatabase using the context shown below -\nContext for -\nautomata_docs.core.database.vector.JSONVectorDatabase -\n\n  Class Docstring:\n    Concrete class to provide a vector database that saves into a JSON file.\n    \n  Variables:\n    self.file_path=file_path\n    self.data=[]\n    self.index={}\n    self.data=jsonpickle.decode(file.read())\n    self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n    self.index[embedding.symbol]=len(self.data) - 1\n    self.data[self.index[embedding.symbol]]=embedding\n    self.data=[]\n    self.index={}\n    \n  Methods:\n    def __init__(self, file_path: str):\n            \"\"\"\n            Args:\n                file_path: The path to the JSON file to save the vector database to\n            \"\"\"\n            self.file_path = file_path\n            self.data: List[SymbolEmbedding] = []\n            self.index: Dict[Symbol, int] = {}\n            self.load()\n    \n        \n    def add(self, embedding: SymbolEmbedding):\n            \"\"\"\n            Adds a new vector to the database\n    \n            Args:\n                embedding: The vector to add\n            \"\"\"\n            self.data.append(embedding)\n            self.index[embedding.symbol] = len(self.data) - 1\n    \n        \n    def calculate_similarity(self, vector: np.array) -> List[Dict[Symbol, float]]:\n            # Implement the logic to calculate similarity between the given vector and vectors in the data.\n            # This will depend on how the data is structured and the specific similarity measure to be used (e.g., cosine similarity).\n            # Here, just returning the data as a placeholder.\n            # return self.data\n            raise NotImplementedError\n    \n        \n    def clear(self):\n            \"\"\"Removes all vectors from the database\"\"\"\n            self.data = []\n            self.index = {}\n    \n        \n    def contains(self, symbol: Symbol) -> bool:\n            \"\"\"\n            Checks if the database contains a vector for the given symbol\n    \n            Args:\n                symbol: The symbol to check\n    \n            Returns:\n                True if the database contains a vector for the given symbol, False otherwise\n            \"\"\"\n            return symbol in self.index\n    \n        \n    def discard(self, symbol: Symbol):\n            \"\"\"\n            Discards a vector from the database\n    \n            Args:\n                symbol: The symbol to discard\n    \n            Raises:\n                KeyError: If the symbol is not in the database\n            \"\"\"\n            if symbol not in self.index:\n                raise KeyError(\"Symbol %s not in database\" % symbol)\n            index = self.index[symbol]\n            del self.data[index]\n            del self.index[symbol]\n    \n        \n    def get(self, symbol: Symbol) -> SymbolEmbedding:\n            \"\"\"\n            Gets the vector for the given symbol\n    \n            Args:\n                symbol: The symbol to get the vector for\n    \n            Raises:\n                KeyError: If the symbol is not in the database\n            \"\"\"\n            if symbol not in self.index:\n                raise KeyError(\"Symbol %s not in database\" % symbol)\n            return self.data[self.index[symbol]]\n    \n        \n    def get_all_symbols(self) -> List[Symbol]:\n            \"\"\"\n            Gets all symbols in the database\n    \n            Returns:\n                A list of all symbols in the database\n            \"\"\"\n            symbol_list = list(self.index.keys())\n            return sorted(symbol_list, key=lambda x: str(x.dotpath))\n    \n    def load(self):\n            \"\"\"Loads the vector database from the JSON file\"\"\"\n            try:\n                with open(self.file_path, \"r\") as file:\n                    self.data = jsonpickle.decode(file.read())\n                    self.index = {embedding.symbol: i for i, embedding in enumerate(self.data)}\n            except FileNotFoundError:\n                logger.info(\"Creating new vector embedding db at %s\" % self.file_path)\n    \n        \n    def save(self):\n            \"\"\"Saves the vector database to the JSON file\"\"\"\n            with open(self.file_path, \"w\") as file:\n                encoded_data = jsonpickle.encode(self.data)\n                file.write(encoded_data)\n    \n        \n    def update(self, embedding: SymbolEmbedding):\n            \"\"\"\n            Updates an embedding in the database\n    \n            Args:\n                embedding: The vector to update\n    \n            Raises:\n                KeyError: If the symbol is not in the database\n            \"\"\"\n            if embedding.symbol not in self.index:\n                raise KeyError(\"Symbol %s not in database\" % embedding.symbol)\n            self.data[self.index[embedding.symbol]] = embedding\n    \n        \n  Closely Related Symbols:\n      automata_docs.tests.unit.test_database_vector.test_init_vector\n      \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n      automata_docs.tests.unit.test_database_vector.test_load\n      \n        def test_load(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n            vector_db_2 = JSONVectorDatabase(temp_output_filename)\n        \n            embedded_symbol_0 = vector_db_2.get(symbols[0])\n            embedded_symbol_1 = vector_db_2.get(symbols[1])\n        \n      automata_docs.tests.unit.test_database_vector.test_save\n      \n        def test_save(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n        \n        \n      automata_docs.tests.unit.test_database_vector.test_add_symbols\n      \n        def test_add_symbols(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n        \n        \n      automata_docs.tests.unit.test_database_vector.test_delete_symbol\n      \n        def test_delete_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, [1, 2, 3])\n            vector_db.add(embedded_symbol)\n            vector_db.discard(symbol)\n        \n        \n        \n      automata_docs.tests.unit.test_database_vector.test_add_symbol\n      \n        def test_add_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, [1, 2, 3])\n            vector_db.add(embedded_symbol)\n        \n        \n        \n      automata_docs.tests.unit.test_database_vector.test_lookup_symbol\n      \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.database.vector.VectorDatabaseProvider -\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.database.vector`/VectorDatabaseProvider#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.database.vector", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "VectorDatabaseProvider", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class VectorDatabaseProvider(SymbolDatabaseProvider):\n    \"\"\"\n    Abstract base class for different types of vector database providers.\n    \"\"\"\n\n    @abc.abstractmethod\n    def calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]:\n        \"\"\"\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_all_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Abstract method to calculate the similarity between the given vector and vectors in the database.\n        \"\"\"\n        pass\n\n\n", "document": "# VectorDatabaseProvider\n\n`VectorDatabaseProvider` is an abstract base class for different types of vector database providers, responsible for loading, saving, and providing access to vector representations of symbols. It includes method stubs for calculating the similarity between a given vector and all vectors in the database and getting all symbols stored in the database.\n\n## Related Symbols\n\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.database.provider.SymbolDatabaseProvider`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler`\n\n## Example\n\nThe following example demonstrates how to create an instance of `JSONVectorDatabase` derived from `VectorDatabaseProvider`, load and save symbol embeddings.\n\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\nimport numpy as np\n\n# Initialize JSONVectorDatabase with file_path\nfile_path = \"path/to/json_file.json\"\nvector_db = JSONVectorDatabase(file_path)\n\n# Add a SymbolEmbedding to the database\nsymbol = Symbol(\"example_symbol\")\nembedding_vector = np.array([0.1, 0.2, 0.3])\nsymbol_embedding = SymbolEmbedding(symbol, embedding_vector)\nvector_db.add(symbol_embedding)\n\n# Save the database to file\nvector_db.save()\n```\n\n## Limitations\n\nThe current implementation of `VectorDatabaseProvider` assumes that the derived classes will work specifically with instances of `SymbolEmbedding`. Additionally, the abstract methods are limited to similarity calculations and getting all symbols from the database. Extending the functionality of this base class will require modifying the derived classes to handle the new functionality.\n\n## Follow-up Questions:\n\n- Are there any plans to support other types of embeddings besides `SymbolEmbedding` in the derived classes?\n- Is there a need for more database-related functionality in the `VectorDatabaseProvider` class?", "summary": "The `VectorDatabaseProvider` serves as an abstract base class for various vector database providers, which handle loading, saving, and accessing vector representations of symbols. This includes methods for calculating the similarity between a given vector and all vectors in the database and obtaining all symbols stored in the database. However, the current implementation assumes that derived classes will work specifically with `SymbolEmbedding` instances, and abstract methods are limited to similarity calculations and getting symbols. Extending its functionality may require modifications to derived classes.\n\nExample usage of creating a `JSONVectorDatabase` instance derived from `VectorDatabaseProvider`, loading, and saving symbol embeddings:\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\nimport numpy as np\n\n# Initialize JSONVectorDatabase with file_path\nfile_path = \"path/to/json_file.json\"\nvector_db = JSONVectorDatabase(file_path)\n\n# Add a SymbolEmbedding to the database\nsymbol = Symbol(\"example_symbol\")\nembedding_vector = np.array([0.1, 0.2, 0.3])\nsymbol_embedding = SymbolEmbedding(symbol, embedding_vector)\nvector_db.add(symbol_embedding)\n\n# Save the database to file\nvector_db.save()\n```", "context": "\n    Generate the documentation for VectorDatabaseProvider using the context shown below -\nContext for -\nautomata_docs.core.database.vector.VectorDatabaseProvider -\n\n  Class Docstring:\n    Abstract base class for different types of vector database providers.\n    \n    \n  Methods:\n    @abc.abstractmethod\n        def calculate_similarity(self, embedding: SymbolEmbedding) -> List[Dict[Symbol, float]]:\n            \"\"\"\n            Abstract method to calculate the similarity between the given vector and vectors in the database.\n            \"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def get_all_symbols(self) -> List[Symbol]:\n            \"\"\"\n            Abstract method to calculate the similarity between the given vector and vectors in the database.\n            \"\"\"\n            pass\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.database.provider.SymbolDatabaseProvider -\n    \n      Class Docstring:\n        Abstract base class for different types of database providers.\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n    \n      Variables:\n        self.embedding_db=embedding_db\n        self.embedding_provider=embedding_provider or EmbeddingsProvider()\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n      automata_docs.tests.unit.test_database_vector.test_init_vector\n      \n        def test_init_vector(temp_output_filename):\n            JSONVectorDatabase(temp_output_filename)\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n      automata_docs.tests.unit.test_database_vector.test_load\n      \n        def test_load(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n            vector_db.save()\n        \n            vector_db_2 = JSONVectorDatabase(temp_output_filename)\n        \n            embedded_symbol_0 = vector_db_2.get(symbols[0])\n            embedded_symbol_1 = vector_db_2.get(symbols[1])\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.embedding.embedding_types`/EmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "EmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class EmbeddingHandler(abc.ABC):\n    \"\"\"An abstract class to handle the embedding of symbols\"\"\"\n\n    @abc.abstractmethod\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: Optional[EmbeddingsProvider],\n    ):\n        \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n        \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_all_supported_symbols(self) -> List[Symbol]:\n        \"\"\"An abstract method to get all supported symbols\"\"\"\n        pass\n\n\n", "document": "# EmbeddingHandler\n\n`EmbeddingHandler` is an abstract class for handling the embedding of symbols. It provides a way to obtain embeddings for symbols as well as to update these embeddings. The class offers closely related symbols, such as `SymbolCodeEmbeddingHandler` and `SymbolDocEmbeddingHandler`.\n\n## Overview\n\n`EmbeddingHandler` is used to handle the embeddings for symbols. Developers can subclass this class to implement specific embedding types. The abstract methods defined in this class are `get_all_supported_symbols`, `get_embedding`, and `update_embedding`. The implementation of these methods is left to the subclasses.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbedding`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\nHere's an example of how to use the `SymbolCodeEmbeddingHandler` class, which is a subclass of `EmbeddingHandler`.\n\n```python\nfrom automata_docs.core.embedding.embedding_types import VectorDatabaseProvider\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler, EmbeddingsProvider\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\n# Create an instance of SymbolCodeEmbeddingHandler\nembedding_db = VectorDatabaseProvider() # Replace with your own implementation of VectorDatabaseProvider\nembedding_provider = EmbeddingsProvider()\n\ncode_embedding_handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n\n# Use the handler to get embeddings for specific symbols\nsymbol = Symbol(\"example_symbol\")\nembedding = code_embedding_handler.get_embedding(symbol)\n```\n\n## Limitations\n\nThe primary limitation of `EmbeddingHandler` is that it only supports specific symbol types. Developers looking to use non-supported symbol types would need to implement their own subclasses of `EmbeddingHandler`. Additionally, the `EmbeddingHandler` class itself is an abstract class, so developers will need to use subclasses or create new subclasses that implement the abstract methods.\n\n## Follow-up Questions:\n\n- Are there any other limitations or caveats to using the `EmbeddingHandler` class?\n", "summary": "`EmbeddingHandler` is an abstract class used to handle embeddings for symbols, allowing developers to obtain and update embeddings. To use it, developers need to subclass it and implement the abstract methods `get_all_supported_symbols`, `get_embedding`, and `update_embedding`. Some related symbols are `SymbolCodeEmbeddingHandler` and `SymbolDocEmbeddingHandler`. However, `EmbeddingHandler` only supports specific symbol types, so developers may need to create their own subclasses for non-supported types.\n\nExample usage of the `SymbolCodeEmbeddingHandler` class, a subclass of `EmbeddingHandler`:\n\n```python\nfrom automata_docs.core.embedding.embedding_types import VectorDatabaseProvider\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler, EmbeddingsProvider\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\n# Create an instance of SymbolCodeEmbeddingHandler\nembedding_db = VectorDatabaseProvider() # Replace with your own implementation of VectorDatabaseProvider\nembedding_provider = EmbeddingsProvider()\n\ncode_embedding_handler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n\n# Use the handler to get embeddings for specific symbols\nsymbol = Symbol(\"example_symbol\")\nembedding = code_embedding_handler.get_embedding(symbol)\n```", "context": "\n    Generate the documentation for EmbeddingHandler using the context shown below -\nContext for -\nautomata_docs.core.embedding.embedding_types.EmbeddingHandler -\n\n  Class Docstring:\n    An abstract class to handle the embedding of symbols\n    \n    \n  Methods:\n    @abc.abstractmethod\n        def __init__(\n            self,\n            embedding_db: VectorDatabaseProvider,\n            embedding_provider: Optional[EmbeddingsProvider],\n        ):\n            \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def get_all_supported_symbols(self) -> List[Symbol]:\n            \"\"\"An abstract method to get all supported symbols\"\"\"\n            pass\n    \n    \n    \n    @abc.abstractmethod\n        def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n            \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def update_embedding(self, symbol: Symbol):\n            \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n            pass\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n    \n      Variables:\n        self.embedding_db=embedding_db\n        self.embedding_provider=embedding_provider or EmbeddingsProvider()\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n      automata_docs.tests.unit.conftest.patch_get_embedding\n      \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Variables:\n        self.source_code=source_code\n        self.document=document\n        self.summary=summary\n        self.context=context\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n      automata_docs.tests.unit.test_symbol_embedding.test_get_embedding\n      \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingsProvider methods\n            mock_provider = Mock(EmbeddingsProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], mock_embedding, \"symbol_source\"\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.embedding.embedding_types`/EmbeddingSimilarity#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "EmbeddingSimilarity", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class EmbeddingSimilarity(abc.ABC):\n    @abc.abstractmethod\n    def __init__(\n        self,\n        symbol_embedding_manager: EmbeddingHandler,\n        norm_type: Optional[NormType],\n    ):\n        \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_query_similarity_dict(self, query_text: str) -> Dict[Any, float]:\n        \"\"\"An abstract method to get the similarity between a query and all symbols\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Any, float]:\n        \"\"\"An abstract method to get the k nearest symbols to a query\"\"\"\n        pass\n", "document": "# EmbeddingSimilarity\n\n`EmbeddingSimilarity` is an abstract base class for search ranking algorithms. It provides a foundation for implementing methods to search for symbols or text queries that are similar to a given query. The similar symbols are returned as a dictionary with their respective similarity scores.\n\n## Overview\n\n`EmbeddingSimilarity` is designed to be used in conjunction with classes like `SymbolSimilarity` and relies on embeddings derived from various symbol structures like `Symbol` and `SymbolEmbedding`. The class provides the following abstract methods:\n\n- `__init__(symbol_embedding_manager, norm_type)`: Initializes an instance of `EmbeddingSimilarity`.\n- `get_nearest_entries_for_query(query_text, k_nearest)`: Retrieves the k nearest symbols to the provided `query_text`.\n- `get_query_similarity_dict(query_text)`: Computes the similarity between the provided `query_text` and all available symbols.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.symbol.symbol_types.SymbolDocEmbedding`\n\n## Example\n\nThe following example demonstrates how one might use a derivative of `EmbeddingSimilarity` such as `SymbolSimilarity`:\n\n```python\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\n\n# Initialize a JSONVectorDatabase object\nembedding_db = JSONVectorDatabase(\"path/to/json_file\")\n\n# Create an EmbeddingsProvider object\nprovider = EmbeddingsProvider()\n\n# Initialize a SymbolCodeEmbeddingHandler object\nhandler = SymbolCodeEmbeddingHandler(embedding_db, provider)\n\n# Create a SymbolSimilarity instance using the handler\nsymbol_similarity = SymbolSimilarity(handler)\n\n# Query the 2 nearest symbols to the given text\nquery = \"Example query text\"\nresult = symbol_similarity.get_nearest_entries_for_query(query, k_nearest=2)\n\n# The result is a dictionary with symbols as keys and similarity scores as values\nprint(result)\n```\n\n## Limitations\n\nThe primary limitation of `EmbeddingSimilarity` is that it assumes specific data structures and related classes, like `EmbeddingsProvider` and `SymbolSimilarity`. As it is an abstract base class, it cannot be used directly but must be subclassed to provide the desired functionality.\n\n## Follow-up Questions:\n\n- How can `EmbeddingSimilarity` be used for other types of embeddings besides code and documentation?\n- How can `EmbeddingSimilarity` be extended to support additional similarity algorithms?", "summary": "`EmbeddingSimilarity` is an abstract base class for search ranking algorithms, providing a foundation for implementing methods to search for symbols or text queries similar to a given query. It is designed to work with classes like `SymbolSimilarity` and depends on embeddings derived from symbol structures like `Symbol` and `SymbolEmbedding`. The class offers abstract methods such as `__init__`, `get_nearest_entries_for_query`, and `get_query_similarity_dict`. However, it assumes specific data structures and related classes, and cannot be used directly, but must be subclassed for the desired functionality. An example using a derivative of `EmbeddingSimilarity`, like `SymbolSimilarity`, demonstrates creating a symbol similarity instance and querying the nearest symbols to given text.", "context": "\n    Generate the documentation for EmbeddingSimilarity using the context shown below -\nContext for -\nautomata_docs.core.embedding.embedding_types.EmbeddingSimilarity -\n\n    \n  Methods:\n    @abc.abstractmethod\n        def __init__(\n            self,\n            symbol_embedding_manager: EmbeddingHandler,\n            norm_type: Optional[NormType],\n        ):\n            \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def get_nearest_entries_for_query(self, query_text: str, k_nearest: int) -> Dict[Any, float]:\n            \"\"\"An abstract method to get the k nearest symbols to a query\"\"\"\n            pass\n    \n    @abc.abstractmethod\n        def get_query_similarity_dict(self, query_text: str) -> Dict[Any, float]:\n            \"\"\"An abstract method to get the similarity between a query and all symbols\"\"\"\n            pass\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity -\n    \n      Variables:\n        self.embedding_handler=symbol_embedding_manager\n        self.embedding_provider=symbol_embedding_manager.embedding_provider\n        self.norm_type=norm_type\n        self.index_to_symbol={i: symbol for i, symbol in enumerate(supported_symbols)}\n        self.symbol_to_index={symbol: i for i, symbol in enumerate(supported_symbols)}\n        self.available_symbols=None\n        self.available_symbols=available_symbols\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n      automata_docs.tests.unit.conftest.patch_get_embedding\n      \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n      automata_docs.tests.unit.test_symbol_similarity.test_get_nearest_symbols_for_query\n      \n        def test_get_nearest_symbols_for_query(\n            monkeypatch, mock_embedding, mock_simple_method_symbols, temp_output_filename\n        ):\n            # Mocking symbols and their embeddings\n            symbol1 = mock_simple_method_symbols[0]\n            symbol2 = mock_simple_method_symbols[1]\n            symbol3 = mock_simple_method_symbols[2]\n        \n            embedding1 = SymbolCodeEmbedding(\n                symbol=symbol1, vector=np.array([1, 0, 0, 0]), source_code=\"symbol1\"\n            )\n            embedding2 = SymbolCodeEmbedding(\n                symbol=symbol2, vector=np.array([0, 1, 0, 0]), source_code=\"symbol2\"\n            )\n            embedding3 = SymbolCodeEmbedding(\n                symbol=symbol3, vector=np.array([0, 0, 1, 0]), source_code=\"symbol3\"\n            )\n        \n            # Mock JSONVectorDatabase methods\n            embedding_db = JSONVectorDatabase(temp_output_filename)\n            embedding_db.add(embedding1)\n            embedding_db.add(embedding2)\n            embedding_db.add(embedding3)\n        \n            # Create an instance of the class\n            mock_provider = MagicMock(EmbeddingsProvider)\n            cem = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=mock_provider)\n        \n            symbol_similarity = SymbolSimilarity(cem)\n        \n            # Test with query_text that is most similar to symbol1\n            cem.embedding_provider.build_embedding.return_value = np.array([1, 0, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol1\", k=1)\n            assert list(result.keys()) == [symbol1]\n        \n            # Test with query_text that is most similar to symbol2\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 1, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol2\", k=1)\n            assert list(result.keys()) == [symbol2]\n        \n            # Test with query_text that is most similar to symbol3\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 0, 1, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol3\", k=1)\n            assert list(result.keys()) == [symbol3]\n        \n    Context for -\n    automata_docs.core.database.vector.VectorDatabaseProvider -\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Variables:\n        self.source_code=source_code\n        self.document=document\n        self.summary=summary\n        self.context=context\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.embedding.embedding_types`/EmbeddingsProvider#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "EmbeddingsProvider", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class EmbeddingsProvider:\n    \"\"\"A class to provide embeddings for symbols\"\"\"\n\n    def __init__(self):\n        if not openai.api_key:\n            from config import OPENAI_API_KEY\n\n            openai.api_key = OPENAI_API_KEY\n\n    def build_embedding(self, symbol_source: str) -> np.ndarray:\n        \"\"\"\n        Get the embedding for a symbol.\n        Args:\n            symbol_source (str): The source code of the symbol\n        Returns:\n            A numpy array representing the embedding\n        \"\"\"\n        # wait to import build_embedding to allow easy mocking of the function in tests.\n        from openai.embeddings_utils import get_embedding\n\n        return np.array(get_embedding(symbol_source, engine=\"text-embedding-ada-002\"))\n\n\n", "document": "# EmbeddingsProvider\n\n`EmbeddingsProvider` is a class that provides embeddings for symbols, utilizing OpenAI's text embedding API to generate embeddings for code symbols. This class provides an interface for getting embeddings using a symbol's source code.\n\n## Overview\n\n`EmbeddingsProvider` has one main method, `build_embedding`, which takes a symbol's source code and returns a numpy array representing the embedding. The class can be used as part of a larger system such as `SymbolCodeEmbeddingHandler` for obtaining and managing embeddings for code symbols.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingHandler`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.database.provider.SymbolDatabaseProvider`\n- `automata_docs.core.database.vector.VectorDatabaseProvider`\n\n## Example\n\nThe following example shows how to use the `EmbeddingsProvider` class to get the embedding for a symbol's source code.\n\n```python\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\nimport numpy as np\n\nsymbol_source = \"def example_function(arg1, arg2):\\n    return arg1 + arg2\"\nembedding_provider = EmbeddingsProvider()\nembedding = embedding_provider.build_embedding(symbol_source)\n\nassert isinstance(embedding, np.ndarray)\n```\n\n## Limitations\n\n`EmbeddingsProvider` relies on OpenAI's text embedding API, meaning that changes to the API might affect the performance or results of this class. The class is also dependent on the specified embedding engine, which in this case is \"text-embedding-ada-002\". Changes in the performance or behavior of this engine might also influence the performance of the `EmbeddingsProvider`.\n\n## Follow-up Questions:\n\n- What other text embedding engines can be utilized in the `EmbeddingsProvider` class?\n- How can we handle changes in OpenAI's text embedding API or the embedding engine gracefully?", "summary": "`EmbeddingsProvider` is a class that utilizes OpenAI's text embedding API to generate embeddings for code symbols from their source code. The primary method, `build_embedding`, takes a symbol's source code and returns a numpy array representing the embedding. It can be integrated into larger systems for managing symbol embeddings. However, it depends on OpenAI's API and the specified embedding engine, \"text-embedding-ada-002\", so any changes to them might affect this class's performance or results.\n\nExample usage:\n```python\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\nimport numpy as np\n\nsymbol_source = \"def example_function(arg1, arg2):\\n    return arg1 + arg2\"\nembedding_provider = EmbeddingsProvider()\nembedding = embedding_provider.build_embedding(symbol_source)\n\nassert isinstance(embedding, np.ndarray)\n```\n", "context": "\n    Generate the documentation for EmbeddingsProvider using the context shown below -\nContext for -\nautomata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n\n  Class Docstring:\n    A class to provide embeddings for symbols\n    \n  Variables:\n    \n  Methods:\n    def __init__(self):\n            if not openai.api_key:\n                from config import OPENAI_API_KEY\n    \n                openai.api_key = OPENAI_API_KEY\n    \n        \n    def build_embedding(self, symbol_source: str) -> np.ndarray:\n            \"\"\"\n            Get the embedding for a symbol.\n            Args:\n                symbol_source (str): The source code of the symbol\n            Returns:\n                A numpy array representing the embedding\n            \"\"\"\n            # wait to import build_embedding to allow easy mocking of the function in tests.\n            from openai.embeddings_utils import get_embedding\n    \n            return np.array(get_embedding(symbol_source, engine=\"text-embedding-ada-002\"))\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n    \n      Variables:\n        self.embedding_db=embedding_db\n        self.embedding_provider=embedding_provider or EmbeddingsProvider()\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingHandler -\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n      automata_docs.tests.unit.test_symbol_embedding.test_get_embedding\n      \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingsProvider methods\n            mock_provider = Mock(EmbeddingsProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], mock_embedding, \"symbol_source\"\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n    Context for -\n    automata_docs.core.database.provider.SymbolDatabaseProvider -\n    \n      Class Docstring:\n        Abstract base class for different types of database providers.\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.database.vector.VectorDatabaseProvider -\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.embedding.embedding_types`/NormType#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.embedding_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "NormType", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class NormType(Enum):\n    L1 = \"l1\"\n    L2 = \"l2\"\n    SOFTMAX = \"softmax\"\n\n\n", "document": "# NormType\n\n`NormType` is an enumeration class that provides different norm types to be used for calculating similarity in embeddings. It includes three options: L1, L2, and SOFTMAX.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.embedding_types.EmbeddingSimilarity`\n\n## Example\n\nThe following example demonstrates how to use `NormType` to initialize an instance of `SymbolSimilarity`.\n\n```python\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.embedding.dummy_handlers import DummyEmbeddingManager\nfrom automata_docs.core.embedding.embedding_types import NormType\n\nembedding_manager = DummyEmbeddingManager()\nnorm_type = NormType.L2\n\nsymbol_similarity = SymbolSimilarity(embedding_manager, norm_type)\n```\n\n## Discussion\n\n`NormType` provides a simple way to select different types of norms used for calculating similarity in various embedding scenarios. It is primarily used with the `SymbolSimilarity` class to specify which norm type should be applied when looking for similarities between symbols. By providing different norm types, it allows for increased flexibility within the embedding handling process.\n\n## Limitations\n\n`NormType` currently supports only three options: L1, L2, and SOFTMAX. The implementation of additional norm types would require modifications to related classes such as `SymbolSimilarity` and `EmbeddingSimilarity`. Moreover, `NormType` is limited by the underlying functionality provided by its associated classes and may not suit all use cases.\n\n## Follow-up Questions:\n\n- Are there any additional norm types that should be supported in `NormType`?", "summary": "`NormType` is an enumeration class used for calculating similarity in embeddings, offering three options: L1, L2, and SOFTMAX. Primarily used with the `SymbolSimilarity` class, it provides flexibility in selecting different types of norms for various embedding scenarios. However, it currently supports only three options, and implementing additional norm types would require modifications to related classes like `SymbolSimilarity` and `EmbeddingSimilarity`.\n\nExample:\n\n```python\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.embedding.dummy_handlers import DummyEmbeddingManager\nfrom automata_docs.core.embedding.embedding_types import NormType\n\nembedding_manager = DummyEmbeddingManager()\nnorm_type = NormType.L2\n\nsymbol_similarity = SymbolSimilarity(embedding_manager, norm_type)\n```", "context": "\n    Generate the documentation for NormType using the context shown below -\nContext for -\nautomata_docs.core.embedding.embedding_types.NormType -\n\n  Variables:\n    L1=\"l1\"\n    L2=\"l2\"\n    SOFTMAX=\"softmax\"\n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity -\n    \n      Variables:\n        self.embedding_handler=symbol_embedding_manager\n        self.embedding_provider=symbol_embedding_manager.embedding_provider\n        self.norm_type=norm_type\n        self.index_to_symbol={i: symbol for i, symbol in enumerate(supported_symbols)}\n        self.symbol_to_index={symbol: i for i, symbol in enumerate(supported_symbols)}\n        self.available_symbols=None\n        self.available_symbols=available_symbols\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind -\n    \n      Variables:\n        Local=\"local\"\n        Module=\"module\"\n        Class=\"class\"\n        Method=\"method\"\n        Value=\"value\"\n        Meta=\"meta\"\n        Macro=\"macro\"\n        Parameter=\"parameter\"\n        TypeParameter=\"type_parameter\"\n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass\n      \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass -\n    \n        \n      Methods:\n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingSimilarity -\n    \n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                symbol_embedding_manager: EmbeddingHandler,\n                norm_type: Optional[NormType],\n            ):\n                \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n                pass\n        \n            \n    Context for -\n    automata_docs.core.utils.RootDict -\n    \n      Class Docstring:\n        A dictionary representing the root logger\n        \n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n      \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n    \n      Class Docstring:\n        Inner doc strings\n        \n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.embedding.symbol_embedding`/SymbolCodeEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.symbol_embedding", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolCodeEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolCodeEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n    ):\n        \"\"\"\n        A constructor for SymbolCodeEmbeddingHandler\n\n        Args:\n            embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n            embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                get the embeddings from\n        \"\"\"\n        super().__init__(embedding_db, embedding_provider)\n\n    def get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding:\n        \"\"\"\n        Get the embedding of a symbol.\n\n        Args:\n            symbol (Symbol): Symbol to get the embedding for\n\n        Returns:\n            Embedding: The embedding of the symbol\n        \"\"\"\n        return self.embedding_db.get(symbol)\n\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"\n        Update the embedding map with new symbols.\n\n        Args:\n            symbols_to_update (List[Symbol]): List of symbols to update\n        \"\"\"\n        from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n            convert_to_fst_object,\n        )\n\n        desc_path_to_symbol = {\n            \".\".join([desc.name for desc in symbol.descriptors]): symbol\n            for symbol in self.embedding_db.get_all_symbols()\n        }\n        try:\n            symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n            symbol_source = str(convert_to_fst_object(symbol))\n            if symbol_desc_identifier in desc_path_to_symbol:\n                logger.info(\n                    f\"Embedding already exists for symbol {symbol_desc_identifier}, updating ...\"\n                )\n                existing_embedding = self.embedding_db.get(\n                    desc_path_to_symbol[symbol_desc_identifier]\n                )\n\n                if isinstance(existing_embedding, SymbolCodeEmbedding):\n                    # If the symbol is already in the embedding map, check if the source code is the same\n                    # If not, we can update the embedding\n                    if existing_embedding.source_code != symbol_source:\n                        logger.debug(\"Regenerating the embedding\")\n                        new_embedding = self.embedding_provider.build_embedding(symbol_source)\n                        existing_embedding.vector = new_embedding\n                        existing_embedding.source_code = symbol_source\n                        # Update the embedding in the database\n                        self.embedding_db.update(existing_embedding)\n                    elif existing_embedding.symbol != symbol:\n                        existing_embedding.symbol = symbol\n                        self.embedding_db.discard(existing_embedding.symbol)\n                        self.embedding_db.add(existing_embedding)\n                    # Otherwise, we don't need to do anything\n                    else:\n                        pass\n            else:\n                # If the symbol does not exist in the embedding map, we add a new embedding\n                logger.info(\n                    f\"Embedding does not exist for symbol {symbol_desc_identifier}, updating ...\"\n                )\n                symbol_embedding = self.embedding_provider.build_embedding(symbol_source)\n\n                new_embedding = SymbolCodeEmbedding(\n                    symbol=symbol,\n                    vector=symbol_embedding,\n                    source_code=symbol_source,\n                )\n\n                # Add the new embedding to the database\n                self.embedding_db.add(new_embedding)\n        except Exception as e:\n            if \"local\" not in symbol.uri:\n                logger.error(\"Updating embedding for symbol: %s failed with %s\" % (symbol, e))\n\n\n", "document": "# `SymbolCodeEmbeddingHandler`\n\n`SymbolCodeEmbeddingHandler` is a class that handles the embedding of symbols derived from source code. It interacts with a database to store the generated embeddings and uses the `EmbeddingsProvider` to obtain the embeddings. It supports the retrieval and update of embeddings, which includes generating new embeddings and handling existing embeddings if needed.\n\n## Overview\n\n`SymbolCodeEmbeddingHandler` provides a way to obtain and update embeddings for symbols using their source code. The class interacts with external databases to store generated embeddings and to apply changes when necessary. It also uses `EmbeddingsProvider` to build embeddings and handle related operations efficiently.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.embedding_types.EmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolCodeEmbeddingHandler`, update a symbol's embedding, and retrieve the embedding.\n\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\n# Create a SymbolCodeEmbeddingHandler instance\nembedding_db = YourVectorDatabaseProvider()\nembedding_provider = EmbeddingsProvider()\nhandler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n\n# Create a symbol\nsymbol = Symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\")\n\n# Update the symbol's embedding in the handler\nhandler.update_embedding(symbol)\n\n# Get the symbol's embedding\nsymbol_embedding = handler.get_embedding(symbol)\n```\n\n## Limitations\n\nThe primary limitation of `SymbolCodeEmbeddingHandler` is that it is tightly coupled with its collaborators such as the database and the embeddings provider. Any changes in these collaborators could require modifications to the class. Moreover, the late import of certain symbols for mocking purposes might make the code harder to understand and refactor.\n\n## Follow-up Questions:\n\n- How can we decouple `SymbolCodeEmbeddingHandler` from its collaborators?\n- Are there any plans to improve the import structure to have better readability and maintainability?", "summary": "`SymbolCodeEmbeddingHandler` is a class responsible for managing embeddings of symbols derived from source code. It interacts with a database to store and manipulate the embeddings, and makes use of the `EmbeddingsProvider` for obtaining them. The class supports retrieval and updating functionalities, allowing the generation of new embeddings or handling existing ones when needed. However, there are limitations due to its tight coupling with its collaborators, such as the database and embeddings provider.\n\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\n# Create a SymbolCodeEmbeddingHandler instance\nembedding_db = YourVectorDatabaseProvider()\nembedding_provider = EmbeddingsProvider()\nhandler = SymbolCodeEmbeddingHandler(embedding_db, embedding_provider)\n\n# Create a symbol\nsymbol = Symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\")\n\n# Update the symbol's embedding in the handler\nhandler.update_embedding(symbol)\n\n# Get the symbol's embedding\nsymbol_embedding = handler.get_embedding(symbol)\n```", "context": "\n    Generate the documentation for SymbolCodeEmbeddingHandler using the context shown below -\nContext for -\nautomata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n\n  Variables:\n    \n  Methods:\n    def __init__(\n            self,\n            embedding_db: VectorDatabaseProvider,\n            embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n        ):\n            \"\"\"\n            A constructor for SymbolCodeEmbeddingHandler\n    \n            Args:\n                embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                    get the embeddings from\n            \"\"\"\n            super().__init__(embedding_db, embedding_provider)\n    \n        \n    def get_embedding(self, symbol: Symbol) -> SymbolCodeEmbedding:\n            \"\"\"\n            Get the embedding of a symbol.\n    \n            Args:\n                symbol (Symbol): Symbol to get the embedding for\n    \n            Returns:\n                Embedding: The embedding of the symbol\n            \"\"\"\n            return self.embedding_db.get(symbol)\n    \n        \n    def update_embedding(self, symbol: Symbol):\n            \"\"\"\n            Update the embedding map with new symbols.\n    \n            Args:\n                symbols_to_update (List[Symbol]): List of symbols to update\n            \"\"\"\n            from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                convert_to_fst_object,\n            )\n    \n            desc_path_to_symbol = {\n                \".\".join([desc.name for desc in symbol.descriptors]): symbol\n                for symbol in self.embedding_db.get_all_symbols()\n            }\n            try:\n                symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n                symbol_source = str(convert_to_fst_object(symbol))\n                if symbol_desc_identifier in desc_path_to_symbol:\n                    logger.info(\n                        f\"Embedding already exists for symbol {symbol_desc_identifier}, updating ...\"\n                    )\n                    existing_embedding = self.embedding_db.get(\n                        desc_path_to_symbol[symbol_desc_identifier]\n                    )\n    \n                    if isinstance(existing_embedding, SymbolCodeEmbedding):\n                        # If the symbol is already in the embedding map, check if the source code is the same\n                        # If not, we can update the embedding\n                        if existing_embedding.source_code != symbol_source:\n                            logger.debug(\"Regenerating the embedding\")\n                            new_embedding = self.embedding_provider.build_embedding(symbol_source)\n                            existing_embedding.vector = new_embedding\n                            existing_embedding.source_code = symbol_source\n                            # Update the embedding in the database\n                            self.embedding_db.update(existing_embedding)\n                        elif existing_embedding.symbol != symbol:\n                            existing_embedding.symbol = symbol\n                            self.embedding_db.discard(existing_embedding.symbol)\n                            self.embedding_db.add(existing_embedding)\n                        # Otherwise, we don't need to do anything\n                        else:\n                            pass\n                else:\n                    # If the symbol does not exist in the embedding map, we add a new embedding\n                    logger.info(\n                        f\"Embedding does not exist for symbol {symbol_desc_identifier}, updating ...\"\n                    )\n                    symbol_embedding = self.embedding_provider.build_embedding(symbol_source)\n    \n                    new_embedding = SymbolCodeEmbedding(\n                        symbol=symbol,\n                        vector=symbol_embedding,\n                        source_code=symbol_source,\n                    )\n    \n                    # Add the new embedding to the database\n                    self.embedding_db.add(new_embedding)\n            except Exception as e:\n                if \"local\" not in symbol.uri:\n                    logger.error(\"Updating embedding for symbol: %s failed with %s\" % (symbol, e))\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol code\n        \n      Variables:\n        self.source_code=source_code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingHandler -\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Variables:\n        self.source_code=source_code\n        self.document=document\n        self.summary=summary\n        self.context=context\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n    \n      Variables:\n        self.embedding_db=embedding_db\n        self.embedding_provider=embedding_provider or EmbeddingsProvider()\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity -\n    \n      Variables:\n        self.embedding_handler=symbol_embedding_manager\n        self.embedding_provider=symbol_embedding_manager.embedding_provider\n        self.norm_type=norm_type\n        self.index_to_symbol={i: symbol for i, symbol in enumerate(supported_symbols)}\n        self.symbol_to_index={symbol: i for i, symbol in enumerate(supported_symbols)}\n        self.available_symbols=None\n        self.available_symbols=available_symbols\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.embedding.symbol_embedding`/SymbolDocEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.symbol_embedding", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDocEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDocEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n        code_embedding_fpath: Optional[str] = None,\n    ):\n        \"\"\"\n        A constructor for SymbolCodeEmbeddingHandler\n\n        Args:\n            embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n            embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n            code_embedding_fpath (Optional[str]): The path to the code embedding file\n        \"\"\"\n        from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n        from automata_docs.core.symbol.search.rank import SymbolRankConfig\n        from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n\n        super().__init__(embedding_db, embedding_provider)\n        if not code_embedding_fpath:\n            code_embedding_fpath = os.path.join(\n                config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n            )\n\n        graph = SymbolGraph()\n        subgraph = graph.get_rankable_symbol_subgraph()\n\n        code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n        code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n        symbol_similarity = SymbolSimilarity(code_embedding_handler)\n        self.graph = graph\n        self.symbol_search = SymbolSearch(\n            graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n        )\n\n    def get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding:\n        \"\"\"\n        Get the embedding of a symbol.\n        Args:\n            symbol (Symbol): Symbol to get the embedding for\n        Returns:\n            SymbolDocEmbedding: The embedding of the symbol documentation\n        \"\"\"\n        return self.embedding_db.get(symbol)\n\n    def build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding:\n        abbreviated_selected_symbol = symbol.uri.split(\"/\")[1].split(\"#\")[0]\n\n        def get_doc(prompt: str) -> str:\n            completion = openai.ChatCompletion.create(\n                model=\"gpt-4\",\n                messages=[\n                    {\n                        \"role\": \"user\",\n                        \"content\": prompt,\n                    }\n                ],\n            )\n            if not completion.choices:\n                return \"Error: No completion found\"\n\n            return completion.choices[0][\"message\"][\"content\"]\n\n        def get_summary(input_doc: str) -> str:\n            completion = openai.ChatCompletion.create(\n                model=\"gpt-4\",\n                messages=[\n                    {\n                        \"role\": \"user\",\n                        \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                    }\n                ],\n            )\n            if not completion.choices:\n                return \"Error: No completion found\"\n\n            return completion.choices[0][\"message\"][\"content\"]\n\n        # Splice the search results on the symbol\n        # with the search results biased on tests\n        # this is to get bias towards specific examples for the documentation\n        search_results_0 = self.symbol_search.symbol_rank_search(f\"{abbreviated_selected_symbol}\")\n        search_results_1 = self.symbol_search.symbol_rank_search(\n            f\"{abbreviated_selected_symbol} tests or conftest\"\n        )\n\n        search_list = []\n        for i in range(len(search_results_0)):\n            set_list = set(search_list)\n            if search_results_0[i] not in set_list:\n                search_list.append(search_results_0[i][0])\n            elif search_results_1[i] not in set_list:\n                search_list.append(search_results_1[i][0])\n\n        retriever = PyContextRetriever(self.graph)\n        retriever.process_symbol(symbol, search_list)\n        print(\"retriever.get_context_buffer(): \", retriever.get_context_buffer())\n\n        prompt = Template(DEFAULT_DOC_GENERATION_PROMPT).render(\n            symbol_dotpath=abbreviated_selected_symbol,\n            symbol_context=retriever.get_context_buffer(),\n        )\n\n        document = get_doc(prompt)\n        summary = get_summary(document)\n        embedding = self.embedding_provider.build_embedding(document)\n\n        return SymbolDocEmbedding(\n            symbol,\n            vector=embedding,\n            source_code=source_code,\n            document=document,\n            summary=summary,\n            context=prompt,\n        )\n\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"\n        Update the embedding map with new symbols.\n\n        Args:\n            symbols_to_update (List[Symbol]): List of symbols to update\n        Returns:\n            None\n        \"\"\"\n        from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n            convert_to_fst_object,\n        )\n\n        desc_path_to_symbol = {\n            \".\".join([desc.name for desc in symbol.descriptors]): symbol\n            for symbol in self.embedding_db.get_all_symbols()\n        }\n        try:\n            symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n            symbol_source_obj = convert_to_fst_object(symbol)\n            print(\"calling update embedding..\")\n            if symbol_desc_identifier in desc_path_to_symbol:\n                print(\"passing ...\")\n                pass\n            else:\n                new_embedding = self.build_symbol_doc_embedding(symbol, str(symbol_source_obj))\n                self.embedding_db.add(new_embedding)\n\n                print(\"new embedding = \", new_embedding)\n                # # If the symbol does not exist in the embedding map, we add a new embedding\n                # print(\"Adding a new symbol: %s\" % symbol)\n                # context_retriever = PyContextRetriever(self.graph)\n        except Exception as e:\n            logger.error(\"Failed to get source code for symbol %s\" % symbol)\n            # context_retriever.process_symbol(symbol, [])\n            # symbol_overview = context_retriever.message\n\n            # print(\"symbol_overview = \", symbol_overview)\n\n            # prompt = Template(DEFAULT_DOC_GENERATION_PROMPT).render(\n            #     symbol_dotpath=symbol.dotpath, symbol_overview=symbol_overview\n            # )\n            # print(\"document = \", prompt)\n\n            # new_embedding = SymbolCodeEmbedding(\n            #     symbol=symbol,\n            #     vector=symbol_embedding,\n            #     source_code=symbol_source,\n            # )\n\n            # # Add the new embedding to the database\n            # self.embedding_db.add(new_embedding)\n            # print(symbol_source)\n        # except Exception as e:\n        #     logger.error(\"Failed to get source code for symbol %s\" % symbol)\n        #     return\n        # from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n        #     convert_to_fst_object,\n        # )\n\n        # desc_path_to_symbol = {\n        #     \".\".join([desc.name for desc in symbol.descriptors]): symbol\n        #     for symbol in self.embedding_db.get_all_symbols()\n        # }\n        # try:\n        #     symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n        #     symbol_source = str(convert_to_fst_object(symbol))\n        #     if symbol_desc_identifier in desc_path_to_symbol:\n        #         existing_embedding = self.embedding_db.get(\n        #             desc_path_to_symbol[symbol_desc_identifier]\n        #         )\n\n        #         if isinstance(existing_embedding, SymbolCodeEmbedding):\n        #             # If the symbol is already in the embedding map, check if the source code is the same\n        #             # If not, we can update the embedding\n        #             if existing_embedding.source_code != symbol_source:\n        #                 logger.debug(\"Modifying existing embedding for symbol: %s\" % symbol)\n        #                 new_embedding = self.embedding_provider.build_embedding(symbol_source)\n        #                 existing_embedding.vector = new_embedding\n        #                 existing_embedding.source_code = symbol_source\n        #                 # Update the embedding in the database\n        #                 self.embedding_db.update(existing_embedding)\n        #     else:\n        #         # If the symbol does not exist in the embedding map, we add a new embedding\n        #         logger.debug(\"Adding a new symbol: %s\" % symbol)\n        #         symbol_embedding = self.embedding_provider.build_embedding(symbol_source)\n\n        #         new_embedding = SymbolCodeEmbedding(\n        #             symbol=symbol,\n        #             vector=symbol_embedding,\n        #             source_code=symbol_source,\n        #         )\n\n        #         # Add the new embedding to the database\n        #         self.embedding_db.add(new_embedding)\n        # except Exception as e:\n        #     if \"local\" not in symbol.uri:\n        #         logger.error(\"Updating embedding for symbol: %s failed with %s\" % (symbol, e))\n", "document": "# SymbolDocEmbeddingHandler\n\n`SymbolDocEmbeddingHandler` is a class that manages the creation, retrieval, and updating of embeddings for symbol documentations. It inherits from the `EmbeddingHandler` and extends its functionality to work specifically with symbol documentations. The class uses a `SymbolGraph`, `SymbolSearch`, and various external APIs to generate context, document, and summary for a given symbol, as well as an embedding representing the information.\n\n## Overview\n\nThe `SymbolDocEmbeddingHandler` class initializes various components needed to manage symbol documentations' embeddings. It has methods to build symbol document embeddings using natural language model (e.g. GPT-4) and helper methods to generate document and summary from the generated context. The class also provides methods to retrieve and update embeddings for a particular symbol.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.core.symbol.search.rank.SymbolRankConfig`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n\n## Example\n\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolDocEmbeddingHandler\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\n# Initialize the SymbolDocEmbeddingHandler\nembedding_handler = SymbolDocEmbeddingHandler(embedding_db, embedding_provider)\nsymbol = Symbol(...)  # some Symbol object\nsource_code = \"example source code\"\n\n# Build the symbol document embedding\nsymbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(symbol, source_code)\n\n# Retrieve the embedding of a symbol\nsymbol_embedding = embedding_handler.get_embedding(symbol)\n\n# Update the embedding for a symbol\nembedding_handler.update_embedding(symbol)\n```\n\n## Limitations\n\nThe `SymbolDocEmbeddingHandler` relies on external APIs for generating context, document, and summary, which can introduce latency and inaccuracy. Additionally, the generation of context and search results depends on the underlying `SymbolGraph` and `SymbolSearch` and can be influenced by biases towards specific examples.\n\n## Follow-up Questions:\n\n- Can the `SymbolDocEmbeddingHandler` be further optimized to reduce the dependence on external APIs?\n- How can we improve the context generation and search results to provide more accurate and diverse examples in the symbol documentations?", "summary": "`SymbolDocEmbeddingHandler` is a class that extends the functionality of the `EmbeddingHandler` to manage embeddings for symbol documentations. It uses a `SymbolGraph`, `SymbolSearch`, and external APIs to generate context, document, summary, and embeddings for a given symbol. The class initializes components and provides methods to build, retrieve, and update symbol document embeddings. However, it has limitations such as reliance on external APIs for context generation, and potential biases in search results.\n\nExample:\n\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolDocEmbeddingHandler\nfrom automata_docs.core.symbol.symbol_types import Symbol\n\nembedding_handler = SymbolDocEmbeddingHandler(embedding_db, embedding_provider)\nsymbol = Symbol(...)\nsource_code = \"example source code\"\n\nsymbol_doc_embedding = embedding_handler.build_symbol_doc_embedding(symbol, source_code)\nsymbol_embedding = embedding_handler.get_embedding(symbol)\nembedding_handler.update_embedding(symbol)\n```\nPossible improvements include optimizing the handler to reduce dependence on external APIs and improving context generation to provide more accurate and diverse examples.", "context": "\n    Generate the documentation for SymbolDocEmbeddingHandler using the context shown below -\nContext for -\nautomata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n\n  Variables:\n    self.graph=graph\n    self.symbol_search=SymbolSearch(\n                graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n            )\n    \n  Methods:\n    def __init__(\n            self,\n            embedding_db: VectorDatabaseProvider,\n            embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            code_embedding_fpath: Optional[str] = None,\n        ):\n            \"\"\"\n            A constructor for SymbolCodeEmbeddingHandler\n    \n            Args:\n                embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                code_embedding_fpath (Optional[str]): The path to the code embedding file\n            \"\"\"\n            from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n            from automata_docs.core.symbol.search.rank import SymbolRankConfig\n            from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n    \n            super().__init__(embedding_db, embedding_provider)\n            if not code_embedding_fpath:\n                code_embedding_fpath = os.path.join(\n                    config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                )\n    \n            graph = SymbolGraph()\n            subgraph = graph.get_rankable_symbol_subgraph()\n    \n            code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n            code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n            symbol_similarity = SymbolSimilarity(code_embedding_handler)\n            self.graph = graph\n            self.symbol_search = SymbolSearch(\n                graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n            )\n    \n        \n    def build_symbol_doc_embedding(self, symbol: Symbol, source_code: str) -> SymbolDocEmbedding:\n            abbreviated_selected_symbol = symbol.uri.split(\"/\")[1].split(\"#\")[0]\n    \n            def get_doc(prompt: str) -> str:\n                completion = openai.ChatCompletion.create(\n                    model=\"gpt-4\",\n                    messages=[\n                        {\n                            \"role\": \"user\",\n                            \"content\": prompt,\n                        }\n                    ],\n                )\n                if not completion.choices:\n                    return \"Error: No completion found\"\n    \n                return completion.choices[0][\"message\"][\"content\"]\n    \n            def get_summary(input_doc: str) -> str:\n                completion = openai.ChatCompletion.create(\n                    model=\"gpt-4\",\n                    messages=[\n                        {\n                            \"role\": \"user\",\n                            \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                        }\n                    ],\n                )\n                if not completion.choices:\n                    return \"Error: No completion found\"\n    \n                return completion.choices[0][\"message\"][\"content\"]\n    \n            # Splice the search results on the symbol\n            # with the search results biased on tests\n            # this is to get bias towards specific examples for the documentation\n            search_results_0 = self.symbol_search.symbol_rank_search(f\"{abbreviated_selected_symbol}\")\n            search_results_1 = self.symbol_search.symbol_rank_search(\n                f\"{abbreviated_selected_symbol} tests or conftest\"\n            )\n    \n            search_list = []\n            for i in range(len(search_results_0)):\n                set_list = set(search_list)\n                if search_results_0[i] not in set_list:\n                    search_list.append(search_results_0[i][0])\n                elif search_results_1[i] not in set_list:\n                    search_list.append(search_results_1[i][0])\n    \n            retriever = PyContextRetriever(self.graph)\n            retriever.process_symbol(symbol, search_list)\n            print(\"retriever.get_context_buffer(): \", retriever.get_context_buffer())\n    \n            prompt = Template(DEFAULT_DOC_GENERATION_PROMPT).render(\n                symbol_dotpath=abbreviated_selected_symbol,\n                symbol_context=retriever.get_context_buffer(),\n            )\n    \n            document = get_doc(prompt)\n            summary = get_summary(document)\n            embedding = self.embedding_provider.build_embedding(document)\n    \n            return SymbolDocEmbedding(\n                symbol,\n                vector=embedding,\n                source_code=source_code,\n                document=document,\n                summary=summary,\n                context=prompt,\n            )\n    \n        \n    def get_doc(prompt: str) -> str:\n                completion = openai.ChatCompletion.create(\n                    model=\"gpt-4\",\n                    messages=[\n                        {\n                            \"role\": \"user\",\n                            \"content\": prompt,\n                        }\n                    ],\n                )\n                if not completion.choices:\n                    return \"Error: No completion found\"\n    \n                return completion.choices[0][\"message\"][\"content\"]\n    \n            \n    def get_embedding(self, symbol: Symbol) -> SymbolDocEmbedding:\n            \"\"\"\n            Get the embedding of a symbol.\n            Args:\n                symbol (Symbol): Symbol to get the embedding for\n            Returns:\n                SymbolDocEmbedding: The embedding of the symbol documentation\n            \"\"\"\n            return self.embedding_db.get(symbol)\n    \n        \n    def get_summary(input_doc: str) -> str:\n                completion = openai.ChatCompletion.create(\n                    model=\"gpt-4\",\n                    messages=[\n                        {\n                            \"role\": \"user\",\n                            \"content\": f\"Condense the documentation below down to one to two concise paragraphs:\\n {input_doc}\\nIf there is an example, include that in full in the output.\",\n                        }\n                    ],\n                )\n                if not completion.choices:\n                    return \"Error: No completion found\"\n    \n                return completion.choices[0][\"message\"][\"content\"]\n    \n            # Splice the search results on the symbol\n            # with the search results biased on tests\n            # this is to get bias towards specific examples for the documentation\n            \n    def update_embedding(self, symbol: Symbol):\n            \"\"\"\n            Update the embedding map with new symbols.\n    \n            Args:\n                symbols_to_update (List[Symbol]): List of symbols to update\n            Returns:\n                None\n            \"\"\"\n            from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n                convert_to_fst_object,\n            )\n    \n            desc_path_to_symbol = {\n                \".\".join([desc.name for desc in symbol.descriptors]): symbol\n                for symbol in self.embedding_db.get_all_symbols()\n            }\n            try:\n                symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n                symbol_source_obj = convert_to_fst_object(symbol)\n                print(\"calling update embedding..\")\n                if symbol_desc_identifier in desc_path_to_symbol:\n                    print(\"passing ...\")\n                    pass\n                else:\n                    new_embedding = self.build_symbol_doc_embedding(symbol, str(symbol_source_obj))\n                    self.embedding_db.add(new_embedding)\n    \n                    print(\"new embedding = \", new_embedding)\n                    # # If the symbol does not exist in the embedding map, we add a new embedding\n                    # print(\"Adding a new symbol: %s\" % symbol)\n                    # context_retriever = PyContextRetriever(self.graph)\n            except Exception as e:\n                logger.error(\"Failed to get source code for symbol %s\" % symbol)\n                # context_retriever.process_symbol(symbol, [])\n                # symbol_overview = context_retriever.message\n    \n                # print(\"symbol_overview = \", symbol_overview)\n    \n                # prompt = Template(DEFAULT_DOC_GENERATION_PROMPT).render(\n                #     symbol_dotpath=symbol.dotpath, symbol_overview=symbol_overview\n                # )\n                # print(\"document = \", prompt)\n    \n                # new_embedding = SymbolCodeEmbedding(\n                #     symbol=symbol,\n                #     vector=symbol_embedding,\n                #     source_code=symbol_source,\n                # )\n    \n                # # Add the new embedding to the database\n                # self.embedding_db.add(new_embedding)\n                # print(symbol_source)\n            # except Exception as e:\n            #     logger.error(\"Failed to get source code for symbol %s\" % symbol)\n            #     return\n            # from automata_docs.core.symbol.symbol_utils import (  # imported late for mocking\n            #     convert_to_fst_object,\n            # )\n    \n            # desc_path_to_symbol = {\n            #     \".\".join([desc.name for desc in symbol.descriptors]): symbol\n            #     for symbol in self.embedding_db.get_all_symbols()\n            # }\n            # try:\n            #     symbol_desc_identifier = \".\".join([desc.name for desc in symbol.descriptors])\n            #     symbol_source = str(convert_to_fst_object(symbol))\n            #     if symbol_desc_identifier in desc_path_to_symbol:\n            #         existing_embedding = self.embedding_db.get(\n            #             desc_path_to_symbol[symbol_desc_identifier]\n            #         )\n    \n            #         if isinstance(existing_embedding, SymbolCodeEmbedding):\n            #             # If the symbol is already in the embedding map, check if the source code is the same\n            #             # If not, we can update the embedding\n            #             if existing_embedding.source_code != symbol_source:\n            #                 logger.debug(\"Modifying existing embedding for symbol: %s\" % symbol)\n            #                 new_embedding = self.embedding_provider.build_embedding(symbol_source)\n            #                 existing_embedding.vector = new_embedding\n            #                 existing_embedding.source_code = symbol_source\n            #                 # Update the embedding in the database\n            #                 self.embedding_db.update(existing_embedding)\n            #     else:\n            #         # If the symbol does not exist in the embedding map, we add a new embedding\n            #         logger.debug(\"Adding a new symbol: %s\" % symbol)\n            #         symbol_embedding = self.embedding_provider.build_embedding(symbol_source)\n    \n            #         new_embedding = SymbolCodeEmbedding(\n            #             symbol=symbol,\n            #             vector=symbol_embedding,\n            #             source_code=symbol_source,\n            #         )\n    \n            #         # Add the new embedding to the database\n            #         self.embedding_db.add(new_embedding)\n            # except Exception as e:\n            #     if \"local\" not in symbol.uri:\n            #         logger.error(\"Updating embedding for symbol: %s failed with %s\" % (symbol, e))\n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Variables:\n        self.source_code=source_code\n        self.document=document\n        self.summary=summary\n        self.context=context\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingHandler -\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n    \n      Variables:\n        self.embedding_db=embedding_db\n        self.embedding_provider=embedding_provider or EmbeddingsProvider()\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n      \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n    \n      Class Docstring:\n        Inner doc strings\n        \n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.embedding.symbol_embedding`/SymbolEmbeddingHandler#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.symbol_embedding", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolEmbeddingHandler", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class SymbolEmbeddingHandler(EmbeddingHandler):\n    def __init__(\n        self,\n        embedding_db: VectorDatabaseProvider,\n        embedding_provider: Optional[EmbeddingsProvider],\n    ):\n        \"\"\"\n        A constructor for SymbolEmbeddingHandler\n\n        Args:\n            embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n            embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n        \"\"\"\n        self.embedding_db = embedding_db\n        self.embedding_provider = embedding_provider or EmbeddingsProvider()\n\n    def get_all_supported_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Get all the symbols that are supported by the embedding provider.\n\n        Returns:\n            List[Symbol]: A list of all the symbols that are supported by the embedding provider\n        \"\"\"\n        return self.embedding_db.get_all_symbols()\n\n    @abc.abstractmethod\n    def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n        \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update_embedding(self, symbol: Symbol):\n        \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n        pass\n\n\n", "document": "# SymbolEmbeddingHandler\n\n`SymbolEmbeddingHandler` is a base class for handling symbol embeddings in the Automata codebase. It provides methods to get and update embeddings for a given symbol, while also supporting retrieval of all supported symbols from the embedding provider. Derived classes are expected to implement the abstract methods to get and update the embeddings.\n\n## Related Symbols\n\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.embedding_types.EmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.symbol.symbol_types.SymbolDocEmbedding`\n- `automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding`\n\n## Example\n\nThe following example demonstrates how to create a custom `SymbolEmbeddingHandler` implementation to handle symbol embeddings.\n\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolEmbeddingHandler\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\nfrom automata_docs.core.embedding.embedding_types import VectorDatabaseProvider, EmbeddingsProvider\n\nclass CustomSymbolEmbeddingHandler(SymbolEmbeddingHandler):\n    def __init__(self, embedding_db: VectorDatabaseProvider, embedding_provider: EmbeddingsProvider):\n        super().__init__(embedding_db, embedding_provider)\n\n    def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n        # Custom implementation to get the embedding for a symbol\n        pass\n\n    def update_embedding(self, symbol: Symbol):\n        # Custom implementation to update the embedding for a symbol\n        pass\n\n# Instantiate the custom handler\ncustom_handler = CustomSymbolEmbeddingHandler(embedding_db, embedding_provider)\n```\n\n## Limitations\n\nAs `SymbolEmbeddingHandler` is an abstract base class, it cannot be instantiated directly, and it requires derived classes to implement its abstract methods. The abstract nature ensures that the derived class provides the appropriate methods but does not enforce common canonical behavior for handling embeddings.\n\n## Follow-up Questions:\n\n- Are there any canonical implementations of `SymbolEmbeddingHandler` that could be used as a starting point when creating a custom handler?", "summary": "`SymbolEmbeddingHandler` is a base class in the Automata codebase that manages symbol embeddings. It allows for getting and updating embeddings for specific symbols and retrieving all supported symbols from the embedding provider. Derived classes need to implement the abstract methods for getting and updating embeddings. \n\nHowever, `SymbolEmbeddingHandler` cannot be instantiated directly as it is an abstract base class. The abstract nature ensures that the derived class provides the appropriate methods but does not enforce a common behavior for handling embeddings. To create a custom `SymbolEmbeddingHandler` implementation, follow the example provided in the original documentation.", "context": "\n    Generate the documentation for SymbolEmbeddingHandler using the context shown below -\nContext for -\nautomata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n\n  Variables:\n    self.embedding_db=embedding_db\n    self.embedding_provider=embedding_provider or EmbeddingsProvider()\n    \n  Methods:\n    def __init__(\n            self,\n            embedding_db: VectorDatabaseProvider,\n            embedding_provider: Optional[EmbeddingsProvider],\n        ):\n            \"\"\"\n            A constructor for SymbolEmbeddingHandler\n    \n            Args:\n                embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n            \"\"\"\n            self.embedding_db = embedding_db\n            self.embedding_provider = embedding_provider or EmbeddingsProvider()\n    \n        \n    def get_all_supported_symbols(self) -> List[Symbol]:\n            \"\"\"\n            Get all the symbols that are supported by the embedding provider.\n    \n            Returns:\n                List[Symbol]: A list of all the symbols that are supported by the embedding provider\n            \"\"\"\n            return self.embedding_db.get_all_symbols()\n    \n        \n    @abc.abstractmethod\n        def get_embedding(self, symbol: Symbol) -> SymbolEmbedding:\n            \"\"\"An abstract method to get the embedding for a symbol\"\"\"\n            pass\n    \n        \n    @abc.abstractmethod\n        def update_embedding(self, symbol: Symbol):\n            \"\"\"An abstract method to update the embedding for a symbol\"\"\"\n            pass\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingHandler -\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Variables:\n        self.source_code=source_code\n        self.document=document\n        self.summary=summary\n        self.context=context\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol code\n        \n      Variables:\n        self.source_code=source_code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n        \n        \n        \n      automata_docs.tests.unit.test_symbol_embedding.test_get_embedding\n      \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingsProvider methods\n            mock_provider = Mock(EmbeddingsProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], mock_embedding, \"symbol_source\"\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.embedding.symbol_similarity`/SymbolSimilarity#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.embedding.symbol_similarity", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolSimilarity", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class SymbolSimilarity(EmbeddingSimilarity):\n    def __init__(\n        self,\n        symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n        norm_type: NormType = NormType.L2,\n    ):\n        \"\"\"\n        Initialize SymbolSimilarity\n\n        Args:\n            symbol_embedding_manager: A CodeEmbeddingManager\n            norm_type (NormType): The norm type to use for calculating similarity\n\n        Returns:\n            An instance of SymbolSimilarity\n        \"\"\"\n        self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n        self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n        self.norm_type = norm_type\n        supported_symbols = self.embedding_handler.get_all_supported_symbols()\n        self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n        self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n        self.available_symbols: Optional[Set[Symbol]] = None\n\n    def set_available_symbols(self, available_symbols: Set[Symbol]):\n        \"\"\"\n        Set the available symbols to use for similarity calculation\n\n        Args:\n            available_symbols (Set[Symbol]): The available symbols to\n                use for similarity calculation\n        \"\"\"\n        self.available_symbols = available_symbols\n\n    def get_available_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Set the available symbols to use for similarity calculation\n\n        Args:\n            available_symbols (Set[Symbol]): The available symbols to\n                use for similarity calculation\n        \"\"\"\n        return [\n            symbol\n            for symbol in self.symbol_to_index\n            if not self.available_symbols or symbol in self.available_symbols\n        ]\n\n    def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n        \"\"\"\n        Get the similarity scores of all symbols for the query_text\n\n        Args:\n            query_text (str): The query text\n\n        Returns:\n            A dictionary mapping each symbol's uri to its similarity score with the query\n        \"\"\"\n        query_embedding = self.embedding_provider.build_embedding(query_text)\n\n        # Compute the similarity of the query to all symbols\n        similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n\n        similarity_dict = {\n            self.index_to_symbol[i]: similarity_scores[i]\n            for i in range(len(self.index_to_symbol))\n            if (not self.available_symbols) or self.index_to_symbol[i] in self.available_symbols\n        }\n        return similarity_dict\n\n    def get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]:\n        \"\"\"\n        Get the k most similar symbols to the query_text\n        Args:\n            query_text (str): The query text\n            k (int): The number of similar symbols to return\n        Returns:\n            A dictionary mapping the k most similar symbols to their similarity score\n        \"\"\"\n        query_embedding = self.embedding_provider.build_embedding(query_text)\n        # Compute the similarity of the query to all symbols\n        similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n\n        if self.available_symbols is not None:\n            # Filter the indices by available symbols\n            available_indices = [\n                i\n                for i in range(len(self.index_to_symbol))\n                if self.index_to_symbol[i] in self.available_symbols\n            ]\n            # Get the similarity scores for the available symbols\n            available_similarity_scores = similarity_scores[available_indices]\n            # Get the indices of the k symbols with the highest similarity scores among the available symbols\n            top_k_indices_in_available = np.argsort(available_similarity_scores)[-k:]\n            # Convert these indices back to the indices in the original list of symbols\n            top_k_indices = [available_indices[i] for i in top_k_indices_in_available]\n        else:\n            # Get the indices of the k symbols with the highest similarity scores\n            top_k_indices = np.argsort(similarity_scores)[-k:]\n\n        # Return the corresponding symbols\n        return {\n            self.index_to_symbol[index]: similarity_scores[index]\n            for index in reversed(top_k_indices)\n        }\n\n    def _get_ordered_embeddings(self) -> np.ndarray:\n        \"\"\"\n        Get the embeddings in the correct order\n\n        Returns:\n            A numpy array containing the ordered embeddings\n        \"\"\"\n        return np.array(\n            [\n                self.embedding_handler.get_embedding(symbol).vector\n                for symbol in self.index_to_symbol.values()\n            ]\n        )\n\n    def _calculate_query_similarity_vec(self, query_embedding: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Calculate the similarity scores of the query embedding with all symbol embeddings\n        Args:\n            query_embedding (np.ndarray): The query embedding\n            norm_type (str): The type of normalization ('l2' for L2 norm, 'softmax' for softmax)\n        Returns:\n            A numpy array containing the similarity scores\n        \"\"\"\n        embeddings = self._get_ordered_embeddings()\n\n        # Normalize the embeddings and the query embedding\n        embeddings_norm = self._normalize_embeddings(embeddings, self.norm_type)\n        query_embedding_norm = self._normalize_embeddings(\n            query_embedding[np.newaxis, :], self.norm_type\n        )[0]\n\n        # Compute the dot product between normalized embeddings and query\n        similarity_scores = np.dot(embeddings_norm, query_embedding_norm)\n\n        return similarity_scores\n\n    @staticmethod\n    def _normalize_embeddings(embeddings: np.ndarray, norm_type: NormType) -> np.ndarray:\n        \"\"\"\n        Normalize the embeddings.\n        Args:\n            embeddings (np.ndarray): The embeddings\n            norm_type (NormType): The type of normalization (L1, L2, or softmax)\n        Returns:\n            The normalized embeddings\n        \"\"\"\n        if norm_type == NormType.L1:\n            norm = np.sum(np.abs(embeddings), axis=1, keepdims=True)\n            return embeddings / norm\n        elif norm_type == NormType.L2:\n            return embeddings / np.linalg.norm(embeddings, axis=1, keepdims=True)\n        elif norm_type == NormType.SOFTMAX:\n            e_x = np.exp(embeddings - np.max(embeddings, axis=1, keepdims=True))\n            return e_x / np.sum(e_x, axis=1, keepdims=True)\n        else:\n            raise ValueError(f\"Invalid normalization type {norm_type}\")\n", "document": "# SymbolSimilarity\n\n`SymbolSimilarity` is a class that calculates the similarity between a given query text and a set of supported symbols. It uses embeddings to represent each symbol and the query text and computes the similarity scores between the embeddings. The similarity scores can be used, for example, to find the closest symbols to the query text in a search context.\n\n## Overview\n\nThe `SymbolSimilarity` class holds an instance of `SymbolCodeEmbeddingHandler` and maintains dictionaries for mapping symbols to indices and vice versa. It also provides methods for retrieving available symbols, computing the similarity between the query text and symbols, and getting the nearest entries for a given query. The class has the ability to filter the list of available symbols, which can be helpful in cases where only a specific set of symbols is of interest.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.embedding_types.EmbeddingSimilarity`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.database.vector.VectorDatabaseProvider`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.symbol.symbol_types.SymbolReference`\n\n## Example\n\nThe following example demonstrates how to create and use an instance of `SymbolSimilarity` to find the most similar symbol to a given query text.\n\n```python\nfrom automata_docs.core.embedding.symbol_embedding import SymbolCodeEmbeddingHandler\nfrom automata_docs.core.database.vector import JSONVectorDatabase\nfrom automata_docs.core.embedding.embedding_types import EmbeddingsProvider, SymbolCodeEmbedding\nfrom automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\nimport numpy as np\n\n# Initialize an instance of JSONVectorDatabase\ntemp_output_filename = \"dummy_embedding_database.json\"\nembedding_db = JSONVectorDatabase(temp_output_filename)\n\n# Create an instance of SymbolCodeEmbeddingHandler\nmock_provider = EmbeddingsProvider()\ncem = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=mock_provider)\n\n# Create an instance of SymbolSimilarity\nsymbol_similarity = SymbolSimilarity(cem)\n\n# Add embeddings to the SymbolCodeEmbeddingHandler\nsymbol = \"dummy_symbol\"\nvector = np.array([1, 0, 0, 0])\nembedding = SymbolCodeEmbedding(symbol=symbol, vector=vector, source_code=\"symbol\")\ncem.add_embedding(embedding)\n\n# Find the most similar symbol for a given query text\nquery_text = \"dummy_query\"\ncem.embedding_provider.build_embedding.return_value = np.array([1, 0, 0, 0])\nresult = symbol_similarity.get_nearest_entries_for_query(query_text, k=1)\nassert list(result.keys()) == [symbol]\n```\n\n## Limitations\n\nThe `SymbolSimilarity` class relies on the usage of embeddings to represent symbols and query texts. As a result, its performance depends on the quality of the embeddings. Moreover, the similarity metric assumes that embeddings are continuous, high-dimensional vectors that may not be appropriate for all use cases. In addition, the system does not consider the context of symbols, which may result in false positives or negatives in identifying relevant symbols.\n\n## Follow-up Questions:\n\n- How can we improve the quality of the embeddings to better represent the symbols and their relationships?\n- Are there alternative similarity metrics that could be more suitable for calculating symbol similarity in certain cases?\n- How can we incorporate contextual information into the similarity calculation to improve the relevance of the results?", "summary": "`SymbolSimilarity` is a class that calculates the similarity between a given query text and a set of supported symbols using embeddings. It holds an instance of `SymbolCodeEmbeddingHandler` and maintains dictionaries for mapping symbols to indices and vice versa. The class provides methods for retrieving available symbols, computing similarity between the query text and symbols, and obtaining the nearest entries for a specific query. It also filters the list of available symbols if needed.\n\nThe performance of `SymbolSimilarity` depends on the quality of the embeddings it uses to represent symbols and query texts. Its similarity metric assumes continuous, high-dimensional vectors, which may not be suitable for all use cases. Moreover, it does not consider the context of symbols, potentially leading to false positives or negatives in identifying relevant symbols. Improving embedding quality, exploring alternative similarity metrics, and incorporating contextual information could be potential future enhancements.", "context": "\n    Generate the documentation for SymbolSimilarity using the context shown below -\nContext for -\nautomata_docs.core.embedding.symbol_similarity.SymbolSimilarity -\n\n  Variables:\n    self.embedding_handler=symbol_embedding_manager\n    self.embedding_provider=symbol_embedding_manager.embedding_provider\n    self.norm_type=norm_type\n    self.index_to_symbol={i: symbol for i, symbol in enumerate(supported_symbols)}\n    self.symbol_to_index={symbol: i for i, symbol in enumerate(supported_symbols)}\n    self.available_symbols=None\n    self.available_symbols=available_symbols\n    \n  Methods:\n    def __init__(\n            self,\n            symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n            norm_type: NormType = NormType.L2,\n        ):\n            \"\"\"\n            Initialize SymbolSimilarity\n    \n            Args:\n                symbol_embedding_manager: A CodeEmbeddingManager\n                norm_type (NormType): The norm type to use for calculating similarity\n    \n            Returns:\n                An instance of SymbolSimilarity\n            \"\"\"\n            self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n            self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n            self.norm_type = norm_type\n            supported_symbols = self.embedding_handler.get_all_supported_symbols()\n            self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n            self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n            self.available_symbols: Optional[Set[Symbol]] = None\n    \n        \n    def get_available_symbols(self) -> List[Symbol]:\n            \"\"\"\n            Set the available symbols to use for similarity calculation\n    \n            Args:\n                available_symbols (Set[Symbol]): The available symbols to\n                    use for similarity calculation\n            \"\"\"\n            return [\n                symbol\n                for symbol in self.symbol_to_index\n                if not self.available_symbols or symbol in self.available_symbols\n            ]\n    \n        \n    def get_nearest_entries_for_query(self, query_text: str, k: int = 10) -> Dict[Symbol, float]:\n            \"\"\"\n            Get the k most similar symbols to the query_text\n            Args:\n                query_text (str): The query text\n                k (int): The number of similar symbols to return\n            Returns:\n                A dictionary mapping the k most similar symbols to their similarity score\n            \"\"\"\n            query_embedding = self.embedding_provider.build_embedding(query_text)\n            # Compute the similarity of the query to all symbols\n            similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n    \n            if self.available_symbols is not None:\n                # Filter the indices by available symbols\n                available_indices = [\n                    i\n                    for i in range(len(self.index_to_symbol))\n                    if self.index_to_symbol[i] in self.available_symbols\n                ]\n                # Get the similarity scores for the available symbols\n                available_similarity_scores = similarity_scores[available_indices]\n                # Get the indices of the k symbols with the highest similarity scores among the available symbols\n                top_k_indices_in_available = np.argsort(available_similarity_scores)[-k:]\n                # Convert these indices back to the indices in the original list of symbols\n                top_k_indices = [available_indices[i] for i in top_k_indices_in_available]\n            else:\n                # Get the indices of the k symbols with the highest similarity scores\n                top_k_indices = np.argsort(similarity_scores)[-k:]\n    \n            # Return the corresponding symbols\n            return {\n                self.index_to_symbol[index]: similarity_scores[index]\n                for index in reversed(top_k_indices)\n            }\n    \n        \n    def get_query_similarity_dict(self, query_text: str) -> Dict[Symbol, float]:\n            \"\"\"\n            Get the similarity scores of all symbols for the query_text\n    \n            Args:\n                query_text (str): The query text\n    \n            Returns:\n                A dictionary mapping each symbol's uri to its similarity score with the query\n            \"\"\"\n            query_embedding = self.embedding_provider.build_embedding(query_text)\n    \n            # Compute the similarity of the query to all symbols\n            similarity_scores = self._calculate_query_similarity_vec(query_embedding)\n    \n            similarity_dict = {\n                self.index_to_symbol[i]: similarity_scores[i]\n                for i in range(len(self.index_to_symbol))\n                if (not self.available_symbols) or self.index_to_symbol[i] in self.available_symbols\n            }\n            return similarity_dict\n    \n        \n    def set_available_symbols(self, available_symbols: Set[Symbol]):\n            \"\"\"\n            Set the available symbols to use for similarity calculation\n    \n            Args:\n                available_symbols (Set[Symbol]): The available symbols to\n                    use for similarity calculation\n            \"\"\"\n            self.available_symbols = available_symbols\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingSimilarity -\n    \n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                symbol_embedding_manager: EmbeddingHandler,\n                norm_type: Optional[NormType],\n            ):\n                \"\"\"An abstract constructor for EmbeddingSimilarity\"\"\"\n                pass\n        \n            \n      automata_docs.tests.unit.conftest.symbol_searcher\n      \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n    Context for -\n    automata_docs.core.symbol.search.symbol_search.SymbolSearch -\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Variables:\n        self.symbol_graph=symbol_graph\n        self.symbol_similarity=symbol_similarity\n        self.symbol_rank=SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n      automata_docs.tests.unit.test_symbol_similarity.test_get_nearest_symbols_for_query\n      \n        def test_get_nearest_symbols_for_query(\n            monkeypatch, mock_embedding, mock_simple_method_symbols, temp_output_filename\n        ):\n            # Mocking symbols and their embeddings\n            symbol1 = mock_simple_method_symbols[0]\n            symbol2 = mock_simple_method_symbols[1]\n            symbol3 = mock_simple_method_symbols[2]\n        \n            embedding1 = SymbolCodeEmbedding(\n                symbol=symbol1, vector=np.array([1, 0, 0, 0]), source_code=\"symbol1\"\n            )\n            embedding2 = SymbolCodeEmbedding(\n                symbol=symbol2, vector=np.array([0, 1, 0, 0]), source_code=\"symbol2\"\n            )\n            embedding3 = SymbolCodeEmbedding(\n                symbol=symbol3, vector=np.array([0, 0, 1, 0]), source_code=\"symbol3\"\n            )\n        \n            # Mock JSONVectorDatabase methods\n            embedding_db = JSONVectorDatabase(temp_output_filename)\n            embedding_db.add(embedding1)\n            embedding_db.add(embedding2)\n            embedding_db.add(embedding3)\n        \n            # Create an instance of the class\n            mock_provider = MagicMock(EmbeddingsProvider)\n            cem = SymbolCodeEmbeddingHandler(embedding_db=embedding_db, embedding_provider=mock_provider)\n        \n            symbol_similarity = SymbolSimilarity(cem)\n        \n            # Test with query_text that is most similar to symbol1\n            cem.embedding_provider.build_embedding.return_value = np.array([1, 0, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol1\", k=1)\n            assert list(result.keys()) == [symbol1]\n        \n            # Test with query_text that is most similar to symbol2\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 1, 0, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol2\", k=1)\n            assert list(result.keys()) == [symbol2]\n        \n            # Test with query_text that is most similar to symbol3\n            cem.embedding_provider.build_embedding.return_value = np.array([0, 0, 1, 0])\n            result = symbol_similarity.get_nearest_entries_for_query(\"symbol3\", k=1)\n            assert list(result.keys()) == [symbol3]\n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.database.vector.VectorDatabaseProvider -\n    \n      Class Docstring:\n        Abstract base class for different types of vector database providers.\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolReference -\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.graph`/GraphBuilder#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "GraphBuilder", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class GraphBuilder:\n    \"\"\"\n    Builds a symbol graph from an Index.\n    \"\"\"\n\n    def __init__(self, index: Index, build_caller_relationships: bool = False):\n        \"\"\"\n        Args:\n            index (Index): An Index object\n            build_caller_relationships (bool, optional): Whether to build\n                caller-callee relationships. Defaults to False.\n        \"\"\"\n        self.index = index\n        self.build_caller_relationships = build_caller_relationships\n        self._graph = nx.MultiDiGraph()\n\n    def build_graph(self):\n        \"\"\"\n        Builds the graph from the index\n        \"\"\"\n        for document in self.index.documents:\n            self._add_file_vertices(document)\n            self._add_symbol_vertices(document)\n            self._process_relationships(document)\n            self._process_occurrences(document)\n            if self.build_caller_relationships:\n                self._process_caller_callee_relationships(document)\n\n        return self._graph\n\n    def _add_file_vertices(self, document: Any):\n        \"\"\"\n        Adds the file vertices to the graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        self._graph.add_node(\n            document.relative_path,\n            file=SymbolFile(document.relative_path, occurrences=document.occurrences),\n            label=\"file\",\n        )\n\n    def _add_symbol_vertices(self, document: Any):\n        \"\"\"\n        Adds the symbol vertices to the graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        for symbol_information in document.symbols:\n            try:\n                symbol = parse_symbol(symbol_information.symbol)\n            except Exception as e:\n                logger.error(f\"Parsing symbol {symbol_information.symbol} failed with error {e}\")\n                continue\n\n            self._graph.add_node(symbol, label=\"symbol\")\n            self._graph.add_edge(document.relative_path, symbol, label=\"contains\")\n\n    def _process_relationships(self, document: Any):\n        \"\"\"\n        Processes the relationships in the local graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        for symbol_information in document.symbols:\n            relationship_manager = _RelationshipManager(self._graph, symbol_information)\n            relationship_manager.process()\n\n    def _process_occurrences(self, document: Any):\n        \"\"\"\n        Processes the occurrences in the local graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        occurrence_manager = _OccurrenceManager(self._graph, document)\n        occurrence_manager.process()\n\n    def _process_caller_callee_relationships(self, document: Any):\n        \"\"\"\n        Processes the caller-callee relationships in the local graph\n\n        Args:\n            document (Any): A Document object\n        \"\"\"\n        caller_callee_manager = _CallerCalleeManager(self._graph, document)\n        caller_callee_manager.process()\n\n\n", "document": "# GraphBuilder\n\n## Overview\n\n`GraphBuilder` is a class that builds a symbol graph from an `Index`. A symbol graph is a directed multigraph containing information about symbols, their relationships, and occurrences. The primary method of the `GraphBuilder` class is `build_graph`, which processes documents from the provided index and constructs the graph. Optionally, it can also build caller-callee relationships in the graph. The closely related `SymbolGraph` class uses `GraphBuilder` to create a graph instance for a given index path.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.tests.unit.test_py_writer.MockCodeGenerator`\n- `automata_docs.core.symbol.search.tests.conftest.symbol_graph`\n\n## Example\n\nThe following example demonstrates how to use `GraphBuilder` to build a symbol graph from an `Index`.\n\n```python\nfrom automata_docs.core.symbol.graph import GraphBuilder\nfrom automata_docs.core.symbol.graph import Index\n\n# Prepare your `Index` object: `index`\n# ...\n\n# Create a GraphBuilder\nbuilder = GraphBuilder(index, build_caller_relationships=False)\n\n# Build the graph\ngraph = builder.build_graph()\n```\n\n## Limitations\n\n`GraphBuilder` does not expose any means of modifying the graph once it is built. If any changes need to be made to the graph, the process of building it must be repeated. Furthermore, `GraphBuilder` does not validate the input documents to ensure they are well-formed or formatted consistently.\n\n## Follow-up Questions:\n\n- Is there any opportunity for optimization or parallelization when building the graph?\n\n- How can we modify the graph after it has been built, if needed?", "summary": "`GraphBuilder` is a class responsible for constructing a symbol graph, a directed multigraph containing information about symbols, their relationships, and occurrences, from an `Index`. The primary method, `build_graph`, processes documents from the provided index and constructs the graph, with an option to also build caller-callee relationships. However, `GraphBuilder` does not allow modifications to the graph after it is built, and any changes require rebuilding the graph. Additionally, this class does not validate the input documents for formatting consistency.\n\nExample usage:\n\n```python\nfrom automata_docs.core.symbol.graph import GraphBuilder\nfrom automata_docs.core.symbol.graph import Index\n\n# Prepare your `Index` object: `index`\n# ...\n\n# Create a GraphBuilder\nbuilder = GraphBuilder(index, build_caller_relationships=False)\n\n# Build the graph\ngraph = builder.build_graph()\n```", "context": "\n    Generate the documentation for GraphBuilder using the context shown below -\nContext for -\nautomata_docs.core.symbol.graph.GraphBuilder -\n\n  Class Docstring:\n    Builds a symbol graph from an Index.\n    \n  Variables:\n    self.index=index\n    self.build_caller_relationships=build_caller_relationships\n    self._graph=nx.MultiDiGraph()\n    \n  Methods:\n    def __init__(self, index: Index, build_caller_relationships: bool = False):\n            \"\"\"\n            Args:\n                index (Index): An Index object\n                build_caller_relationships (bool, optional): Whether to build\n                    caller-callee relationships. Defaults to False.\n            \"\"\"\n            self.index = index\n            self.build_caller_relationships = build_caller_relationships\n            self._graph = nx.MultiDiGraph()\n    \n        \n    def build_graph(self):\n            \"\"\"\n            Builds the graph from the index\n            \"\"\"\n            for document in self.index.documents:\n                self._add_file_vertices(document)\n                self._add_symbol_vertices(document)\n                self._process_relationships(document)\n                self._process_occurrences(document)\n                if self.build_caller_relationships:\n                    self._process_caller_callee_relationships(document)\n    \n            return self._graph\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.core.symbol.search.tests.conftest.symbol_graph_mock\n      \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n      automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n      \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n      automata_docs.tests.unit.conftest.symbol_graph_mock\n      \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n        \n      automata_docs.core.symbol.search.tests.conftest.symbol_graph\n      \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n      automata_docs.tests.unit.conftest.symbol_graph\n      \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph.SubGraph -\n    \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.graph`/SymbolGraph#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolGraph", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolGraph:\n    @dataclass\n    class SubGraph:\n        parent: \"SymbolGraph\"\n        graph: nx.DiGraph\n\n    DEFAULT_SCIP_PATH = os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n\n    def __init__(\n        self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n    ):\n        \"\"\"\n        Initializes SymbolGraph with the path of an index protobuf file.\n\n        Args:\n            index_path (str): Path to index protobuf file\n        Returns:\n            SymbolGraph instance\n        \"\"\"\n        index = self._load_index_protobuf(index_path)\n        builder = GraphBuilder(index, build_caller_relationships)\n        self._graph = builder.build_graph()\n        self.navigator = _SymbolGraphNavigator(self._graph)\n\n    def get_all_files(self) -> List[SymbolFile]:\n        \"\"\"\n        Gets all file nodes in the graph.\n\n        Args:\n            None\n        Returns:\n            List of all defined symbols.\n        \"\"\"\n        return self.navigator.get_all_files()\n\n    def get_all_available_symbols(self) -> List[Symbol]:\n        \"\"\"\n        Gets all symbols defined in the graph.\n\n        Args:\n            None\n        Returns:\n            List[Symbol]: List of all defined symbols.\n        \"\"\"\n        return list(set(self.navigator.get_all_available_symbols()))\n\n    def get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]:\n        \"\"\"\n        Gets all symbols which contain a specified partial path\n\n        Args:\n            partial_py_path (PyPath): The partial path to explain\n        Returns:\n            Set[Symbol]: Set of symbols that follow the partial path\n        \"\"\"\n        return self.navigator.get_symbol_dependencies(symbol)\n\n    def get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]:\n        \"\"\"\n        Gets the set of symbols with relationships to the given symbol.\n\n        Args:\n            symbol (Symbol): The symbol to get relationships for.\n        Returns:\n            Set[Symbol]: The list of relationships for the symbol.\n\n        # TODO: Consider implications of using list instead of set\n        \"\"\"\n        return self.navigator.get_symbol_relationships(symbol)\n\n    def get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]:\n        \"\"\"\n        Gets the (potential) callers of the given symbol.\n        Requires downstream filtering to remove non-call statements.\n\n        Args:\n            symbol (Symbol): The symbol to get callers for.\n        Returns:\n            Dict[Symbol]: The map of callers to callees for the symbol.\n        \"\"\"\n\n        return self.navigator.get_potential_symbol_callers(symbol)\n\n    def get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]:\n        \"\"\"\n        Gets the callers of the given symbol.\n        Requires downstream filtering to remove non-call statements.\n\n        Args:\n            symbol (Symbol): The symbol to get callees for.\n        Returns:\n            Dict[Symbol]: The map of callees to callers for the symbol.\n        \"\"\"\n        return self.navigator.get_potential_symbol_callees(symbol)\n\n    def get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]:\n        \"\"\"\n        Gets all references to a given module in the symbol graph.\n\n        Args:\n            module (Symbol): The module to locate references for\n        Returns:\n            List[SymbolReference]: List of symbol references\n        \"\"\"\n        return self.navigator.get_references_to_symbol(symbol)\n\n    def get_rankable_symbol_subgraph(\n        self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None\n    ) -> SubGraph:\n        \"\"\"\n        Gets a detailed subgraph of rankable symbols.\n\n        Args:\n            symbol (str): The symbol in the form 'module`/ClassOrMethod#'\n\n        Returns:\n            List[str]: The list of dependencies for the symbol.\n        TODO: Consider ways to make this more efficient.\n        TODO: Find ways to better handle edge cases\n        \"\"\"\n        G = nx.DiGraph()\n\n        # Filter the symbols based on the provided path filter\n\n        filtered_symbols = get_rankable_symbols(self.get_all_available_symbols())\n\n        if path_filter is not None:\n            filtered_symbols = [\n                sym for sym in filtered_symbols if sym.dotpath.startswith(path_filter)  # type: ignore\n            ]\n\n        logger.info(\"Building the rankable symbol subgraph...\")\n        for symbol in tqdm(filtered_symbols):\n            try:\n                dependencies = self.get_symbol_dependencies(symbol)\n                relationships = self.get_symbol_relationships(symbol)\n                filtered_related_symbols = get_rankable_symbols(\n                    list(dependencies.union(relationships))\n                )\n                for dependency in filtered_related_symbols:\n                    if flow_rank == \"to_dependents\":\n                        G.add_edge(symbol, dependency)\n                    elif flow_rank == \"from_dependents\":\n                        G.add_edge(dependency, symbol)\n                    elif flow_rank == \"bidirectional\":\n                        G.add_edge(symbol, dependency)\n                        G.add_edge(dependency, symbol)\n                    else:\n                        raise ValueError(\n                            \"flow_rank must be one of 'to_dependents', 'from_dependents', or 'bidirectional'\"\n                        )\n\n            except Exception as e:\n                logger.error(f\"Error processing {symbol.uri}: {e}\")\n\n        logger.info(\"Built the rankable symbol subgraph\")\n\n        return SymbolGraph.SubGraph(graph=G, parent=self)\n\n    @staticmethod\n    def _load_index_protobuf(path: str) -> Index:\n        \"\"\"\n        Loads an index protobuf file from disk\n\n        Args:\n            path (str): The path to the index protobuf file\n\n        Returns:\n            Index: The loaded index protobuf\n        \"\"\"\n        index = Index()\n        with open(path, \"rb\") as f:\n            index.ParseFromString(f.read())\n        return index\n", "document": "# SymbolGraph\n\n`SymbolGraph` is a class that represents a graph of symbols and their relationships. It provides methods for querying and analyzing symbols, including retrieving all available symbols, finding potential callers and callees, and creating a subgraph of rankable symbols. The class also works with related classes such as `Symbol`, `SubGraph`, `GraphBuilder`, and `SymbolSearch`.\n\n## Overview\n\n`SymbolGraph` facilitates the analysis of symbols and their relationships by constructing a graph from an index protobuf file. It enables the retrieval of symbols, file nodes, potential callers and callees, and references to a given symbol. Additionally, it provides functionality for generating subgraphs that contain rankable symbols.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph.SubGraph`\n- `automata_docs.core.symbol.graph.GraphBuilder`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolGraph` using a predefined protobuf index file.\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\n\nindex_path = \"/path/to/index.protobuf\"\nsymbol_graph = SymbolGraph(index_path)\n```\n\n## Limitations\n\nThe primary limitation of `SymbolGraph` lies in its reliance on index protobuf files. It is not able to process other file formats or process custom index files natively.\n\nAnother limitation is that the methods for getting potential callers and callees require downstream filtering to remove non-call statements.\n\n## Follow-up Questions:\n\n- Can `SymbolGraph` be extended to handle other file formats or custom index files?\n- Is there a way to refine the methods for getting callers and callees to remove non-call statements?\n", "summary": "SymbolGraph is a class that represents and analyzes a graph of symbols and their relationships by constructing a graph from an index protobuf file. It allows for querying symbols, file nodes, potential callers and callees, and symbol references, also providing the ability to generate subgraphs containing rankable symbols. However, it is limited by its reliance on index protobuf files and the need for downstream filtering to remove non-call statements when getting potential callers and callees.\n\nExample:\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\n\nindex_path = \"/path/to/index.protobuf\"\nsymbol_graph = SymbolGraph(index_path)\n```\n", "context": "\n    Generate the documentation for SymbolGraph using the context shown below -\nContext for -\nautomata_docs.core.symbol.graph.SymbolGraph -\n\n  Variables:\n    DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n    self._graph=builder.build_graph()\n    self.navigator=_SymbolGraphNavigator(self._graph)\n    \n  Methods:\n    def __init__(\n            self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n        ):\n            \"\"\"\n            Initializes SymbolGraph with the path of an index protobuf file.\n    \n            Args:\n                index_path (str): Path to index protobuf file\n            Returns:\n                SymbolGraph instance\n            \"\"\"\n            index = self._load_index_protobuf(index_path)\n            builder = GraphBuilder(index, build_caller_relationships)\n            self._graph = builder.build_graph()\n            self.navigator = _SymbolGraphNavigator(self._graph)\n    \n        \n    def get_all_available_symbols(self) -> List[Symbol]:\n            \"\"\"\n            Gets all symbols defined in the graph.\n    \n            Args:\n                None\n            Returns:\n                List[Symbol]: List of all defined symbols.\n            \"\"\"\n            return list(set(self.navigator.get_all_available_symbols()))\n    \n        \n    def get_all_files(self) -> List[SymbolFile]:\n            \"\"\"\n            Gets all file nodes in the graph.\n    \n            Args:\n                None\n            Returns:\n                List of all defined symbols.\n            \"\"\"\n            return self.navigator.get_all_files()\n    \n        \n    def get_potential_symbol_callees(self, symbol: Symbol) -> Dict[Symbol, SymbolReference]:\n            \"\"\"\n            Gets the callers of the given symbol.\n            Requires downstream filtering to remove non-call statements.\n    \n            Args:\n                symbol (Symbol): The symbol to get callees for.\n            Returns:\n                Dict[Symbol]: The map of callees to callers for the symbol.\n            \"\"\"\n            return self.navigator.get_potential_symbol_callees(symbol)\n    \n        \n    def get_potential_symbol_callers(self, symbol: Symbol) -> Dict[SymbolReference, Symbol]:\n            \"\"\"\n            Gets the (potential) callers of the given symbol.\n            Requires downstream filtering to remove non-call statements.\n    \n            Args:\n                symbol (Symbol): The symbol to get callers for.\n            Returns:\n                Dict[Symbol]: The map of callers to callees for the symbol.\n            \"\"\"\n    \n            return self.navigator.get_potential_symbol_callers(symbol)\n    \n        \n    def get_rankable_symbol_subgraph(\n            self, flow_rank=\"bidirectional\", path_filter: Optional[str] = None\n        ) -> SubGraph:\n            \"\"\"\n            Gets a detailed subgraph of rankable symbols.\n    \n            Args:\n                symbol (str): The symbol in the form 'module`/ClassOrMethod#'\n    \n            Returns:\n                List[str]: The list of dependencies for the symbol.\n            TODO: Consider ways to make this more efficient.\n            TODO: Find ways to better handle edge cases\n            \"\"\"\n            G = nx.DiGraph()\n    \n            # Filter the symbols based on the provided path filter\n    \n            filtered_symbols = get_rankable_symbols(self.get_all_available_symbols())\n    \n            if path_filter is not None:\n                filtered_symbols = [\n                    sym for sym in filtered_symbols if sym.dotpath.startswith(path_filter)  # type: ignore\n                ]\n    \n            logger.info(\"Building the rankable symbol subgraph...\")\n            for symbol in tqdm(filtered_symbols):\n                try:\n                    dependencies = self.get_symbol_dependencies(symbol)\n                    relationships = self.get_symbol_relationships(symbol)\n                    filtered_related_symbols = get_rankable_symbols(\n                        list(dependencies.union(relationships))\n                    )\n                    for dependency in filtered_related_symbols:\n                        if flow_rank == \"to_dependents\":\n                            G.add_edge(symbol, dependency)\n                        elif flow_rank == \"from_dependents\":\n                            G.add_edge(dependency, symbol)\n                        elif flow_rank == \"bidirectional\":\n                            G.add_edge(symbol, dependency)\n                            G.add_edge(dependency, symbol)\n                        else:\n                            raise ValueError(\n                                \"flow_rank must be one of 'to_dependents', 'from_dependents', or 'bidirectional'\"\n                            )\n    \n                except Exception as e:\n                    logger.error(f\"Error processing {symbol.uri}: {e}\")\n    \n            logger.info(\"Built the rankable symbol subgraph\")\n    \n            return SymbolGraph.SubGraph(graph=G, parent=self)\n    \n        \n    def get_references_to_symbol(self, symbol: Symbol) -> Dict[str, List[SymbolReference]]:\n            \"\"\"\n            Gets all references to a given module in the symbol graph.\n    \n            Args:\n                module (Symbol): The module to locate references for\n            Returns:\n                List[SymbolReference]: List of symbol references\n            \"\"\"\n            return self.navigator.get_references_to_symbol(symbol)\n    \n        \n    def get_symbol_dependencies(self, symbol: Symbol) -> Set[Symbol]:\n            \"\"\"\n            Gets all symbols which contain a specified partial path\n    \n            Args:\n                partial_py_path (PyPath): The partial path to explain\n            Returns:\n                Set[Symbol]: Set of symbols that follow the partial path\n            \"\"\"\n            return self.navigator.get_symbol_dependencies(symbol)\n    \n        \n    def get_symbol_relationships(self, symbol: Symbol) -> Set[Symbol]:\n            \"\"\"\n            Gets the set of symbols with relationships to the given symbol.\n    \n            Args:\n                symbol (Symbol): The symbol to get relationships for.\n            Returns:\n                Set[Symbol]: The list of relationships for the symbol.\n    \n            # TODO: Consider implications of using list instead of set\n            \"\"\"\n            return self.navigator.get_symbol_relationships(symbol)\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_graph.test_get_all_symbols\n      \n        def test_get_all_symbols(symbol_graph):\n            graph_symbols = symbol_graph.get_all_available_symbols()\n            assert isinstance(graph_symbols, list)\n            assert all(isinstance(s, Symbol) for s in graph_symbols)\n        \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph.SubGraph -\n    \n        \n      automata_docs.core.symbol.search.tests.conftest.symbol_graph_mock\n      \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n    Context for -\n    automata_docs.core.symbol.graph.GraphBuilder -\n    \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Variables:\n        self.index=index\n        self.build_caller_relationships=build_caller_relationships\n        self._graph=nx.MultiDiGraph()\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n      automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n      \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n    Context for -\n    automata_docs.core.symbol.search.symbol_search.SymbolSearch -\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Variables:\n        self.symbol_graph=symbol_graph\n        self.symbol_similarity=symbol_similarity\n        self.symbol_rank=SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n      automata_docs.tests.unit.conftest.symbol_graph\n      \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n      automata_docs.core.symbol.search.tests.conftest.symbol_graph\n      \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n      automata_docs.tests.unit.conftest.symbol_graph_mock\n      \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.graph`/SymbolGraph#SubGraph#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolGraph", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SubGraph", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\n    class SubGraph:\n        parent: \"SymbolGraph\"\n        graph: nx.DiGraph\n\n    ", "document": "## SymbolGraph.SubGraph\n\n`SymbolGraph.SubGraph` is a representation of a subgraph within the `SymbolGraph` class. It is used to store and access relevant parts of a symbol graph, offering the ability to work with specific portions of the larger graph while retaining its context. \n\nRelated Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.graph.GraphBuilder`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n\n## Example\n\nThe following example demonstrates how to create a `SymbolGraph` instance using `SymbolGraph.Subgraph`.\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\n\n# assuming the path to a valid index protobuf file, you should replace it with your own file path\nfile_dir = os.path.dirname(os.path.abspath(__file__))\nindex_path = os.path.join(file_dir, \"index.scip\")\ngraph = SymbolGraph(index_path)\n\n# Creating a SymbolSearch instance with a custom symbol_rank_config and code_subgraph\nfrom automata_docs.core.symbol.search.symbol_search import SymbolSearch\nfrom automata_docs.core.symbol.search.sources.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.symbol.rank.SymbolRank import SymbolRankConfig\n\nsymbol_similarity = SymbolSimilarity()\nsymbol_rank_config = SymbolRankConfig(lambda_=0.85, tol=1e-06)\n\nsymbol_search = SymbolSearch(\n    symbol_graph=graph,\n    symbol_similarity=symbol_similarity,\n    symbol_rank_config=symbol_rank_config,\n    code_subgraph=graph.get_rankable_symbol_subgraph(\"bidirectional\")\n)\n\n```\n\n## Limitations\n\n`SymbolGraph.SubGraph` relies on the internal structure of the `SymbolGraph` class and is not designed for standalone use. It is meant to be a convenient way to organize and work with specific parts of a larger graph. Due to its close dependence on `SymbolGraph`, potential changes in the design of the `SymbolGraph` class might affect the functionality of `SymbolGraph.SubGraph`.\n\n## Follow-up Questions:\n\n- Is there a need for additional functionality when using `SymbolGraph.SubGraph`, or can it be left as a barebones class for subgraph organization?\n- Is it possible to sanitize the user input on `SymbolGraph.SubGraph` to ensure that only valid subgraphs are created?", "summary": "`SymbolGraph.SubGraph` is a representation of a subgraph within the `SymbolGraph` class, used for storing and accessing specific parts of a larger graph while maintaining its context. It is closely dependent on the `SymbolGraph` class and not designed for standalone use. For example, to create a `SymbolGraph` instance using `SymbolGraph.Subgraph`, you can use the following code:\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfile_dir = os.path.dirname(os.path.abspath(__file__))\nindex_path = os.path.join(file_dir, \"index.scip\")\ngraph = SymbolGraph(index_path)\n\nfrom automata_docs.core.symbol.search.symbol_search import SymbolSearch\nfrom automata_docs.core.symbol.search.sources.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.symbol.rank.SymbolRank import SymbolRankConfig\n\nsymbol_similarity = SymbolSimilarity()\nsymbol_rank_config = SymbolRankConfig(lambda_=0.85, tol=1e-06)\n\nsymbol_search = SymbolSearch(\n    symbol_graph=graph,\n    symbol_similarity=symbol_similarity,\n    symbol_rank_config=symbol_rank_config,\n    code_subgraph=graph.get_rankable_symbol_subgraph(\"bidirectional\")\n)\n```\n\nConsiderations for the future include whether additional functionality is needed for `SymbolGraph.SubGraph` and how to sanitize user input to ensure creation of valid subgraphs.", "context": "\n    Generate the documentation for SymbolGraph using the context shown below -\nContext for -\nautomata_docs.core.symbol.graph.SymbolGraph.SubGraph -\n\n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n      automata_docs.tests.unit.test_symbol_graph.test_get_all_symbols\n      \n        def test_get_all_symbols(symbol_graph):\n            graph_symbols = symbol_graph.get_all_available_symbols()\n            assert isinstance(graph_symbols, list)\n            assert all(isinstance(s, Symbol) for s in graph_symbols)\n        \n      automata_docs.core.symbol.search.tests.conftest.symbol_graph_mock\n      \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n    Context for -\n    automata_docs.core.symbol.graph.GraphBuilder -\n    \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Variables:\n        self.index=index\n        self.build_caller_relationships=build_caller_relationships\n        self._graph=nx.MultiDiGraph()\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n      automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n      \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n    Context for -\n    automata_docs.core.symbol.search.symbol_search.SymbolSearch -\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Variables:\n        self.symbol_graph=symbol_graph\n        self.symbol_similarity=symbol_similarity\n        self.symbol_rank=SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n      automata_docs.tests.unit.conftest.symbol_graph\n      \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n      automata_docs.core.symbol.search.tests.conftest.symbol_graph\n      \n        @pytest.fixture\n        def symbol_graph():\n            # assuming the path to a valid index protobuf file, you should replace it with your own file path\n            file_dir = os.path.dirname(os.path.abspath(__file__))\n            index_path = os.path.join(file_dir, \"index.scip\")\n            graph = SymbolGraph(index_path)\n            return graph\n        \n        \n        \n      automata_docs.tests.unit.conftest.symbol_graph_mock\n      \n        @pytest.fixture\n        def symbol_graph_mock(mocker):\n            mock = mocker.MagicMock(spec=SymbolGraph)\n            return mock\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.graph`/_CallerCalleeManager#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "_CallerCalleeManager", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class _CallerCalleeManager:\n    \"\"\"\n    Manages the caller-callee relationships of a symbol in a graph.\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, document: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            document (Any): A Document object\n        \"\"\"\n        self._graph = graph\n        self.navigator = _SymbolGraphNavigator(graph)\n        self.document = document\n\n    def process(self):\n        \"\"\"\n        Processes the caller-callee relationships in the local graph\n\n        Note that this is an expensive operation, and should be used sparingly\n        \"\"\"\n        for symbol in self.document.symbols:\n            try:\n                symbol_object = parse_symbol(symbol.symbol)\n            except Exception as e:\n                logger.error(f\"Parsing symbol {symbol.symbol} failed with error {e}\")\n                continue\n\n            if symbol_object.symbol_kind_by_suffix() != SymbolDescriptor.PyKind.Method:\n                continue\n\n            try:\n                references_in_scope = self.navigator._get_symbol_references_in_scope(symbol_object)\n            except Exception as e:\n                print(f\"Failed to get references in scope for symbol {symbol} with error {e}\")\n                continue\n\n            for ref in references_in_scope:\n                try:\n                    if (\n                        ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Method\n                        or ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Class\n                    ):\n                        if ref.symbol == symbol_object:\n                            continue\n                        # TODO - This approach will include non-call statements, like return statements\n                        # unfortunately, this seems necessary to get the full set of callers\n                        # e.g. omitting classes appears to remove constructor calls for X, like X()\n                        # For, we filtering is done downstream with the ASTNavigator\n                        # with current understanding, it seems handling will require AST awareness\n                        self._graph.add_edge(\n                            symbol_object,\n                            ref.symbol,\n                            line_number=ref.line_number,\n                            column_number=ref.column_number,\n                            roles=ref.roles,\n                            label=\"caller\",\n                        )\n                        self._graph.add_edge(\n                            ref.symbol,\n                            symbol_object,\n                            line_number=ref.line_number,\n                            column_number=ref.column_number,\n                            roles=ref.roles,\n                            label=\"callee\",\n                        )\n                except Exception as e:\n                    print(f\"Failed to add caller-callee edge for {symbol} with error {e} \")\n                    continue\n\n\n", "document": "# _CallerCalleeManager\n\n`_CallerCalleeManager` is a class that manages the caller-callee relationships of a symbol in a graph. It is used to process and analyze the relationships between the symbols (such as methods and classes) in a Python codebase. It utilizes the `_SymbolGraphNavigator` to navigate the symbol graph and retrieve symbol references in a given scope.\n\n## Overview\n`_CallerCalleeManager` is mainly responsible for processing the caller-callee relationships in a symbol graph. It adds edges to the graph for every encountered method or class call in the code that represents the caller-callee relationship. However, its processing may be an expensive operation that should be used sparingly.\n\n## Variables\n- `self._graph`: A networkx graph representing the symbol relationships.\n- `self.navigator`: An instance of `_SymbolGraphNavigator` to navigate the graph.\n- `self.document`: A Document object containing symbols to process.\n\n## Methods\n- `__init__(self, graph: nx.MultiDiGraph, document: Any)`: This method initializes the `_CallerCalleeManager` object. It takes in two parameters: `graph`, a networkx graph, and `document`, a Document object.\n\n- `process(self)`: This method processes the caller-callee relationships in the local graph. It iterates through the document symbols and parses them to retrieve references in scope and add edges to the graph representing the relationships.\n\n## Related Symbols\n- `Symbol`: A class used to identify a class, method, or local variable in a codebase. It has a standardized string representation that can be used interchangeably with Symbol.\n- `PyContextRetriever`: A class used to retrieve the context of a symbol in a Python project.\n- `MockCodeGenerator`: This class is used internally for testing purposes and is not relevant to the main functionality of `_CallerCalleeManager`.\n- `PyCodeWriter`: A utility class for writing Python code along AST nodes.\n\n## Example\n\nThe following example demonstrates how to create an instance of `_CallerCalleeManager` and process the caller-callee relationships in the symbol graph.\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _CallerCalleeManager\nfrom automata_docs.core.symbol import Document\n\n# Create a MultiDiGraph and a Document object\ngraph = nx.MultiDiGraph()\ndocument = Document()\n\n# Initialize _CallerCalleeManager and process caller-callee relationships\ncc_manager = _CallerCalleeManager(graph, document)\ncc_manager.process()\n```\n\n## Limitations\n\nThe current approach of `_CallerCalleeManager` may include non-call statements (such as return statements) due to the complexity of determining all possible callers. As a result, there can be inaccuracies in the processed caller-callee relationships. For now, filtering is done downstream with the ASTNavigator. However, handling the situation correctly may require AST awareness in the future.\n\n## Follow-up Questions:\n\n- Is there a better approach to handle non-call statements in the `_CallerCalleeManager` to improve its accuracy?", "summary": "The `_CallerCalleeManager` class manages the caller-callee relationships of symbols, such as methods and classes, in a Python codebase. It uses the `_SymbolGraphNavigator` to navigate the symbol graph and retrieve symbol references within a given scope. The main responsibility of this class is processing those relationships in the symbol graph, but its processing can be an expensive operation and should be used sparingly. The current implementation of `_CallerCalleeManager` may include non-call statements due to the complexity of determining possible callers, which can result in inaccuracies. For now, filtering is done downstream with the ASTNavigator.\n\nExample usage:\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _CallerCalleeManager\nfrom automata_docs.core.symbol import Document\n\n# Create a MultiDiGraph and a Document object\ngraph = nx.MultiDiGraph()\ndocument = Document()\n\n# Initialize _CallerCalleeManager and process caller-callee relationships\ncc_manager = _CallerCalleeManager(graph, document)\ncc_manager.process()\n```\n", "context": "\n    Generate the documentation for _CallerCalleeManager using the context shown below -\nContext for -\nautomata_docs.core.symbol.graph._CallerCalleeManager -\n\n  Class Docstring:\n    Manages the caller-callee relationships of a symbol in a graph.\n    \n  Variables:\n    self._graph=graph\n    self.navigator=_SymbolGraphNavigator(graph)\n    self.document=document\n    \n  Methods:\n    def __init__(self, graph: nx.MultiDiGraph, document: Any):\n            \"\"\"\n            Args:\n                graph (nx.MultiDiGraph): A networkx graph\n                document (Any): A Document object\n            \"\"\"\n            self._graph = graph\n            self.navigator = _SymbolGraphNavigator(graph)\n            self.document = document\n    \n        \n    def process(self):\n            \"\"\"\n            Processes the caller-callee relationships in the local graph\n    \n            Note that this is an expensive operation, and should be used sparingly\n            \"\"\"\n            for symbol in self.document.symbols:\n                try:\n                    symbol_object = parse_symbol(symbol.symbol)\n                except Exception as e:\n                    logger.error(f\"Parsing symbol {symbol.symbol} failed with error {e}\")\n                    continue\n    \n                if symbol_object.symbol_kind_by_suffix() != SymbolDescriptor.PyKind.Method:\n                    continue\n    \n                try:\n                    references_in_scope = self.navigator._get_symbol_references_in_scope(symbol_object)\n                except Exception as e:\n                    print(f\"Failed to get references in scope for symbol {symbol} with error {e}\")\n                    continue\n    \n                for ref in references_in_scope:\n                    try:\n                        if (\n                            ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Method\n                            or ref.symbol.symbol_kind_by_suffix() == SymbolDescriptor.PyKind.Class\n                        ):\n                            if ref.symbol == symbol_object:\n                                continue\n                            # TODO - This approach will include non-call statements, like return statements\n                            # unfortunately, this seems necessary to get the full set of callers\n                            # e.g. omitting classes appears to remove constructor calls for X, like X()\n                            # For, we filtering is done downstream with the ASTNavigator\n                            # with current understanding, it seems handling will require AST awareness\n                            self._graph.add_edge(\n                                symbol_object,\n                                ref.symbol,\n                                line_number=ref.line_number,\n                                column_number=ref.column_number,\n                                roles=ref.roles,\n                                label=\"caller\",\n                            )\n                            self._graph.add_edge(\n                                ref.symbol,\n                                symbol_object,\n                                line_number=ref.line_number,\n                                column_number=ref.column_number,\n                                roles=ref.roles,\n                                label=\"callee\",\n                            )\n                    except Exception as e:\n                        print(f\"Failed to add caller-callee edge for {symbol} with error {e} \")\n                        continue\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n    Context for -\n    automata_docs.core.coding.py_coding.retriever.PyCodeRetriever -\n    \n      Class Docstring:\n        Code retriever for fetching python code\n        \n      Variables:\n        self.module_tree_map=module_tree_map\n        \n      Methods:\n        def __init__(self, module_tree_map: LazyModuleTreeMap = LazyModuleTreeMap.cached_default()):\n                self.module_tree_map = module_tree_map\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap -\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Variables:\n        self._dotpath_map=DotPathMap(path)\n        self._loaded_modules={}\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(module_fpath)\n        self._loaded_modules[module_dotpath]=module\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(fpath)\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n      automata_docs.tests.unit.test_py_code_retriever.getter\n      \n        @pytest.fixture\n        def getter(module_map):\n            return PyCodeRetriever(module_map)\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.graph`/_OccurrenceManager#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "_OccurrenceManager", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class _OccurrenceManager:\n    \"\"\"\n    Manages the occurrences of a symbol in a graph\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, document: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            document (Any): A Document object\n        \"\"\"\n        self._graph = graph\n        self.document = document\n\n    def process(self):\n        \"\"\"\n        Processes the occurrences in the local graph\n        \"\"\"\n        for occurrence in self.document.occurrences:\n            try:\n                occurrence_symbol = parse_symbol(occurrence.symbol)\n            except Exception as e:\n                logger.error(f\"Parsing symbol {occurrence.symbol} failed with error {e}\")\n                continue\n\n            occurrence_range = tuple(occurrence.range)\n            occurrence_roles = _OccurrenceManager._process_symbol_roles(occurrence.symbol_roles)\n            occurrence_reference = SymbolReference(\n                symbol=occurrence_symbol,\n                line_number=occurrence_range[0],\n                column_number=occurrence_range[1],\n                roles=occurrence_roles,\n            )\n            self._graph.add_edge(\n                occurrence_symbol,\n                self.document.relative_path,\n                symbol_reference=occurrence_reference,\n                label=\"reference\",\n            )\n            if occurrence_roles.get(SymbolRole.Name(SymbolRole.Definition)):\n                # TODO this is gross\n                incorrect_contains_edges = [\n                    (source, target)\n                    for source, target, data in self._graph.in_edges(occurrence_symbol, data=True)\n                    if data.get(\"label\") == \"contains\"\n                ]\n                for source, target in incorrect_contains_edges:\n                    self._graph.remove_edge(source, target)\n\n                self._graph.add_edge(\n                    self.document.relative_path,\n                    occurrence_symbol,\n                    label=\"contains\",\n                )\n\n    @staticmethod\n    def _process_symbol_roles(role: int) -> Dict[str, bool]:\n        \"\"\"\n        Processes the symbol roles into a dictionary of role names to booleans\n\n        Args:\n            role (int): The symbol role\n        \"\"\"\n        result = {}\n        for role_name, role_value in SymbolRole.items():\n            if (role & role_value) > 0:\n                result[role_name] = (role & role_value) > 0\n        return result\n\n\n", "document": "# _OccurrenceManager\n\n`_OccurrenceManager` is a class that manages the occurrences of a symbol in a graph. It processes the occurrences stored in the given document and adds the corresponding symbol references and symbol roles to the graph.\n\n## Overview\n\n- `__init__(self, graph: nx.MultiDiGraph, document: Any)`: Initialize an instance of the class by passing in a networkx graph and a document object.\n- `process(self)`: Method for processing the occurrences in the local graph and updating the graph with symbol references and symbol roles.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n- `automata_docs.core.symbol.graph._CallerCalleeManager`\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.graph.GraphBuilder`\n- `automata_docs.core.database.vector.JSONVectorDatabase`\n- `automata_docs.core.coding.py_coding.writer.PyCodeWriter`\n- `automata_docs.core.symbol.graph._RelationshipManager`\n\n## Example\n\nWhile there isn't a direct example for using `_OccurrenceManager`, it's an internal class used in the `GraphBuilder` to manage the occurrences of a symbol in a graph. Here's an example using the `GraphBuilder`.\n\n```python\nfrom automata_docs.core.symbol.graph import GraphBuilder\nfrom automata_docs.core.index.indexes import Index\n\nindex = Index.load()  # Load the Index object\ngraph_builder = GraphBuilder(index)  # Create a GraphBuilder instance\ngraph = graph_builder.build()  # Build the graph\n```\n\nIn this example, the `GraphBuilder.build()` method internally calls the `_OccurrenceManager.process()` function to process the occurrences in the graph.\n\n## Limitations\n\nThe `_OccurrenceManager` might not be suitable for other types of graphs or formats, as it is tailored for a specific use-case. Furthermore, since it is an internal class, it is not designed to be used directly in most applications.\n\n## Follow-up Questions:\n\n- Are there any other types of graphs or formats that the `_OccurrenceManager` should be able to handle?\n- How can the implementation of `_OccurrenceManager` be improved or extended to suit other use-cases?", "summary": "_OccurrenceManager is a class that manages the occurrences of a symbol in a graph by processing the occurrences stored in a given document and adding symbol references and roles to the graph. It is an internal class used in the GraphBuilder and may not be suitable for other types of graphs or formats. To utilize the OccurrenceManager, the user should employ a GraphBuilder instance and call the build() method, which internally processes occurrences using the _OccurrenceManager. The class's usability may be improved by extending its implementation to handle different graph formats or use-cases.", "context": "\n    Generate the documentation for _OccurrenceManager using the context shown below -\nContext for -\nautomata_docs.core.symbol.graph._OccurrenceManager -\n\n  Class Docstring:\n    Manages the occurrences of a symbol in a graph\n    \n  Variables:\n    self._graph=graph\n    self.document=document\n    \n  Methods:\n    def __init__(self, graph: nx.MultiDiGraph, document: Any):\n            \"\"\"\n            Args:\n                graph (nx.MultiDiGraph): A networkx graph\n                document (Any): A Document object\n            \"\"\"\n            self._graph = graph\n            self.document = document\n    \n        \n    def process(self):\n            \"\"\"\n            Processes the occurrences in the local graph\n            \"\"\"\n            for occurrence in self.document.occurrences:\n                try:\n                    occurrence_symbol = parse_symbol(occurrence.symbol)\n                except Exception as e:\n                    logger.error(f\"Parsing symbol {occurrence.symbol} failed with error {e}\")\n                    continue\n    \n                occurrence_range = tuple(occurrence.range)\n                occurrence_roles = _OccurrenceManager._process_symbol_roles(occurrence.symbol_roles)\n                occurrence_reference = SymbolReference(\n                    symbol=occurrence_symbol,\n                    line_number=occurrence_range[0],\n                    column_number=occurrence_range[1],\n                    roles=occurrence_roles,\n                )\n                self._graph.add_edge(\n                    occurrence_symbol,\n                    self.document.relative_path,\n                    symbol_reference=occurrence_reference,\n                    label=\"reference\",\n                )\n                if occurrence_roles.get(SymbolRole.Name(SymbolRole.Definition)):\n                    # TODO this is gross\n                    incorrect_contains_edges = [\n                        (source, target)\n                        for source, target, data in self._graph.in_edges(occurrence_symbol, data=True)\n                        if data.get(\"label\") == \"contains\"\n                    ]\n                    for source, target in incorrect_contains_edges:\n                        self._graph.remove_edge(source, target)\n    \n                    self._graph.add_edge(\n                        self.document.relative_path,\n                        occurrence_symbol,\n                        label=\"contains\",\n                    )\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.symbol.graph._CallerCalleeManager -\n    \n      Class Docstring:\n        Manages the caller-callee relationships of a symbol in a graph.\n        \n      Variables:\n        self._graph=graph\n        self.navigator=_SymbolGraphNavigator(graph)\n        self.document=document\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, document: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    document (Any): A Document object\n                \"\"\"\n                self._graph = graph\n                self.navigator = _SymbolGraphNavigator(graph)\n                self.document = document\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity -\n    \n      Variables:\n        self.embedding_handler=symbol_embedding_manager\n        self.embedding_provider=symbol_embedding_manager.embedding_provider\n        self.norm_type=norm_type\n        self.index_to_symbol={i: symbol for i, symbol in enumerate(supported_symbols)}\n        self.symbol_to_index={symbol: i for i, symbol in enumerate(supported_symbols)}\n        self.available_symbols=None\n        self.available_symbols=available_symbols\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.graph.GraphBuilder -\n    \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Variables:\n        self.index=index\n        self.build_caller_relationships=build_caller_relationships\n        self._graph=nx.MultiDiGraph()\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    Context for -\n    automata_docs.core.symbol.graph._RelationshipManager -\n    \n      Class Docstring:\n        Manages the relationships between symbols in a graph\n        \n      Variables:\n        self._graph=graph\n        self.symbol_information=symbol_information\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, symbol_information: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    symbol_information (Any): A SymbolInformation object\n                \"\"\"\n                self._graph = graph\n                self.symbol_information = symbol_information\n        \n            \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.graph`/_RelationshipManager#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.graph", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "_RelationshipManager", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class _RelationshipManager:\n    \"\"\"\n    Manages the relationships between symbols in a graph\n    \"\"\"\n\n    def __init__(self, graph: nx.MultiDiGraph, symbol_information: Any):\n        \"\"\"\n        Args:\n            graph (nx.MultiDiGraph): A networkx graph\n            symbol_information (Any): A SymbolInformation object\n        \"\"\"\n        self._graph = graph\n        self.symbol_information = symbol_information\n\n    def process(self):\n        \"\"\"\n        Processes the relationships in the local graph\n        \"\"\"\n        for relationship in self.symbol_information.relationships:\n            relationship_labels = MessageToDict(relationship)\n            relationship_labels.pop(\"symbol\")\n            related_symbol = parse_symbol(relationship.symbol)\n            self._graph.add_edge(\n                self.symbol_information.symbol,\n                related_symbol,\n                label=\"relationship\",\n                **relationship_labels,\n            )\n\n\n", "document": "# _RelationshipManager\n\n`_RelationshipManager` is a class that manages the relationships between symbols in a graph. It is designed to help in processing the relationships in the local graph and extracting symbol-related information.\n\n## Overview\n\n`_RelationshipManager` takes a networkx graph and a SymbolInformation object as its input parameters and processes the relationships within the graph. It includes a method `process()` that processes the relationships in the local graph and adds edges between related symbols.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.graph._CallerCalleeManager`\n- `automata_docs.core.symbol.graph.GraphBuilder`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.tests.unit.sample_modules.sample.Person`\n- `automata_docs.tests.unit.sample_modules.sample.EmptyClass`\n- `automata_docs.core.embedding.symbol_similarity.SymbolSimilarity`\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass`\n\n## Example\n\nBelow is an example of how to use the `_RelationshipManager` class:\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _RelationshipManager\nfrom automata_docs.core.symbol.symbol_types import SymbolInformation\n\n\ngraph = nx.MultiDiGraph()  # Create an instance of a networkx graph\nsymbol_information = SymbolInformation()  # Add your symbol information here\n\n# Create an instance of _RelationshipManager\nrelationship_manager = _RelationshipManager(graph, symbol_information)\n\n# Process relationships in the local graph\nrelationship_manager.process()\n```\n\n## Limitations\n\n`_RelationshipManager` relies on the provided `SymbolInformation` object, and any errors or inconsistencies in the symbol information can lead to incorrect relationship processing. Furthermore, the class is limited to working with networkx graphs and cannot work with other graph representations.\n\n## Follow-up Questions:\n\n- What is the most efficient way to process relationships in the graph using this class?\n- Are there any alternatives to using networkx graphs for this purpose?", "summary": "_RelationshipManager is a class that manages relationships between symbols in a graph, aiding in processing relationships in the local graph and extracting symbol-related information. It takes a networkx graph and a SymbolInformation object as input parameters and includes a method `process()` that processes relationships in the local graph, adding edges between related symbols. However, it relies on the provided `SymbolInformation` object, and any errors or inconsistencies may lead to incorrect relationship processing. The class is limited to working with networkx graphs.\n\nExample:\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.graph import _RelationshipManager\nfrom automata_docs.core.symbol.symbol_types import SymbolInformation\n\ngraph = nx.MultiDiGraph()  # Create an instance of a networkx graph\nsymbol_information = SymbolInformation()  # Add your symbol information here\n\n# Create an instance of _RelationshipManager\nrelationship_manager = _RelationshipManager(graph, symbol_information)\n\n# Process relationships in the local graph\nrelationship_manager.process()\n```", "context": "\n    Generate the documentation for _RelationshipManager using the context shown below -\nContext for -\nautomata_docs.core.symbol.graph._RelationshipManager -\n\n  Class Docstring:\n    Manages the relationships between symbols in a graph\n    \n  Variables:\n    self._graph=graph\n    self.symbol_information=symbol_information\n    \n  Methods:\n    def __init__(self, graph: nx.MultiDiGraph, symbol_information: Any):\n            \"\"\"\n            Args:\n                graph (nx.MultiDiGraph): A networkx graph\n                symbol_information (Any): A SymbolInformation object\n            \"\"\"\n            self._graph = graph\n            self.symbol_information = symbol_information\n    \n        \n    def process(self):\n            \"\"\"\n            Processes the relationships in the local graph\n            \"\"\"\n            for relationship in self.symbol_information.relationships:\n                relationship_labels = MessageToDict(relationship)\n                relationship_labels.pop(\"symbol\")\n                related_symbol = parse_symbol(relationship.symbol)\n                self._graph.add_edge(\n                    self.symbol_information.symbol,\n                    related_symbol,\n                    label=\"relationship\",\n                    **relationship_labels,\n                )\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.graph._CallerCalleeManager -\n    \n      Class Docstring:\n        Manages the caller-callee relationships of a symbol in a graph.\n        \n      Variables:\n        self._graph=graph\n        self.navigator=_SymbolGraphNavigator(graph)\n        self.document=document\n        \n      Methods:\n        def __init__(self, graph: nx.MultiDiGraph, document: Any):\n                \"\"\"\n                Args:\n                    graph (nx.MultiDiGraph): A networkx graph\n                    document (Any): A Document object\n                \"\"\"\n                self._graph = graph\n                self.navigator = _SymbolGraphNavigator(graph)\n                self.document = document\n        \n            \n    Context for -\n    automata_docs.core.symbol.graph.GraphBuilder -\n    \n      Class Docstring:\n        Builds a symbol graph from an Index.\n        \n      Variables:\n        self.index=index\n        self.build_caller_relationships=build_caller_relationships\n        self._graph=nx.MultiDiGraph()\n        \n      Methods:\n        def __init__(self, index: Index, build_caller_relationships: bool = False):\n                \"\"\"\n                Args:\n                    index (Index): An Index object\n                    build_caller_relationships (bool, optional): Whether to build\n                        caller-callee relationships. Defaults to False.\n                \"\"\"\n                self.index = index\n                self.build_caller_relationships = build_caller_relationships\n                self._graph = nx.MultiDiGraph()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.Person\n      \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.Person -\n    \n      Class Docstring:\n        This is a sample class.\n        \n      Variables:\n        self.name=name\n        \n      Methods:\n        def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n    Context for -\n    automata_docs.core.embedding.symbol_similarity.SymbolSimilarity -\n    \n      Variables:\n        self.embedding_handler=symbol_embedding_manager\n        self.embedding_provider=symbol_embedding_manager.embedding_provider\n        self.norm_type=norm_type\n        self.index_to_symbol={i: symbol for i, symbol in enumerate(supported_symbols)}\n        self.symbol_to_index={symbol: i for i, symbol in enumerate(supported_symbols)}\n        self.available_symbols=None\n        self.available_symbols=available_symbols\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_embedding_manager: SymbolCodeEmbeddingHandler,\n                norm_type: NormType = NormType.L2,\n            ):\n                \"\"\"\n                Initialize SymbolSimilarity\n        \n                Args:\n                    symbol_embedding_manager: A CodeEmbeddingManager\n                    norm_type (NormType): The norm type to use for calculating similarity\n        \n                Returns:\n                    An instance of SymbolSimilarity\n                \"\"\"\n                self.embedding_handler: SymbolCodeEmbeddingHandler = symbol_embedding_manager\n                self.embedding_provider: EmbeddingsProvider = symbol_embedding_manager.embedding_provider\n                self.norm_type = norm_type\n                supported_symbols = self.embedding_handler.get_all_supported_symbols()\n                self.index_to_symbol = {i: symbol for i, symbol in enumerate(supported_symbols)}\n                self.symbol_to_index = {symbol: i for i, symbol in enumerate(supported_symbols)}\n                self.available_symbols: Optional[Set[Symbol]] = None\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.OuterClass\n      \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass -\n    \n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.parser`/SymbolParser#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.parser", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolParser", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolParser:\n    \"\"\"\n    Translation of the logic defined in\n    https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n    to parse URIs into structured objects.\n    It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n    \"\"\"\n\n    def __init__(self, symbol: str):\n        \"\"\"\n        Args:\n            symbol (str): The symbol URI to parse\n        \"\"\"\n        self.symbol = symbol\n        self.index = 0\n        self.symbol_str = symbol\n\n    def error(self, message: str) -> ValueError:\n        \"\"\"\n        Create a ValueError with the symbol and a pointer to the error location\n\n        Args:\n            message (str): The error message\n        \"\"\"\n        return ValueError(f\"{message}\\n{self.symbol_str}\\n{'_' * self.index}^\")\n\n    def current(self) -> str:\n        \"\"\"\n        Get the current character in the symbol\n\n        Returns:\n            str - The current character in the symbol\n        \"\"\"\n        return self.symbol[self.index]\n\n    def peek_next(self) -> Optional[str]:\n        \"\"\"\n        Peek at the next character in the symbol\n\n        Returns:\n            Optional[str] - The next character in the symbol,\n                or None if there is no next character\n        \"\"\"\n        if self.index + 1 < len(self.symbol):\n            return self.symbol[self.index + 1]\n        return None\n\n    def parse_descriptors(self) -> List[SymbolDescriptor]:\n        \"\"\"\n        Parse all descriptors in the symbol\n\n        Returns:\n            List[SymbolDescriptor] - The descriptors in the symbol\n        \"\"\"\n        result = []\n        while self.index < len(self.symbol):\n            descriptor = self.parse_descriptor()\n            result.append(descriptor)\n        return result\n\n    def parse_descriptor(self) -> SymbolDescriptor:\n        \"\"\"\n        Parse a single descriptor in the symbol\n\n        Returns:\n            SymbolDescriptor - The descriptor in the symbol\n        \"\"\"\n        next_char = self.current()\n        if next_char == \"(\":\n            self.index += 1\n            name = self.accept_identifier(\"parameter name\")\n            descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Parameter)\n            self.accept_character(\")\", \"closing parameter name\")\n            return descriptor\n        elif next_char == \"[\":\n            self.index += 1\n            name = self.accept_identifier(\"type parameter name\")\n            descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.TypeParameter)\n            self.accept_character(\"]\", \"closing type parameter name\")\n            return descriptor\n        else:\n            name = self.accept_identifier(\"descriptor name\")\n            suffix = self.current()\n            self.index += 1\n            if suffix == \"(\":\n                disambiguator = \"\"\n                if self.current() != \")\":\n                    disambiguator = self.accept_identifier(\"method disambiguator\")\n                descriptor = SymbolDescriptor(\n                    name, SymbolDescriptor.ScipSuffix.Method, disambiguator\n                )\n                self.accept_character(\")\", \"closing method\")\n                self.accept_character(\".\", \"closing method\")\n                return descriptor\n            elif suffix == \"/\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Namespace)\n            elif suffix == \".\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Term)\n            elif suffix == \"#\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Type)\n            elif suffix == \":\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Meta)\n            elif suffix == \"!\":\n                return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Macro)\n            else:\n                raise self.error(\"Expected a descriptor suffix\")\n\n    def accept_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        if self.current() == \"`\":\n            self.index += 1\n            return self.accept_backtick_escaped_identifier(what)\n        start = self.index\n        while self.index < len(self.symbol) and self.is_identifier_character(self.current()):\n            self.index += 1\n        if start == self.index:\n            raise self.error(\"empty identifier: \" + what)\n        return self.symbol[start : self.index]\n\n    def accept_space_escaped_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol, where the identifier is escaped by spaces\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        return self.accept_escaped_identifier(what, \" \")\n\n    def accept_backtick_escaped_identifier(self, what: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol,\n            where the identifier is escaped by backticks\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        return self.accept_escaped_identifier(what, \"`\")\n\n    def accept_escaped_identifier(self, what: str, escape_character: str) -> str:\n        \"\"\"\n        Accepts an identifier from the symbol,\n            where the identifier is escaped by a given character\n\n        Args:\n            what (str): The name of the identifier\n\n        Returns:\n            str - The identifier\n        \"\"\"\n        builder = []\n        while self.index < len(self.symbol):\n            ch = self.current()\n            if ch == escape_character:\n                self.index += 1\n                if self.index >= len(self.symbol):\n                    break\n                if self.current() == escape_character:\n                    builder.append(ch)\n                else:\n                    return \"\".join(builder)\n            else:\n                builder.append(ch)\n            self.index += 1\n        raise self.error(\n            f\"reached end of symbol while parsing <{what}>, expected a '{escape_character}' character\"\n        )\n\n    def accept_character(self, r: str, what: str):\n        \"\"\"\n        Accepts a character from the symbol\n\n        Args:\n            r (str): The character to accept\n            what (str): The name of the character\n        \"\"\"\n        if self.current() == r:\n            self.index += 1\n        else:\n            raise self.error(f\"expected '{r}', obtained '{self.current()}', while parsing {what}\")\n\n    @staticmethod\n    def is_identifier_character(c: str) -> bool:\n        \"\"\"\n        Checks if a character is a valid identifier character\n\n        Args:\n            c (str): The character to check\n\n        \"\"\"\n        return c.isalpha() or c.isdigit() or c in [\"-\", \"+\", \"$\", \"_\"]\n\n\n", "document": "# SymbolParser\n\n`SymbolParser` is a class that translates the logic defined in [this Go implementation](https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go) to parse URIs into structured objects. It converts symbol URIs into a list of `SymbolDescriptor` objects, which make up the components of the URI.\n\n## Overview\n\n`SymbolParser` is a utility class to help extract information from symbol URIs. It provides various methods to accept and identify different parts of the URI, such as accept_identifier, accept_character, and parse_descriptor. It is used primarily for parsing symbol URIs while it is not in hard sync with the Go implementation, it is good enough for most use-cases.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolDescriptor`\n\n## Example\n\nThe following is an example demonstrating how to use the `SymbolParser` to parse a given symbol URI.\n\n```python\nfrom automata_docs.core.symbol.parser import SymbolParser\n\nsymbol_uri = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\nparser = SymbolParser(symbol_uri)\ndescriptors = parser.parse_descriptors()\n```\n\n## Limitations\n\n`SymbolParser` is not in hard sync with the Go implementation, meaning some discrepancies might exist between the two implementations. Furthermore, it assumes a specific format for the symbol URIs and cannot handle custom or non-standard URI formats.\n\n## Follow-up Questions:\n\n- Are there plans to align the Go and Python implementations?\n- How can this implementation be extended to handle non-standard URIs?", "summary": "`SymbolParser` is a class that translates symbol URIs into structured objects, converting them into a list of `SymbolDescriptor` objects. It provides various methods to accept and identify different parts of the URI and is primarily used for parsing symbol URIs, though it is not in hard sync with the Go implementation. An example of its usage can be found in the code block above. However, it has some limitations, such as not being in hard sync with the Go implementation and assuming a specific format for symbol URIs, making it unable to handle custom or non-standard URI formats.", "context": "\n    Generate the documentation for SymbolParser using the context shown below -\nContext for -\nautomata_docs.core.symbol.parser.SymbolParser -\n\n  Class Docstring:\n    Translation of the logic defined in\n    https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n    to parse URIs into structured objects.\n    It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n    \n  Variables:\n    self.symbol=symbol\n    self.index=0\n    self.symbol_str=symbol\n    self.index=1\n    self.index=1\n    self.index=1\n    self.index=1\n    self.index=1\n    self.index=1\n    self.index=1\n    self.index=1\n    \n  Methods:\n    def __init__(self, symbol: str):\n            \"\"\"\n            Args:\n                symbol (str): The symbol URI to parse\n            \"\"\"\n            self.symbol = symbol\n            self.index = 0\n            self.symbol_str = symbol\n    \n        \n    def accept_backtick_escaped_identifier(self, what: str) -> str:\n            \"\"\"\n            Accepts an identifier from the symbol,\n                where the identifier is escaped by backticks\n    \n            Args:\n                what (str): The name of the identifier\n    \n            Returns:\n                str - The identifier\n            \"\"\"\n            return self.accept_escaped_identifier(what, \"`\")\n    \n        \n    def accept_character(self, r: str, what: str):\n            \"\"\"\n            Accepts a character from the symbol\n    \n            Args:\n                r (str): The character to accept\n                what (str): The name of the character\n            \"\"\"\n            if self.current() == r:\n                self.index += 1\n            else:\n                raise self.error(f\"expected '{r}', obtained '{self.current()}', while parsing {what}\")\n    \n        \n    def accept_escaped_identifier(self, what: str, escape_character: str) -> str:\n            \"\"\"\n            Accepts an identifier from the symbol,\n                where the identifier is escaped by a given character\n    \n            Args:\n                what (str): The name of the identifier\n    \n            Returns:\n                str - The identifier\n            \"\"\"\n            builder = []\n            while self.index < len(self.symbol):\n                ch = self.current()\n                if ch == escape_character:\n                    self.index += 1\n                    if self.index >= len(self.symbol):\n                        break\n                    if self.current() == escape_character:\n                        builder.append(ch)\n                    else:\n                        return \"\".join(builder)\n                else:\n                    builder.append(ch)\n                self.index += 1\n            raise self.error(\n                f\"reached end of symbol while parsing <{what}>, expected a '{escape_character}' character\"\n            )\n    \n        \n    def accept_identifier(self, what: str) -> str:\n            \"\"\"\n            Accepts an identifier from the symbol\n    \n            Args:\n                what (str): The name of the identifier\n    \n            Returns:\n                str - The identifier\n            \"\"\"\n            if self.current() == \"`\":\n                self.index += 1\n                return self.accept_backtick_escaped_identifier(what)\n            start = self.index\n            while self.index < len(self.symbol) and self.is_identifier_character(self.current()):\n                self.index += 1\n            if start == self.index:\n                raise self.error(\"empty identifier: \" + what)\n            return self.symbol[start : self.index]\n    \n        \n    def accept_space_escaped_identifier(self, what: str) -> str:\n            \"\"\"\n            Accepts an identifier from the symbol, where the identifier is escaped by spaces\n    \n            Args:\n                what (str): The name of the identifier\n    \n            Returns:\n                str - The identifier\n            \"\"\"\n            return self.accept_escaped_identifier(what, \" \")\n    \n        \n    def current(self) -> str:\n            \"\"\"\n            Get the current character in the symbol\n    \n            Returns:\n                str - The current character in the symbol\n            \"\"\"\n            return self.symbol[self.index]\n    \n        \n    def error(self, message: str) -> ValueError:\n            \"\"\"\n            Create a ValueError with the symbol and a pointer to the error location\n    \n            Args:\n                message (str): The error message\n            \"\"\"\n            return ValueError(f\"{message}\\n{self.symbol_str}\\n{'_' * self.index}^\")\n    \n        \n    @staticmethod\n        def is_identifier_character(c: str) -> bool:\n            \"\"\"\n            Checks if a character is a valid identifier character\n    \n            Args:\n                c (str): The character to check\n    \n            \"\"\"\n            return c.isalpha() or c.isdigit() or c in [\"-\", \"+\", \"$\", \"_\"]\n    \n    \n    \n    def parse_descriptor(self) -> SymbolDescriptor:\n            \"\"\"\n            Parse a single descriptor in the symbol\n    \n            Returns:\n                SymbolDescriptor - The descriptor in the symbol\n            \"\"\"\n            next_char = self.current()\n            if next_char == \"(\":\n                self.index += 1\n                name = self.accept_identifier(\"parameter name\")\n                descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Parameter)\n                self.accept_character(\")\", \"closing parameter name\")\n                return descriptor\n            elif next_char == \"[\":\n                self.index += 1\n                name = self.accept_identifier(\"type parameter name\")\n                descriptor = SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.TypeParameter)\n                self.accept_character(\"]\", \"closing type parameter name\")\n                return descriptor\n            else:\n                name = self.accept_identifier(\"descriptor name\")\n                suffix = self.current()\n                self.index += 1\n                if suffix == \"(\":\n                    disambiguator = \"\"\n                    if self.current() != \")\":\n                        disambiguator = self.accept_identifier(\"method disambiguator\")\n                    descriptor = SymbolDescriptor(\n                        name, SymbolDescriptor.ScipSuffix.Method, disambiguator\n                    )\n                    self.accept_character(\")\", \"closing method\")\n                    self.accept_character(\".\", \"closing method\")\n                    return descriptor\n                elif suffix == \"/\":\n                    return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Namespace)\n                elif suffix == \".\":\n                    return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Term)\n                elif suffix == \"#\":\n                    return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Type)\n                elif suffix == \":\":\n                    return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Meta)\n                elif suffix == \"!\":\n                    return SymbolDescriptor(name, SymbolDescriptor.ScipSuffix.Macro)\n                else:\n                    raise self.error(\"Expected a descriptor suffix\")\n    \n        \n    def parse_descriptors(self) -> List[SymbolDescriptor]:\n            \"\"\"\n            Parse all descriptors in the symbol\n    \n            Returns:\n                List[SymbolDescriptor] - The descriptors in the symbol\n            \"\"\"\n            result = []\n            while self.index < len(self.symbol):\n                descriptor = self.parse_descriptor()\n                result.append(descriptor)\n            return result\n    \n        \n    def peek_next(self) -> Optional[str]:\n            \"\"\"\n            Peek at the next character in the symbol\n    \n            Returns:\n                Optional[str] - The next character in the symbol,\n                    or None if there is no next character\n            \"\"\"\n            if self.index + 1 < len(self.symbol):\n                return self.symbol[self.index + 1]\n            return None\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n      \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDescriptor -\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Variables:\n        ScipSuffix=DescriptorProto\n        self.name=name\n        self.suffix=suffix\n        self.disambiguator=disambiguator\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n      automata_docs.tests.unit.conftest.symbols\n      \n        @pytest.fixture\n        def symbols():\n            symbols = [\n                # Symbol with a simple attribute\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#description.\"\n                ),\n                # Symbol with a method with foreign argument\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#load().(config_name)\"\n                ),\n                # Symbol with a class method, self as argument\n                # parse_symbol(\n                #     \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `tools.python_tools.python_ast_indexer`/PythonASTIndexer#get_module_path().(self)\"\n                # ),\n                # Symbol with a locally defined object\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.tasks.automata_task_executor`/logger.\"\n                ),\n                # Symbol with a class object and class variable\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#verbose.\"\n                ),\n                # Symbol with a function in a module\n                # parse_symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.coordinator.tests.test_automata_coordinator`/test().(coordinator)\"),\n                # Symbol with a class method\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `evals.eval_helpers`/EvalAction#__init__().(action)\"\n                ),\n                # Symbol with an object\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#CODE.\"\n                ),\n                # Class Name\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#\"\n                ),\n                # Init\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.base.tool`/ToolNotFoundError#__init__().\"\n                ),\n            ]\n        \n            return symbols\n        \n        \n        \n      automata_docs.core.symbol.search.tests.conftest.symbols\n      \n        @pytest.fixture\n        def symbols():\n            symbols = [\n                # Symbol with a simple attribute\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#description.\"\n                ),\n                # Symbol with a method with foreign argument\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#load().(config_name)\"\n                ),\n                # Symbol with a class method, self as argument\n                # parse_symbol(\n                #     \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `tools.python_tools.python_ast_indexer`/PythonASTIndexer#get_module_path().(self)\"\n                # ),\n                # Symbol with a locally defined object\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.tasks.automata_task_executor`/logger.\"\n                ),\n                # Symbol with a class object and class variable\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `config.automata_agent_config`/AutomataAgentConfig#verbose.\"\n                ),\n                # Symbol with a function in a module\n                # parse_symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.coordinator.tests.test_automata_coordinator`/test().(coordinator)\"),\n                # Symbol with a class method\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `evals.eval_helpers`/EvalAction#__init__().(action)\"\n                ),\n                # Symbol with an object\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#CODE.\"\n                ),\n                # Class Name\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.agent.automata_agent_enums`/ActionIndicator#\"\n                ),\n                # Init\n                parse_symbol(\n                    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `core.base.tool`/ToolNotFoundError#__init__().\"\n                ),\n            ]\n        \n            return symbols\n        \n        \n        \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.search.rank`/SymbolRank#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.search.rank", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolRank", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolRank:\n    \"\"\"Computes the PageRank algorithm on symbols in a graph\"\"\"\n\n    def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n        \"\"\"\n        Args:\n            graph (nx.DiGraph): A directed graph\n            config (Optional[SymbolRankConfig]): SymbolRank configuration\n        \"\"\"\n        if not config:\n            config = SymbolRankConfig()\n        self.graph = graph\n        self.config = config\n        self.config.validate(self.config)\n\n    def get_ranks(\n        self,\n        query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n        initial_weights: Optional[Dict[Symbol, float]] = None,\n        dangling: Optional[Dict[Symbol, float]] = None,\n    ) -> List[Tuple[Symbol, float]]:\n        \"\"\"\n        Calculate the SymbolRanks of each node in the graph\n\n        Args:\n            query_to_symbol_similarity (Optional[Dict[Symbol, float]]):\n                query_to_symbol_similarity dictionary\n            initial_weights (Optional[Dict[Symbol, float]]): Initial weights dictionary\n            dangling (Optional[Dict[Symbol, float]]): List of dangling nodes\n\n        Returns:\n            (Dict[str, float]): A dictionary mapping each node to its SymbolRank\n        \"\"\"\n        stochastic_graph = self._prepare_graph()\n        node_count = stochastic_graph.number_of_nodes()\n\n        rank_vec = self._prepare_initial_ranks(stochastic_graph, initial_weights)\n        prepared_similarity = self._prepare_query_to_symbol_similarity(\n            node_count, stochastic_graph, query_to_symbol_similarity\n        )\n        dangling_weights = self._prepare_dangling_weights(dangling, prepared_similarity)\n        dangling_nodes = self._get_dangling_nodes(stochastic_graph)\n\n        for _ in range(self.config.max_iterations):\n            last_rank_vec = rank_vec\n            rank_vec = {k: 0.0 for k in last_rank_vec.keys()}\n            danglesum = self.config.alpha * sum(last_rank_vec[node] for node in dangling_nodes)  # type: ignore\n            for node in rank_vec:\n                for nbr in stochastic_graph[node]:\n                    rank_vec[nbr] += (\n                        self.config.alpha\n                        * last_rank_vec[node]\n                        * stochastic_graph[node][nbr][self.config.weight_key]\n                    )\n                rank_vec[node] += (\n                    danglesum * dangling_weights[node]\n                    + (1.0 - self.config.alpha) * prepared_similarity[node]\n                )\n\n            err = sum(abs(rank_vec[node] - last_rank_vec[node]) for node in rank_vec)\n            if err < node_count * self.config.tolerance:\n                sorted_dict = sorted(rank_vec.items(), key=lambda x: x[1], reverse=True)\n                return sorted_dict\n\n        raise NetworkXError(\n            \"SymbolRank: power iteration failed to converge in %d iterations.\"\n            % self.config.max_iterations\n        )\n\n    def _prepare_graph(self) -> nx.DiGraph:\n        \"\"\"\n        Prepare the graph for the SymbolRank algorithm. If the graph is not directed,\n        convert it to a directed graph. Create a stochastic graph from the given graph\n\n        Returns:\n            stochastic_graph (nx.DiGraph): A NetworkX stochastic DiGraph\n        \"\"\"\n        if not self.graph.is_directed():\n            direct_graph = self.graph.to_directed()\n        else:\n            direct_graph = self.graph\n\n        stochastic_graph = nx.stochastic_graph(direct_graph, weight=self.config.weight_key)\n        return stochastic_graph\n\n    def _prepare_initial_ranks(\n        self,\n        stochastic_graph: nx.DiGraph,\n        initial_weights: Optional[Dict[Symbol, float]],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare initial rank values for each node in the graph\n\n        Args:\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph.\n            initial_weights (Optional[Dict[Symbol, float]]): Initial weight for each node\n\n        Returns:\n            (Dict[Symbol, float]): A dictionary mapping each node to its initial rank\n        \"\"\"\n\n        node_count = stochastic_graph.number_of_nodes()\n        if initial_weights is None:\n            return {k: 1.0 / node_count for k in stochastic_graph}\n        else:\n            s = sum(initial_weights.values())\n            return {k: v / s for k, v in initial_weights.items()}\n\n    def _prepare_query_to_symbol_similarity(\n        self,\n        node_count: int,\n        stochastic_graph: nx.DiGraph,\n        query_to_symbol_similarity: Optional[Dict[Symbol, float]],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare the symbol similarity matrix\n\n        Note - The term \"personalization\" is used in the context of the PageRank algorithm\n            to refer to a mechanism that allows the modification of the rank computation\n            based on some user-defined preferences. In this instance, symbol similarity is\n            an implementation of personalization that allows the modification of the rank\n            computation based on symbol source-code similarity\n\n        Args:\n            node_count (int): Number of nodes in the graph\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph\n            query_to_symbol_similarity (Optional[Dict[Symbol, float]]): Similarity between the query\n                and each node\n\n        Returns:\n            (Dict[Symbol, float]): A dictionary mapping each node to its symbol similarity\n        \"\"\"\n        if query_to_symbol_similarity is None:\n            return {k: 1.0 / node_count for k in stochastic_graph}\n        else:\n            missing = set(self.graph) - set(query_to_symbol_similarity)\n            if missing:\n                raise NetworkXError(\n                    \"query_to_symbol_similarity dictionary must have a value for every node. Missing nodes %s\"\n                    % missing\n                )\n            s = sum(query_to_symbol_similarity.values())\n            return {k: v / s for k, v in query_to_symbol_similarity.items()}\n\n    def _prepare_dangling_weights(\n        self,\n        dangling: Optional[Dict[Symbol, float]],\n        query_to_symbol_similarity: Dict[Symbol, float],\n    ) -> Dict[Symbol, float]:\n        \"\"\"\n        Prepare the weights for dangling nodes\n\n        Args:\n            dangling (list): List of dangling nodes.\n            query_to_symbol_similarity (Dict[str, float]): query_to_symbol_similarity dictionary\n\n        Returns:\n            (Dict[str, float]): A dictionary mapping each node to its weight\n        \"\"\"\n        if dangling is None:\n            return query_to_symbol_similarity\n        else:\n            missing = set(self.graph) - set(dangling)\n            if missing:\n                raise NetworkXError(\n                    \"Dangling node dictionary must have a value for every node. Missing nodes %s\"\n                    % missing\n                )\n            s = sum(dangling.values())\n            return {k: v / s for k, v in dangling.items()}\n\n    def _get_dangling_nodes(self, stochastic_graph: nx.DiGraph) -> List[Hashable]:\n        \"\"\"\n        Identify dangling nodes in the graph\n\n        Args:\n            stochastic_graph (nx.DiGraph): A NetworkX DiGraph\n\n        Returns:\n            (list): List of dangling nodes\n        \"\"\"\n        return [\n            node\n            for node in stochastic_graph\n            if stochastic_graph.out_degree(node, weight=self.config.weight_key) == 0.0\n        ]\n", "document": "# SymbolRank\n\n`SymbolRank` is a class that computes the PageRank algorithm on symbols in a graph. Given a directed graph and an optional configuration, it calculates the ranks of each node in the graph and returns a sorted list of tuples containing the symbol and its corresponding rank.\n\nUse `SymbolRank` for applications where you need to rank symbols in a graph based on their importance or relevance.\n\n## Overview\n\n`SymbolRank` takes in a directed graph and an optional configuration, and provides a method `get_ranks` to calculate the rank for each node in the graph. `get_ranks` can also be supplied with optional dictionaries for query-to-symbol similarity, initial weights, and dangling nodes.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.search.rank.SymbolRankConfig`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.symbol.search.symbol_search.SymbolSearch`\n- `automata_docs.core.embedding.embedding_types.NormType`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n\n## Example\n\nThe following example demonstrates how to use the `SymbolRank` class to calculate the ranks of nodes in a graph.\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.search.rank import SymbolRank\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\n# Create a directed graph\nG = nx.DiGraph()\nG.add_edge(1, 2)\nG.add_edge(2, 3)\nG.add_edge(3, 1)\n\n# Create a SymbolRankConfig object\nconfig = SymbolRankConfig()\n\n# Initialize the SymbolRank object with the graph and configuration\npagerank = SymbolRank(G, config)\n\n# Calculate the ranks of nodes in the graph\nranks = pagerank.get_ranks()\n\n# Display the computed ranks\nprint(ranks)\n```\n\n## Limitations\n\nThe main limitation of `SymbolRank` is that it relies on the NetworkX library for graph operations, which may have certain performance constraints. Moreover, setting up the graph and configuring the `SymbolRank` object requires some understanding of the underlying algorithms and representation of symbols.\n\n## Follow-up Questions:\n\n- Is there any specific guidance on how to prepare the input graph for optimal results?\n- Are there any performance metrics or benchmarks available for this implementation?", "summary": "`SymbolRank` is a class that computes the PageRank algorithm on symbols in a directed graph. It takes in the graph and an optional configuration, and then calculates the rank of each node using the `get_ranks` method. This class is suited for applications that need to rank symbols based on their importance or relevance. Here's an example of how to use the `SymbolRank` class:\n\n```python\nimport networkx as nx\nfrom automata_docs.core.symbol.search.rank import SymbolRank\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\n# Create a directed graph\nG = nx.DiGraph()\nG.add_edge(1, 2)\nG.add_edge(2, 3)\nG.add_edge(3, 1)\n\n# Create a SymbolRankConfig object\nconfig = SymbolRankConfig()\n\n# Initialize the SymbolRank object with the graph and configuration\npagerank = SymbolRank(G, config)\n\n# Calculate the ranks of nodes in the graph\nranks = pagerank.get_ranks()\n\n# Display the computed ranks\nprint(ranks)\n```\n\nA primary limitation of `SymbolRank` is its dependency on the NetworkX library, which may have performance constraints. Additionally, setting up the graph and configuring the object requires some understanding of the underlying algorithms and representation of symbols.", "context": "\n    Generate the documentation for SymbolRank using the context shown below -\nContext for -\nautomata_docs.core.symbol.search.rank.SymbolRank -\n\n  Class Docstring:\n    Computes the PageRank algorithm on symbols in a graph\n    \n  Variables:\n    self.graph=graph\n    self.config=config\n    \n  Methods:\n    def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n            \"\"\"\n            Args:\n                graph (nx.DiGraph): A directed graph\n                config (Optional[SymbolRankConfig]): SymbolRank configuration\n            \"\"\"\n            if not config:\n                config = SymbolRankConfig()\n            self.graph = graph\n            self.config = config\n            self.config.validate(self.config)\n    \n        \n    def get_ranks(\n            self,\n            query_to_symbol_similarity: Optional[Dict[Symbol, float]] = None,\n            initial_weights: Optional[Dict[Symbol, float]] = None,\n            dangling: Optional[Dict[Symbol, float]] = None,\n        ) -> List[Tuple[Symbol, float]]:\n            \"\"\"\n            Calculate the SymbolRanks of each node in the graph\n    \n            Args:\n                query_to_symbol_similarity (Optional[Dict[Symbol, float]]):\n                    query_to_symbol_similarity dictionary\n                initial_weights (Optional[Dict[Symbol, float]]): Initial weights dictionary\n                dangling (Optional[Dict[Symbol, float]]): List of dangling nodes\n    \n            Returns:\n                (Dict[str, float]): A dictionary mapping each node to its SymbolRank\n            \"\"\"\n            stochastic_graph = self._prepare_graph()\n            node_count = stochastic_graph.number_of_nodes()\n    \n            rank_vec = self._prepare_initial_ranks(stochastic_graph, initial_weights)\n            prepared_similarity = self._prepare_query_to_symbol_similarity(\n                node_count, stochastic_graph, query_to_symbol_similarity\n            )\n            dangling_weights = self._prepare_dangling_weights(dangling, prepared_similarity)\n            dangling_nodes = self._get_dangling_nodes(stochastic_graph)\n    \n            for _ in range(self.config.max_iterations):\n                last_rank_vec = rank_vec\n                rank_vec = {k: 0.0 for k in last_rank_vec.keys()}\n                danglesum = self.config.alpha * sum(last_rank_vec[node] for node in dangling_nodes)  # type: ignore\n                for node in rank_vec:\n                    for nbr in stochastic_graph[node]:\n                        rank_vec[nbr] += (\n                            self.config.alpha\n                            * last_rank_vec[node]\n                            * stochastic_graph[node][nbr][self.config.weight_key]\n                        )\n                    rank_vec[node] += (\n                        danglesum * dangling_weights[node]\n                        + (1.0 - self.config.alpha) * prepared_similarity[node]\n                    )\n    \n                err = sum(abs(rank_vec[node] - last_rank_vec[node]) for node in rank_vec)\n                if err < node_count * self.config.tolerance:\n                    sorted_dict = sorted(rank_vec.items(), key=lambda x: x[1], reverse=True)\n                    return sorted_dict\n    \n            raise NetworkXError(\n                \"SymbolRank: power iteration failed to converge in %d iterations.\"\n                % self.config.max_iterations\n            )\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_rank.test_get_ranks\n      \n        def test_get_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == nodes\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n        \n      automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n      \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n      automata_docs.tests.unit.test_symbol_rank.test_prepare_initial_ranks\n      \n        def test_prepare_initial_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            initial_ranks = pagerank._prepare_initial_ranks(G, None)\n            assert len(initial_ranks) == nodes\n            assert sum(initial_ranks.values()) == pytest.approx(1.0)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.search.rank.SymbolRankConfig -\n    \n      Class Docstring:\n        A configuration class for SymbolRank\n        \n      Variables:\n        alpha=0.25\n        max_iterations=100\n        tolerance=1.0e-6\n        weight_key=\"weight\"\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.search.symbol_search.SymbolSearch -\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Variables:\n        self.symbol_graph=symbol_graph\n        self.symbol_similarity=symbol_similarity\n        self.symbol_rank=SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n      automata_docs.tests.unit.conftest.symbol_searcher\n      \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n    Context for -\n    automata_docs.core.embedding.embedding_types.NormType -\n    \n      Variables:\n        L1=\"l1\"\n        L2=\"l2\"\n        SOFTMAX=\"softmax\"\n        \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.search.rank`/SymbolRankConfig#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.search.rank", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolRankConfig", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class SymbolRankConfig(BaseModel):\n    \"\"\"A configuration class for SymbolRank\"\"\"\n\n    alpha: float = 0.25\n    max_iterations: int = 100\n    tolerance: float = 1.0e-6\n    weight_key: str = \"weight\"\n\n    @classmethod\n    def validate(cls, config):\n        \"\"\"\n        Validate configuration parameters.\n\n        Args:\n            config (SymbolRankConfig): Configuration parameters.\n\n        Raises:\n            ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n        \"\"\"\n        if not 0 < config.alpha < 1:\n            raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n\n        if not 1.0e-8 < config.tolerance < 1.0e-4:\n            raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n\n\n", "document": "# SymbolRankConfig\n\n`SymbolRankConfig` is a configuration class for `SymbolRank`. It provides a way to configure the alpha, maximum iterations, tolerance, and weight_key parameters in `SymbolRank`. The class also includes a validation method to check whether the provided configuration parameters are valid or not.\n\n## Overview\n\n`SymbolRankConfig` can be used to set up alpha, maximum iterations, tolerance, and weight_key for `SymbolRank`. The class validates the configuration parameters with the validate method, which raises a ValueError if the alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n\n## Related Symbols\n\n- `automata_docs.core.symbol.search.rank.SymbolRank`\n- `automata_docs.tests.unit.test_symbol_rank.test_get_ranks`\n- `automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph`\n- `automata_docs.tests.unit.test_symbol_rank.test_prepare_initial_ranks`\n- `automata_docs.tests.unit.test_symbol_rank.test_pagerank_config_validation`\n\n## Example\n\nThe following example demonstrates how to create a `SymbolRankConfig` instance and use it for checking the validity of SymbolRank configuration parameters.\n\n```python\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\nconfig = SymbolRankConfig(alpha=0.25, max_iterations=100, tolerance=1.0e-6, weight_key=\"weight\")\nconfig.validate(config)\n```\n\n## Limitations\n\nThe primary limitation of `SymbolRankConfig` is that it only provides validation for the given configuration parameters and does not support more complex relationships or additional parameters. It assumes a specific set of parameters for `SymbolRank` and does not allow for easy modification or customization.\n\n## Follow-up Questions:\n\n- How can we extend the `SymbolRankConfig` class to support more complex relationships between the parameters or additional parameters?", "summary": "`SymbolRankConfig` is a configuration class for `SymbolRank` that allows users to configure alpha, maximum iterations, tolerance, and weight_key parameters. It includes a validation method to check if the provided parameters are valid, raising a ValueError if the alpha is not in (0, 1) or tolerance is not in (1e-4, 1e-8). However, it has a limitation of only providing validation for given parameters and doesn't support complex relationships or additional parameters.\n\nExample:\n```python\nfrom automata_docs.core.symbol.search.rank import SymbolRankConfig\n\nconfig = SymbolRankConfig(alpha=0.25, max_iterations=100, tolerance=1.0e-6, weight_key=\"weight\")\nconfig.validate(config)\n```\n", "context": "\n    Generate the documentation for SymbolRankConfig using the context shown below -\nContext for -\nautomata_docs.core.symbol.search.rank.SymbolRankConfig -\n\n  Class Docstring:\n    A configuration class for SymbolRank\n    \n  Variables:\n    alpha=0.25\n    max_iterations=100\n    tolerance=1.0e-6\n    weight_key=\"weight\"\n    \n  Methods:\n    @classmethod\n        def validate(cls, config):\n            \"\"\"\n            Validate configuration parameters.\n    \n            Args:\n                config (SymbolRankConfig): Configuration parameters.\n    \n            Raises:\n                ValueError: If alpha is not in (0, 1), or tolerance is not in (1e-4, 1e-8).\n            \"\"\"\n            if not 0 < config.alpha < 1:\n                raise ValueError(f\"alpha must be in (0,1), but got {config.alpha}\")\n    \n            if not 1.0e-8 < config.tolerance < 1.0e-4:\n                raise ValueError(f\"tolerance must be in (1e-4,1e-8), but got {config.tolerance}\")\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_rank.test_get_ranks\n      \n        def test_get_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == nodes\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n        \n        \n      automata_docs.tests.unit.test_symbol_rank.test_get_ranks_small_graph\n      \n        def test_get_ranks_small_graph():\n            G = DiGraph()\n            G.add_edge(1, 2)\n            G.add_edge(2, 3)\n            G.add_edge(3, 1)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            ranks = pagerank.get_ranks()\n            assert len(ranks) == 3\n            assert sum([ele[1] for ele in ranks]) == pytest.approx(1.0)\n        \n    Context for -\n    automata_docs.core.symbol.search.rank.SymbolRank -\n    \n      Class Docstring:\n        Computes the PageRank algorithm on symbols in a graph\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        \n      Methods:\n        def __init__(self, graph: nx.DiGraph, config: Optional[SymbolRankConfig] = None):\n                \"\"\"\n                Args:\n                    graph (nx.DiGraph): A directed graph\n                    config (Optional[SymbolRankConfig]): SymbolRank configuration\n                \"\"\"\n                if not config:\n                    config = SymbolRankConfig()\n                self.graph = graph\n                self.config = config\n                self.config.validate(self.config)\n        \n            \n      automata_docs.tests.unit.test_symbol_rank.test_prepare_initial_ranks\n      \n        def test_prepare_initial_ranks():\n            nodes = 10\n            edges = 20\n            G = generate_random_graph(nodes, edges)\n            config = SymbolRankConfig()\n            pagerank = SymbolRank(G, config)\n        \n            initial_ranks = pagerank._prepare_initial_ranks(G, None)\n            assert len(initial_ranks) == nodes\n            assert sum(initial_ranks.values()) == pytest.approx(1.0)\n        \n        \n        \n      automata_docs.tests.unit.test_symbol_rank.test_pagerank_config_validation\n      \n        def test_pagerank_config_validation():\n            with pytest.raises(ValueError):\n                invalid_config_alpha = SymbolRankConfig(alpha=1.5, max_iterations=100, tolerance=1.0e-5)\n                invalid_config_alpha.validate(invalid_config_alpha)\n            with pytest.raises(ValueError):\n                invalid_config_tolerance = SymbolRankConfig(\n                    alpha=0.5, max_iterations=100, tolerance=1.0e-3\n                )\n                invalid_config_tolerance.validate(invalid_config_tolerance)\n        \n        \n        \n      automata_docs.tests.unit.conftest.symbol_searcher\n      \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n    Context for -\n    automata_docs.core.embedding.embedding_types.NormType -\n    \n      Variables:\n        L1=\"l1\"\n        L2=\"l2\"\n        SOFTMAX=\"softmax\"\n        \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n    Context for -\n    automata_docs.core.symbol.search.symbol_search.SymbolSearch -\n    \n      Class Docstring:\n        Searches for symbols in a SymbolGraph\n        \n      Variables:\n        self.symbol_graph=symbol_graph\n        self.symbol_similarity=symbol_similarity\n        self.symbol_rank=SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n      Methods:\n        def __init__(\n                self,\n                symbol_graph: SymbolGraph,\n                symbol_similarity: SymbolSimilarity,\n                symbol_rank_config: Optional[SymbolRankConfig],\n                code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n                *args,\n                **kwargs,\n            ):\n                \"\"\"\n                Args:\n                    symbol_graph (SymbolGraph): A SymbolGraph\n                    symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                    symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                    code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n                \"\"\"\n        \n                if not code_subgraph:\n                    code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                        kwargs.get(\"flow_rank\", \"bidirectional\")\n                    )\n                else:\n                    if not code_subgraph.parent == symbol_graph:\n                        raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n        \n                graph_symbols = symbol_graph.get_all_available_symbols()\n                embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n                available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n                SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n        \n                # TODO - Do we need to filter the SymbolGraph as well?\n                self.symbol_graph = symbol_graph\n                self.symbol_similarity = symbol_similarity\n                symbol_similarity.set_available_symbols(available_symbols)\n                self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.search.symbol_search`/SymbolSearch#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.search.symbol_search", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolSearch", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolSearch:\n    \"\"\"Searches for symbols in a SymbolGraph\"\"\"\n\n    def __init__(\n        self,\n        symbol_graph: SymbolGraph,\n        symbol_similarity: SymbolSimilarity,\n        symbol_rank_config: Optional[SymbolRankConfig],\n        code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n        *args,\n        **kwargs,\n    ):\n        \"\"\"\n        Args:\n            symbol_graph (SymbolGraph): A SymbolGraph\n            symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n            symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n            code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n        \"\"\"\n\n        if not code_subgraph:\n            code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                kwargs.get(\"flow_rank\", \"bidirectional\")\n            )\n        else:\n            if not code_subgraph.parent == symbol_graph:\n                raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n\n        graph_symbols = symbol_graph.get_all_available_symbols()\n        embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n        available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n        SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n\n        # TODO - Do we need to filter the SymbolGraph as well?\n        self.symbol_graph = symbol_graph\n        self.symbol_similarity = symbol_similarity\n        symbol_similarity.set_available_symbols(available_symbols)\n        self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n\n    def symbol_rank_search(self, query: str) -> SymbolRankResult:\n        \"\"\"\n        Fetches the list of the SymbolRank similar symbols ordered by rank\n\n        Args:\n            query (str): The query to search for\n\n        Returns:\n            A list of tuples of the form (symbol_uri, rank)\n        \"\"\"\n        query_vec = self.symbol_similarity.get_query_similarity_dict(query)\n        transformed_query_vec = SymbolSearch.transform_dict_values(\n            query_vec, SymbolSearch.shifted_z_score_sq\n        )\n        ranks = self.symbol_rank.get_ranks(query_to_symbol_similarity=transformed_query_vec)\n        return ranks\n\n    def symbol_references(self, symbol_uri: str) -> SymbolReferencesResult:\n        \"\"\"\n        Gets the list a symbol-based search\n\n        Args:\n            symbol_uri (str): The symbol to search for\n\n        Returns:\n            A dict of paths to files that contain the\n                symbol and corresponding line numbers\n        \"\"\"\n        # TODO - Add parsing upstream or here to parse references\n        return self.symbol_graph.get_references_to_symbol(parse_symbol(symbol_uri))\n\n    def retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult:\n        \"\"\"\n        Finds the raw text of a module, class, method, or standalone function\n\n        Args:\n            symbol_uri (str): The symbol to retrieve\n\n        Returns:\n            The raw text of the symbol or None if not found\n        \"\"\"\n        node = convert_to_fst_object(parse_symbol(symbol_uri))\n        return str(node) if node else None\n\n    def exact_search(self, pattern: str) -> ExactSearchResult:\n        \"\"\"\n        Performs a exact search across the indexed codebase\n\n        Args:\n            pattern (str): The pattern to search for\n\n        Returns:\n            A dict of paths to files that contain the pattern and corresponding line numbers\n        \"\"\"\n        return SymbolSearch.find_pattern_in_modules(pattern)\n\n    def process_query(\n        self, query: str\n    ) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]:\n        \"\"\"\n        Processes an NLP-formatted query and return the results of the appropriate search\n\n        Args:\n            query: The query to process\n\n        Returns:\n            The results of the search\n        \"\"\"\n        parts = query.split()\n        if len(parts) < 2:\n            raise ValueError(\n                \"Invalid NLP query. It must have at least two parts: 'type:...' and 'query...'\"\n            )\n\n        search_type = parts[0][len(\"type:\") :].lower()\n        query_remainder = \" \".join(parts[1:])\n\n        if search_type == \"symbol_references\":\n            return self.symbol_references(query_remainder)\n        elif search_type == \"symbol_rank\":\n            return self.symbol_rank_search(query_remainder)\n        elif search_type == \"exact\":\n            return self.exact_search(query_remainder)\n        elif search_type == \"source\":\n            return self.retrieve_source_code_by_symbol(query_remainder)\n        else:\n            raise ValueError(f\"Unknown search type: {search_type}\")\n\n    @staticmethod\n    def filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]):\n        \"\"\"\n        Filters a graph to only contain nodes that are in the available_symbols set\n\n        Args:\n            graph: The graph to filter\n            available_symbols: The set of symbols to keep\n        \"\"\"\n        graph_nodes = deepcopy(graph.nodes())\n        for symbol in graph_nodes:\n            if symbol not in available_symbols:\n                graph.remove_node(symbol)\n\n    @staticmethod\n    def shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray:\n        \"\"\"\n        Compute z-score of a list of values\n\n        Args:\n            values: List of values to compute z-score for\n\n        Returns:\n            List of z-scores\n        \"\"\"\n        if not isinstance(values, np.ndarray):\n            values = np.array(values)\n\n        mean = np.mean(values)\n        std_dev = np.std(values)\n        zscores = [(value - mean) / std_dev for value in values]\n        return (zscores - np.min(zscores)) ** 2\n\n    @staticmethod\n    def transform_dict_values(\n        dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n    ):\n        \"\"\"\n        Apply a function to each value in a dictionary and return a new dictionary\n\n        Args:\n            dictionary: Dictionary to transform\n            func: Function to apply to each value\n\n        Returns:\n            Dictionary with transformed values\n        \"\"\"\n        # Apply the function to the accumulated values\n        transformed_values = func([dictionary[key] for key in dictionary])\n\n        # Re-distribute the transformed values back into the dictionary\n        transformed_dict = {}\n        for i, key in enumerate(dictionary):\n            transformed_dict[key] = transformed_values[i]\n        return transformed_dict\n\n    @staticmethod\n    def find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]:\n        \"\"\"\n        Finds exact line matches for a given pattern string in all modules\n\n        Args:\n            pattern (str): The pattern string to search for\n\n        Returns:\n            Dict[str, List[int]]: A dictionary with module paths as keys and a list of line numbers as values\n        \"\"\"\n        matches = {}\n        module_map = LazyModuleTreeMap.cached_default()\n        for module_path, module in module_map.items():\n            if module:\n                lines = module.dumps().splitlines()\n                line_numbers = [i + 1 for i, line in enumerate(lines) if pattern in line.strip()]\n                if line_numbers:\n                    matches[module_path] = line_numbers\n        return matches\n", "document": "# SymbolSearch\n\n`SymbolSearch` is a class that searches for symbols in a `SymbolGraph`. It provides several search methods, including exact search, symbol rank search, and symbol references search. By leveraging different search methods, it allows users to search for specific patterns, retrieve source code by symbol, or even process queries in an NLP-based fashion.\n\n## Overview\n\n`SymbolSearch` takes a `SymbolGraph`, a `SymbolSimilarity`, and a `SymbolRankConfig` object as input, and optionally a `SymbolGraph.SubGraph` object. It first filters the input graph to only contain nodes that are available_symbols and are supported by the `SymbolSimilarity` object's embedding handler. After that, it provides different search methods to process queries and search for symbols in various ways.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.search.symbol_search.ExactSearchResult`\n- `automata_docs.core.symbol.search.symbol_search.SymbolRankResult`\n- `automata_docs.core.symbol.search.symbol_search.SymbolReferencesResult`\n- `automata_docs.core.symbol.search.symbol_search.SourceCodeResult`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolSearch` and process a query to perform a symbol rank search.\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.symbol.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.symbol.search.symbol_search import SymbolSearch\nfrom config.symbol_rank_config import SymbolRankConfig\n\nsymbol_graph = SymbolGraph(index_path=\"your_index_path\")\nsymbol_similarity = SymbolSimilarity(embedding_handler=\"your_embedding_handler\")\nsymbol_rank_config = SymbolRankConfig()\n\nsymbol_searcher = SymbolSearch(symbol_graph, symbol_similarity, symbol_rank_config)\n\nquery = \"type:symbol_rank example_symbol_uri\"\nresult = symbol_searcher.process_query(query)\n```\n\n## Limitations\n\n`SymbolSearch` has some limitations. Specifically, it currently only supports searches based on the input graph and available symbols. It may not cover every possible search scenario desired by the users. Additionally, the search methods rely on pre-trained models, which may not provide perfect results for very specific or niche search scenarios.\n\n## Follow-up Questions:\n\n- Is there a possibility to extend the search capabilities of `SymbolSearch` to cover more scenarios or support custom search methods?", "summary": "`SymbolSearch` is a class in Automata Docs that enables searching for symbols in a `SymbolGraph`. It takes in several objects such as `SymbolGraph`, `SymbolSimilarity`, and `SymbolRankConfig`, filters the input graph based on available symbols and supported embedding handlers, and provides various search methods such as exact search, symbol rank search, and symbol references search. This allows users to perform pattern-specific searches and retrieve source code by symbol. However, it has some limitations, including only supporting searches based on the input graph and available symbols and relying on pre-trained models, which may not cover every search scenario or provide perfect results for very specific scenarios. Here's an example of how to create an instance of `SymbolSearch` and perform a symbol rank search:\n\n```python\nfrom automata_docs.core.symbol.graph import SymbolGraph\nfrom automata_docs.core.symbol.symbol_similarity import SymbolSimilarity\nfrom automata_docs.core.symbol.search.symbol_search import SymbolSearch\nfrom config.symbol_rank_config import SymbolRankConfig\n\nsymbol_graph = SymbolGraph(index_path=\"your_index_path\")\nsymbol_similarity = SymbolSimilarity(embedding_handler=\"your_embedding_handler\")\nsymbol_rank_config = SymbolRankConfig()\n\nsymbol_searcher = SymbolSearch(symbol_graph, symbol_similarity, symbol_rank_config)\n\nquery = \"type:symbol_rank example_symbol_uri\"\nresult = symbol_searcher.process_query(query)\n```", "context": "\n    Generate the documentation for SymbolSearch using the context shown below -\nContext for -\nautomata_docs.core.symbol.search.symbol_search.SymbolSearch -\n\n  Class Docstring:\n    Searches for symbols in a SymbolGraph\n    \n  Variables:\n    self.symbol_graph=symbol_graph\n    self.symbol_similarity=symbol_similarity\n    self.symbol_rank=SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n    \n  Methods:\n    def __init__(\n            self,\n            symbol_graph: SymbolGraph,\n            symbol_similarity: SymbolSimilarity,\n            symbol_rank_config: Optional[SymbolRankConfig],\n            code_subgraph: Optional[SymbolGraph.SubGraph] = None,\n            *args,\n            **kwargs,\n        ):\n            \"\"\"\n            Args:\n                symbol_graph (SymbolGraph): A SymbolGraph\n                symbol_similarity (SymbolSimilarity): A SymbolSimilarity object\n                symbol_rank_config (Optional[SymbolRankConfig]): A SymbolRankConfig object\n                code_subgraph (Optional[SymbolGraph.SubGraph]): A subgraph of the SymbolGraph\n            \"\"\"\n    \n            if not code_subgraph:\n                code_subgraph = symbol_graph.get_rankable_symbol_subgraph(\n                    kwargs.get(\"flow_rank\", \"bidirectional\")\n                )\n            else:\n                if not code_subgraph.parent == symbol_graph:\n                    raise ValueError(\"code_subgraph must be a subgraph of symbol_graph\")\n    \n            graph_symbols = symbol_graph.get_all_available_symbols()\n            embedding_symbols = symbol_similarity.embedding_handler.get_all_supported_symbols()\n            available_symbols = set(graph_symbols).intersection(set(embedding_symbols))\n            SymbolSearch.filter_graph(code_subgraph.graph, available_symbols)\n    \n            # TODO - Do we need to filter the SymbolGraph as well?\n            self.symbol_graph = symbol_graph\n            self.symbol_similarity = symbol_similarity\n            symbol_similarity.set_available_symbols(available_symbols)\n            self.symbol_rank = SymbolRank(code_subgraph.graph, config=symbol_rank_config)\n    \n        \n    def exact_search(self, pattern: str) -> ExactSearchResult:\n            \"\"\"\n            Performs a exact search across the indexed codebase\n    \n            Args:\n                pattern (str): The pattern to search for\n    \n            Returns:\n                A dict of paths to files that contain the pattern and corresponding line numbers\n            \"\"\"\n            return SymbolSearch.find_pattern_in_modules(pattern)\n    \n        \n    @staticmethod\n        def filter_graph(graph: nx.DiGraph, available_symbols: Set[Symbol]):\n            \"\"\"\n            Filters a graph to only contain nodes that are in the available_symbols set\n    \n            Args:\n                graph: The graph to filter\n                available_symbols: The set of symbols to keep\n            \"\"\"\n            graph_nodes = deepcopy(graph.nodes())\n            for symbol in graph_nodes:\n                if symbol not in available_symbols:\n                    graph.remove_node(symbol)\n    \n        \n    @staticmethod\n        def find_pattern_in_modules(pattern: str) -> Dict[str, List[int]]:\n            \"\"\"\n            Finds exact line matches for a given pattern string in all modules\n    \n            Args:\n                pattern (str): The pattern string to search for\n    \n            Returns:\n                Dict[str, List[int]]: A dictionary with module paths as keys and a list of line numbers as values\n            \"\"\"\n            matches = {}\n            module_map = LazyModuleTreeMap.cached_default()\n            for module_path, module in module_map.items():\n                if module:\n                    lines = module.dumps().splitlines()\n                    line_numbers = [i + 1 for i, line in enumerate(lines) if pattern in line.strip()]\n                    if line_numbers:\n                        matches[module_path] = line_numbers\n            return matches\n    \n    def process_query(\n            self, query: str\n        ) -> Union[SymbolReferencesResult, SymbolRankResult, SourceCodeResult, ExactSearchResult,]:\n            \"\"\"\n            Processes an NLP-formatted query and return the results of the appropriate search\n    \n            Args:\n                query: The query to process\n    \n            Returns:\n                The results of the search\n            \"\"\"\n            parts = query.split()\n            if len(parts) < 2:\n                raise ValueError(\n                    \"Invalid NLP query. It must have at least two parts: 'type:...' and 'query...'\"\n                )\n    \n            search_type = parts[0][len(\"type:\") :].lower()\n            query_remainder = \" \".join(parts[1:])\n    \n            if search_type == \"symbol_references\":\n                return self.symbol_references(query_remainder)\n            elif search_type == \"symbol_rank\":\n                return self.symbol_rank_search(query_remainder)\n            elif search_type == \"exact\":\n                return self.exact_search(query_remainder)\n            elif search_type == \"source\":\n                return self.retrieve_source_code_by_symbol(query_remainder)\n            else:\n                raise ValueError(f\"Unknown search type: {search_type}\")\n    \n        \n    def retrieve_source_code_by_symbol(self, symbol_uri: str) -> SourceCodeResult:\n            \"\"\"\n            Finds the raw text of a module, class, method, or standalone function\n    \n            Args:\n                symbol_uri (str): The symbol to retrieve\n    \n            Returns:\n                The raw text of the symbol or None if not found\n            \"\"\"\n            node = convert_to_fst_object(parse_symbol(symbol_uri))\n            return str(node) if node else None\n    \n        \n    @staticmethod\n        def shifted_z_score_sq(values: Union[List[float], np.ndarray]) -> np.ndarray:\n            \"\"\"\n            Compute z-score of a list of values\n    \n            Args:\n                values: List of values to compute z-score for\n    \n            Returns:\n                List of z-scores\n            \"\"\"\n            if not isinstance(values, np.ndarray):\n                values = np.array(values)\n    \n            mean = np.mean(values)\n            std_dev = np.std(values)\n            zscores = [(value - mean) / std_dev for value in values]\n            return (zscores - np.min(zscores)) ** 2\n    \n        \n    def symbol_rank_search(self, query: str) -> SymbolRankResult:\n            \"\"\"\n            Fetches the list of the SymbolRank similar symbols ordered by rank\n    \n            Args:\n                query (str): The query to search for\n    \n            Returns:\n                A list of tuples of the form (symbol_uri, rank)\n            \"\"\"\n            query_vec = self.symbol_similarity.get_query_similarity_dict(query)\n            transformed_query_vec = SymbolSearch.transform_dict_values(\n                query_vec, SymbolSearch.shifted_z_score_sq\n            )\n            ranks = self.symbol_rank.get_ranks(query_to_symbol_similarity=transformed_query_vec)\n            return ranks\n    \n        \n    def symbol_references(self, symbol_uri: str) -> SymbolReferencesResult:\n            \"\"\"\n            Gets the list a symbol-based search\n    \n            Args:\n                symbol_uri (str): The symbol to search for\n    \n            Returns:\n                A dict of paths to files that contain the\n                    symbol and corresponding line numbers\n            \"\"\"\n            # TODO - Add parsing upstream or here to parse references\n            return self.symbol_graph.get_references_to_symbol(parse_symbol(symbol_uri))\n    \n        \n    @staticmethod\n        def transform_dict_values(\n            dictionary: Dict[Any, float], func: Callable[[List[float]], np.ndarray]\n        ):\n            \"\"\"\n            Apply a function to each value in a dictionary and return a new dictionary\n    \n            Args:\n                dictionary: Dictionary to transform\n                func: Function to apply to each value\n    \n            Returns:\n                Dictionary with transformed values\n            \"\"\"\n            # Apply the function to the accumulated values\n            transformed_values = func([dictionary[key] for key in dictionary])\n    \n            # Re-distribute the transformed values back into the dictionary\n            transformed_dict = {}\n            for i, key in enumerate(dictionary):\n                transformed_dict[key] = transformed_values[i]\n            return transformed_dict\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_search.test_exact_search\n      \n        def test_exact_search(symbol_searcher):\n            with patch(\n                \"automata_docs.core.symbol.search.symbol_search.SymbolSearch.find_pattern_in_modules\",\n                return_value=[\"file1\", \"file2\"],\n            ):\n                result = symbol_searcher.exact_search(\"pattern1\")\n                assert result == [\"file1\", \"file2\"]\n        \n        \n        \n      automata_docs.tests.unit.conftest.symbol_searcher\n      \n        @pytest.fixture\n        def symbol_searcher(mocker, symbol_graph_mock):\n            symbol_similarity_mock = mocker.MagicMock(spec=SymbolSimilarity)\n            symbol_similarity_mock.embedding_handler = mocker.MagicMock(spec=SymbolCodeEmbeddingHandler)\n            symbol_rank_config_mock = mocker.MagicMock(spec=SymbolRankConfig)\n        \n            return SymbolSearch(\n                symbol_graph_mock,\n                symbol_similarity_mock,\n                symbol_rank_config_mock,\n            )\n        \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n      automata_docs.tests.unit.test_symbol_search.test_process_queries\n      \n        def test_process_queries(symbols, symbol_searcher, symbol_graph_mock):\n            with patch.object(\n                symbol_searcher, \"symbol_references\", return_value=[\"ref1\", \"ref2\"]\n            ) as mock_method_0:\n                result = symbol_searcher.process_query(\"type:symbol_references %s\" % symbols[0].uri)\n                assert result == [\"ref1\", \"ref2\"]\n            mock_method_0.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(symbol_searcher, \"exact_search\", return_value={\"test\": 0}) as mock_method_1:\n                result = symbol_searcher.process_query(\"type:exact %s\" % symbols[0].uri)\n                assert result == {\"test\": 0}\n            mock_method_1.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"retrieve_source_code_by_symbol\", return_value=\"test\"\n            ) as mock_method_2:\n                result = symbol_searcher.process_query(\"type:source %s\" % symbols[0].uri)\n                assert result == \"test\"\n            mock_method_2.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"symbol_rank_search\", return_value=[(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            ) as mock_method_4:\n                result = symbol_searcher.process_query(\"type:symbol_rank %s\" % symbols[0].uri)\n                assert result == [(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            mock_method_4.assert_called_once_with(symbols[0].uri)\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"invalid_query\")\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"type:unknown query\")\n        \n    Context for -\n    automata_docs.core.symbol.parser.SymbolParser -\n    \n      Class Docstring:\n        Translation of the logic defined in\n        https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n        to parse URIs into structured objects.\n        It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n        \n      Variables:\n        self.symbol=symbol\n        self.index=0\n        self.symbol_str=symbol\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        \n      Methods:\n        def __init__(self, symbol: str):\n                \"\"\"\n                Args:\n                    symbol (str): The symbol URI to parse\n                \"\"\"\n                self.symbol = symbol\n                self.index = 0\n                self.symbol_str = symbol\n        \n            \n      automata_docs.tests.unit.test_symbol_search.test_retrieve_source_code_by_symbol\n      \n        def test_retrieve_source_code_by_symbol(symbols, symbol_searcher):\n            with patch(\n                \"automata_docs.core.symbol.search.symbol_search.convert_to_fst_object\",\n                return_value=\"module1\",\n            ) as mock_method:\n                result = symbol_searcher.retrieve_source_code_by_symbol(symbols[0].uri)\n                assert result == \"module1\"\n            mock_method.assert_called_once_with(symbols[0])\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolReference -\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n        \n      Methods:\n      automata_docs.tests.unit.test_database_vector.test_lookup_symbol\n      \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/Symbol#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "Symbol", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass Symbol:\n    \"\"\"\n    Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n\n    Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n\n    # (<x>)+ stands for one or more repetitions of <x>\n    <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n    <package>              ::= <manager> ' ' <package-name> ' ' <version>\n    <scheme>               ::= any UTF-8, escape spaces with double space.\n    <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n    <package-name>         ::= same as above\n    <version>              ::= same as above\n    <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n    <namespace>            ::= <name> '/'\n    <type>                 ::= <name> '#'\n    <term>                 ::= <name> '.'\n    <meta>                 ::= <name> ':'\n    <macro>                ::= <name> '!'\n    <method>               ::= <name> '(' <method-disambiguator> ').'\n    <type-parameter>       ::= '[' <name> ']'\n    <parameter>            ::= '(' <name> ')'\n    <name>                 ::= <identifier>\n    <method-disambiguator> ::= <simple-identifier>\n    <identifier>           ::= <simple-identifier> | <escaped-identifier>\n    <simple-identifier>    ::= (<identifier-character>)+\n    <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n    <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n    <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n\n    Examples -\n    from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n\n    symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n    )\n\n    symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n    )\n    \"\"\"\n\n    uri: str\n    scheme: str\n    package: SymbolPackage\n    descriptors: Tuple[SymbolDescriptor, ...]\n\n    def __repr__(self) -> str:\n        \"\"\"Converts back into URI string\"\"\"\n        return f\"Symbol({self.uri}, {self.scheme}, {self.package}, {self.descriptors})\"\n\n    def __hash__(self) -> int:\n        \"\"\"Hashes the URI string\"\"\"\n        return hash(self.uri)\n\n    def __eq__(self, other):\n        \"\"\"Compares the URI string\"\"\"\n        if isinstance(other, Symbol):\n            return self.uri == other.uri\n        elif isinstance(other, str):\n            return self.uri == other\n        return False\n\n    def symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind:\n        \"\"\"Converts the suffix of the URI into a PyKind\"\"\"\n        return SymbolDescriptor.convert_scip_to_python_suffix(self.symbol_raw_kind_by_suffix())\n\n    def symbol_raw_kind_by_suffix(self) -> DescriptorProto:\n        \"\"\"Converts the suffix of the URI into a DescriptorProto\"\"\"\n        if self.uri.startswith(\"local\"):\n            return SymbolDescriptor.ScipSuffix.Local\n        if self.uri.endswith(\"/\"):\n            return SymbolDescriptor.ScipSuffix.Namespace\n        elif self.uri.endswith(\"#\"):\n            return SymbolDescriptor.ScipSuffix.Type\n        elif self.uri.endswith(\").\"):\n            return SymbolDescriptor.ScipSuffix.Method\n        elif self.uri.endswith(\".\"):\n            return SymbolDescriptor.ScipSuffix.Term\n        elif self.uri.endswith(\":\"):\n            return SymbolDescriptor.ScipSuffix.Meta\n        elif self.uri.endswith(\")\"):\n            return SymbolDescriptor.ScipSuffix.Parameter\n        elif self.uri.endswith(\"]\"):\n            return SymbolDescriptor.ScipSuffix.TypeParameter\n        else:\n            raise ValueError(f\"Invalid descriptor suffix: {self.uri}\")\n\n    def parent(self) -> \"Symbol\":\n        \"\"\"Returns the parent symbol of the current symbol\"\"\"\n        parent_descriptors = list(self.descriptors)[:-1]\n        return Symbol(self.uri, self.scheme, self.package, tuple(parent_descriptors))\n\n    @property\n    def dotpath(self) -> str:\n        \"\"\"Returns the dotpath of the symbol\"\"\"\n        return \".\".join([ele.name for ele in self.descriptors])\n\n    @property\n    def module_name(self) -> str:\n        \"\"\"Returns the module name of the symbol\"\"\"\n        return self.descriptors[0].name\n\n    @staticmethod\n    def is_local(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is local\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Local\n\n    @staticmethod\n    def is_meta(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is meta\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Meta\n\n    @staticmethod\n    def is_parameter(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is parameter\"\"\"\n        return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Parameter\n\n    @staticmethod\n    def is_protobuf(symbol: \"Symbol\") -> bool:\n        \"\"\"Returns True if the symbol is a protobuf symbol\"\"\"\n        return symbol.module_name.endswith(\"pb2\")\n\n    @classmethod\n    def from_string(cls, symbol_str: str) -> \"Symbol\":\n        \"\"\"\n        Creates a Symbol instance from a string representation\n\n        :param symbol_str: The string representation of the Symbol\n        :return: A Symbol instance\n        \"\"\"\n        # Assuming symbol_str is in the format: \"Symbol({uri}, {scheme}, Package({manager} {name} {version}), [{Descriptor},...])\"\n        # Parse the symbol_str to extract the uri, scheme, package_str, and descriptors_str\n        match = re.search(r\"Symbol\\((.*?), (.*?), Package\\((.*?)\\), \\((.*?)\\)\\)\", symbol_str)\n        if not match:\n            raise ValueError(f\"Invalid symbol_str: {symbol_str}\")\n        uri, _, __, ___ = match.groups()\n        # In current implementation, only the uri is used in re-construcing the symbol\n        from automata_docs.core.symbol.parser import parse_symbol\n\n        return parse_symbol(uri)\n\n\n", "document": "# Symbol\n\n`Symbol` is a class for representing identifiers such as URIs for classes, methods, or local variables. It provides a standardized string representation which can be used interchangeably with the actual `Symbol`. Instances of `Symbol` class contain rich metadata like docstrings for better understanding of the symbol being represented.\n\n## Overview\n\nThe main components of a `Symbol` are its scheme, package, and descriptors. The standardized string representation for `Symbol` follows a specific syntax, detailed in the class docstring. `Symbol` instances can be created and manipulated using various utility methods like `parent()`, `is_local()`, and `dotpath`. Besides that, there are closely related symbols to `Symbol`, as mentioned below.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolReference`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n\n## Example\n\nHere's an example of creating a `Symbol` object by parsing a symbol string:\n\n```python\nfrom automata_docs.core.symbol.parser import parse_symbol\n\n# Create a Symbol instance from the symbol string\nsymbol_string = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = parse_symbol(symbol_string)\n\n# Check the properties of the created symbol\nassert symbol.scheme == \"scip-python\"\nassert symbol.package.manager == \"python\"\nassert symbol.package.name == \"automata_docs\"\nassert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\nassert len(symbol.descriptors) > 0\nassert symbol.dotpath == \"automata_docs.core.agent.automata_agent_enums.ActionIndicator\"\n```\n\n## Limitations\n\nThe primary limitation of the `Symbol` class is that it assumes a specific syntax for the standardized string representation. If the input string deviates from the expected format, `Symbol` might not be created correctly or raise an error. Furthermore, parsing a malformed symbol string can lead to unexpected behavior.\n\n## Follow-up Questions:\n\n- Are there any plans to support parsing other identifier syntaxes in the `Symbol` class?\n- How does the performance of parsing symbol strings scale with large input strings or a vast number of symbols?", "summary": "`Symbol` is a class in the `automata_docs` package for representing identifiers such as URIs for classes, methods, or local variables. It provides a standardized string representation along with rich metadata like docstrings for better understanding. The main components of a `Symbol` are its scheme, package, and descriptors, and it can be created and manipulated using utility methods like `parent()`, `is_local()`, and `dotpath`. Some limitations of the `Symbol` class include its assumption of a specific syntax for the standardized string representation, which can lead to errors or unexpected behavior if the input string deviates from the expected format. Here's an example of creating a `Symbol` object by parsing a symbol string:\n\n```python\nfrom automata_docs.core.symbol.parser import parse_symbol\n\nsymbol_string = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = parse_symbol(symbol_string)\nassert symbol.scheme == \"scip-python\"\n```", "context": "\n    Generate the documentation for Symbol using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.Symbol -\n\n  Class Docstring:\n    Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n    \n    Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n    \n    # (<x>)+ stands for one or more repetitions of <x>\n    <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n    <package>              ::= <manager> ' ' <package-name> ' ' <version>\n    <scheme>               ::= any UTF-8, escape spaces with double space.\n    <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n    <package-name>         ::= same as above\n    <version>              ::= same as above\n    <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n    <namespace>            ::= <name> '/'\n    <type>                 ::= <name> '#'\n    <term>                 ::= <name> '.'\n    <meta>                 ::= <name> ':'\n    <macro>                ::= <name> '!'\n    <method>               ::= <name> '(' <method-disambiguator> ').'\n    <type-parameter>       ::= '[' <name> ']'\n    <parameter>            ::= '(' <name> ')'\n    <name>                 ::= <identifier>\n    <method-disambiguator> ::= <simple-identifier>\n    <identifier>           ::= <simple-identifier> | <escaped-identifier>\n    <simple-identifier>    ::= (<identifier-character>)+\n    <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n    <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n    <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n    \n    Examples -\n    from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n    \n    symbol_class = parse_symbol(\n    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n    )\n    \n    symbol_method = parse_symbol(\n    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n    )\n    \n  Variables:\n    \n  Methods:\n    def __eq__(self, other):\n            \"\"\"Compares the URI string\"\"\"\n            if isinstance(other, Symbol):\n                return self.uri == other.uri\n            elif isinstance(other, str):\n                return self.uri == other\n            return False\n    \n        \n    def __hash__(self) -> int:\n            \"\"\"Hashes the URI string\"\"\"\n            return hash(self.uri)\n    \n        \n    def __repr__(self) -> str:\n            \"\"\"Converts back into URI string\"\"\"\n            return f\"Symbol({self.uri}, {self.scheme}, {self.package}, {self.descriptors})\"\n    \n        \n    @property\n        def dotpath(self) -> str:\n            \"\"\"Returns the dotpath of the symbol\"\"\"\n            return \".\".join([ele.name for ele in self.descriptors])\n    \n        \n    @classmethod\n        def from_string(cls, symbol_str: str) -> \"Symbol\":\n            \"\"\"\n            Creates a Symbol instance from a string representation\n    \n            :param symbol_str: The string representation of the Symbol\n            :return: A Symbol instance\n            \"\"\"\n            # Assuming symbol_str is in the format: \"Symbol({uri}, {scheme}, Package({manager} {name} {version}), [{Descriptor},...])\"\n            # Parse the symbol_str to extract the uri, scheme, package_str, and descriptors_str\n            match = re.search(r\"Symbol\\((.*?), (.*?), Package\\((.*?)\\), \\((.*?)\\)\\)\", symbol_str)\n            if not match:\n                raise ValueError(f\"Invalid symbol_str: {symbol_str}\")\n            uri, _, __, ___ = match.groups()\n            # In current implementation, only the uri is used in re-construcing the symbol\n            from automata_docs.core.symbol.parser import parse_symbol\n    \n            return parse_symbol(uri)\n    \n    \n    \n    @staticmethod\n        def is_local(symbol: \"Symbol\") -> bool:\n            \"\"\"Returns True if the symbol is local\"\"\"\n            return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Local\n    \n        \n    @staticmethod\n        def is_meta(symbol: \"Symbol\") -> bool:\n            \"\"\"Returns True if the symbol is meta\"\"\"\n            return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Meta\n    \n        \n    @staticmethod\n        def is_parameter(symbol: \"Symbol\") -> bool:\n            \"\"\"Returns True if the symbol is parameter\"\"\"\n            return symbol.descriptors[0].suffix == SymbolDescriptor.ScipSuffix.Parameter\n    \n        \n    @staticmethod\n        def is_protobuf(symbol: \"Symbol\") -> bool:\n            \"\"\"Returns True if the symbol is a protobuf symbol\"\"\"\n            return symbol.module_name.endswith(\"pb2\")\n    \n        \n    @property\n        def module_name(self) -> str:\n            \"\"\"Returns the module name of the symbol\"\"\"\n            return self.descriptors[0].name\n    \n        \n    def parent(self) -> \"Symbol\":\n            \"\"\"Returns the parent symbol of the current symbol\"\"\"\n            parent_descriptors = list(self.descriptors)[:-1]\n            return Symbol(self.uri, self.scheme, self.package, tuple(parent_descriptors))\n    \n        \n    def symbol_kind_by_suffix(self) -> SymbolDescriptor.PyKind:\n            \"\"\"Converts the suffix of the URI into a PyKind\"\"\"\n            return SymbolDescriptor.convert_scip_to_python_suffix(self.symbol_raw_kind_by_suffix())\n    \n        \n    def symbol_raw_kind_by_suffix(self) -> DescriptorProto:\n            \"\"\"Converts the suffix of the URI into a DescriptorProto\"\"\"\n            if self.uri.startswith(\"local\"):\n                return SymbolDescriptor.ScipSuffix.Local\n            if self.uri.endswith(\"/\"):\n                return SymbolDescriptor.ScipSuffix.Namespace\n            elif self.uri.endswith(\"#\"):\n                return SymbolDescriptor.ScipSuffix.Type\n            elif self.uri.endswith(\").\"):\n                return SymbolDescriptor.ScipSuffix.Method\n            elif self.uri.endswith(\".\"):\n                return SymbolDescriptor.ScipSuffix.Term\n            elif self.uri.endswith(\":\"):\n                return SymbolDescriptor.ScipSuffix.Meta\n            elif self.uri.endswith(\")\"):\n                return SymbolDescriptor.ScipSuffix.Parameter\n            elif self.uri.endswith(\"]\"):\n                return SymbolDescriptor.ScipSuffix.TypeParameter\n            else:\n                raise ValueError(f\"Invalid descriptor suffix: {self.uri}\")\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolReference -\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n      automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n      \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n      automata_docs.tests.unit.test_database_vector.test_delete_symbol\n      \n        def test_delete_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            symbol = symbols[0]\n            embedded_symbol = SymbolEmbedding(symbol, [1, 2, 3])\n            vector_db.add(embedded_symbol)\n            vector_db.discard(symbol)\n        \n        \n        \n      automata_docs.tests.unit.test_database_vector.test_lookup_symbol\n      \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n      automata_docs.tests.unit.test_symbol_parser.test_is_local_symbol\n      \n        def test_is_local_symbol(symbols):\n            for symbol in symbols:\n                assert is_local_symbol(\"local \" + symbol.uri)\n        \n        \n        \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/SymbolCodeEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolCodeEmbedding", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolCodeEmbedding(SymbolEmbedding):\n    \"\"\"Embedding for symbol code\"\"\"\n\n    def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n        super().__init__(symbol, vector)\n        self.source_code = source_code\n\n\n", "document": "# SymbolCodeEmbedding\n\n`SymbolCodeEmbedding` is a class that provides an embedding for symbol code. It's a subclass of the `SymbolEmbedding` abstract base class and contains additional information such as source code.\n\n## Overview\n\nThe `SymbolCodeEmbedding` class instances store the symbol, vector, and source code. It is primarily used as a part of the `SymbolCodeEmbeddingHandler`, which is responsible for managing the embeddings of symbols in source code.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbedding`\n- `automata_docs.core.symbol.symbol_types.SymbolDocEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n\n## Example\n\nThe following example demonstrates how to create an instance of `SymbolCodeEmbedding`.\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolCodeEmbedding\nimport numpy as np\n\n# Dummy data for the example\nsymbol = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nvector = np.array([0.1, 0.5])\nsource_code = \"def __init__(self, message): super().__init__(message)\"\n\nembedding = SymbolCodeEmbedding(symbol, vector, source_code)\n```\n\n## Discussions\nThe primary limitation of the `SymbolCodeEmbedding` class is that it relies on having an existing source code and vector representation. This means that other components like the `SymbolCodeEmbeddingHandler` are responsible for providing relevant information for the embeddings and related tasks like vector storage and management.\n\n## Follow-up Questions:\n\n- What are some specific use cases for using `SymbolCodeEmbedding` directly?", "summary": "`SymbolCodeEmbedding` is a subclass of `SymbolEmbedding` that provides an embedding for symbol code, storing the symbol, vector, and source code. It is mainly utilized within the `SymbolCodeEmbeddingHandler` for managing embeddings of symbols in source code. However, it relies on having existing source code and vector representation, delegating the responsibility of providing relevant information to other components like the `SymbolCodeEmbeddingHandler`.\n\nExample usage of `SymbolCodeEmbedding`:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolCodeEmbedding\nimport numpy as np\n\nsymbol = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\nvector = np.array([0.1, 0.5])\nsource_code = \"def __init__(self, message): super().__init__(message)\"\n\nembedding = SymbolCodeEmbedding(symbol, vector, source_code)\n```\n", "context": "\n    Generate the documentation for SymbolCodeEmbedding using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.SymbolCodeEmbedding -\n\n  Class Docstring:\n    Embedding for symbol code\n    \n  Variables:\n    self.source_code=source_code\n    \n  Methods:\n    def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n            super().__init__(symbol, vector)\n            self.source_code = source_code\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Variables:\n        self.source_code=source_code\n        self.document=document\n        self.summary=summary\n        self.context=context\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/SymbolDescriptor#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDescriptor", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDescriptor:\n    \"\"\"\n    Wraps the descriptor component of the URI into a python object\n    \"\"\"\n\n    ScipSuffix = DescriptorProto\n\n    class PyKind(Enum):\n        Local = \"local\"\n        Module = \"module\"\n        Class = \"class\"\n        Method = \"method\"\n        Value = \"value\"\n        Meta = \"meta\"\n        Macro = \"macro\"\n        Parameter = \"parameter\"\n        TypeParameter = \"type_parameter\"\n\n    def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n        self.name = name\n        self.suffix = suffix\n        self.disambiguator = disambiguator\n\n    def __repr__(self):\n        return f\"Descriptor({self.name}, {self.suffix}\" + (\n            f\", {self.disambiguator})\" if self.disambiguator else \")\"\n        )\n\n    def unparse(self):\n        \"\"\"Converts back into URI string\"\"\"\n        escaped_name = SymbolDescriptor.get_escaped_name(self.name)\n        if self.suffix == SymbolDescriptor.ScipSuffix.Namespace:\n            return f\"{escaped_name}/\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Type:\n            return f\"{escaped_name}#\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Term:\n            return f\"{escaped_name}.\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Meta:\n            return f\"{escaped_name}:\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Method:\n            return f\"{escaped_name}({self.disambiguator}).\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.Parameter:\n            return f\"({escaped_name})\"\n        elif self.suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n            return f\"[{escaped_name}]\"\n        else:\n            raise ValueError(f\"Invalid descriptor suffix: {self.suffix}\")\n\n    @staticmethod\n    def get_escaped_name(name):\n        def is_simple_identifier(name):\n            return re.match(r\"^[\\w$+-]+$\", name) is not None\n\n        if not name:\n            return \"\"\n        if is_simple_identifier(name):\n            return name\n        return \"`\" + re.sub(\"`\", \"``\", name) + \"`\"\n\n    @staticmethod\n    def convert_scip_to_python_suffix(\n        descriptor_suffix: DescriptorProto,\n    ) -> PyKind:\n        if descriptor_suffix == SymbolDescriptor.ScipSuffix.Local:\n            return SymbolDescriptor.PyKind.Local\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Namespace:\n            return SymbolDescriptor.PyKind.Module\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Type:\n            return SymbolDescriptor.PyKind.Class\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Method:\n            return SymbolDescriptor.PyKind.Method\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Term:\n            return SymbolDescriptor.PyKind.Value\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Macro:\n            return SymbolDescriptor.PyKind.Macro\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Parameter:\n            return SymbolDescriptor.PyKind.Parameter\n\n        elif descriptor_suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n            return SymbolDescriptor.PyKind.TypeParameter\n\n        else:\n            return SymbolDescriptor.PyKind.Meta\n\n\n", "document": "# SymbolDescriptor\n\n`SymbolDescriptor` is a Python class that wraps the descriptor component of the URI into a Python object. It provides utility methods to convert between different formats of symbol descriptors and unparse the object back to a URI string. The class is closely related to `Symbol`, `SymbolGraph`, `SymbolReference`, `SymbolParser`, `PyContextRetriever`, and `SymbolCodeEmbeddingHandler`.\n\n## Overview\n\nThe `SymbolDescriptor` includes variables such as `name`, `suffix`, and `disambiguator`. It also includes methods such as `convert_scip_to_python_suffix`, `get_escaped_name`, and `unparse`. It is often used for parsing symbol descriptors in the context of Python-based projects, enabling efficient symbol management and analysis.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.SymbolReference`\n- `automata_docs.core.symbol.parser.SymbolParser`\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `SymbolDescriptor` and unparse it back into a URI string:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import DescriptorProto, SymbolDescriptor\n\n# Create a SymbolDescriptor object\ndescriptor = SymbolDescriptor(\"example_name\", DescriptorProto.Namespace)\n\n# Unparse the descriptor back to a URI string\nunparsed_descriptor = descriptor.unparse()\n\nassert unparsed_descriptor == \"example_name/\"\n```\n\n## Limitations\n\nThe primary limitation of `SymbolDescriptor` is that it assumes specific syntax and structure for symbol descriptors. Any deviation in the symbol descriptor format will result in errors or incorrect results during use. Additionally, the class may not support all possible descriptor suffixes and may need to be extended to support new suffixes in the future.\n\n## Follow-up Questions:\n\n- Are there plans to support additional descriptor suffixes in the `SymbolDescriptor` class?\n- How should the class handle deviations in the symbol descriptor format?", "summary": "`SymbolDescriptor` is a Python class that wraps the descriptor component of a URI into a Python object, providing utility methods to convert between different formats of symbol descriptors and unparse the object back to a URI string. Related to various `Symbol` classes and methods, it is used for parsing symbol descriptors in Python-based projects for efficient symbol management and analysis. For example, to create an instance of `SymbolDescriptor` and unparse it back into a URI string:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import DescriptorProto, SymbolDescriptor\n\n# Create a SymbolDescriptor object\ndescriptor = SymbolDescriptor(\"example_name\", DescriptorProto.Namespace)\n\n# Unparse the descriptor back to a URI string\nunparsed_descriptor = descriptor.unparse()\n\nassert unparsed_descriptor == \"example_name/\"\n```\n\nHowever, `SymbolDescriptor` assumes specific syntax and structure for symbol descriptors, which may result in errors or incorrect results if the format deviates. The class may also need to be extended to support new suffixes in the future.", "context": "\n    Generate the documentation for SymbolDescriptor using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.SymbolDescriptor -\n\n  Class Docstring:\n    Wraps the descriptor component of the URI into a python object\n    \n  Variables:\n    ScipSuffix=DescriptorProto\n    self.name=name\n    self.suffix=suffix\n    self.disambiguator=disambiguator\n    \n  Methods:\n    def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n            self.name = name\n            self.suffix = suffix\n            self.disambiguator = disambiguator\n    \n        \n    def __repr__(self):\n            return f\"Descriptor({self.name}, {self.suffix}\" + (\n                f\", {self.disambiguator})\" if self.disambiguator else \")\"\n            )\n    \n        \n    @staticmethod\n        def convert_scip_to_python_suffix(\n            descriptor_suffix: DescriptorProto,\n        ) -> PyKind:\n            if descriptor_suffix == SymbolDescriptor.ScipSuffix.Local:\n                return SymbolDescriptor.PyKind.Local\n    \n            elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Namespace:\n                return SymbolDescriptor.PyKind.Module\n    \n            elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Type:\n                return SymbolDescriptor.PyKind.Class\n    \n            elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Method:\n                return SymbolDescriptor.PyKind.Method\n    \n            elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Term:\n                return SymbolDescriptor.PyKind.Value\n    \n            elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Macro:\n                return SymbolDescriptor.PyKind.Macro\n    \n            elif descriptor_suffix == SymbolDescriptor.ScipSuffix.Parameter:\n                return SymbolDescriptor.PyKind.Parameter\n    \n            elif descriptor_suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n                return SymbolDescriptor.PyKind.TypeParameter\n    \n            else:\n                return SymbolDescriptor.PyKind.Meta\n    \n    \n    \n    @staticmethod\n        def get_escaped_name(name):\n            def is_simple_identifier(name):\n                return re.match(r\"^[\\w$+-]+$\", name) is not None\n    \n            if not name:\n                return \"\"\n            if is_simple_identifier(name):\n                return name\n            return \"`\" + re.sub(\"`\", \"``\", name) + \"`\"\n    \n        \n    def is_simple_identifier(name):\n                return re.match(r\"^[\\w$+-]+$\", name) is not None\n    \n            \n    def unparse(self):\n            \"\"\"Converts back into URI string\"\"\"\n            escaped_name = SymbolDescriptor.get_escaped_name(self.name)\n            if self.suffix == SymbolDescriptor.ScipSuffix.Namespace:\n                return f\"{escaped_name}/\"\n            elif self.suffix == SymbolDescriptor.ScipSuffix.Type:\n                return f\"{escaped_name}#\"\n            elif self.suffix == SymbolDescriptor.ScipSuffix.Term:\n                return f\"{escaped_name}.\"\n            elif self.suffix == SymbolDescriptor.ScipSuffix.Meta:\n                return f\"{escaped_name}:\"\n            elif self.suffix == SymbolDescriptor.ScipSuffix.Method:\n                return f\"{escaped_name}({self.disambiguator}).\"\n            elif self.suffix == SymbolDescriptor.ScipSuffix.Parameter:\n                return f\"({escaped_name})\"\n            elif self.suffix == SymbolDescriptor.ScipSuffix.TypeParameter:\n                return f\"[{escaped_name}]\"\n            else:\n                raise ValueError(f\"Invalid descriptor suffix: {self.suffix}\")\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolReference -\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.parser.SymbolParser -\n    \n      Class Docstring:\n        Translation of the logic defined in\n        https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n        to parse URIs into structured objects.\n        It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n        \n      Variables:\n        self.symbol=symbol\n        self.index=0\n        self.symbol_str=symbol\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        \n      Methods:\n        def __init__(self, symbol: str):\n                \"\"\"\n                Args:\n                    symbol (str): The symbol URI to parse\n                \"\"\"\n                self.symbol = symbol\n                self.index = 0\n                self.symbol_str = symbol\n        \n            \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n      automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n      \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolFile -\n    \n      Class Docstring:\n        Represents a file that contains a symbol\n        \n        \n      Methods:\n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/SymbolDescriptor#PyKind#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDescriptor", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PyKind", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PyKind(Enum):\n        Local = \"local\"\n        Module = \"module\"\n        Class = \"class\"\n        Method = \"method\"\n        Value = \"value\"\n        Meta = \"meta\"\n        Macro = \"macro\"\n        Parameter = \"parameter\"\n        TypeParameter = \"type_parameter\"\n\n    ", "document": "# SymbolDescriptor\n\n`SymbolDescriptor` is a class that wraps the descriptor component of a Uniform Resource Identifier (URI) into a Python object. It is used in the `Symbol` class to provide a structured representation of class, method, or a local variable. The `SymbolDescriptor` class has closely related symbols such as `Symbol`, `SymbolGraph`, and `SymbolParser`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.parser.SymbolParser`\n\n## Example\n\nBelow is an example of how the `SymbolDescriptor` class is used as a part of the `Symbol` class:\n\n```python\nfrom automata_docs.core.symbol.search.symbol_parser import parse_symbol\n\nsymbol_class = parse_symbol(\n    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n)\nsymbol_method = parse_symbol(\n    \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n)\n```\n\n## Limitations\n\nThe primary limitation of `SymbolDescriptor` is that the structure of the symbol URI implies a specific syntax and cannot be extended easily. In addition, it assumes a specific directory structure for the package components.\n\n## Follow-up Questions:\n\n- How can we make the `SymbolDescriptor` implementation more flexible with changing syntax or directory structures?", "summary": "`SymbolDescriptor` is a Python class that encapsulates the descriptor element of a Uniform Resource Identifier (URI) for structured representation of class, method, or local variable within the `Symbol` class. It is associated with symbols such as `Symbol`, `SymbolGraph`, and `SymbolParser`. However, it has limitations in flexibility with changing syntax or directory structures. In the example provided, the `SymbolDescriptor` class is utilized as part of the `Symbol` class, with symbols being parsed using the `parse_symbol` function.", "context": "\n    Generate the documentation for SymbolDescriptor using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.SymbolDescriptor.PyKind -\n\n  Variables:\n    Local=\"local\"\n    Module=\"module\"\n    Class=\"class\"\n    Method=\"method\"\n    Value=\"value\"\n    Meta=\"meta\"\n    Macro=\"macro\"\n    Parameter=\"parameter\"\n    TypeParameter=\"type_parameter\"\n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDescriptor -\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Variables:\n        ScipSuffix=DescriptorProto\n        self.name=name\n        self.suffix=suffix\n        self.disambiguator=disambiguator\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolReference -\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.parser.SymbolParser -\n    \n      Class Docstring:\n        Translation of the logic defined in\n        https://github.com/sourcegraph/scip/blob/ee677ba3756cdcdb55b39942b5701f0fde9d69fa/bindings/go/scip/symbol.go\n        to parse URIs into structured objects.\n        It's not great that this implementation is not in hard sync with the Go one, but it's good enough for now.\n        \n      Variables:\n        self.symbol=symbol\n        self.index=0\n        self.symbol_str=symbol\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        self.index=1\n        \n      Methods:\n        def __init__(self, symbol: str):\n                \"\"\"\n                Args:\n                    symbol (str): The symbol URI to parse\n                \"\"\"\n                self.symbol = symbol\n                self.index = 0\n                self.symbol_str = symbol\n        \n            \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n      automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n      \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/SymbolDocEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolDocEmbedding", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolDocEmbedding(SymbolEmbedding):\n    \"\"\"Embedding for symbol documents\"\"\"\n\n    def __init__(\n        self,\n        symbol: Symbol,\n        vector: np.array,\n        source_code: str,\n        document: str,\n        summary: Optional[str] = None,\n        context: Optional[str] = None,\n    ):\n        super().__init__(symbol, vector)\n        self.source_code = source_code\n        self.document = document\n        self.summary = summary\n        self.context = context\n", "document": "## SymbolDocEmbedding\n\n`SymbolDocEmbedding` is a class that, as part of the `automata_docs.core.symbol.symbol_types` module, represents an embedding for symbol documents. It inherits from the abstract base class `SymbolEmbedding`. The class includes variables to store source code, document, summary, and context information, along with a constructor method that takes these details as parameters.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass`\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding`\n\n## Example\n\nThe following example shows how to create an instance of `SymbolDocEmbedding`.\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolDocEmbedding\nfrom automata_docs.core.symbol.search.symbol_parser import parse_symbol\nimport numpy as np\n\nsymbol_string = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = parse_symbol(symbol_string)\nvector = np.array([0.1, 0.2, 0.3])\nsource_code = \"def sample_function():\\n    pass\"\ndocument = \"Sample document for the sample function.\"\nsummary = \"Function summary.\"\ncontext = \"Some contextual information.\"\n\nembedding = SymbolDocEmbedding(symbol, vector, source_code, document, summary, context)\n```\n\n## Limitations\n\n1. Due to the nature of the source code representation, retrieving the embedded code requires that a copy of the source code is stored alongside the embedding. This could result in large memory usage or long retrieval times for certain documents.\n\n2. There is a potential for loss of information with large numbers of embeddings or very large documents, as the space of embeddings is limited to a fixed-size vector per instance.\n\n## Follow-up Questions:\n\n- Can the method used to create these embeddings be applied to other languages or frameworks outside of Python, or are there language or runtime-specific considerations?\n- Are there any performance concerns with the retrieval or manipulation of stored embeddings in the systems utilizing them?", "summary": "`SymbolDocEmbedding` is a class within the `automata_docs.core.symbol.symbol_types` module that represents an embedding for symbol documents and inherits from the `SymbolEmbedding` abstract base class. It includes variables for storing source code, document, summary, and context information, as well as a constructor method that takes these details as parameters. However, there are limitations such as potential large memory usage or long retrieval times, and a possibility of loss of information with numerous embeddings or large documents due to a fixed-size vector per instance.\n\nExample:\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolDocEmbedding\nfrom automata_docs.core.symbol.search.symbol_parser import parse_symbol\nimport numpy as np\n\nsymbol_string = \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\nsymbol = parse_symbol(symbol_string)\nvector = np.array([0.1, 0.2, 0.3])\nsource_code = \"def sample_function():\\n    pass\"\ndocument = \"Sample document for the sample function.\"\nsummary = \"Function summary.\"\ncontext = \"Some contextual information.\"\n\nembedding = SymbolDocEmbedding(symbol, vector, source_code, document, summary, context)\n```\nConsidering the limitations, questions can be raised about the applicability of these embeddings to other languages or frameworks and potential performance concerns in retrieval or manipulation of stored embeddings.", "context": "\n    Generate the documentation for SymbolDocEmbedding using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n\n  Class Docstring:\n    Embedding for symbol documents\n    \n  Variables:\n    self.source_code=source_code\n    self.document=document\n    self.summary=summary\n    self.context=context\n    \n  Methods:\n    def __init__(\n            self,\n            symbol: Symbol,\n            vector: np.array,\n            source_code: str,\n            document: str,\n            summary: Optional[str] = None,\n            context: Optional[str] = None,\n        ):\n            super().__init__(symbol, vector)\n            self.source_code = source_code\n            self.document = document\n            self.summary = summary\n            self.context = context\n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n      \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n    \n      Class Docstring:\n        Inner doc strings\n        \n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.OuterClass\n      \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass -\n    \n        \n      Methods:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass.inner_method\n      \n        def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol code\n        \n      Variables:\n        self.source_code=source_code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/SymbolEmbedding#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolEmbedding", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class SymbolEmbedding(abc.ABC):\n    \"\"\"Abstract base class for different types of embeddings\"\"\"\n\n    def __init__(self, symbol: Symbol, vector: np.array):\n        self.symbol = symbol\n        self.vector = vector\n\n\n", "document": "# SymbolEmbedding\n\n`SymbolEmbedding` is an abstract base class for different types of embeddings associated with symbols in the Automata codebase. It handles the initialization of a symbol embedding with a given symbol and its corresponding vector representation. This class serves as the foundation for creating more specialized types of symbol embeddings, like `SymbolCodeEmbedding` and `SymbolDocEmbedding`.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbedding`\n- `automata_docs.core.embedding.embedding_types.EmbeddingsProvider`\n- `automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler`\n- `automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler`\n\n## Example\n\nThe following example demonstrates how to create a custom symbol embedding class that inherits from `SymbolEmbedding`. We'll create a hypothetical `CustomSymbolEmbedding` class for this purpose.\n\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolEmbedding\nimport numpy as np\n\nclass CustomSymbolEmbedding(SymbolEmbedding):\n    def __init__(self, symbol: Symbol, vector: np.array):\n        super().__init__(symbol, vector)\n```\n\nNow, we can create an instance of our custom symbol embedding.\n\n```python\nfrom automata_docs.core.symbol.search.symbol_parser import parse_symbol\n\nsymbol_ex = parse_symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\")\nvector_ex = np.array([0.1, 0.2, 0.3])\n\ncustom_embedding = CustomSymbolEmbedding(symbol_ex, vector_ex)\n```\n\n## Limitations\n\nSince `SymbolEmbedding` is an abstract base class, it should not be used directly to create instances. Instead, it must be subclassed and extended with any additional properties and methods required for the specific embedding type.\n\n## Follow-up Questions:\n\n- Are there more specific examples of `SymbolEmbedding` subclasses that can be showcased?\n- What are the use cases for the different types of symbol embeddings?", "summary": "`SymbolEmbedding` is an abstract base class in the Automata codebase used for handling the initialization of symbol embeddings, which associate symbols with corresponding vector representations. It serves as a foundation for creating specialized symbol embeddings, such as `SymbolCodeEmbedding` and `SymbolDocEmbedding`. Since it's an abstract base class, `SymbolEmbedding` should not be used directly to create instances; instead, it must be subclassed and extended as needed for specific embedding types. An example of creating a custom symbol embedding class that inherits from `SymbolEmbedding` can be seen in the code snippet provided, where a `CustomSymbolEmbedding` class is defined and an instance is created.", "context": "\n    Generate the documentation for SymbolEmbedding using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.SymbolEmbedding -\n\n  Class Docstring:\n    Abstract base class for different types of embeddings\n    \n  Variables:\n    self.symbol=symbol\n    self.vector=vector\n    \n  Methods:\n    def __init__(self, symbol: Symbol, vector: np.array):\n            self.symbol = symbol\n            self.vector = vector\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Variables:\n        self.source_code=source_code\n        self.document=document\n        self.summary=summary\n        self.context=context\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolCodeEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol code\n        \n      Variables:\n        self.source_code=source_code\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array, source_code: str):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingsProvider -\n    \n      Class Docstring:\n        A class to provide embeddings for symbols\n        \n      Variables:\n        \n      Methods:\n        def __init__(self):\n                if not openai.api_key:\n                    from config import OPENAI_API_KEY\n        \n                    openai.api_key = OPENAI_API_KEY\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolDocEmbeddingHandler -\n    \n      Variables:\n        self.graph=graph\n        self.symbol_search=SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n                code_embedding_fpath: Optional[str] = None,\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                    code_embedding_fpath (Optional[str]): The path to the code embedding file\n                \"\"\"\n                from automata_docs.core.embedding.symbol_similarity import SymbolSimilarity\n                from automata_docs.core.symbol.search.rank import SymbolRankConfig\n                from automata_docs.core.symbol.search.symbol_search import SymbolSearch\n        \n                super().__init__(embedding_db, embedding_provider)\n                if not code_embedding_fpath:\n                    code_embedding_fpath = os.path.join(\n                        config_fpath(), ConfigCategory.SYMBOL.value, \"symbol_code_embedding.json\"\n                    )\n        \n                graph = SymbolGraph()\n                subgraph = graph.get_rankable_symbol_subgraph()\n        \n                code_embedding_db = JSONVectorDatabase(code_embedding_fpath)\n                code_embedding_handler = SymbolCodeEmbeddingHandler(code_embedding_db)\n                symbol_similarity = SymbolSimilarity(code_embedding_handler)\n                self.graph = graph\n                self.symbol_search = SymbolSearch(\n                    graph, symbol_similarity, symbol_rank_config=SymbolRankConfig(), code_subgraph=subgraph\n                )\n        \n            \n    Context for -\n    automata_docs.core.embedding.embedding_types.EmbeddingHandler -\n    \n      Class Docstring:\n        An abstract class to handle the embedding of symbols\n        \n        \n      Methods:\n        @abc.abstractmethod\n            def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"An abstract constructor for EmbeddingHandler\"\"\"\n                pass\n        \n            \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolEmbeddingHandler -\n    \n      Variables:\n        self.embedding_db=embedding_db\n        self.embedding_provider=embedding_provider or EmbeddingsProvider()\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: Optional[EmbeddingsProvider],\n            ):\n                \"\"\"\n                A constructor for SymbolEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to get the embeddings from\n                \"\"\"\n                self.embedding_db = embedding_db\n                self.embedding_provider = embedding_provider or EmbeddingsProvider()\n        \n            \n      automata_docs.tests.unit.test_symbol_embedding.test_get_embedding\n      \n        def test_get_embedding(\n            monkeypatch,\n            mock_embedding,\n            mock_simple_method_symbols,\n        ):\n            # Mock EmbeddingsProvider methods\n            mock_provider = Mock(EmbeddingsProvider)\n            mock_provider.build_embedding.return_value = mock_embedding\n        \n            # Mock JSONVectorDatabase methods\n            mock_db = MagicMock(JSONVectorDatabase)\n            mock_db.get.return_value = SymbolCodeEmbedding(\n                mock_simple_method_symbols[0], mock_embedding, \"symbol_source\"\n            )\n        \n            # Create an instance of the class\n            cem = SymbolCodeEmbeddingHandler(embedding_provider=mock_provider, embedding_db=mock_db)\n        \n            # Call the method\n            embedding = cem.get_embedding(mock_simple_method_symbols[0])\n        \n            # Verify the results\n            assert embedding.vector.all() == mock_embedding.all()\n        \n        \n        \n      automata_docs.tests.unit.conftest.patch_get_embedding\n      \n        def patch_get_embedding(monkeypatch, mock_embedding):\n            # Define the behavior of the mock build_embedding function\n            mock_get_embedding = Mock(return_value=mock_embedding)\n            monkeypatch.setattr(\"openai.embeddings_utils.get_embedding\", mock_get_embedding)\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/SymbolFile#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolFile", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass SymbolFile:\n    \"\"\"Represents a file that contains a symbol\"\"\"\n\n    path: str\n    occurrences: str\n\n    def __hash__(self) -> int:\n        return hash(self.path)\n\n    def __eq__(self, other):\n        if isinstance(other, SymbolFile):\n            return self.path == other.path\n        elif isinstance(other, str):\n            return self.path == other\n        return False\n\n\n", "document": "## SymbolFile\n\n`SymbolFile` represents a file that contains an automata symbol. It provides methods for comparing a `SymbolFile` with other instances of `SymbolFile` or its path as a string, as well as for retrieving the hash value of its path, which is useful in certain operations like working with dictionaries or sets.\n\n### Closely Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.SymbolReference`\n\n### Example\n\nConsider the following example in which we create a `SymbolFile` from a given file path and then compare it with another `SymbolFile` and a string representation of the file path:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolFile\n\nfile1 = SymbolFile(\"path/to/file.py\")\nfile2 = SymbolFile(\"path/to/file.py\")\n\nassert file1 == file2\nassert file1 == \"path/to/file.py\"\n```\n\n### Overview of Methods\n\n#### `__eq__(self, other)`\n\nThis method compares the current instance of `SymbolFile` with another `SymbolFile` or a string representing its path. Returns `True` if they are the same, `False` otherwise.\n\n#### `__hash__(self) -> int`\n\nReturns the hash value of the path of the `SymbolFile` instance.\n\n### Limitations\n\n`SymbolFile` can only represent an individual file with a single path and does not support working with directories or multiple files at once. It also has no functionality for file manipulation or inspection other than equality comparison and hashing.", "summary": "`SymbolFile` represents a file containing an automata symbol and provides methods for comparison and retrieving the hash value of its path. It can be used to compare instances of `SymbolFile` with other instances or with a string representation of the file path, as shown in this example:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolFile\n\nfile1 = SymbolFile(\"path/to/file.py\")\nfile2 = SymbolFile(\"path/to/file.py\")\n\nassert file1 == file2\nassert file1 == \"path/to/file.py\"\n```\n\nHowever, `SymbolFile` only supports individual files with a single path and does not provide functionality for directories, multiple files, or file manipulation beyond comparison and hashing.", "context": "\n    Generate the documentation for SymbolFile using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.SymbolFile -\n\n  Class Docstring:\n    Represents a file that contains a symbol\n    \n    \n  Methods:\n    def __eq__(self, other):\n            if isinstance(other, SymbolFile):\n                return self.path == other.path\n            elif isinstance(other, str):\n                return self.path == other\n            return False\n    \n    \n    \n    def __hash__(self) -> int:\n            return hash(self.path)\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolReference -\n    \n      Class Docstring:\n        Represents a reference to a symbol in a file\n        \n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_graph.test_get_all_files\n      \n        def test_get_all_files(symbol_graph):\n            files = symbol_graph.get_all_files()\n            assert isinstance(files, list)\n            for f in files:\n                assert isinstance(f, SymbolFile)\n        \n        \n        \n      automata_docs.tests.unit.test_database_vector.test_lookup_symbol\n      \n        def test_lookup_symbol(temp_output_filename, symbols):\n            vector_db = JSONVectorDatabase(temp_output_filename)\n            embedded_symbol_0 = SymbolEmbedding(symbols[0], [1, 2, 3])\n            vector_db.add(embedded_symbol_0)\n            embedded_symbol_1 = SymbolEmbedding(symbols[1], [1, 2, 3, 4])\n            vector_db.add(embedded_symbol_1)\n        \n            vector_db.get(symbols[0])\n        \n        \n        \n    Context for -\n    automata_docs.core.database.vector.JSONVectorDatabase -\n    \n      Class Docstring:\n        Concrete class to provide a vector database that saves into a JSON file.\n        \n      Variables:\n        self.file_path=file_path\n        self.data=[]\n        self.index={}\n        self.data=jsonpickle.decode(file.read())\n        self.index={embedding.symbol: i for i, embedding in enumerate(self.data)}\n        self.index[embedding.symbol]=len(self.data) - 1\n        self.data[self.index[embedding.symbol]]=embedding\n        self.data=[]\n        self.index={}\n        \n      Methods:\n        def __init__(self, file_path: str):\n                \"\"\"\n                Args:\n                    file_path: The path to the JSON file to save the vector database to\n                \"\"\"\n                self.file_path = file_path\n                self.data: List[SymbolEmbedding] = []\n                self.index: Dict[Symbol, int] = {}\n                self.load()\n        \n            \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n      automata_docs.tests.unit.test_symbol_search.test_retrieve_source_code_by_symbol\n      \n        def test_retrieve_source_code_by_symbol(symbols, symbol_searcher):\n            with patch(\n                \"automata_docs.core.symbol.search.symbol_search.convert_to_fst_object\",\n                return_value=\"module1\",\n            ) as mock_method:\n                result = symbol_searcher.retrieve_source_code_by_symbol(symbols[0].uri)\n                assert result == \"module1\"\n            mock_method.assert_called_once_with(symbols[0])\n        \n        \n        \n      automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n      \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/SymbolPackage#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolPackage", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass SymbolPackage:\n    \"\"\"Wraps the package component of the URI\"\"\"\n\n    manager: str\n    name: str\n    version: str\n\n    def __repr__(self):\n        return f\"Package({self.unparse()})\"\n\n    def unparse(self):\n        \"\"\"Converts back into URI string\"\"\"\n        return f\"{self.manager} {self.name} {self.version}\"\n\n\n", "document": "# SymbolPackage\n\n`SymbolPackage` is a class that wraps the package component of a URI (Uniform Resource Identifier) and provides methods to work with it conveniently. It is a part of the `Symbol` class, which is similar to a URI and identifies a class, method, or local variable in the context of Automata documentation.\n\n## Overview\n\n`SymbolPackage` is a utility class for handling the package component of a URI. It provides methods to convert the package component back into a URI string and to represent it as a string itself. It is closely related to other symbols like the `Symbol` class itself and the rest of the classes in the `automata_docs.core.symbol.symbol_types` module.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `SymbolPackage` and obtain the URI string from it.\n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolPackage\n\nmanager = \"python\"\nname = \"automata_docs\"\nversion = \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n\npackage = SymbolPackage(manager, name, version)\nuri_string = package.unparse()\n\nprint(uri_string)\n```\n\n## Methods\n\n- `__repr__(self)`: Returns a string representation of the `SymbolPackage` object.\n- `unparse(self)`: Converts the `SymbolPackage` object back into a URI string.\n\n## Limitations\n\nThe `SymbolPackage` class is specifically designed for handling the package component of a URI in the context of Automata documentation. It may not be suitable for more general URI handling in other projects or libraries.\n\n## Follow-up Questions:\n\n- Are there any other specific use cases for the `SymbolPackage` class outside the Automata documentation context?", "summary": "`SymbolPackage` is a utility class that wraps the package component of a URI (Uniform Resource Identifier) and provides methods for convenient handling, specifically in the context of Automata documentation. It is part of the `Symbol` class, which identifies a class, method, or local variable within Automata documentation. `SymbolPackage` offers methods to convert the package component back into a URI string and to represent it as a string itself. It is closely related to other symbols in the `automata_docs.core.symbol.symbol_types` module. However, its use may be limited outside the Automata documentation context.\n\nExample: \n\n```python\nfrom automata_docs.core.symbol.symbol_types import SymbolPackage\n\nmanager = \"python\"\nname = \"automata_docs\"\nversion = \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n\npackage = SymbolPackage(manager, name, version)\nuri_string = package.unparse()\n\nprint(uri_string)\n```", "context": "\n    Generate the documentation for SymbolPackage using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.SymbolPackage -\n\n  Class Docstring:\n    Wraps the package component of the URI\n    \n    \n  Methods:\n    def __repr__(self):\n            return f\"Package({self.unparse()})\"\n    \n        \n    def unparse(self):\n            \"\"\"Converts back into URI string\"\"\"\n            return f\"{self.manager} {self.name} {self.version}\"\n    \n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n      \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n      automata_docs.tests.unit.conftest.get_sem\n      \n        def get_sem(monkeypatch, temp_output_filename):\n            monkeypatch.setattr(\n                \"automata_docs.core.symbol.symbol_utils.convert_to_fst_object\",\n                lambda args: \"symbol_source\",\n            )\n            return SymbolCodeEmbeddingHandler(temp_output_filename)\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.symbol.symbol_types`/SymbolReference#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.symbol.symbol_types", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "SymbolReference", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "@dataclass\nclass SymbolReference:\n    \"\"\"Represents a reference to a symbol in a file\"\"\"\n\n    symbol: Symbol\n    line_number: int\n    column_number: int\n    roles: Dict[str, Any]\n\n    def __hash__(self) -> int:\n        # This could cause collisions if the same symbol is referenced in different files at the same location\n        return hash(f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\")\n\n    def __eq__(self, other):\n        if isinstance(other, SymbolReference):\n            return (\n                f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\"\n                == f\"{other.symbol.uri}-{other.line_number}-{other.column_number}\"\n            )\n        return False\n\n\n", "document": "# SymbolReference\n\n`SymbolReference` represents a reference to a symbol in a file. This class is part of the automata_docs.core.symbol.symbol_types and provides functionality to determine the equality and hash value of a symbol reference based on its URI, line number, and column number. \n\n## Overview\n\nA `SymbolReference` is mainly used for code analysis and navigation tasks. It stores the location and context of a symbol within a specific file. The main use of the `SymbolReference` is to be able to identify and compare different symbol references based on their unique properties like URI, line number, and column number.\n\n## Related Symbols\n\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.core.symbol.graph.SymbolGraph`\n- `automata_docs.core.symbol.symbol_types.SymbolEmbedding`\n- `automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler`\n- `automata_docs.core.symbol.symbol_types.SymbolDescriptor`\n- `automata_docs.core.context.py_context.retriever.PyContextRetriever`\n\n## Example\n\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolReference\n\nsymbol = Symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\")\nsymbol_ref = SymbolReference(symbol, 10, 5)\n\nother_symbol = Symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\")\nother_symbol_ref = SymbolReference(other_symbol, 10, 5)\n\n# Check equality of symbol references\nprint(symbol_ref == other_symbol_ref)\n```\n\n## Limitations\n\nThe primary limitation of `SymbolReference` is that it may produce collisions if the same symbol is referenced in different files at the same location. This limitation should be carefully considered when working with large codebases with multiple similar symbol references.\n\n## Follow-up Questions:\n\n- How can the risk of collisions be minimized when working with `SymbolReference` instances?", "summary": "`SymbolReference` is a class that represents a reference to a symbol in a file, mainly used for code analysis and navigation tasks. It is part of the `automata_docs.core.symbol.symbol_types` and provides functionality to determine the equality and hash value of a symbol reference based on its URI, line number, and column number. This allows for easy identification and comparison of different symbol references. However, one limitation is that it may produce collisions if the same symbol is referenced in different files at the same location, so caution is needed when working with large codebases.\n\nExample:\n\n```python\nfrom automata_docs.core.symbol.symbol_types import Symbol, SymbolReference\n\nsymbol = Symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\")\nsymbol_ref = SymbolReference(symbol, 10, 5)\n\nother_symbol = Symbol(\"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\")\nother_symbol_ref = SymbolReference(other_symbol, 10, 5)\n\n# Check equality of symbol references\nprint(symbol_ref == other_symbol_ref)\n```", "context": "\n    Generate the documentation for SymbolReference using the context shown below -\nContext for -\nautomata_docs.core.symbol.symbol_types.SymbolReference -\n\n  Class Docstring:\n    Represents a reference to a symbol in a file\n    \n    \n  Methods:\n    def __eq__(self, other):\n            if isinstance(other, SymbolReference):\n                return (\n                    f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\"\n                    == f\"{other.symbol.uri}-{other.line_number}-{other.column_number}\"\n                )\n            return False\n    \n    \n    \n    def __hash__(self) -> int:\n            # This could cause collisions if the same symbol is referenced in different files at the same location\n            return hash(f\"{self.symbol.uri}-{self.line_number}-{self.column_number}\")\n    \n        \n  Closely Related Symbols:\n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_symbol_search.test_symbol_references\n      \n        def test_symbol_references(symbols, symbol_searcher, symbol_graph_mock):\n            symbol_graph_mock.get_references_to_symbol.return_value = [\"ref1\", \"ref2\"]\n            result = symbol_searcher.symbol_references(symbols[0].uri)\n            assert result == [\"ref1\", \"ref2\"]\n            symbol_graph_mock.get_references_to_symbol.assert_called_once_with(\n                parse_symbol(symbols[0].uri)\n            )\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolEmbedding -\n    \n      Class Docstring:\n        Abstract base class for different types of embeddings\n        \n      Variables:\n        self.symbol=symbol\n        self.vector=vector\n        \n      Methods:\n        def __init__(self, symbol: Symbol, vector: np.array):\n                self.symbol = symbol\n                self.vector = vector\n        \n        \n        \n    Context for -\n    automata_docs.core.embedding.symbol_embedding.SymbolCodeEmbeddingHandler -\n    \n      Variables:\n        \n      Methods:\n        def __init__(\n                self,\n                embedding_db: VectorDatabaseProvider,\n                embedding_provider: EmbeddingsProvider = EmbeddingsProvider(),\n            ):\n                \"\"\"\n                A constructor for SymbolCodeEmbeddingHandler\n        \n                Args:\n                    embedding_db (VectorDatabaseProvider): The database to store the embeddings in\n                    embedding_provider (Optional[EmbeddingsProvider]): The provider to\n                        get the embeddings from\n                \"\"\"\n                super().__init__(embedding_db, embedding_provider)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDescriptor -\n    \n      Class Docstring:\n        Wraps the descriptor component of the URI into a python object\n        \n      Variables:\n        ScipSuffix=DescriptorProto\n        self.name=name\n        self.suffix=suffix\n        self.disambiguator=disambiguator\n        \n      Methods:\n        def __init__(self, name: str, suffix: DescriptorProto, disambiguator: Optional[str] = None):\n                self.name = name\n                self.suffix = suffix\n                self.disambiguator = disambiguator\n        \n            \n    Context for -\n    automata_docs.core.context.py_context.retriever.PyContextRetriever -\n    \n      Class Docstring:\n        The PyContextRetriever is used to retrieve the context of a symbol in a Python project\n        \n      Variables:\n        self.graph=graph\n        self.config=config\n        self.indent_level=0\n        self.indent_level=1\n        self.indent_level=1\n        self.context=\"\\n\".join([f\"{indent()}{ele}\" for ele in message.split(\"\\n\")]) + \"\\n\"\n        self.context=\"\"\n        self.obs_symbols=set([])\n        self.global_level=0\n        \n      Methods:\n        def __init__(\n                self,\n                graph: SymbolGraph,\n                config: PyContextRetrieverConfig = PyContextRetrieverConfig(),\n            ):\n                \"\"\"\n                Args:\n                    graph (SymbolGraph): The symbol graph to use\n                    config (PyContextRetrieverConfig): The configuration to use\n                \"\"\"\n                self.graph = graph\n                self.config = config\n                self.indent_level = 0\n                self.reset()\n        \n            \n      automata_docs.tests.unit.test_symbol_search.test_process_queries\n      \n        def test_process_queries(symbols, symbol_searcher, symbol_graph_mock):\n            with patch.object(\n                symbol_searcher, \"symbol_references\", return_value=[\"ref1\", \"ref2\"]\n            ) as mock_method_0:\n                result = symbol_searcher.process_query(\"type:symbol_references %s\" % symbols[0].uri)\n                assert result == [\"ref1\", \"ref2\"]\n            mock_method_0.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(symbol_searcher, \"exact_search\", return_value={\"test\": 0}) as mock_method_1:\n                result = symbol_searcher.process_query(\"type:exact %s\" % symbols[0].uri)\n                assert result == {\"test\": 0}\n            mock_method_1.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"retrieve_source_code_by_symbol\", return_value=\"test\"\n            ) as mock_method_2:\n                result = symbol_searcher.process_query(\"type:source %s\" % symbols[0].uri)\n                assert result == \"test\"\n            mock_method_2.assert_called_once_with(symbols[0].uri)\n        \n            with patch.object(\n                symbol_searcher, \"symbol_rank_search\", return_value=[(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            ) as mock_method_4:\n                result = symbol_searcher.process_query(\"type:symbol_rank %s\" % symbols[0].uri)\n                assert result == [(\"ref1\", 0.5), (\"ref2\", 0.4)]\n            mock_method_4.assert_called_once_with(symbols[0].uri)\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"invalid_query\")\n        \n            with pytest.raises(ValueError):\n                symbol_searcher.process_query(\"type:unknown query\")\n        \n      automata_docs.tests.unit.test_symbol_parser.test_parse_symbol\n      \n        def test_parse_symbol(symbols):\n            for symbol in symbols:\n                assert symbol.scheme == \"scip-python\"\n                assert symbol.package.manager == \"python\"\n                assert symbol.package.name == \"automata_docs\"\n                assert symbol.package.version == \"75482692a6fe30c72db516201a6f47d9fb4af065\"\n                assert len(symbol.descriptors) > 0\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.SymbolDocEmbedding -\n    \n      Class Docstring:\n        Embedding for symbol documents\n        \n      Variables:\n        self.source_code=source_code\n        self.document=document\n        self.summary=summary\n        self.context=context\n        \n      Methods:\n        def __init__(\n                self,\n                symbol: Symbol,\n                vector: np.array,\n                source_code: str,\n                document: str,\n                summary: Optional[str] = None,\n                context: Optional[str] = None,\n            ):\n                super().__init__(symbol, vector)\n                self.source_code = source_code\n                self.document = document\n                self.summary = summary\n                self.context = context\n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.utils`/HandlerDict#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "HandlerDict", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class HandlerDict(TypedDict):\n    \"\"\"A dictionary representing a logging handler\"\"\"\n\n    class_: str\n    formatter: str\n    level: int\n    filename: Optional[str]\n\n\n", "document": "# HandlerDict\n\n`HandlerDict` is a dictionary representing a logging handler. It is closely related to `RootDict`, `LoggingConfig`, and classes that handle logging configurations and settings. This class is a part of the `automata_docs.core.utils` module and is mainly utilized for creating logging handlers for the logging configuration.\n\n## Overview\n\n`HandlerDict` is a specialized dictionary that allows managing and representing a logging handler, with a main purpose of storing the configuration details related to a logging handler. It is commonly used in conjunction with other logging-related classes, such as `RootDict` (which represents the root logger) and `LoggingConfig` (a dictionary that represents the entire logging configuration).\n\n## Related Symbols\n\n- `automata_docs.core.utils.RootDict`\n- `automata_docs.core.utils.LoggingConfig`\n\n## Example\n\nHere's an example demonstrating how you can create an instance of `HandlerDict` and configure it with a custom logging handler:\n\n```python\nfrom automata_docs.core.utils import HandlerDict\n\nhandler_dict = HandlerDict({\n    'class': 'logging.StreamHandler',\n    'level': 'DEBUG',\n    'formatter': 'standard',\n    'stream': 'ext://sys.stdout'\n})\n```\n\n## Limitations\n\n`HandlerDict` is a simple dictionary subclass that's specifically tailored for representing a logging handler. It doesn't offer any additional functionality or methods beyond the basic dictionary operations. It is relatively straightforward and lacks advanced features for handling complex logging configurations, such as dynamic loading of handler classes from modules or error handling in case of incorrect handler setup.\n\n## Follow-up Questions:\n\n- Is there any additional functionality that should be implemented in `HandlerDict` to support more advanced use cases related to logging handlers?\n\n- What is the scope of usage of `HandlerDict` in the larger `automata_docs` project, and are there any potential areas where its functionality could be expanded upon?", "summary": "`HandlerDict`, part of the `automata_docs.core.utils` module, is a specialized dictionary representing a logging handler and is closely related to other logging configuration classes like `RootDict` and `LoggingConfig`. Its primary purpose is to store the configuration details related to a logging handler, and it does not offer advanced features beyond basic dictionary operations. Here's an example of how to create a custom logging handler using `HandlerDict`:\n\n```python\nfrom automata_docs.core.utils import HandlerDict\n\nhandler_dict = HandlerDict({\n    'class': 'logging.StreamHandler',\n    'level': 'DEBUG',\n    'formatter': 'standard',\n    'stream': 'ext://sys.stdout'\n})\n```\n\nThe functionality and usage scope of `HandlerDict` within the `automata_docs` project could be further explored and expanded upon to support more advanced use cases related to logging handlers.", "context": "\n    Generate the documentation for HandlerDict using the context shown below -\nContext for -\nautomata_docs.core.utils.HandlerDict -\n\n  Class Docstring:\n    A dictionary representing a logging handler\n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.cli.commands.HandlerDict -\n    \n    Context for -\n    automata_docs.core.utils.RootDict -\n    \n      Class Docstring:\n        A dictionary representing the root logger\n        \n        \n    Context for -\n    automata_docs.cli.commands.RootDict -\n    \n    Context for -\n    automata_docs.core.utils.LoggingConfig -\n    \n      Class Docstring:\n        A dictionary representing the logging configuration\n        \n        \n    Context for -\n    automata_docs.cli.commands.LoggingConfig -\n    \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.ModuleNotFound -\n    \n      Class Docstring:\n        Raised when a module is not found in the module dictionary\n        \n        \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n    Context for -\n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap -\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Variables:\n        self._dotpath_map=DotPathMap(path)\n        self._loaded_modules={}\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(module_fpath)\n        self._loaded_modules[module_dotpath]=module\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(fpath)\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.utils`/LoggingConfig#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "LoggingConfig", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class LoggingConfig(TypedDict, total=False):\n    \"\"\"A dictionary representing the logging configuration\"\"\"\n\n    version: int\n    disable_existing_loggers: bool\n    formatters: dict\n    handlers: dict[str, Union[HandlerDict, dict]]\n    root: RootDict\n\n\n", "document": "# LoggingConfig\n\n`LoggingConfig` is a class that represents the logging configuration for the Automata Docs package. It allows you to configure the logging settings to suit your specific needs, while providing a default logging configuration that serves as a basis for most use cases.\n\n## Overview\n\n`LoggingConfig` is a dictionary that contains various settings and values that control the logging behavior in the package. By customizing the `LoggingConfig`, you can adjust log levels, enable/disable handlers, and ensure that your logging infrastructure works as intended in different circumstances.\n\n## Related Symbols\n\n- `automata_docs.cli.commands.LoggingConfig`\n- `automata_docs.core.utils.HandlerDict`\n- `automata_docs.core.utils.RootDict`\n- `automata_docs.cli.commands.HandlerDict`\n\n## Example\n\nThe following example demonstrates how to create an instance of `LoggingConfig`.\n\n```python\nfrom automata_docs.core.utils import LoggingConfig\n\nlogging_config = LoggingConfig()\n```\n\n## Limitations\n\n`LoggingConfig` is limited in that it only provides a dictionary structure for representing the configuration. You'll need to work with other parts of the logging system or use additional tools to make changes to the logging infrastructure more effectively.\n\n## Follow-up Questions:\n\n- What is the purpose of the related `HandlerDict`, and `RootDict` classes?\n- How do the related symbols `automata_docs.cli.commands.LoggingConfig` and `automata_docs.cli.commands.HandlerDict` fit into the overall logging setup?\n", "summary": "`LoggingConfig` is a class in the Automata Docs package that represents the logging configuration, allowing users to customize logging settings based on their needs while providing a default configuration for most use cases. It is a dictionary containing various settings and values that control the logging behavior. To create an instance, use:\n\n```python\nfrom automata_docs.core.utils import LoggingConfig\n\nlogging_config = LoggingConfig()\n```\n\nHowever, `LoggingConfig` only provides a dictionary structure, requiring additional tools or interfacing with other parts of the logging system to modify the infrastructure more effectively. Related symbols like `HandlerDict`, `RootDict`, and various `automata_docs.cli.commands` offer more insight into the overall logging setup.", "context": "\n    Generate the documentation for LoggingConfig using the context shown below -\nContext for -\nautomata_docs.core.utils.LoggingConfig -\n\n  Class Docstring:\n    A dictionary representing the logging configuration\n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.cli.commands.LoggingConfig -\n    \n    Context for -\n    automata_docs.core.utils.HandlerDict -\n    \n      Class Docstring:\n        A dictionary representing a logging handler\n        \n        \n    Context for -\n    automata_docs.core.utils.RootDict -\n    \n      Class Docstring:\n        A dictionary representing the root logger\n        \n        \n    Context for -\n    automata_docs.cli.commands.HandlerDict -\n    \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n    Context for -\n    automata_docs.core.symbol.search.rank.SymbolRankConfig -\n    \n      Class Docstring:\n        A configuration class for SymbolRank\n        \n      Variables:\n        alpha=0.25\n        max_iterations=100\n        tolerance=1.0e-6\n        weight_key=\"weight\"\n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n    Context for -\n    automata_docs.cli.commands.RootDict -\n    \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.core.utils`/RootDict#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.core.utils", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "RootDict", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class RootDict(TypedDict):\n    \"\"\"A dictionary representing the root logger\"\"\"\n\n    handlers: List[str]\n    level: int\n\n\n", "document": "# RootDict\n\n`RootDict` is a dictionary that represents the root logger. It is an integral part of the logging system, allowing the registration and organization of loggers within the application. The loggers can be useful in keeping track of the logs, error messages, and other information during the application's run-time. This class serves as a base dictionary for the root logger which can be customized or extended by other classes to create specific loggers.\n\n## Related Symbols\n\n- `automata_docs.cli.commands.RootDict`\n- `automata_docs.core.utils.LoggingConfig`\n- `automata_docs.cli.commands.LoggingConfig`\n- `automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap`\n- `automata_docs.core.symbol.symbol_types.Symbol`\n- `automata_docs.cli.commands.HandlerDict`\n- `automata_docs.core.utils.HandlerDict`\n\n## Example\n\n```python\nfrom automata_docs.core.utils import RootDict\n\nroot_dict = RootDict()\nroot_dict[\"level\"] = \"DEBUG\"\nroot_dict[\"handlers\"] = [\"console\"]\n\nprint(root_dict)  # {'level': 'DEBUG', 'handlers': ['console']}\n```\n\n## Limitations\n\n`RootDict` by itself does not provide any logging functionality. It serves as a building block for configuring the logging system by allowing the definition of loggers. This class does not implement any logging methods or inherently provide any form of logging. It must be used in conjunction with other classes and configurations to set up the logging system effectively.\n\n## Follow-up Questions:\n\n- What are some common use cases for extending the `RootDict` class?\n- Are there any specific recommended practices for using or extending `RootDict` for custom logging purposes?", "summary": "RootDict is a base dictionary for the root logger, which is essential for the registration and organization of loggers within an application. It helps in tracking logs, error messages, and other information during the application's run-time. However, RootDict does not provide logging functionality by itself; it must be used with other classes and configurations to set up the logging system effectively. For example, to customize RootDict:\n\n```python\nfrom automata_docs.core.utils import RootDict\n\nroot_dict = RootDict()\nroot_dict[\"level\"] = \"DEBUG\"\nroot_dict[\"handlers\"] = [\"console\"]\n\nprint(root_dict)  # {'level': 'DEBUG', 'handlers': ['console']}\n```\n\nKeep in mind that extending RootDict for custom logging purposes requires following best practices and proper utilization of related symbols.", "context": "\n    Generate the documentation for RootDict using the context shown below -\nContext for -\nautomata_docs.core.utils.RootDict -\n\n  Class Docstring:\n    A dictionary representing the root logger\n    \n    \n  Closely Related Symbols:\n    Context for -\n    automata_docs.cli.commands.RootDict -\n    \n    Context for -\n    automata_docs.core.utils.LoggingConfig -\n    \n      Class Docstring:\n        A dictionary representing the logging configuration\n        \n        \n    Context for -\n    automata_docs.cli.commands.LoggingConfig -\n    \n    Context for -\n    automata_docs.core.coding.py_coding.module_tree.LazyModuleTreeMap -\n    \n      Class Docstring:\n        A lazy dictionary between module dotpaths and their corresponding RedBaron FST objects.\n        Loads and caches modules in memory as they are accessed\n        \n      Variables:\n        self._dotpath_map=DotPathMap(path)\n        self._loaded_modules={}\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(module_fpath)\n        self._loaded_modules[module_dotpath]=module\n        self._loaded_modules[module_dotpath]=self._load_module_from_fpath(fpath)\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                self._dotpath_map = DotPathMap(path)\n                self._loaded_modules: Dict[str, Optional[RedBaron]] = {}\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.cli.commands.HandlerDict -\n    \n    Context for -\n    automata_docs.core.utils.HandlerDict -\n    \n      Class Docstring:\n        A dictionary representing a logging handler\n        \n        \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n    Context for -\n    automata_docs.core.coding.py_coding.module_tree.DotPathMap -\n    \n      Class Docstring:\n        A map from module dotpaths to module filepaths\n        \n      Variables:\n        self._abs_path=path\n        self._module_dotpath_to_fpath_map=self._build_module_dotpath_to_fpath_map()\n        self._module_fpath_to_dotpath_map={\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        self._module_dotpath_to_fpath_map[module_dotpath]=file_path\n        self._module_fpath_to_dotpath_map[file_path]=module_dotpath\n        \n      Methods:\n        def __init__(self, path: str):\n                \"\"\"\n                Args:\n                    path: The absolute path to the root of the module tree\n                \"\"\"\n                if not os.path.isabs(path):\n                    path = os.path.join(root_fpath(), path)\n                self._abs_path = path\n                self._module_dotpath_to_fpath_map = self._build_module_dotpath_to_fpath_map()\n                self._module_fpath_to_dotpath_map = {\n                    v: k for k, v in self._module_dotpath_to_fpath_map.items()\n                }\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.tests.unit.sample_modules.sample`/EmptyClass#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "EmptyClass", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "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"}]}]}, "source_code": "class EmptyClass:\n    pass\n\n\n", "document": "# EmptyClass\n\n`EmptyClass` is a simple class with no methods or properties. It serves as a sample class in the larger context of the Automata Docs project. `EmptyClass` is related to other symbols such as `OuterClass` and its `InnerClass`. \n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass`\n  - `automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass`\n\n## Overview\n\n`EmptyClass` is an empty class used for demonstration purposes only. It can be instantiated with no arguments, but it does not provide any functionality. This class is part of a test module and should not be used in production code.\n\nSince `EmptyClass` is just an example and serves no practical purpose, there are no usage limitations or example code provided.\n\nFor other examples of sample classes and usage in test modules, you can refer to `OuterClass` and its `InnerClass`. These classes include method implementations and illustrations of how to use nested classes (`InnerClass`).\n\n## Follow-up Questions:\n\n- Are there any additional details desired regarding the `EmptyClass` structure?", "summary": "`EmptyClass` is a minimal class without methods or properties, designed for demonstration purposes within the Automata Docs project. It is associated with other symbols like `OuterClass` and `InnerClass`. The class can be instantiated without arguments but does not offer any functionality since it is part of a test module and should not be used in production code. Refer to `OuterClass` and its `InnerClass` for examples of method implementations and nested class usage.", "context": "\n    Generate the documentation for EmptyClass using the context shown below -\nContext for -\nautomata_docs.tests.unit.sample_modules.sample.EmptyClass -\n\n    \n  Closely Related Symbols:\n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass\n      \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass -\n    \n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n      \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n    \n      Class Docstring:\n        Inner doc strings\n        \n        \n      Methods:\n      automata_docs.tests.unit.test_py_code_retriever.test_get_code_no_docstring_no_code\n      \n        def test_get_code_no_docstring_no_code(getter):\n            module_name = \"sample\"\n            object_path = \"EmptyClass\"\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = \"class EmptyClass:\\n    pass\\n\\n\\n\"\n            assert result == expected_match\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter.ClassOrFunctionNotFound -\n    \n      Class Docstring:\n        Raised when a class or function is not found in the module\n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.tests.unit.sample_modules.sample`/OuterClass#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "OuterClass", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class OuterClass:\n    class InnerClass:\n        \"\"\"Inner doc strings\"\"\"\n\n        def inner_method(self):\n            \"\"\"Inner method doc strings\"\"\"\n", "document": "# OuterClass\n\n`OuterClass` is a simple class that contains a nested class called `InnerClass` and a method called `inner_method`. The class provides an example of using nested classes in Python and showcases how to access the inner class methods.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass`\n\n## Example\n\nThe following is an example of how to create instances of `OuterClass` and `OuterClass.InnerClass`, and then call the `inner_method`:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import OuterClass\n\nouter_instance = OuterClass()\ninner_instance = OuterClass.InnerClass()\n\n# Using the outer_instance to access the inner_method\nouter_instance.inner_method()\n\n# Using the inner_instance to access the inner_method\ninner_instance.inner_method()\n```\n\n## Overview\n\n`OuterClass` serves as an example of how to implement and use a nested class within a parent class in Python. The `outer_method` is defined in the scope of `OuterClass`. The `inner_method` is defined in the scope of the nested `InnerClass`.\n\n## Limitations\n\nThis class is just an example and may not provide any practical functionality. As mentioned, it is primarily used for testing and educational purposes.\n\n## Discussion\n\nThe `OuterClass` provides an example of nested classes in Python. With the `OuterClass.InnerClass` implementation, the `inner_method` is accessible from both the instances of `OuterClass` and its nested `InnerClass`. Note that the example code provided demonstrates the usage of inner classes and the inner methods for testing purposes.\n\n## Follow-up Questions:\n\n- Are there more complex examples of nested classes that should be included in this documentation?\n- Do the names of the classes and methods (`OuterClass`, `InnerClass`, `inner_method`) provide enough context for their purpose and how they should be used? If not, what are some better names for these classes and methods?", "summary": "OuterClass is a simple Python class containing a nested class, InnerClass, and a method, inner_method. It demonstrates the implementation and usage of nested classes within a parent class. Instances of both OuterClass and OuterClass.InnerClass can be created and used to access the inner_method, as shown in the example below.\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import OuterClass\n\nouter_instance = OuterClass()\ninner_instance = OuterClass.InnerClass()\n\n# Using the outer_instance to access the inner_method\nouter_instance.inner_method()\n\n# Using the inner_instance to access the inner_method\ninner_instance.inner_method()\n```\n\nPlease note that this example is primarily for educational purposes and may not have practical functionality.", "context": "\n    Generate the documentation for OuterClass using the context shown below -\nContext for -\nautomata_docs.tests.unit.sample_modules.sample.OuterClass -\n\n    \n  Methods:\n    def inner_method(self):\n                \"\"\"Inner method doc strings\"\"\"\n    \n  Closely Related Symbols:\n      automata_docs.tests.unit.sample_modules.sample.OuterClass\n      \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n      \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n    \n      Class Docstring:\n        Inner doc strings\n        \n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n      automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_nested_class\n      \n        def test_get_docstring_nested_class(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner doc strings\"\n            assert result == expected_match\n        \n        \n        \n      automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_nested_class_method\n      \n        def test_get_docstring_nested_class_method(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass.inner_method\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner method doc strings\"\n            assert result == expected_match\n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass.inner_method\n      \n        def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.tests.unit.sample_modules.sample`/OuterClass#InnerClass#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "OuterClass", "suffix": 2, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "InnerClass", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class InnerClass:\n        \"\"\"Inner doc strings\"\"\"\n\n        def inner_method(self):\n            \"\"\"Inner method doc strings\"\"\"\n", "document": "## OuterClass.InnerClass\n\n`OuterClass.InnerClass` is a nested class within the `OuterClass` class. This class contains the `inner_method` method and is used as an example object for testing purposes.\n\n## Overview\n\n`OuterClass.InnerClass` provides an `inner_method` with associated doc strings and serves as an example for testing documentation generation from nested classes within modules. This class is most prominently used in `automata_docs.tests.unit.sample_modules.sample.OuterClass`.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass`\n- `automata_docs.tests.unit.sample_modules.sample.EmptyClass`\n- `automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_nested_class_method`\n- `automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass.inner_method`\n\n## Example\n\nThe following is an example demonstrating how to use the `OuterClass.InnerClass` class and its `inner_method`:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import OuterClass\n\ninner_obj = OuterClass.InnerClass()\ninner_obj.inner_method()\n```\n\n## Limitations\n\nThe primary limitation of `OuterClass.InnerClass` is that it is an example class and does not have any real functionality beyond serving as an example for test cases. Additionally, it is only used within the context of `OuterClass` and does not have a standalone existence.\n\n## Follow-up Questions:\n\n- What are the potential real-world use cases for `OuterClass.InnerClass`, if any?\n- Are there any modifications required to make this class more suitable for practical applications?", "summary": "OuterClass.InnerClass is a nested class within the OuterClass class, containing an inner_method and serving as a test object for documentation generation in modules. It is primarily used in `automata_docs.tests.unit.sample_modules.sample.OuterClass`. However, it has limited functionality since it serves as an example for test cases and only functions within the context of OuterClass. \n\nTo use the OuterClass.InnerClass and its inner_method:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import OuterClass\n\ninner_obj = OuterClass.InnerClass()\ninner_obj.inner_method()\n```\n", "context": "\n    Generate the documentation for OuterClass using the context shown below -\nContext for -\nautomata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n\n  Class Docstring:\n    Inner doc strings\n    \n    \n  Methods:\n    def inner_method(self):\n                \"\"\"Inner method doc strings\"\"\"\n    \n  Closely Related Symbols:\n      automata_docs.tests.unit.sample_modules.sample.OuterClass\n      \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass -\n    \n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n      \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n      automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_nested_class\n      \n        def test_get_docstring_nested_class(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner doc strings\"\n            assert result == expected_match\n        \n        \n        \n      automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_nested_class_method\n      \n        def test_get_docstring_nested_class_method(getter):\n            module_name = \"sample\"\n            object_path = \"OuterClass.InnerClass.inner_method\"\n            result = getter.get_docstring(module_name, object_path)\n            expected_match = \"Inner method doc strings\"\n            assert result == expected_match\n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass.inner_method\n      \n        def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.tests.unit.sample_modules.sample`/Person#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "Person", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class Person:\n    \"\"\"This is a sample class.\"\"\"\n\n    def __init__(self, name):\n        \"\"\"This is the constructor.\"\"\"\n        self.name = name\n\n    def say_hello(self):\n        \"\"\"This is a sample method.\"\"\"\n        return f\"Hello, I am {self.name}.\"\n\n    def run(self) -> str:\n        ...\n\n\n", "document": "# Person\n\n`Person` is a sample class demonstrating the use of different class methods and variables. The class represents a basic implementation of a person object with a name attribute and methods to interact with that attribute.\n\n## Overview\n\nThe `Person` class implements a constructor and two methods: `say_hello()` and `run()`. The constructor initializes the `name` attribute of the class, while the `say_hello()` method returns a string greeting from the person object. The `run()` method returns a string indicating that the person is running.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample.Person`\n\n## Example\n\nThe following is an example demonstrating how to instantiate an object of `Person` class and use its methods.\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import Person\n\nperson = Person(\"John\")\nprint(person.say_hello())  # Output: \"Hello, I am John.\"\n```\n\n## Methods\n\n### Constructor: `__init__(self, name)`\n\nThe constructor takes one argument, `name`, and initializes the object's `name` attribute.\n\n#### Arguments\n\n- `name`: A string representing a person's name.\n\n### Method: `say_hello(self)`\n\nThis method takes no arguments and returns a greeting string containing the person's name.\n\n#### Returns\n\n- A string in the format: \"Hello, I am {self.name}.\"\n\n### Method: `run(self) -> str`\n\nThis method returns a string indicating that the person is running. It takes no arguments.\n\n#### Returns\n\n- A string representation indicating that the person is running.\n\n## Follow-up Questions:\n\n- How can the `Person` class be extended or used in more complex situations?\n- How can additional attributes and methods be added to make the class more versatile?", "summary": "The `Person` class is a simple demonstration of class methods and variables, representing a person object with a name attribute and methods to interact with it. The class includes a constructor to initialize the `name` attribute, a `say_hello()` method to return a greeting with the person's name, and a `run()` method to indicate the person is running. An example usage of the `Person` class is as follows:\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample import Person\n\nperson = Person(\"John\")\nprint(person.say_hello())  # Output: \"Hello, I am John.\"\n```\n\nPotential follow-up questions include how the class can be extended or used in more complex situations, and how additional attributes or methods can be added for versatility.", "context": "\n    Generate the documentation for Person using the context shown below -\nContext for -\nautomata_docs.tests.unit.sample_modules.sample.Person -\n\n  Class Docstring:\n    This is a sample class.\n    \n  Variables:\n    self.name=name\n    \n  Methods:\n    def __init__(self, name):\n            \"\"\"This is the constructor.\"\"\"\n            self.name = name\n    \n        \n    def run(self) -> str:\n            ...\n    \n    \n    \n    def say_hello(self):\n            \"\"\"This is a sample method.\"\"\"\n            return f\"Hello, I am {self.name}.\"\n    \n        \n  Closely Related Symbols:\n      automata_docs.tests.unit.sample_modules.sample.Person\n      \n        class Person:\n            \"\"\"This is a sample class.\"\"\"\n        \n            def __init__(self, name):\n                \"\"\"This is the constructor.\"\"\"\n                self.name = name\n        \n            def say_hello(self):\n                \"\"\"This is a sample method.\"\"\"\n                return f\"Hello, I am {self.name}.\"\n        \n            def run(self) -> str:\n                ...\n        \n        \n        \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.Person.run\n      \n        def run(self) -> str:\n                ...\n        \n        \n        \n      automata_docs.tests.unit.sample_modules.sample.EmptyClass\n      \n        class EmptyClass:\n            pass\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.EmptyClass -\n    \n        \n      automata_docs.tests.unit.sample_modules.sample.OuterClass\n      \n        class OuterClass:\n            class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass -\n    \n        \n      Methods:\n      automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass\n      \n        class InnerClass:\n                \"\"\"Inner doc strings\"\"\"\n        \n                def inner_method(self):\n                    \"\"\"Inner method doc strings\"\"\"\n        \n    Context for -\n    automata_docs.tests.unit.sample_modules.sample.OuterClass.InnerClass -\n    \n      Class Docstring:\n        Inner doc strings\n        \n        \n      Methods:\n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.tests.unit.sample_modules.sample2`/PythonAgentToolBuilder#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.sample_modules.sample2", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "PythonAgentToolBuilder", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": ""}]}]}, "source_code": "class PythonAgentToolBuilder:\n    \"\"\"A class for building tools to interact with PythonAgent.\"\"\"\n\n    def __init__(self, python_agent: PythonAgent):\n        \"\"\"\n        Initializes a PythonAgentToolBuilder with the given PythonAgent.\n\n        Args:\n            python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\n        \"\"\"\n        self.python_agent = python_agent\n\n    def build_tools(self) -> List:\n        \"\"\"\n        Builds a list of Tool objects for interacting with PythonAgent.\n\n        Args:\n            - None\n\n        Returns:\n            - tools (List[Tool]): A list of Tool objects representing PythonAgent commands.\n        \"\"\"\n\n        def python_agent_python_task():\n            \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n            pass\n\n        tools = [\n            Tool(\n                \"automata-task\",\n                python_agent_python_task,\n                \"Execute a Python task using the PythonAgent. Provide the task description in plain English.\",\n            )\n        ]\n        return tools\n", "document": "# PythonAgentToolBuilder\n\n`PythonAgentToolBuilder` is a class designed for building tools that interact with the `PythonAgent`. It takes a `PythonAgent` instance as an argument during initialization and provides functionality to build a list of `Tool` objects based on the given `PythonAgent`.\n\n## Overview\n\nThe `PythonAgentToolBuilder` class contains methods for initializing the builder with a `PythonAgent` instance and building `Tool` objects for interacting with the `PythonAgent`. It provides an easy way to create and manage tools based on the given agent.\n\n## Related Symbols\n\n- `automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder`\n- `automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder.build_tools`\n- `automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_multiline`\n- `automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder.__init__`\n- `automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder.python_agent_python_task`\n\n## Example\n\nThe following example demonstrates how to use the `PythonAgentToolBuilder` to create a list of `Tool` objects for a given `PythonAgent` instance.\n\n```python\nfrom automata_docs.tests.unit.sample_modules.sample2 import PythonAgentToolBuilder\nfrom automata_docs.tests.unit.sample_modules.sample2 import PythonAgent\n\n# Instantiate PythonAgent\npython_agent = PythonAgent()\n\n# Instantiate PythonAgentToolBuilder\ntool_builder = PythonAgentToolBuilder(python_agent)\n\n# Build tools\ntools = tool_builder.build_tools()\n```\n\n## Limitations\n\nThe current implementation of `PythonAgentToolBuilder` is limited in its scope. It only provides a single method for building `Tool` objects, and the list of tools is hardcoded within the class itself.\n\n## Follow-up Questions:\n\n- Is there a need to support adding custom tools outside of the provided `build_tools` function?", "summary": "`PythonAgentToolBuilder` is a class designed to build tools that interact with the `PythonAgent`. It takes a `PythonAgent` instance as an argument during initialization and provides functionality to build a list of `Tool` objects based on the given `PythonAgent`. The class contains methods for initializing the builder with a `PythonAgent` instance and building `Tool` objects for interacting with the `PythonAgent`. However, its current implementation is limited in scope as it provides only a single method for building `Tool` objects, and the list of tools is hardcoded within the class itself. To use the `PythonAgentToolBuilder`, you simply need to instantiate a `PythonAgent` and then use it to instantiate a `PythonAgentToolBuilder`, which you can use to build tools.", "context": "\n    Generate the documentation for PythonAgentToolBuilder using the context shown below -\nContext for -\nautomata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder -\n\n  Class Docstring:\n    A class for building tools to interact with PythonAgent.\n    \n  Variables:\n    self.python_agent=python_agent\n    \n  Methods:\n    def __init__(self, python_agent: PythonAgent):\n            \"\"\"\n            Initializes a PythonAgentToolBuilder with the given PythonAgent.\n    \n            Args:\n                python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\n            \"\"\"\n            self.python_agent = python_agent\n    \n        \n    def build_tools(self) -> List:\n            \"\"\"\n            Builds a list of Tool objects for interacting with PythonAgent.\n    \n            Args:\n                - None\n    \n            Returns:\n                - tools (List[Tool]): A list of Tool objects representing PythonAgent commands.\n            \"\"\"\n    \n            def python_agent_python_task():\n                \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n                pass\n    \n            tools = [\n                Tool(\n                    \"automata-task\",\n                    python_agent_python_task,\n                    \"Execute a Python task using the PythonAgent. Provide the task description in plain English.\",\n                )\n            ]\n            return tools\n    \n    def python_agent_python_task():\n                \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n                pass\n    \n            \n  Closely Related Symbols:\n      automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder\n      \n        class PythonAgentToolBuilder:\n            \"\"\"A class for building tools to interact with PythonAgent.\"\"\"\n        \n            def __init__(self, python_agent: PythonAgent):\n                \"\"\"\n                Initializes a PythonAgentToolBuilder with the given PythonAgent.\n        \n                Args:\n                    python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\n                \"\"\"\n                self.python_agent = python_agent\n        \n            def build_tools(self) -> List:\n                \"\"\"\n                Builds a list of Tool objects for interacting with PythonAgent.\n        \n                Args:\n                    - None\n        \n                Returns:\n                    - tools (List[Tool]): A list of Tool objects representing PythonAgent commands.\n                \"\"\"\n        \n                def python_agent_python_task():\n                    \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n                    pass\n        \n                tools = [\n                    Tool(\n                        \"automata-task\",\n                        python_agent_python_task,\n                        \"Execute a Python task using the PythonAgent. Provide the task description in plain English.\",\n                    )\n                ]\n                return tools\n        \n      automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder.build_tools\n      \n        def build_tools(self) -> List:\n                \"\"\"\n                Builds a list of Tool objects for interacting with PythonAgent.\n        \n                Args:\n                    - None\n        \n                Returns:\n                    - tools (List[Tool]): A list of Tool objects representing PythonAgent commands.\n                \"\"\"\n        \n                def python_agent_python_task():\n                    \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n                    pass\n        \n                tools = [\n                    Tool(\n                        \"automata-task\",\n                        python_agent_python_task,\n                        \"Execute a Python task using the PythonAgent. Provide the task description in plain English.\",\n                    )\n                ]\n                return tools\n        \n      automata_docs.tests.unit.test_py_code_retriever.test_get_docstring_multiline\n      \n        def test_get_docstring_multiline(getter):\n            module_name = \"sample2\"\n            object_path = \"PythonAgentToolBuilder.__init__\"\n            result = getter.get_docstring(module_name, object_path)\n            expected = \"\\n        Initializes a PythonAgentToolBuilder with the given PythonAgent.\\n\\n        Args:\\n            python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\\n        \"\n        \n            assert result == expected\n        \n        \n        \n      automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder.__init__\n      \n        def __init__(self, python_agent: PythonAgent):\n                \"\"\"\n                Initializes a PythonAgentToolBuilder with the given PythonAgent.\n        \n                Args:\n                    python_agent (PythonAgent): A PythonAgent instance representing the agent to work with.\n                \"\"\"\n                self.python_agent = python_agent\n        \n            \n      automata_docs.tests.unit.sample_modules.sample2.PythonAgentToolBuilder.python_agent_python_task\n      \n        def python_agent_python_task():\n                    \"\"\"A sample task that utilizes PythonAgent.\"\"\"\n                    pass\n        \n                \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n    Context for -\n    automata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n    \n      Variables:\n        self.has_class=has_class\n        self.has_method=has_method\n        self.has_function=has_function\n        self.has_import=has_import\n        self.has_module_docstring=has_module_docstring\n        self.has_class_docstring=has_class_docstring\n        self.has_method_docstring=has_method_docstring\n        self.has_function_docstring=has_function_docstring\n        self.class_name=MockCodeGenerator.random_string(5)\n        self.method_name=MockCodeGenerator.random_string(5)\n        self.function_name=MockCodeGenerator.random_string(5)\n        self.module_docstring=MockCodeGenerator.random_string(20)\n        self.class_docstring=MockCodeGenerator.random_string(20)\n        self.method_docstring=MockCodeGenerator.random_string(20)\n        self.function_docstring=MockCodeGenerator.random_string(20)\n        \n      Methods:\n        def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            \n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n    Context for -\n    automata_docs.core.symbol.symbol_types.Symbol -\n    \n      Class Docstring:\n        Symbol is similar to a URI, it identifies a class, method, or a local variable. SymbolInformation contains rich metadata about symbols such as the docstring.\n        \n        Symbol has a standardized string representation, which can be used interchangeably with Symbol. The syntax for Symbol is the following:\n        \n        # (<x>)+ stands for one or more repetitions of <x>\n        <symbol>               ::= <scheme> ' ' <package> ' ' (<descriptor>)+ | 'local ' <local-id>\n        <package>              ::= <manager> ' ' <package-name> ' ' <version>\n        <scheme>               ::= any UTF-8, escape spaces with double space.\n        <manager>              ::= same as above, use the placeholder '.' to indicate an empty value\n        <package-name>         ::= same as above\n        <version>              ::= same as above\n        <descriptor>           ::= <namespace> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta> | <macro>\n        <namespace>            ::= <name> '/'\n        <type>                 ::= <name> '#'\n        <term>                 ::= <name> '.'\n        <meta>                 ::= <name> ':'\n        <macro>                ::= <name> '!'\n        <method>               ::= <name> '(' <method-disambiguator> ').'\n        <type-parameter>       ::= '[' <name> ']'\n        <parameter>            ::= '(' <name> ')'\n        <name>                 ::= <identifier>\n        <method-disambiguator> ::= <simple-identifier>\n        <identifier>           ::= <simple-identifier> | <escaped-identifier>\n        <simple-identifier>    ::= (<identifier-character>)+\n        <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit\n        <escaped-identifier>   ::= '`' (<escaped-character>)+ '`'\n        <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.\n        \n        Examples -\n        from automata_docs.core.symbol.search.symbol_parser import parse_symbol\n        \n        symbol_class = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.agent.automata_agent_enums`/ActionIndicator#\"\n        )\n        \n        symbol_method = parse_symbol(\n        \"scip-python python automata_docs 75482692a6fe30c72db516201a6f47d9fb4af065 `automata_docs.core.base.tool`/ToolNotFoundError#__init__().\"\n        )\n        \n      Variables:\n        \n      Methods:\n    Context for -\n    automata_docs.core.symbol.graph.SymbolGraph -\n    \n      Variables:\n        DEFAULT_SCIP_PATH=os.path.join(config_fpath(), ConfigCategory.SYMBOL.value, \"index.scip\")\n        self._graph=builder.build_graph()\n        self.navigator=_SymbolGraphNavigator(self._graph)\n        \n      Methods:\n        def __init__(\n                self, index_path: str = DEFAULT_SCIP_PATH, build_caller_relationships: bool = False\n            ):\n                \"\"\"\n                Initializes SymbolGraph with the path of an index protobuf file.\n        \n                Args:\n                    index_path (str): Path to index protobuf file\n                Returns:\n                    SymbolGraph instance\n                \"\"\"\n                index = self._load_index_protobuf(index_path)\n                builder = GraphBuilder(index, build_caller_relationships)\n                self._graph = builder.build_graph()\n                self.navigator = _SymbolGraphNavigator(self._graph)\n        \n            \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDocEmbedding", "symbol": {"py/object": "automata_docs.core.symbol.symbol_types.Symbol", "uri": "scip-python python automata_docs c2b1ddcec522fab8212663ca5b1db4040970fe69 `automata_docs.tests.unit.test_py_writer`/MockCodeGenerator#", "scheme": "scip-python", "package": {"py/object": "automata_docs.core.symbol.symbol_types.SymbolPackage", "manager": "python", "name": "automata_docs", "version": "c2b1ddcec522fab8212663ca5b1db4040970fe69"}, "descriptors": {"py/tuple": [{"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "automata_docs.tests.unit.test_py_writer", "suffix": 1, "disambiguator": null}, {"py/object": "automata_docs.core.symbol.symbol_types.SymbolDescriptor", "name": "MockCodeGenerator", "suffix": 2, "disambiguator": null}]}}, "vector": {"py/reduce": [{"py/function": "numpy.core.multiarray._reconstruct"}, {"py/tuple": [{"py/type": "numpy.ndarray"}, {"py/tuple": [0]}, {"py/b64": "Yg=="}]}, {"py/tuple": [1, {"py/tuple": [1536]}, {"py/id": 14}, false, {"py/b64": "AAAAQBlFo78AAADAFr2CvwAAAKCX0Yy/AAAAQHFrh78AAADgv4tsvwAAACBGgpI/AAAAYEs5iL8AAAAAJdOSvwAAAIA9yqy/AAAAoFLRWb8AAACgapR9PwAAAABstJE/AAAAAC25TT8AAACAEI1dPwAAAKCNCnY/AAAAwHXUgz8AAABAko2VPwAAAIBe7Iq/AAAA4LXEhT8AAABAoImSPwAAAOBdnqE/AAAAwNIknD8AAADgXSujvwAAAGABD6G/AAAAoDzvAb8AAAAAhHelPwAAAACejiO/AAAAAND1pr8AAAAgXGQavwAAACCHTY8/AAAAoHVHoj8AAAAgamCHvwAAAMAi2KO/AAAAgNReo78AAACA72qPvwAAAGD92Yo/AAAAoE00dz8AAADAhhlpvwAAAAA4bJK/AAAA4C4NiL8AAADgDeuZPwAAAABmnn8/AAAAoLrUhr8AAAAgmX5yvwAAAGB2Io0/AAAAYGCzkz8AAABgxtWEPwAAAMCK25C/AAAAYNtPYL8AAACgj+uBPwAAAKDEm50/AAAAYGCzkz8AAABgIFBjPwAAACBsQXO/AAAAwGI7lD8AAABABqyDPwAAAIBESGu/AAAAYPG+mT8AAABAJ86RvwAAAKBqlJ2/AAAAAK1/nj8AAACgj+uBvwAAAOAdyIK/AAAA4Phwjr8AAABA+gORvwAAAACoVXq/AAAAIGCZkL8AAAAgUp2TPwAAAGBbFpE/AAAAYPg8aD8AAAAgO0KMPwAAAMD9gI8/AAAAIA2dQD8AAADgqamUvwAAAEBvF50/AAAAQGAmUr8AAAAguL+UvwAAAAC/sJE/AAAAoGdLlb8AAADg80Y6vwAAAKCB70S/AAAAIOOomb8AAAAgSx+FvwAAAKCiEaM/AAAAgHW6gL8AAAAg0mOEPwAAAIB/gWe/AAAAAEuSg78AAABgqt2avwAAACClmZO/AAAAoLANkD8AAABANjKbPwAAAOBZaZs/AAAAgLaFbT8AAADgCwpuvwAAAGDSfYc/AAAAIE5ofb8AAABA5YmlPwAAAABG9YA/AAAA4G7jlr8AAADgeouJvwAAACCsF6I/AAAAQL3pmL8AAACgYM2WvwAAAMBkHKC/AAAAYFSYkr8AAAAgamB3PwAAACAgNoC/AAAAQBlFkz8AAADAVpOBPwAAAABO24u/AAAAQDiGpT8AAABAF/GYvwAAAAAGkrC/AAAAQPExiD8AAAAALFGBPwAAAOADJJM/AAAA4GdleL8AAAAAY1WHvwAAAKB9uo4/AAAA4CwsjD8AAABgrDGVPwAAAIDGYpY/AAAAoC7zlL8AAAAg/b+XPwAAAGC42Ze/AAAAwKxli78AAADgmcxrvwAAAGAxlZi/AAAAAOVvcr8AAABg8xKUPwAAAOBRg4C/AAAAYEs5iD8AAABAu5WOPwAAAEDE9Ji/AAAAoFf7nT8AAAAgf9qivwAAAAAoHIs/AAAAoFLRmb8AAABguNlnvwAAAADlb4K/AAAAADu1mj8AAABgrDF1vwAAAICZJYc/AAAAAOztgL8AAACAeuR0vwAAACDQgng/AAAAIP2/l78AAADAhqaaPwAAAODdZIK/AAAAgGVqKT8AAADgv4tsvwAAAMB6/ne/AAAAIBqtjz8AAAAAZp5/PwAAAED4r6Y/AAAAYMSBij8AAADAeB18vwAAAIDiWmA/AAAAQKhvfb8AAADAuICMPwAAAABmnp8/AAAAYElYjL8AAAAABLGkvwAAACDhx42/AAAAABfXlT8AAADg+lGaPwAAAKCSNJq/AAAAoBl5mb8AAAAAzhRrvwAAAOBnZYi/AAAAwL/+ar8AAADgG+eWvwAAAID1gJE/AAAA4PcIkr8AAABgqPxePwAAAGBbFoG/AAAAAOi4Wr8AAADgi9BuvwAAAKCZsoi/AAAAICipnD8AAABgYLNTvwAAAIBnvoM/AAAAQLuVnj8AAABgZd2HvwAAAICj7I2/AAAAwMQoj78AAABAhuWSvwAAAGCuEoE/AAAAAGy0YT8AAABgbFtmPwAAAGAEWIk/AAAAAMRNhD8AAACgohFzvwAAAMDDM+G/AAAA4G7jdj8AAAAAO7WKvwAAAIAbQKK/AAAAgD3KjL8AAABAbxd9PwAAAODk4oA/AAAAAL+wkT8AAADA0iScvwAAAKBbMKQ/AAAAAHsYaz8AAACg/9SZPwAAAKDwcHA/AAAA4E+iNL8AAAAguwh9vwAAAGDItqC/AAAA4B4wnz8AAABgrhKhvwAAAAD9MlY/AAAAwLPjeT8AAABAbxd9PwAAAAAZK2A/AAAAIFxkmr8AAADAMx1ZPwAAAMBuVpW/AAAAgERIi78AAACgeJCKvwAAACCQH5g/AAAAQP1MqT8AAAAAbLShPwAAAEBzTJO/AAAAIBWDiz8AAAAAno6DPwAAAOCe9p+/AAAAgHW6oD8AAAAgtt54vwAAAOBkqXE/AAAAgD3KrD8AAABgy/9ovwAAAMCI+qQ/AAAAoBJumb8AAABAmQuEPwAAAGBl3Yc/AAAAYPZbjD8AAAAA7zaZPwAAAOB17oY/AAAAoI0Klj8AAAAAwBiOPwAAAOD6UXq/AAAAQE2Ngr8AAABg1NGBPwAAACBZG5I/AAAAwFJemz8AAAAA+f1vPwAAAEA9sJk/AAAA4EoFgj8AAAAA0taCvwAAAGDOu38/AAAAIKWZk78AAABgv1d2PwAAAKCjeW+/AAAA4Ipooj8AAABAS6yWPwAAAKBZT4i/AAAA4PyllD8AAACgi7abPwAAAGBsW5Y/AAAAQEQuWL8AAACADUSVvwAAAIB4A6m/AAAA4HqLmb8AAADAHTuRPwAAAMBwN6G/AAAAAK/TeL8AAADA+jeHPwAAAKBqlK0/AAAAwIrbkD8AAACg/fOdvwAAAMAxyY6/AAAAAK1/Pr8AAAAgxruRPwAAAOD1J4Y/AAAAYHPZpL8AAAAgi4KFvwAAAEAqing/AAAA4Mo+ob8AAAAAKnCVvwAAAOAkRpE/AAAAQI1jcT8AAAAAwBiePwAAAGAu2YE/AAAAINwqmz8AAACgIkuSvwAAAACjuKe/AAAAANM+fz8AAADAW72VvwAAAKAQGo+/AAAAwJ10kD8AAACgntx8vwAAAKCpj6G/AAAAwNZZor8AAADAumFIvwAAAEC6LXI/AAAAgGBAdT8AAADAyF1VvwAAAKBqlI2/AAAAwPd7kL8AAABg20+gPwAAAAA7tWo/AAAAIKjie78AAABgUreWPwAAAABo8pm/AAAAoCOzfr8AAADgviNwPwAAAABLkpO/AAAAgEh9ob8AAACgoDCXPwAAAKC/cVk/AAAAIMCljz8AAABAYY5evwAAAMDIXZW/AAAAABX2mT8AAADgFkp0PwAAAGDU0WE/AAAAABogjj8AAABgGdJ0PwAAAIA8YoA/AAAAoIhtk78AAABAdpVrvwAAAOCbrXe/AAAAgKKEkb8AAAAA4TpsvwAAAKA1cYM/AAAA4NQFqL8AAACA+Ml5PwAAAMAWvZI/AAAAgBTCoz8AAACg8HCAvwAAAKA1cZM/AAAA4E1Oij8AAAAgc7+BvwAAAGBX4Vo/AAAAQL3peD8AAADgt6VxvwAAAKBBjJS/AAAAwBL7er8AAABg7JSVvwAAAOC+I4C/AAAAoA3RZr8AAAAgSx9lPwAAAIDSCok/AAAAQMRndz8AAACAP6uYvwAAAABCM5k/AAAAAOOOlr8AAACgqY+hvwAAACAlYGQ/AAAAIOHHnb8AAADA1HhWPwAAAADvNnm/AAAAYCjDnz8AAACA2YinPwAAAIDN4JS/AAAAgGIhcT8AAAAgNqWJvwAAAEDxMZg/AAAAoOCTZ78AAABgm3mxPwAAAKCUFXa/AAAAAMAYnr8AAAAATtuLvwAAAIDJq24/AAAAYH2giz8AAAAAAl16PwAAAOBBppe/AAAAwIYZiT8AAADgFGmIvwAAAIC2hV0/AAAAIIQEl78AAABgoBaEvwAAAMCinoS/AAAAQEJNjD8AAABgTRqUvwAAAKAL8Jq/AAAAAND1lj8AAACAtoV9vwAAAKDBUqU/AAAAAIR3db8AAACANeSBPwAAAABq03W/AAAAIM05kL8AAACgQ22QvwAAACAQ5pi/AAAAwFu9lT8AAACAtoWdvwAAAMCgvZg/AAAAIAloer8AAAAA+f1vPwAAAMCnO4e/AAAAgE2npT8AAACg+qqFPwAAAOB6i5k/AAAAoOCTV78AAAAA6pmWvwAAAEBZqIM/AAAAoI/rkb8AAABAdLSfPwAAAOCPBYU/AAAAoETVnD8AAACAYiGRvwAAAKCB74Q/AAAAAGjyaT8AAABAhuWSvwAAAGDxvok/AAAAoLYSfz8AAABgXH59vwAAAAB2e5i/AAAAYH/0lT8AAACgKcmgPwAAAMDgIIk/AAAAwGm5oj8AAADgcMSSPwAAAICNfWQ/AAAAgJ7Cib8AAABgF35qvwAAAGA4oHi/AAAAoCnJgD8AAADgKeNzvwAAAKA872G/AAAAQPoDob8AAACgNtlPvwAAAKCuLIS/AAAAAJw6mT8AAABgKMOfvwAAAMBdEZA/AAAAYDVXkD8AAACAIr6QvwAAAOBbSpe/AAAAoOlloD8AAACgfFKivwAAAEBZqHO/AAAAQIsPhz8AAAAAeM+SPwAAAIAGxoa/AAAAoKzYmT8AAABAldadvwAAACCCI4s/AAAAQFDWer8AAABgibt8PwAAAADLy5I/AAAAAK1/jr8AAABgIFCjPwAAAACoVXo/AAAAwOeehz8AAAAgBh+SPwAAAKBZT5i/AAAAQDpnkT8AAADAXRGQvwAAACBJPpk/AAAAoFYGkD8AAACgI7NePwAAAIABnDK/AAAAQD+Rhb8AAABgbq+QPwAAAKDwcKA/AAAAYJe3Wb8AAACgm5OEPwAAAMDXwY6/AAAAYH/0RT8AAAAgWRuSvwAAACCsF0I/AAAAwDx8g78AAACgG82TvwAAAMD6N5e/AAAAQA0qoj8AAACANkx+vwAAAECNY6E/AAAAgO4Coz8AAABA71B8PwAAAGBcfo2/AAAAwPd7oL8AAACgLBKpvwAAAMD8GJM/AAAAgPOfhT8AAACgJ3V2PwAAAMDP25O/AAAAIDNcob8AAAAAF9dlvwAAACAXZHe/AAAAgOJaoD8AAABAyZF7vwAAACDNOZA/AAAAQDPpYj8AAABgwTiCvwAAACASOmO/AAAA4NuDlj8AAAAgHuJ1vwAAAACXEIW/AAAA4DffkD8AAAAA+f2fPwAAAADcEJg/AAAAoLANUD8AAABg792NvwAAAMD3e5C/AAAA4AhOhz8AAAAgOPmTPwAAAIBgQKW/AAAAoBnsl78AAABgHBt9vwAAAAClDKK/AAAAIGXDhD8AAAAgaH+bPwAAAEAEy3c/AAAAQDYyiz8AAADA5b2LPwAAAOAB0Gi/AAAAIBI6c78AAAAg2eFivwAAAKB6cYa/AAAAYPZbnD8AAACAxmJ2vwAAAEB46ZU/AAAAoCOzfr8AAADggQlovwAAAMD9gJ8/AAAAYBuzkD8AAACAoKOVvwAAAED2znq/AAAAgIFig78AAADgFkp0vwAAAEAuTIC/AAAAID0jmL8AAACgaSyRPwAAAOAITpe/AAAAANM+n78AAADgDeuJPwAAAEAoNo6/AAAAwGohfz8AAAAAczKQPwAAACDXAJc/AAAAIOX8c78AAABgF36aPwAAAGCVY2+/AAAAIL1ch78AAAAgLN5yPwAAAADhOpw/AAAAwHOAab8AAAAADnhrvwAAAKBX+30/AAAAoMsZbL8AAACgthKfvwAAAGDG1ZQ/AAAAgNmIdz8AAAAg0mOkvwAAACANnZC/AAAAIB7ihT8AAABgcfhYPwAAACB9hpg/AAAAIPTtjr8AAAAgBD6WPwAAAGDSfZc/AAAAACPylj8AAACAo+xtvwAAAMDd12A/AAAAwN3XoD8AAACgHhZcvwAAAOBlEX4/AAAAAGrTdb8AAADgXZ6hPwAAAGAUNZK/AAAAYEFykb8AAABAF/GYPwAAAGCgFnQ/AAAAwEP6cT8AAACghoyHvwAAAKDWzIC/AAAAgDGvi78AAACg0peKvwAAAKDlMJo/AAAAAAJdmj8AAACAOC2avwAAAICx6Iq/AAAAwGwCe78AAABgBjl1vwAAAEDE9Ki/AAAAgDXkkb8AAACAgWKDPwAAAKAQGo8/AAAAYCDdhD8AAACg22mTvwAAAEBnpJA/AAAA4OIBlT8AAAAgV8envwAAAMCGGXm/AAAAwOAgiT8AAADAmT+avwAAAABmno+/AAAA4OTicD8AAACAcYWKvwAAAGBsW4Y/AAAAoNtpc78AAABguNmHvwAAAODgrYq/AAAA4KfIiL8AAADA6X9zvwAAAEDeC6e/AAAAwLcYkD8AAACgJ3WmvwAAACDXAHc/AAAA4JHmoD8AAADgnQGCPwAAAOCwJ5M/AAAAoFswZL8AAADgXZ6hPwAAAIBzZoa/AAAAgAgakT8AAAAAGSuAPwAAAOB6i4m/AAAAAP8Tkr8AAAAg6iZ4PwAAAGCLnIi/AAAAwGfYVr8AAACgPO+BvwAAAICSp4i/AAAAAPRgnT8AAAAguqCgvwAAAGC9dmq/AAAAwG5Wlb8AAADgoEqKvwAAAABLkpO/AAAAgDZMjr8AAABgElSGPwAAAGBnMaK/AAAAQNREcD8AAADAV4ifPwAAAKC2Em+/AAAAYII9jr8AAACghoxXPwAAAOBdK4O/AAAAYES7aT8AAAAgoPyQvwAAAKBWBkC/AAAAQDPpkr8AAABgo198vwAAAAAhnmw/AAAAIHulbD8AAACgEBqPPwAAAKAg96c/AAAAYG+kbr8AAACA7CGXPwAAAKAZeZm/AAAAAMAYjr8AAACAtR2BvwAAAKAndXY/AAAAgHNmdr8AAAAgCWhqPwAAAKDzLJe/AAAAANWSqb8AAAAANhhovwAAAOCe9i+/AAAAwCLYg78AAADgJEZRPwAAAEAoNp6/AAAAID93kj8AAADg0UlxPwAAAOADJIM/AAAAYIm7jL8AAADAQRmGvwAAACC6oJA/AAAAgMhDor8AAADgBm17vwAAACDGu5E/AAAAYIhTcD8AAADg/+6cPwAAAODDwJI/AAAAYOPCjD8AAABgZd2HvwAAAOB3QoG/AAAAAOztgD8AAADgtcSVvwAAAODzRko/AAAA4P6GYL8AAAAgWRuSPwAAAODNh5k/AAAAgBCNnT8AAADASJd0vwAAAKCgMJc/AAAAIK9gij8AAAAAu3t7PwAAAACjuIc/AAAAwHzfcz8AAACAHomaPwAAAGCVY5+/AAAAwBKIjL8AAABAc0yTvwAAACCcx2o/AAAAQPoDYb8AAAAgzTmQvwAAAKCbk3S/AAAAYMbVpD8AAADgUuuMPwAAAIB/gWc/AAAAIHO/gb8AAAAARvWgvwAAAIBe7Jq/AAAAYGxblj8AAACAzeBkvwAAAGBJWJw/AAAAQMtyp78AAADAoL2ovwAAAIBESJs/AAAA4DwJhb8AAADA8P2BvwAAAMCBfJY/AAAAoCwSmb8AAACAmwZjPwAAAEDQD5o/AAAAIOHHjT8AAACgxu+XPwAAAIAlB4m/AAAAQGzOlD8AAACgriykvwAAAIA8YnC/AAAAwDHJnr8AAABAiw+HPwAAAIB65KQ/AAAAAOOOZj8AAABAGUWDvwAAAGDlFpe/AAAA4CRGgT8AAAAAknNiPwAAAICI4GG/AAAAoL9xiT8AAACgJ3WmvwAAAKD4Vnu/AAAAAO1Vfb8AAADAA5eRPwAAACAGH5K/AAAAABKtgT8AAADAabmSPwAAAOCs8ny/AAAAQEnLmj8AAACgLvOEvwAAAMCI+oS/AAAAYHh2dz8AAACgFE+FPwAAAEBzTLM/AAAAAH9NkT8AAABAnFR8vwAAAIDGYqY/AAAAoN6yaz8AAAAA5W+SPwAAAAC/sJG/AAAAIPTtjr8AAAAg3n6VvwAAAGDv3Z0/AAAAYIm7jD8AAACgvCiBPwAAAKAsEok/AAAAQBUQfT8AAADAtTeUvwAAAMDeP52/AAAA4PNGir8AAABgIFCjPwAAAKB8xYA/AAAAgFdufD8AAAAA0taivwAAAIDLjHq/AAAAgIspir8AAAAgzqFsvwAAAKDnEWY/AAAAgM/BYD8AAADA18F+PwAAAADGLpC/AAAAwFncmb8AAAAAy8uSPwAAAGDItqA/AAAAYPqQcj8AAAAg4F9xPwAAAADxF5U/AAAAIA2dgD8AAADA0iScvwAAAOCKaII/AAAAQF7Sd78AAABgVJiiPwAAAOBucHi/AAAAoFf7fb8AAAAAmlmdvwAAAOAiZaU/AAAAoBAaf78AAADgQaaHPwAAAED2zno/AAAAQLHOl78AAADgtcSlPwAAACDApY+/AAAAYMkenb8AAAAAffmWvwAAAIC2hY0/AAAAQBSocD8AAADgyOqWvwAAAOAGbZu/AAAAIHHeZT8AAACAwcVzPwAAAGAEWIk/AAAAoCd1dr8AAABAeOmVPwAAACCHTS+/AAAAgIspmr8AAACgXnl8PwAAACAC6ms/AAAAID8EZL8AAADAQRmGvwAAAMDp8pE/AAAAYCBQg78AAABAJ86RvwAAAGAbs5C/AAAAgL/kdz8AAACAiyl6vwAAAGAs+IU/AAAAQIkuaz8AAACgFjCRPwAAAKCe3Jw/AAAAIJrmnr8AAAAgdCd+PwAAACCLgpW/AAAAwAOXgb8AAACAQf+CPwAAAAB/TaE/AAAAoM1tlj8AAADgHjCPvwAAAGAow38/AAAAQD2wKT8AAABAf2ekvwAAAKCxdYy/AAAAYIZypL8AAACgFjChPwAAAOAkRjE/AAAAQFIqlb8AAACgWU+IvwAAAEAJ9Ys/AAAAwB6jnT8AAABgElSWvwAAACDl/IO/AAAAwKkcoz8AAABAv8qEvwAAAEA4E5c/AAAAgNvcgT8AAAAgAup7vwAAAIAgaoa/AAAAALgykz8AAACAmwaDvwAAAMB11JM/AAAAwCLYo78AAADARkOKvwAAAKAeFpy/AAAAYBnSRD8AAABgi5x4PwAAAOBucJg/AAAAIDF7pb8AAADgaydwvwAAAOB3QpG/AAAAIIZYcb8AAABA0A+avwAAAIBNp4W/AAAAwMQof78AAADgGZOcPwAAAIAshZc/AAAAoBl5mT8AAACAMwOGvwAAAOCL0H6/AAAAQNWsnL8AAABgjfByPwAAAECspKO/AAAAQEnLir8AAAAgGq1/PwAAAACHwK0/AAAAQA0qoj8AAABgc9mEvwAAAIAIGpG/AAAAQD2wmb8AAACgYM12vwAAAAAX13U/AAAAgFdunL8AAAAgeFyUPwAAACDcKiu/AAAAQCdBgL8AAADAj3iDvwAAAGBx+Ig/AAAAAEuSgz8AAABAu5V+PwAAACBzv5G/AAAAQBUQfT8AAADAj3iTPwAAAOBkqaE/AAAAQIKwjL8AAABg2ft1vwAAAKBirmK/AAAAIGgMjT8AAAAgRoKiPwAAAMA8fJM/AAAAAPEXhb8AAAAgy1ikPwAAAMCeaX6/AAAAYBWdLj8AAADg1AWIvwAAAMADl4G/AAAAQKykYz8AAAAgOPmDvwAAAGBJ5S0/AAAA4NuDdr8AAACgEBqvvwAAACDXAIc/AAAAAKHXez8AAAAARBSVPwAAAOARIJC/AAAAwL/+Wj8AAADALJ96PwAAAKC481o/AAAA4B4wj78AAADAxCh/vwAAAMDXwX6/AAAAoHPzd78AAADAev6XPwAAAEB2lZs/AAAA4DOqaj8AAAAADnibPwAAAADJd5i/AAAAAAnbaD8AAACgZ0uVvwAAAKDbaZM/AAAAAHSajL8AAAAAAl2KvwAAAKDwcKA/AAAAgDxiQD8AAADAblaVvwAAAGC/V5a/AAAAILqgoD8AAACA+MmJvwAAAABEFJW/AAAAQBfxiL8AAACgAbaVvwAAAKBxEoy/AAAAoGqUnT8AAABgZzFyvwAAAGBvpI6/AAAAwPd7sD8AAABAuEyGvwAAAIDBxZM/AAAA4NKxbT8AAADAvLWivwAAAADtVX0/AAAAoLANkL8AAADgLCycPwAAAOC3pYE/AAAAIKWZc78AAAAgzqF8PwAAAMBsAmu/AAAAIOomiD8AAAAgzTmgvwAAAIDEDpy/AAAAYMv/yD8AAAAgY+JYPwAAAKD6qoU/AAAAYFsWoT8AAAAAo7hXvwAAAACXEHU/AAAAoCOzbj8AAACA/WaMPwAAAGAEWJm/AAAAIKjimz8AAADApeeMvwAAACCa5j6/AAAAwKKehL8AAACgMTyNPwAAACAzXJG/AAAA4OIBZT8AAACA/WaMvwAAACAe4qW/AAAAgIjgkb8AAAAgBD52vwAAAOBdnpE/AAAAgGe+k78AAABA52qhvwAAAEBgJqK/AAAAQIblcr8AAAAA8Rd1vwAAAKC485q/AAAAgH+Bd78AAACAtoWNPwAAAACL9ZM/AAAAIMtYhL8AAACgg9CQPwAAAIAZX4Y/AAAAIKNFiT8AAADgoEqavwAAAADs7YC/AAAAABognj8AAABgTRqUvwAAAMCxAo4/AAAAYLq6c78AAABA4OySPwAAAKBsdZm/AAAAIOOoeb8AAAAgqsOXvwAAAADm124/AAAAgC5mg78AAAAgy+WVvwAAAGCo/J4/AAAAoEa2mL8AAAAAi/WTPwAAAOCKaJK/AAAAIMTapb8AAAAA6LiaPwAAAABLknM/AAAAIPP4kD8AAABgm3mRvwAAACC7CJ0/AAAAAPEXhT8AAADg24OWPwAAAKCe3Dw/AAAA4G5wiL8AAADAVpORPwAAAIBbo6K/AAAAYCjDnz8AAADA93uQvwAAAKDZFWk/AAAAoCOznr8AAAAg6EV8PwAAAMAghHm/AAAAID8EdL8AAABg7nWhvwAAAOAb55a/AAAAgLpHdb8AAADg0rGNvwAAACBsQZO/AAAAoG7Jo78AAABARg+EPwAAAAD0YF2/AAAAgISrmz8AAACgV/udPwAAAGDv3V2/AAAAYEnlfb8AAADgp8h4vwAAAAAGknC/AAAAoD84mr8AAAAAQN+OvwAAAAA0N5w/AAAAoCWUWj8AAACA0gppvwAAAIDlo3i/AAAAAAnbmL8AAADgHciivwAAAMBWk5E/AAAAwNv2lD8AAAAAVzo2vwAAAECZC6Q/AAAAQD2wmT8AAADgkk6NPwAAAID1gIE/AAAAQDgTp78AAADAFNymvwAAACB0J64/AAAAoBYwYb8AAAAgyQR6vwAAAACcOok/AAAAgIFigz8AAADAmT+avwAAAOAPzIU/AAAAoDzvgb8AAABgDbeTvwAAAKCe3Iw/AAAAoPyLob8AAAAAJdOSPwAAAADTPn8/AAAAYL0DnD8AAACgjZeXvwAAAAAH+ow/AAAAICVgpL8AAACA4AaWvwAAAOCR5nA/AAAAwJb2kb8AAABgI5lLPwAAAGDZ+0U/AAAA4J0Bkj8AAACAageMvwAAAAAOeHu/AAAAQFdUmb8AAACg/9SJPwAAAAD/E5K/AAAAoBRPlb8AAACA8UuLPwAAAIB9LZ2/AAAAgBcLfL8AAACAoKOFPwAAAKA22Y8/AAAA4JnMm78AAADArrl1PwAAAMANXpi/AAAAYNTRkb8AAADA6ud/vwAAAODZL3y/AAAA4BEgkD8AAACAlPsyvwAAAICI4EG/AAAAQNREcD8AAACgOg6GvwAAAEClJnU/AAAAoAEpZD8AAACg3rKLPwAAAIAIGqG/AAAAgISri78AAACAfS2NvwAAAMB11IO/AAAAoHESnL8AAAAA+95bvwAAAKAUT6W/AAAAQFdUWT8AAACgQYykvwAAAADOFJs/AAAAgKkCYD8AAAAg6EWMvwAAAEBUC5G/AAAAQBLHlL8AAACAWcKWPwAAAABmnm+/AAAAYFsWob8AAABAZVDGvwAAACBQSXk/AAAAIKD8cD8AAABAxGenvwAAACBV5ps/AAAAwGm5cr8AAAAg6EWMPwAAAKBsdVm/AAAAIC8ni78AAADgtcSVvwAAAICU+5I/AAAAwLCagT8AAACgsA2QPwAAAMBBGZY/AAAAQFDWer8AAACgthJ/PwAAAECgiaK/AAAAoPBwkL8AAAAArX+ePwAAAMBD+pE/AAAAoMFSpT8AAADgCqKhvwAAAABTeI4/AAAA4GLIpT8AAADgbI98PwAAAMCGGZm/AAAAAAnbmL8AAADAMcl+vwAAACD/oHO/AAAAICA2oL8AAACA1F6jPwAAAICihKE/AAAAYAvWl78AAACAXuz6PgAAAKB8xXA/AAAA4AqioT8AAABgNr+sPwAAAIDvao8/AAAAIGPiiL8AAACA6s2cvwAAAMDSJJw/AAAAYPG+aT8AAADgDespvwAAAEBO9Y6/AAAAIGCZcD8AAAAAOGyiPwAAAEBlUKY/AAAAAEIzmb8AAACgyxmMPwAAAKCZspi/AAAAQNeNqD8AAADgtcSFvwAAACBNAIE/AAAAQFDWer8AAACgthKfPwAAAABHXW2/AAAAQPExeD8AAABAO89tvwAAAACZ8ZA/AAAAgNIKmb8AAAAgLyebPwAAAIBs6Je/AAAAoHiQer8AAABA52phPwAAACA/BHQ/AAAAgAGccr8AAACgxJutvwAAAEAgw5E/AAAAYES7ib8AAACANkxuvwAAAADjG3g/AAAAwEZDer8AAACgyNCDvwAAAABa9lw/AAAAoLWqoj8AAADgXZ6hPwAAAEA7z52/AAAAYD09mz8AAABAHI6LPwAAAAAEsZS/AAAAgKPsnb8AAAAgPwSkPwAAAKCbk3Q/AAAAIFkbgr8AAACgutSWPwAAAGCls4a/AAAAAAaScD8AAACA72pPvwAAAOCBCYi/AAAAwE8Vc78AAABArKRzPwAAACBEoYY/AAAAABogbr8AAADgFkqUvwAAAID/R3g/AAAAoEGMhD8AAACgM5CHPwAAAIAbQJK/AAAAQLHOh78AAACgbsmjvwAAAADhOoy/AAAAoBAaX78AAADgvEKUvwAAAGB4dnc/AAAAYII9fr8AAABAY296PwAAAKASbpm/AAAA4P/ufL8AAACghoyXPwAAAABSEGI/AAAAAHMycL8AAAAgc79hvwAAACAtRm8/AAAAILsIfT8AAADgFGmIvwAAAGCZmKU/AAAAYGP8Wz8AAAAgpZmTvwAAAAAsUaE/AAAAgJDGjL8AAACgKcmgPwAAAMDp8mG/AAAA4LAnk78AAACgQ22QPwAAACAoqUy/AAAAoMSbXb8AAABgzVOzvwAAAACxtJS/AAAAIA2dkL8AAAAAEFl3vwAAAACjuHe/AAAAYBuzkD8AAADglC+ZvwAAAMD1mpQ/AAAAYKwxpb8AAADg+lFqPwAAAGCgFmQ/AAAAAPiVg78AAACAAZyivwAAAEBc8Ws/AAAAgFujcr8AAAAAmfGgvwAAACD07U6/AAAAoPqqdb8AAADgiIeWPwAAAMAeo50/AAAAYJ41SL8AAAAgBh+CvwAAAKBqlJ2/AAAAoGkskb8AAAAACy+TPwAAAOAWSqQ/AAAAgDGvm78AAAAArIpwvwAAAKCNl3e/AAAAILOVoD8AAADg5yt5vwAAAIC4Zom/AAAAIGh/az8AAACgge+kvwAAAEAuTIA/AAAAoCnJoD8AAABAEsd0vwAAAOCbrZe/AAAAAKo2pj8AAADAHqONvwAAAMAdO6G/AAAAgB6Jmj8AAACApUBYvwAAAGAjmZu/AAAA4FGDoD8AAABgF35KPwAAAMCxAl6/AAAAgERImz8AAADAS+CMPwAAAAD/E5K/AAAAgI9ekL8AAACAIyaNvwAAAID1gCE/AAAAwLECbr8AAADAittQvwAAAOBdnoG/AAAAoOcRlj8AAACASXJvPwAAAODbg4Y/AAAA4KR/kL8AAACg/9SZvwAAAOAPzGU/AAAAYJe3ab8AAACgV/udvwAAAGAXfno/AAAA4DOqij8AAABg/dmavwAAAGD/uoa/AAAAYAEPgT8AAAAAXNeovwAAAKDI0JO/AAAA4J0Boj8AAAAgqsOHvwAAAMBdEZA/AAAAYC7Zgb8AAACgCDQEPwAAAAB/TaE/AAAAoP3zjb8AAAAg6EV8vwAAAIDb3FE/AAAAoDbZX78AAACgNXFzPwAAAODsyIu/AAAA4GLIlb8AAAAgoWSdPwAAAMBWk5E/AAAAYJRuYT8AAAAA0taCPwAAAEDhVH8/AAAAoAvwmr8AAACAdbqQvwAAACBcZIq/AAAAQLHOhz8AAAAADnh7vwAAAGDjwow/AAAAgHW6cD8AAABg/7qGPwAAAGCo/J4/AAAA4OzIa78AAABgG7OAPwAAAECQrIm/AAAAQNeNqL8AAACAooSxvwAAAKCIbZM/AAAAAJ6Og78AAACg4uehvwAAAAB0mow/AAAAoG7Jo78AAADAV4h/PwAAAKC2Eo8/AAAAQLOvc78AAACgz05yvwAAAKCSNJq/AAAAAE7bez8AAADgYshlvwAAAAD2tHe/AAAAwGm5kr8AAADgloODPwAAAID9Zow/AAAAgLUdob8AAADgN9+wPwAAAIDgBoY/AAAAgBtAUr8AAADAYFp4vwAAAGA7XI8/AAAAwB07YT8AAAAAaPKZvwAAAMCQ4H8/AAAAADHug78AAABg8xKkPwAAAEAgw1E/AAAAIKrDl78AAABApwehPwAAAKCWaXA/AAAAoH8Oeb8AAABgIFCTPwAAAMCK26A/AAAAoE+IwT4AAACgvCihPwAAAMCuuZU/AAAAAMYukD8AAADAMcl+PwAAAAAl05K/AAAAQJKNlb8AAABguNmXPwAAAGCN8KK/AAAAQNWsnL8AAABAO899vwAAAEC/yqS/AAAAoPUNQ78AAACAv+SXPwAAAGBx+Ig/AAAAQCDDcT8AAAAghliBvwAAAGCzPKW/AAAAwC6Alr8AAAAAyXd4PwAAAOAKopG/AAAAYCDdhD8AAABAIwwaPwAAAKB1RzI/AAAAIBqtf78AAACgGex3PwAAAGDItpA/AAAAIJ4blT8AAADAj3iTPwAAAGDQnHu/AAAA4GDnmb8AAADgYsilvwAAACAC6os/AAAAQJ6ohr8AAAAgDZ2QvwAAAMDd16C/AAAAIE5onb8AAAAA9rR3vwAAAGB6V4M/AAAAYKy+lj8AAAAgRoKCPwAAAGAqF2q/AAAAgAbGlj8AAABAV1RpPwAAAODZL6w/AAAAwEP6kT8AAABg7nVxPwAAACDSY4S/AAAAYFBjfD8AAABAtmuqPwAAAEBELng/AAAA4DWLhr8AAADAVpOhvwAAAGC/V0Y/AAAAoMSbnb8AAABgElRGPwAAAODbg4a/AAAAwGWEjL8AAAAgo0WpPwAAAMCGpoo/AAAAIHYIij8AAADg1AWIvwAAAOBsj5y/AAAAINUfiz8AAABAYY5OPwAAACCLgnU/AAAAIGPieL8AAAAgGbiRPwAAAOCe9p+/AAAAAO82OT8AAAAA0z5/PwAAAADTPo8/AAAAIKwXor8AAABgyR59PwAAAIDb3JE/AAAAIJVJjL8AAADAoL2YvwAAAKDSl4q/AAAAYIhTMD8AAABgWTVlPwAAAABo8ok/AAAA4IPq874AAABgI5lLvwAAAICj7I2/AAAA4CePmT8AAABA71CMvwAAAMANXmi/AAAAANdzpT8AAADAXRFwPwAAACBvips/AAAAoI/roT8AAADgm613vwAAAKD6qqW/AAAAgAgaoT8AAABg6kCLvwAAAADlb5K/AAAAQDEId78AAACA3NGPvwAAAEBCTZy/AAAAgHW6cD8AAABAkKyZvwAAAAD9MmY/AAAA4IvQjr8AAACgi7ZrvwAAAICihLE/AAAAIFBJiT8AAAAgzTlwvwAAAEDE9Jg/AAAAoKeulb8AAABg1NGhPwAAACA/BKQ/AAAAQB5vd78AAACgWU84vwAAAICCyn+/AAAAYI3wkr8AAAAgwoZ7PwAAAMDzuUi/AAAAAEmxh78AAADA93uQPwAAAADAGH6/AAAAYDigiL8AAAAgo0WZPwAAAEDliYW/AAAA4L+LjD8AAADgrPKsPwAAAODSsY0/AAAA4GdlqD8AAAAAI/J2PwAAAODgrYq/AAAAgNvckb8AAAAgo0WJvwAAAGBgs5O/AAAAwBL7er8AAADADV6YvwAAAEANKpI/AAAAoAEplD8AAAAAf02hvwAAAIBIfXE/AAAAQKcHUb8AAABgPx5nPwAAAIA8YnC/AAAAgBlflj8AAADAgXyWPwAAAIDUXoO/AAAA4E+ilL8AAABg3ESOPwAAAGCzPIW/AAAAAPn9j78AAACgRNV8vwAAAODI6oY/AAAAQPivhr8AAAAAEFmXPwAAAAAx7pO/"}]}]}, "source_code": "class MockCodeGenerator:\n    def __init__(\n        self,\n        has_class: bool = False,\n        has_method: bool = False,\n        has_function: bool = False,\n        has_import: bool = False,\n        has_module_docstring: bool = False,\n        has_class_docstring: bool = False,\n        has_method_docstring: bool = False,\n        has_function_docstring: bool = False,\n    ):\n        self.has_class = has_class\n        self.has_method = has_method\n        self.has_function = has_function\n        self.has_import = has_import\n        self.has_module_docstring = has_module_docstring\n        self.has_class_docstring = has_class_docstring\n        self.has_method_docstring = has_method_docstring\n        self.has_function_docstring = has_function_docstring\n\n        # self.import_class_name = MockCodeGenerator.random_string(5)\n        self.class_name = MockCodeGenerator.random_string(5)\n        self.method_name = MockCodeGenerator.random_string(5)\n        self.function_name = MockCodeGenerator.random_string(5)\n        self.module_docstring = MockCodeGenerator.random_string(20)\n        self.class_docstring = MockCodeGenerator.random_string(20)\n        self.method_docstring = MockCodeGenerator.random_string(20)\n        self.function_docstring = MockCodeGenerator.random_string(20)\n\n    def generate_code(self):\n        module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n        class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n        method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n        function_docstring = (\n            f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n        )\n        import_statement = f\"import random\\n\" if self.has_import else \"\"\n\n        method_code = textwrap.dedent(\n            f\"\"\"def method(self):\n                    {method_docstring}\n                    pass\n                \"\"\"\n            if self.has_class and self.has_method\n            else \"\"\n        )\n        class_code = textwrap.dedent(\n            f\"\"\"\n            class {self.class_name}:\n                {class_docstring}\n                def __init__(self):\n                    pass\n                {method_code}\n            \"\"\"\n            if self.has_class\n            else \"\"\n        )\n\n        function_code = (\n            textwrap.dedent(\n                f\"\"\"\n            def {self.function_name}():\n                {function_docstring}\n                pass\n            \"\"\"\n            )\n            if self.has_function\n            else \"\"\n        )\n\n        return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n\n    def _check_function_obj(self, function_obj=None):\n        if function_obj is None:\n            source_code = self.generate_code()\n            function_obj = RedBaron(source_code).find(\"def\")\n        assert function_obj.name == self.function_name\n        if self.has_function_docstring:\n            assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n            assert isinstance(function_obj[0], StringNode)\n            assert isinstance(function_obj[1], EndlNode)\n            assert isinstance(function_obj[2], PassNode)\n        else:\n            assert isinstance(function_obj[0], EndlNode)\n            assert isinstance(function_obj[1], PassNode)\n\n    def _check_class_obj(self, class_obj=None):\n        if class_obj is None:\n            source_code = self.generate_code()\n            class_obj = RedBaron(source_code).find(\"class\")\n\n        assert class_obj.name == self.class_name\n        if self.has_class_docstring:\n            assert isinstance(class_obj, ClassNode)\n            assert isinstance(class_obj[0], StringNode)\n            assert isinstance(class_obj[1], EndlNode)\n            assert isinstance(class_obj[2], DefNode)\n        else:\n            assert isinstance(class_obj, ClassNode)\n            assert isinstance(class_obj[0], EndlNode)\n            assert isinstance(class_obj[1], DefNode)\n\n        if self.has_method:\n            method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n            assert method_obj.name == \"method\"\n            if self.has_method_docstring:\n                assert isinstance(method_obj[0], StringNode)  # docstring\n                assert isinstance(method_obj[1], EndlNode)  # pass\n                assert isinstance(method_obj[2], PassNode)  # pass\n            else:\n                assert isinstance(method_obj[0], EndlNode)\n                assert isinstance(method_obj[1], PassNode)\n\n    def _check_module_obj(self, module_obj=None):\n        if module_obj is None:\n            source_code = self.generate_code()\n            module_obj = RedBaron(source_code)\n        if self.has_module_docstring:\n            assert isinstance(module_obj[0], StringNode)\n            assert isinstance(module_obj[1], ClassNode)\n        else:\n            if isinstance(module_obj[0], EndlNode):\n                assert isinstance(module_obj[1], ClassNode)\n            else:\n                assert isinstance(module_obj[0], ClassNode)\n\n    @staticmethod\n    def random_string(length: int):\n        return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n\n\n", "document": "# MockCodeGenerator\n\n`MockCodeGenerator` is a utility class used for generating random Python code based on the specified conditions, including class, method, and function definitions. It can also include docstrings and import statements. This class is used mainly for testing purposes of Python code generation and manipulation related functions.\n\n## Overview\n\n`MockCodeGenerator` provides a way to generate random Python code snippets with specific predefined conditions like `has_class`, `has_method`, `has_function`, `has_import`, `has_module_docstring`, `has_class_docstring`, `has_method_docstring`, and `has_function_docstring`. The generated code can then be used for testing code manipulation and inspection functions.\n\n## Methods\n\n### `__init__(self, has_class: bool = False, has_method: bool = False, has_function: bool = False, has_import: bool = False, has_module_docstring: bool = False, has_class_docstring: bool = False, has_method_docstring: bool = False, has_function_docstring: bool = False)`\n\nThe constructor initializes the `MockCodeGenerator` object with the given conditions. Each condition corresponds to a component in the generated code snippet (e.g. class, method, function, import statement, or related docstrings). Default values are set to `False`.\n\n### `generate_code(self)`\n\nThis method generates a random Python code snippet based on the conditions set during the object's initialization. The resulting code snippet will include the components specified by the conditions as True.\n\n### `random_string(length: int)`\n\nThis static method generates a random string of the specified length.\n\n## Example\n\n```python\nfrom automata_docs.tests.unit.test_py_writer import MockCodeGenerator\n\nmock_generator = MockCodeGenerator(\n    has_class=True,\n    has_method=True,\n    has_function=True,\n    has_import=True,\n    has_module_docstring=True,\n    has_class_docstring=True,\n    has_method_docstring=True,\n    has_function_docstring=True\n)\n\ncode_snippet = mock_generator.generate_code()\nprint(code_snippet)\n```\n\n## Follow-up Questions:\n\n- In the provided context, there are references to \"Mock\" objects. Are these the actual underlying objects or specific \"Mock\" classes for testing purposes? If not, please provide the underlying objects.", "summary": "`MockCodeGenerator` is a utility class for generating random Python code snippets based on specified conditions, such as class, method, function definitions, docstrings, and import statements. Primarily used for testing code generation and manipulation functions, it allows users to set predefined conditions like `has_class`, `has_method`, etc., and generates a random code snippet based on the conditions set during the object's initialization. For example:\n\n```python\nfrom automata_docs.tests.unit.test_py_writer import MockCodeGenerator\n\nmock_generator = MockCodeGenerator(\n    has_class=True,\n    has_method=True,\n    has_function=True,\n    has_import=True,\n    has_module_docstring=True,\n    has_class_docstring=True,\n    has_method_docstring=True,\n    has_function_docstring=True\n)\n\ncode_snippet = mock_generator.generate_code()\nprint(code_snippet)\n```", "context": "\n    Generate the documentation for MockCodeGenerator using the context shown below -\nContext for -\nautomata_docs.tests.unit.test_py_writer.MockCodeGenerator -\n\n  Variables:\n    self.has_class=has_class\n    self.has_method=has_method\n    self.has_function=has_function\n    self.has_import=has_import\n    self.has_module_docstring=has_module_docstring\n    self.has_class_docstring=has_class_docstring\n    self.has_method_docstring=has_method_docstring\n    self.has_function_docstring=has_function_docstring\n    self.class_name=MockCodeGenerator.random_string(5)\n    self.method_name=MockCodeGenerator.random_string(5)\n    self.function_name=MockCodeGenerator.random_string(5)\n    self.module_docstring=MockCodeGenerator.random_string(20)\n    self.class_docstring=MockCodeGenerator.random_string(20)\n    self.method_docstring=MockCodeGenerator.random_string(20)\n    self.function_docstring=MockCodeGenerator.random_string(20)\n    \n  Methods:\n    def __init__(\n            self,\n            has_class: bool = False,\n            has_method: bool = False,\n            has_function: bool = False,\n            has_import: bool = False,\n            has_module_docstring: bool = False,\n            has_class_docstring: bool = False,\n            has_method_docstring: bool = False,\n            has_function_docstring: bool = False,\n        ):\n            self.has_class = has_class\n            self.has_method = has_method\n            self.has_function = has_function\n            self.has_import = has_import\n            self.has_module_docstring = has_module_docstring\n            self.has_class_docstring = has_class_docstring\n            self.has_method_docstring = has_method_docstring\n            self.has_function_docstring = has_function_docstring\n    \n            # self.import_class_name = MockCodeGenerator.random_string(5)\n            self.class_name = MockCodeGenerator.random_string(5)\n            self.method_name = MockCodeGenerator.random_string(5)\n            self.function_name = MockCodeGenerator.random_string(5)\n            self.module_docstring = MockCodeGenerator.random_string(20)\n            self.class_docstring = MockCodeGenerator.random_string(20)\n            self.method_docstring = MockCodeGenerator.random_string(20)\n            self.function_docstring = MockCodeGenerator.random_string(20)\n    \n        \n    def generate_code(self):\n            module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n            class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n            method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n            function_docstring = (\n                f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n            )\n            import_statement = f\"import random\\n\" if self.has_import else \"\"\n    \n            method_code = textwrap.dedent(\n                f\"\"\"def method(self):\n                        {method_docstring}\n                        pass\n                    \"\"\"\n                if self.has_class and self.has_method\n                else \"\"\n            )\n            class_code = textwrap.dedent(\n                f\"\"\"\n                class {self.class_name}:\n                    {class_docstring}\n                    def __init__(self):\n                        pass\n                    {method_code}\n                \"\"\"\n                if self.has_class\n                else \"\"\n            )\n    \n            function_code = (\n                textwrap.dedent(\n                    f\"\"\"\n                def {self.function_name}():\n                    {function_docstring}\n                    pass\n                \"\"\"\n                )\n                if self.has_function\n                else \"\"\n            )\n    \n            return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n    \n        \n    @staticmethod\n        def random_string(length: int):\n            return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n    \n    \n    \n  Closely Related Symbols:\n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator\n      \n        class MockCodeGenerator:\n            def __init__(\n                self,\n                has_class: bool = False,\n                has_method: bool = False,\n                has_function: bool = False,\n                has_import: bool = False,\n                has_module_docstring: bool = False,\n                has_class_docstring: bool = False,\n                has_method_docstring: bool = False,\n                has_function_docstring: bool = False,\n            ):\n                self.has_class = has_class\n                self.has_method = has_method\n                self.has_function = has_function\n                self.has_import = has_import\n                self.has_module_docstring = has_module_docstring\n                self.has_class_docstring = has_class_docstring\n                self.has_method_docstring = has_method_docstring\n                self.has_function_docstring = has_function_docstring\n        \n                # self.import_class_name = MockCodeGenerator.random_string(5)\n                self.class_name = MockCodeGenerator.random_string(5)\n                self.method_name = MockCodeGenerator.random_string(5)\n                self.function_name = MockCodeGenerator.random_string(5)\n                self.module_docstring = MockCodeGenerator.random_string(20)\n                self.class_docstring = MockCodeGenerator.random_string(20)\n                self.method_docstring = MockCodeGenerator.random_string(20)\n                self.function_docstring = MockCodeGenerator.random_string(20)\n        \n            def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            def _check_function_obj(self, function_obj=None):\n                if function_obj is None:\n                    source_code = self.generate_code()\n                    function_obj = RedBaron(source_code).find(\"def\")\n                assert function_obj.name == self.function_name\n                if self.has_function_docstring:\n                    assert function_obj[0].value.replace('\"\"\"', \"\") == self.function_docstring\n                    assert isinstance(function_obj[0], StringNode)\n                    assert isinstance(function_obj[1], EndlNode)\n                    assert isinstance(function_obj[2], PassNode)\n                else:\n                    assert isinstance(function_obj[0], EndlNode)\n                    assert isinstance(function_obj[1], PassNode)\n        \n            def _check_class_obj(self, class_obj=None):\n                if class_obj is None:\n                    source_code = self.generate_code()\n                    class_obj = RedBaron(source_code).find(\"class\")\n        \n                assert class_obj.name == self.class_name\n                if self.has_class_docstring:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], StringNode)\n                    assert isinstance(class_obj[1], EndlNode)\n                    assert isinstance(class_obj[2], DefNode)\n                else:\n                    assert isinstance(class_obj, ClassNode)\n                    assert isinstance(class_obj[0], EndlNode)\n                    assert isinstance(class_obj[1], DefNode)\n        \n                if self.has_method:\n                    method_obj = class_obj[3] if self.has_class_docstring else class_obj[2]\n                    assert method_obj.name == \"method\"\n                    if self.has_method_docstring:\n                        assert isinstance(method_obj[0], StringNode)  # docstring\n                        assert isinstance(method_obj[1], EndlNode)  # pass\n                        assert isinstance(method_obj[2], PassNode)  # pass\n                    else:\n                        assert isinstance(method_obj[0], EndlNode)\n                        assert isinstance(method_obj[1], PassNode)\n        \n            def _check_module_obj(self, module_obj=None):\n                if module_obj is None:\n                    source_code = self.generate_code()\n                    module_obj = RedBaron(source_code)\n                if self.has_module_docstring:\n                    assert isinstance(module_obj[0], StringNode)\n                    assert isinstance(module_obj[1], ClassNode)\n                else:\n                    if isinstance(module_obj[0], EndlNode):\n                        assert isinstance(module_obj[1], ClassNode)\n                    else:\n                        assert isinstance(module_obj[0], ClassNode)\n        \n            @staticmethod\n            def random_string(length: int):\n                return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.MockCodeGenerator.generate_code\n      \n        def generate_code(self):\n                module_docstring = f'\"\"\"{self.module_docstring}\"\"\"\\n' if self.has_module_docstring else \"\"\n                class_docstring = f'\"\"\"{self.class_docstring}\"\"\"\\n' if self.has_class_docstring else \"\"\n                method_docstring = f'\"\"\"{self.method_docstring}\"\"\"\\n' if self.has_method_docstring else \"\"\n                function_docstring = (\n                    f'\"\"\"{self.function_docstring}\"\"\"\\n' if self.has_function_docstring else \"\"\n                )\n                import_statement = f\"import random\\n\" if self.has_import else \"\"\n        \n                method_code = textwrap.dedent(\n                    f\"\"\"def method(self):\n                            {method_docstring}\n                            pass\n                        \"\"\"\n                    if self.has_class and self.has_method\n                    else \"\"\n                )\n                class_code = textwrap.dedent(\n                    f\"\"\"\n                    class {self.class_name}:\n                        {class_docstring}\n                        def __init__(self):\n                            pass\n                        {method_code}\n                    \"\"\"\n                    if self.has_class\n                    else \"\"\n                )\n        \n                function_code = (\n                    textwrap.dedent(\n                        f\"\"\"\n                    def {self.function_name}():\n                        {function_docstring}\n                        pass\n                    \"\"\"\n                    )\n                    if self.has_function\n                    else \"\"\n                )\n        \n                return f\"{module_docstring}{import_statement}{class_code}\\n\\n{function_code}\"\n        \n            \n      automata_docs.tests.unit.test_py_writer.test_create_class_source_class\n      \n        def test_create_class_source_class():\n            mock_generator = MockCodeGenerator(has_class=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_class_docstring=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_method=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(has_class=True, has_class_docstring=True, has_method=True)\n            mock_generator._check_class_obj()\n        \n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_method=True, has_method_docstring=True\n            )\n            mock_generator._check_class_obj()\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.test_write_and_retrieve_mock_code\n      \n        def test_write_and_retrieve_mock_code(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True,\n                has_method=True,\n                has_function=True,\n                has_import=True,\n                has_module_docstring=True,\n                has_class_docstring=True,\n                has_method_docstring=True,\n                has_function_docstring=True,\n            )\n            source_code = mock_generator.generate_code()\n            python_writer._create_module_from_source_code(\"sample_module_2\", source_code)\n        \n            python_writer._write_module_to_disk(\"sample_module_2\")\n        \n            sample_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            module_map = LazyModuleTreeMap(sample_dir)\n            retriever = PyCodeRetriever(module_map)\n            module_docstring = retriever.get_docstring(\"sample_module_2\", None)\n            assert module_docstring == mock_generator.module_docstring\n        \n      automata_docs.tests.unit.test_py_writer.test_create_function_source_function\n      \n        def test_create_function_source_function():\n            mock_generator = MockCodeGenerator(has_function=True)\n            mock_generator._check_function_obj()\n        \n            mock_generator = MockCodeGenerator(has_function=True, has_function_docstring=True)\n            mock_generator._check_function_obj()\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.test_create_update_write_module\n      \n        def test_create_update_write_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_write\", source_code, do_write=True)\n            root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"sample_modules\")\n            fpath = os.path.join(root_dir, \"sample_module_write.py\")\n            assert os.path.exists(fpath)\n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(source_code, contents)\n        \n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            assert source_code != source_code_2\n            python_writer.update_existing_module(\n                source_code=source_code_2, module_dotpath=\"sample_module_write\", do_write=True\n            )\n        \n            with open(fpath, \"r\") as f:\n                contents = f.read()\n                assert_code_lines_equal(\"\\n\".join([source_code, source_code_2]), contents)\n        \n            os.remove(fpath)\n        \n        \n        \n      automata_docs.tests.unit.test_py_writer.test_extend_module\n      \n        def test_extend_module(python_writer):\n            # Arrange\n            # create module\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_2\", source_code)\n            mock_generator_2 = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code_2 = mock_generator_2.generate_code()\n        \n            python_writer.update_existing_module(\"sample_module_2\", source_code_2)\n        \n            # Check module 2 is merged into module 1\n            module_obj = python_writer.code_retriever.module_tree_map.fetch_module(\"sample_module_2\")\n            mock_generator._check_module_obj(module_obj)\n            mock_generator._check_class_obj(module_obj[0])\n            mock_generator._check_function_obj(module_obj[1])\n            mock_generator_2._check_class_obj(module_obj[2])\n            mock_generator_2._check_function_obj(module_obj[3])\n        \n        \n        \n      automata_docs.tests.unit.test_py_code_retriever.test_get_code_module\n      \n        def test_get_code_module(getter):\n            module_name = \"sample\"\n            object_path = None\n            result = getter.get_source_code_without_docstrings(module_name, object_path)\n            expected_match = 'import math\\n\\n\\ndef sample_function(name):\\n    return f\"Hello, {name}! Sqrt(2) = \" + str(math.sqrt(2))\\n\\n\\nclass Person:\\n\\n    def __init__(self, name):\\n        self.name = name\\n\\n    def say_hello(self):\\n        return f\"Hello, I am {self.name}.\"\\n\\n    def run(self) -> str:\\n        ...\\n\\n\\ndef f(x) -> int:\\n    return x + 1\\n\\n\\nclass EmptyClass:\\n    pass\\n\\n\\nclass OuterClass:\\n    class InnerClass:\\n\\n        def inner_method(self):\\n'\n        \n            assert result == expected_match\n        \n        \n        \n    Context for -\n    automata_docs.core.coding.py_coding.writer.PyCodeWriter -\n    \n      Class Docstring:\n        A utility class for writing Python code along AST nodes\n        \n      Variables:\n        self.code_retriever=python_retriever\n        \n      Methods:\n        def __init__(self, python_retriever: PyCodeRetriever):\n                \"\"\"\n                Initialize the PyCodeWriter with a PyCodeRetriever instance\n        \n                Args:\n                    python_retriever (PyCodeRetriever): The PyCodeRetriever instance to use\n                \"\"\"\n                self.code_retriever = python_retriever\n        \n            \n      automata_docs.tests.unit.test_py_writer.test_reduce_module\n      \n        def test_reduce_module(python_writer):\n            mock_generator = MockCodeGenerator(\n                has_class=True, has_class_docstring=True, has_function=True, has_function_docstring=True\n            )\n            source_code = mock_generator.generate_code()\n            python_writer.create_new_module(\"sample_module_2\", source_code)\n            module_obj = python_writer.code_retriever.module_tree_map.fetch_module(\"sample_module_2\")\n            class_obj = module_obj.find(\"class\")\n        \n            function_obj = module_obj.find_all(\"def\")[-1]\n            python_writer.delete_from_existing__module(\"sample_module_2\", class_obj.name)\n            assert module_obj[0] == function_obj\n        \n        \n        \n\n\n    The output documentation should include an overview section, related symbols, examples, and discussion around limitations.\n    Examples should be comprehensive and readily executable (e.g. correct imports and values).\n    If there are references to 'Mock' objects in test files from your context, do your best to replace these with the actual underlying object.\n    If that is not possible, note this in a footnote. Mock objects are used in testing to simplify working with complex objects.\n    For reference, write in the style of in the original Python Library documentation -\n\n...\n## Usage Example\n\n```python\nfrom transformers import PegasusForConditionalGeneration, PegasusTokenizer\nimport torch\n\nsrc_text = [\n    \"\"\" PG&E .... \"\"\"\n]\n\nmodel_name = \"google/pegasus-xsum\"\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)\nbatch = tokenizer(src_text, truncation=True, padding=\"longest\", return_tensors=\"pt\").to(device)\ntranslated = model.generate(**batch)\ntgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)\nassert (\n    tgt_text[0]\n    == \"California's...\"\n)\n\n\n    For further reference, see the local documentation here -\n\n# AutomataAgentConfig\n\n`AutomataAgentConfig` is a configuration class that helps configure, setup, and interact with an `AutomataAgent`. It contains various attributes such as `config_name`, `instruction_payload`, `llm_toolkits`, and others to provide the necessary setup and settings to be used by the agent.\n\n## Overview\n\n`AutomataAgentConfig` provides a way to load the agent configurations specified by the `AgentConfigName`. The configuration options can be set during the instantiation of the class or can be loaded using the `load` classmethod. It provides utility methods to load and setup agent configurations while also validating the provided settings. The class offers a convenient way to create an agent with custom configurations and includes closely related symbols like `AgentConfigName`.\n\n## Related Symbols\n\n- `config.config_enums.AgentConfigName`\n- `automata_docs.core.agent.automata_agent.AutomataAgent`\n- `config.automata_agent_config_utils.AutomataAgentConfigBuilder`\n- `automata_docs.core.coordinator.automata_instance.AutomataInstance`\n\n## Example\n\nThe following is an example demonstrating how to create an instance of `AutomataAgentConfig` using a predefined configuration name.\n\n```python\nfrom config.automata_agent_config import AutomataAgentConfig\nfrom config.config_enums import AgentConfigName\n\nconfig_name = AgentConfigName.AUTOMATA_MAIN_DEV\nconfig = AutomataAgentConfig.load(config_name)\n```\n\n## Limitations\n\nThe primary limitation of `AutomataAgentConfig` is that it relies on the predefined configuration files based on `AgentConfigName`. It can only load configurations from those files and cannot load custom configuration files. In addition, it assumes a specific directory structure for the configuration files.\n\n## Follow-up Questions:\n\n- How can we include custom configuration files for loading into the `AutomataAgentConfig` class?\n\n\n\n    Some information is just included for contextual reference, and this may be omitted from the output documentation.\n    Start the documentation with a header that includes only the class name.\n    Lastly, if some points are unclear, note these in a footnote that begins with ## Follow-up Questions:"}]